This code is for the CANRS and CANUSB modules.

USB or RS232 needs to be defined on the cmmand line.

For CANRS, it can use the handshake lines RTS, CTS. But I linked pins 1, 4, and 6 on the back of the 9 pin D type.

This version has 256 byte serial buffers, enough for 12 CAN packets. It also uses ECAN in mode 2, so there are 8 hardware receive buffers and 3 transmit buffers. Even with lots of buffers the serial connection is running at less than half the speed of the CAN bus, so with high traffic messages will be dropped. 

I've only used it with Windows HyperTerminal.

It has some extra text messages. It also echo RTR and NN refresh packets to the PC port as well as to the CAN bus.

Start
	At reset. Shows the CANRS/USB is talking to the PC.

-ECAN Buffer overflow-
	If the ECAN buffer overflow flag is set when reading a CAN packet.

-ECAN Invalid message-
	If the ECAN Invalid message fag is set when reading a CAN packet.

-ECAN TXERRCNT xx-
	if the TXERRCNT changes. xx is the value of the count.

-ECAN RXERRCNT xx-
	if the RXERRCNT changes. xx is the value of the count.

Error
	if there is no empty transmit buffer available (should never happen).
	or if the text string sent to the CANRS/USB is not correctly formatted.

Too long
	if the text string sent to the CANRS/USB is too long for a valid packet.


Almost Grid Connect Format
--------------------------

Grid connect has the header as an 11 or 29 bit number in hex with leading zero's omitted.
This format is used for extended frames, but not for standard frames. For standard frames
the format is 1 hex digit priority, followed by 2 hex digits canid, followed by a zero.
eg B020 = priority B, canid 02

:X<header>N<data>;

:	start of frame,
X	extended frame, followed by 8 hex digits header,
        1 digit priority, 4 bits frame type, 3 digits source alias. 
N	normal data frame, followed by up to 8 bytes of data in hex pairs.
;	end of frame


MikeJ




