program UltimateCommandStation;

{ Declarations section }

// Serial Flash Chip Select connection
//var
//  CS_Serial_Flash_bit: sbit at LATD14_bit;
//  CS_Serial_Flash_Direction_bit: sbit at TRISD14_bit;
  
const
  UART_1 = 1;
  UART_2 = 2;

var

  TrapFlagPin : sbit at LATA4_bit;

// EEPROM SPI PINS
  CS_Bank_0                         : sbit at LATB6_bit;
  CS_Bank_0_Direction               : sbit at TRISB6_bit;
  EE_PROM_Hold                      : sbit at LATB5_bit;
  EEPROM_Hold_Direction             : sbit at TRISB5_bit;

  // DCC SIGNAL PINS
  H_Bridge_A_Lo                     : sbit at LATA1_bit;
  H_Bridge_A_Hi                     : sbit at LATB0_bit;
  H_Bridge_B_Lo                     : sbit at LATB1_bit;
  H_Bridge_B_Hi                     : sbit at LATB4_bit;

  H_Bridge_A_Lo_Direction           : sbit at TRISA1_bit;
  H_Bridge_A_Hi_Direction           : sbit at TRISB0_bit;
  H_Bridge_B_Lo_Direction           : sbit at TRISB1_bit;
  H_Bridge_B_Hi_Direction           : sbit at TRISB4_bit;

//  DCC_Programming_ACK_Pin           : sbit at RB2_bit;                          // Input so use the port and not the latch
 // DCC_Programming_ACK_Direction     : sbit at TRISB2_bit;

 // DCC_NMRA_Tranmitter_Lo            : sbit at LATB15_bit;                       // DCC Bus Transmitter
 // DCC_NMRA_Tranmitter_Hi            : sbit at LATB14_bit;                       // DCC Bus Transmitter

 // DCC_NMRA_Tranmitter_Lo_Direction  : sbit at TRISB15_bit;                      // DCC Bus Transmitter
 // DCC_NMRA_Tranmitter_Hi_Direction  : sbit at TRISB14_bit;                      // DCC Bus Transmitter
  
  PreambleSyncPin                   : sbit at LATB15_bit;                      // DCC Bus Transmitter
  PreambleSyncPinDirection          : sbit at TRISB15_bit;                      // DCC Bus Transmitter

// Ack_TimerEnabled_Bit              : sbit at TON_T5CON_bit;                    // DCC Service Mode ACK Timer

  Dcc_Timer_PR                      : Word at PR1;                              // DCC Interrupt Rollover

 // TrapFlagPin                       : sbit at LATB3_bit;                  // OVERLOADING THE NMRA DCC TRANSMITTER CURRENT SENSE

// End DCC Connection Pins

procedure ToggleBridge;
begin
  H_Bridge_A_Lo := 0;                                                           // Bridge Off
  H_Bridge_A_Hi := 0;                                                           // Bridge Off
  H_Bridge_B_Lo := 0;                                                           // Bridge Off
  H_Bridge_B_Hi := 0;                                                           // Bridge Off

  if Track.TX_Flags.TRANSMITTING_FLAG_DCC_PIN_BIT = 1 then
  begin
    H_Bridge_A_Lo := 1;
    H_Bridge_B_Hi := 1;
  end else
  begin
    H_Bridge_A_Hi := 1;
    H_Bridge_B_Lo := 1;
  end;
end;

procedure OPStack_DCC_Timer(); iv IVT_ADDR_T1INTERRUPT; ics ICS_AUTO;
begin
  T1IF_bit := 0;                                                                // Clear the Flag
  
 // if CommandStationRamData.OverloadDetected then
 // begin
    // Toggle the Bridge off
////    H_Bridge_A_Lo := 0;                                                           // Bridge Off
 //   H_Bridge_A_Hi := 0;                                                           // Bridge Off
//    H_Bridge_B_Lo := 0;                                                           // Bridge Off
//    H_Bridge_B_Hi := 0;                                                           // Bridge Off
 // end else
  begin
  //  if CommandStationConfigurationShadowRam.OutputMode = CONFIG_OUTPUTMODE_SERVICE_MODE then
  // begin
  //    RunServiceMode                                                              // Command Station is in Service Mode
  //  end else
    begin
      // Command Station is in Main Line Mode
   //   if CommandStationConfigurationShadowRam.DccBusMode = CONFIG_NMRA_DCC_TRANSMITTER then // If we are a DCC Transmitter then handle that
   //     RunNmraDccTranmitter;

    //  if CommandStationConfigurationShadowRam.RailComEnable = CONFIG_RAILCOM_ENABLED then
    //  begin
    //    if Track.TX_Flags.TRANSMITTING_FLAG_RAIL_COM_CUTOUT_BIT = 1 then
    //    begin
    //      H_Bridge_A_Lo := 1;                                                          // Short the Rails
    //      H_Bridge_B_Lo := 1;
     //   end else
    //      ToggleBridge
    //  end else
        ToggleBridge;

      // Now we can update the xxxx_DCC_PIN_BIT flags for the next 56us time slot
      NMRA_DCC_58us_TimeTick(@Track);                                                         // < 1us
  //    NMRA_DCC_TransmitterStateMachine(@Track, False, CommandStationConfigurationShadowRam.RailComEnable = CONFIG_RAILCOM_ENABLED);   // < 5us
      NMRA_DCC_TransmitterStateMachine(@Track, False, False);   // < 5us
      NMRA_DCC_LoadPacketIntoTransmitterStateMachine(@Track, PREAMBLE_BIT_COUNT_NORMAL);      // < 11us    Max
    end
  end;
end;


procedure OPStack_100ms_Timer(); iv IVT_ADDR_T2INTERRUPT; ics ICS_AUTO;
begin
  T2IF_bit := 0;  
  OPStackCore_Timer;
end;

begin         

  H_Bridge_A_Lo_Direction          := 0;
  H_Bridge_A_Hi_Direction          := 0;
  H_Bridge_B_Lo_Direction          := 0;
  H_Bridge_B_Hi_Direction          := 0;
  { Main program }
  NMRA_DCC_Initialize(1850);     // Clock ticks every 31.25ns * 1856 = 58us interrupts
  MCU_Setup_Initialize;
  MCU_EnableSerialFlash;
  MCU_EnableUART;

  OPStackCore_Initialize;

  MCU_EnableCAN;
  MCU_Enable100msTimer;
  MCU_EnableDCCTimer;
  MCU_Enable5msServiceModeTimer;
  MCU_Enable10msTimer;
  MCU_EnableADC;
  OPStackCore_Enable(True);
  
  TRISA4_bit := 0; // Output
  
  UART1_Write_Text('Mustangpeak Command Station'+LF);
  CheckForInitializedEEPROM(EEPROM_BANK_0, _25AA1024);

  while True do
  begin
    OPStackCore_Process;
    if UART1_Data_Ready then
    begin
      case UART1_Read of
        '1' : OPStackBuffers_PrintBuffers;
        '2' : DumpEEProm(EEPROM_BANK_0, False, 0, 255, UART_1);
        '3' : _25AAxxxx_Erase(EEPROM_BANK_0);
        '4' : begin
                UART1_Write_Text('Zeroizing'+LF);
                CheckForInitializedEEPROM(EEPROM_BANK_0, _25AA1024);
                UART1_Write_Text('Zeroized'+LF);
              end;
        '5' : DumpEEProm(EEPROM_BANK_0, True, 0, 255, UART_1);
        '6' : begin
                UART1_Write_Text('Zeroizing'+LF);
                Zeroize(EEPROM_BANK_0, _25AA1024);
                UART1_Write_Text('Zeroized'+LF);
              end;
      end;
    end;
  end;
end.