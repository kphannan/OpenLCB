program NCEBridge;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2014.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//     2012-12-16    updated
//
// * Description:

//
// *****************************************************************************

var
  // EEPROM SPI PINS
  CS_Bank_0                         : sbit at LATB6_bit;
  CS_Bank_0_Direction               : sbit at TRISB6_bit;
  EE_PROM_Hold                      : sbit at LATB5_bit;
  EEPROM_Hold_Direction             : sbit at TRISB5_bit;

var
  NceBus_RS485_Select            : sbit at LATA0_bit;
  NceBus_RS485_Select_Direction  : sbit at TRISA0_bit;
  
  
// *****************************************************************************
//  INTERRUPTS
// *****************************************************************************

procedure INTERRUPT_Timer_525ms(); iv IVT_ADDR_T1INTERRUPT;
begin
  T1IF_bit := 0;
  NceBusStateMachine_525ms_TimeTick;
end;

procedure INTERRUPT_Timer_100ms(); iv IVT_ADDR_T2INTERRUPT;
// Called once every 100m
var
  i: Integer;
begin
  T2IF_bit := 0;                                                                // Clear the Flag
  OPStackCore_Timer
end;

procedure INTERRUPT_Timer_120us(); iv IVT_ADDR_T3INTERRUPT; ics ICS_AUTO;
// NceBus Timeout
begin
  T3IF_bit := 0;
end;

procedure INTERRUPT_NceBus_UART_RX(); iv IVT_ADDR_U2RXINTERRUPT;
var
  a: word;
  NceCab: PNceCab;
begin
  U2RXIF_Bit := 0;              // Clear the interrupt flag to receive the next byte
  
  if ActiveNode <> nil then
  begin
    NceCab := ExtractNceCab(ActiveNode);
    while (URXDA_U2STA_bit = 1) and (not NceCab^.IncomingMsg.Full) do
    begin
      a := U2RXREG;
      WordToStr(a, s1);
      UART1_Write_Text(s1 + #13);
      NceBusStateMachine_UART_RX_StateMachine(NceCab, a);
    end
  end
end;

var
  ActiveNode: PNMRAnetnode;
begin
  { Main program }   
  MCU_Setup_Initialize;
  OPStackCore_Initialize;
  NceBusStateMachine_Initialize;
  MCU_Enable_100msTimer;
  MCU_Enable_120usTimer;
  MCU_Enable_500msTimer;
  MCU_Enable_NCE_RS485;
  MCU_Enable_UART;
  MCU_Enable_SPI;

  TON_T1CON_bit := 1;       // Turn on 500ms timer
  TON_T2CON_bit := 1;       // Turn on 100ms timer
  MCU_Enable_CAN;
  OPStackCore_Enable(True);
  
  TRISB4_bit := 0;
  {
  TRISA4_bit := 0;
  TRISA0_bit := 0;
  TRISB4_bit := 0;
  TRISB0_bit := 0;
  TRISB4_bit := 0;
  RB4_bit := 0;   
  
  while True do
  begin
    LATB := not LATB;
    LATA := not LATA;
  end;
   }
  UART1_Write_Text('Starting'+LF);
  
  while True do
  begin   
    ActiveNode := OPStackCore_Process;
    NceBusStateMachine_Process( ActiveNode);
    NceBusStateMachine_ProcessNextUserCommand( ActiveNode);
  end;
end.