unit Throttle_driver;

uses Throttle_objects, Throttle_resources;

/////////////////////////
// External Declarations
procedure ButtonRoundDecSpeedOnClick(); external;
procedure ButtonRoundEmergencyStopOnClick(); external;
procedure ButtonRoundF0OnClick(); external;
procedure ButtonRoundF1OnClick(); external;
procedure ButtonRoundF2OnClick(); external;
procedure ButtonRoundF3OnClick(); external;
procedure ButtonRoundF4OnClick(); external;
procedure ButtonRoundF5OnClick(); external;
procedure ButtonRoundFunctionBackOnClick(); external;
procedure ButtonRoundFunctionNextOnClick(); external;
procedure ButtonRoundIncSpeedOnClick(); external;
procedure ButtonRoundKeyBoard0OnClick(); external;
procedure ButtonRoundKeyBoard1OnClick(); external;
procedure ButtonRoundKeyBoard2OnClick(); external;
procedure ButtonRoundKeyBoard3OnClick(); external;
procedure ButtonRoundKeyBoard4OnClick(); external;
procedure ButtonRoundKeyBoard5OnClick(); external;
procedure ButtonRoundKeyBoard6OnClick(); external;
procedure ButtonRoundKeyBoard7OnClick(); external;
procedure ButtonRoundKeyBoard8OnClick(); external;
procedure ButtonRoundKeyBoard9OnClick(); external;
procedure ButtonRoundKeyboardBackspaceOnClick(); external;
procedure ButtonRoundKeyboardCancelOnClick(); external;
procedure ButtonRoundKeyboardClearOnClick(); external;
procedure ButtonRoundKeyboardOKOnClick(); external;
procedure ButtonRoundStopOnClick(); external;
procedure ButtonRoundTrainOpenLCBCancelOnClick(); external;
procedure ButtonRoundTrainWizardOnClick(); external;
procedure ButtonRoundWizardByAddressOnClick(); external;
procedure ButtonRoundWizardByListOnClick(); external;
procedure ButtonWizardCancelOnClick(); external;
procedure RadioButtonForwardOnClick(); external;
procedure RadioButtonKeyboard128StepOnClick(); external;
procedure RadioButtonKeyboard14StepOnClick(); external;
procedure RadioButtonKeyboard28StepOnClick(); external;
procedure RadioButtonKeyboardLongOnClick(); external;
procedure RadioButtonKeyboardShortOnClick(); external;
procedure RadioButtonReverseOnClick(); external;
/////////////////////////

procedure DrawScreen(aScreenID : word);
procedure Process_TP_Press( X : word; Y : word);
procedure Check_TP();
procedure Start_TP();
procedure DrawButton(Abutton : ^TButton);
procedure DrawRoundButton(Around_button : ^TButton_Round);
procedure DrawCRoundButton(Around_button : ^TCButton_Round);
procedure DrawLabel(ALabel : ^TLabel);
procedure DrawCLabel(ALabel : ^TCLabel);
procedure DrawImage(AImage : ^TImage);
procedure DrawCBox(ABox : ^TCBox);
procedure DrawRoundBox(Around_box : ^TBox_Round);
procedure DrawCRoundBox(Around_box : ^TCBox_Round);
procedure DrawLine(Aline : ^TLine);
procedure DrawRadioButton(ARadioButton : ^TRadioButton);
procedure DrawProgressBar(AProgressBar : ^TProgressBar);
procedure UpdatePBPosition(AProgressBar : ^TProgressBar);


// TFT module connections
var TFT_DataPort : char  at LATA;
    TFT_RST : sbit  at LATC1_bit;
    TFT_BLED : sbit  at LATC2_bit;
    TFT_RS : sbit  at LATB15_bit;
    TFT_CS : sbit  at LATC3_bit;
    TFT_RD : sbit  at LATD12_bit;
    TFT_WR : sbit  at LATD13_bit;
    TFT_DataPort_Direction : char  at TRISA;
    TFT_RST_Direction : sbit  at TRISC1_bit;
    TFT_BLED_Direction : sbit  at TRISC2_bit;
    TFT_RS_Direction : sbit  at TRISB15_bit;
    TFT_CS_Direction : sbit  at TRISC3_bit;
    TFT_RD_Direction : sbit  at TRISD12_bit;
    TFT_WR_Direction : sbit  at TRISD13_bit;
// End TFT module connections

// Touch Panel module connections
var DriveX_Left : sbit at LATB13_bit;
var DriveX_Right : sbit at LATB11_bit;
var DriveY_Up : sbit at LATB12_bit;
var DriveY_Down : sbit at LATB10_bit;
var DriveX_Left_Direction : sbit at TRISB13_bit;
var DriveX_Right_Direction : sbit at TRISB11_bit;
var DriveY_Up_Direction : sbit at TRISB12_bit;
var DriveY_Down_Direction : sbit at TRISB10_bit;
// End Touch Panel module connections

// Global variables
var Xcoord, Ycoord : word;
const ADC_THRESHOLD = 800;
var PenDown : byte;
type TPointer = dword;
var PressedObject : TPointer;
var PressedObjectType : integer;
var display_width, display_height : word;

var
    _object_count : integer;
    object_pressed : byte;
    local_button : ^TButton;
    exec_button : ^TButton;
    button_order : integer;
    local_round_button : ^TButton_Round;
    exec_round_button : ^TButton_Round;
    round_button_order : integer;
    local_round_cbutton : ^TCButton_Round;
    exec_round_cbutton : ^TCButton_Round;
    round_cbutton_order : integer;
    local_label : ^TLabel;
    exec_label : ^TLabel;
    label_order : integer;
    local_clabel : ^TCLabel;
    exec_clabel : ^TCLabel;
    clabel_order : integer;
    local_image : ^TImage;
    exec_image : ^TImage;
    image_order : integer;
    local_cbox : ^TCBox;
    exec_cbox : ^TCBox;
    cbox_order : integer;
    local_round_box : ^TBox_Round;
    exec_round_box : ^TBox_Round;
    box_round_order : integer;
    local_round_cbox : ^TCBox_Round;
    exec_round_cbox : ^TCBox_Round;
    cbox_round_order : integer;
    local_radio_button : ^TRadioButton;
    exec_radio_button : ^TRadioButton;
    radio_button_order : integer;
    local_progress_bar : ^TProgressBar;
    exec_progress_bar : ^TProgressBar;
    progress_bar_order : integer;



/////////////////////////
var CurrentScreenID : word;

const Screen1_Buttons  : array[1] of ^TButton; code; far; forward;
const Screen1_CLabels  : array[3] of ^TCLabel; code; far; forward;
const Screen1_Images  : array[1] of ^TImage; code; far; forward;
const Screen1_Boxes_Round  : array[1] of ^TBox_Round; code; far; forward;
const Screen1_ProgressBars  : array[1] of ^TProgressBar; code; far; forward;

const Start           : TCScreen =
         (
         0x2124                ,//  Start.Color
         320                   ,//  Start.Width                     
         240                   ,//  Start.Height                    
         7                     ,//  Start.ObjectsCount             
         1                     ,//  Start.ButtonsCount              
         @Screen1_Buttons      ,//  Start.Buttons
         3                     ,//  Start.CLabelsCount              
         @Screen1_CLabels      ,//  Start.CLabels
         1                     ,//  Start.ImagesCount              
         @Screen1_Images       ,//  Start.Images
         1                     ,//  Start.Boxes_RoundCount              
         @Screen1_Boxes_Round  ,//  Start.Boxes_Round
         1                     ,//  Start.ProgressBarsCount         
         @Screen1_ProgressBars //  Start._ProgressBars
         ); code; far;

    const LabelStartMustangpeak_Caption : string[23] = 'Mustangpeak Engineering'; code; far;
    const LabelStartMustangpeak : TCLabel = 
         (
         32768                 , //   LabelStartMustangpeak.OwnerScreenID
         0                     , //   LabelStartMustangpeak.Order          
         19                    , //   LabelStartMustangpeak.Left           
         11                    , //   LabelStartMustangpeak.Top             
         283                   , //   LabelStartMustangpeak.Width         
         28                    , //   LabelStartMustangpeak.Height       
         @LabelStartMustangpeak_Caption, //   LabelStartMustangpeak.Caption        
         @Tahoma25x25_Bold     , //   LabelStartMustangpeak.FontName       
         0xFFFF                , //   LabelStartMustangpeak.Font_Color     
         1                     , //   LabelStartMustangpeak.Visible        
         0                     , //   LabelStartMustangpeak.Active        
         0                     , //    LabelStartMustangpeak.OnUpPtr
         0                     , //    LabelStartMustangpeak.OnDownPtr
         0                     , //    LabelStartMustangpeak.OnClickPtr
         0                       //    LabelStartMustangpeak.OnPressPtr
         ); code; far;

    const LabelStartThrottle_Caption : string[16] = 'OpenLCB Throttle'; code; far;
    const LabelStartThrottle : TCLabel = 
         (
         32768                 , //   LabelStartThrottle.OwnerScreenID
         1                     , //   LabelStartThrottle.Order          
         92                    , //   LabelStartThrottle.Left           
         42                    , //   LabelStartThrottle.Top             
         129                   , //   LabelStartThrottle.Width         
         21                    , //   LabelStartThrottle.Height       
         @LabelStartThrottle_Caption, //   LabelStartThrottle.Caption        
         @Tahoma16x19_Regular  , //   LabelStartThrottle.FontName       
         0xFFFF                , //   LabelStartThrottle.Font_Color     
         1                     , //   LabelStartThrottle.Visible        
         0                     , //   LabelStartThrottle.Active        
         0                     , //    LabelStartThrottle.OnUpPtr
         0                     , //    LabelStartThrottle.OnDownPtr
         0                     , //    LabelStartThrottle.OnClickPtr
         0                       //    LabelStartThrottle.OnPressPtr
         ); code; far;

    const LabelStartVer_Caption : string[17] = 'Version 1.0 Alpha'; code; far;
    const LabelStartVer : TCLabel = 
         (
         32768                 , //   LabelStartVer.OwnerScreenID
         2                     , //   LabelStartVer.Order          
         97                    , //   LabelStartVer.Left           
         173                   , //   LabelStartVer.Top             
         128                   , //   LabelStartVer.Width         
         21                    , //   LabelStartVer.Height       
         @LabelStartVer_Caption, //   LabelStartVer.Caption        
         @Tahoma16x19_Regular  , //   LabelStartVer.FontName       
         0xFFFF                , //   LabelStartVer.Font_Color     
         1                     , //   LabelStartVer.Visible        
         0                     , //   LabelStartVer.Active        
         0                     , //    LabelStartVer.OnUpPtr
         0                     , //    LabelStartVer.OnDownPtr
         0                     , //    LabelStartVer.OnClickPtr
         0                       //    LabelStartVer.OnPressPtr
         ); code; far;

var BoxRoundStartBkGnd : TBox_Round;
var ImageStart : TImage;
var ProgressBarStart : TProgressBar;
    ProgressBarStart_Caption : string[5];

var ButtonLoginMessage : TButton;
    ButtonLoginMessage_Caption : string[11];

      const Screen1_Buttons  : array[1] of ^TButton =
         (
         @ButtonLoginMessage   
         ); code; far;
      const Screen1_CLabels  : array[3] of ^TCLabel =
         (
         @LabelStartMustangpeak,
         @LabelStartThrottle,  
         @LabelStartVer        
         ); code; far;
      const Screen1_Images  : array[1] of ^TImage =
         (
         @ImageStart           
         ); code; far;
      const Screen1_Boxes_Round  : array[1] of ^TBox_Round =
         (
         @BoxRoundStartBkGnd   
         ); code; far;
      const Screen1_ProgressBars  : array[1] of ^TProgressBar =
         (
         @ProgressBarStart     
         ); code; far;

const Screen2_Buttons_Round  : array[9] of ^TButton_Round; code; far; forward;
const Screen2_CButtons_Round  : array[8] of ^TCButton_Round; code; far; forward;
const Screen2_CBoxes  : array[1] of ^TCBox; code; far; forward;
const Screen2_Lines  : array[2] of ^TLine; code; far; forward;
const Screen2_RadioButtons  : array[2] of ^TRadioButton; code; far; forward;
const Screen2_ProgressBars  : array[1] of ^TProgressBar; code; far; forward;

var Throttle           : TScreen;
    const Box1 : TCBox = 
         (
         0                     , //   Box1.OwnerScreenID
         0                     , //   Box1.Order           
         0                     , //   Box1.Left           
         210                   , //   Box1.Top             
         320                   , //   Box1.Width           
         30                    , //   Box1.Height          
         0                     , //   Box1.Pen_Width       
         0x0000                , //   Box1.Pen_Color       
         1                     , //   Box1.Visible         
         0                     , //   Box1.Active          
         1                     , //   Box1.Transparent     
         1                     , //   Box1.Gradient        
         0                     , //   Box1.Gradient_Orientation    
         0xFFFF                , //   Box1.Gradient_Start_Color    
         0x630C                , //   Box1.Gradient_End_Color      
         0xC618                , //   Box1.Color           
         1                     , //   Box1.PressColEnabled 
         0xE71C                , //   Box1.Press_Color     
         0                     , //    Box1.OnUpPtr
         0                     , //    Box1.OnDownPtr
         0                     , //    Box1.OnClickPtr
         0                       //    Box1.OnPressPtr
         ); code; far;
    const ButtonRoundFunctionBack_Caption : string[1] = '<'; code; far;
    const ButtonRoundFunctionBack : TCButton_Round = 
         (
         0                     , //   ButtonRoundFunctionBack.OwnerScreenID
         1                     , //   ButtonRoundFunctionBack.Order           
         6                     , //   ButtonRoundFunctionBack.Left            
         211                   , //   ButtonRoundFunctionBack.Top              
         65                    , //   ButtonRoundFunctionBack.Width            
         28                    , //   ButtonRoundFunctionBack.Height        
         0                     , //   ButtonRoundFunctionBack.Pen_Width          
         0x0000                , //   ButtonRoundFunctionBack.Pen_Color       
         1                     , //   ButtonRoundFunctionBack.Visible         
         1                     , //   ButtonRoundFunctionBack.Active           
         1                     , //   ButtonRoundFunctionBack.Transparent     
         @ButtonRoundFunctionBack_Caption, //   ButtonRoundFunctionBack.Caption        
         _taCenter             , //   ButtonRoundFunctionBack.TextAlign        
         @Tahoma16x19_Regular  , //   ButtonRoundFunctionBack.FontName        
         0x0000                , //   ButtonRoundFunctionBack.FontColor       
         1                     , //   ButtonRoundFunctionBack.Gradient        
         0                     , //   ButtonRoundFunctionBack.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundFunctionBack.Gradient_Start_Color    
         0x630C                , //   ButtonRoundFunctionBack.Gradient_End_Color    
         0xC618                , //   ButtonRoundFunctionBack.Color           
         3                     , //   ButtonRoundFunctionBack.CornerRadius           
         1                     , //   ButtonRoundFunctionBack.PressColEnabled 
         0xE71C                , //   ButtonRoundFunctionBack.Press_Color     
         0                     , //    ButtonRoundFunctionBack.OnUpPtr
         0                     , //    ButtonRoundFunctionBack.OnDownPtr
         @ButtonRoundFunctionBackOnClick, //    ButtonRoundFunctionBack.OnClickPtr
         0                       //    ButtonRoundFunctionBack.OnPressPtr
         ); code; far;

    const ButtonRoundFunctionNext_Caption : string[1] = '>'; code; far;
    const ButtonRoundFunctionNext : TCButton_Round = 
         (
         0                     , //   ButtonRoundFunctionNext.OwnerScreenID
         2                     , //   ButtonRoundFunctionNext.Order           
         70                    , //   ButtonRoundFunctionNext.Left            
         211                   , //   ButtonRoundFunctionNext.Top              
         60                    , //   ButtonRoundFunctionNext.Width            
         28                    , //   ButtonRoundFunctionNext.Height        
         0                     , //   ButtonRoundFunctionNext.Pen_Width          
         0x0000                , //   ButtonRoundFunctionNext.Pen_Color       
         1                     , //   ButtonRoundFunctionNext.Visible         
         1                     , //   ButtonRoundFunctionNext.Active           
         1                     , //   ButtonRoundFunctionNext.Transparent     
         @ButtonRoundFunctionNext_Caption, //   ButtonRoundFunctionNext.Caption        
         _taCenter             , //   ButtonRoundFunctionNext.TextAlign        
         @Tahoma16x19_Regular  , //   ButtonRoundFunctionNext.FontName        
         0x0000                , //   ButtonRoundFunctionNext.FontColor       
         1                     , //   ButtonRoundFunctionNext.Gradient        
         0                     , //   ButtonRoundFunctionNext.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundFunctionNext.Gradient_Start_Color    
         0x630C                , //   ButtonRoundFunctionNext.Gradient_End_Color    
         0xC618                , //   ButtonRoundFunctionNext.Color           
         3                     , //   ButtonRoundFunctionNext.CornerRadius           
         1                     , //   ButtonRoundFunctionNext.PressColEnabled 
         0xE71C                , //   ButtonRoundFunctionNext.Press_Color     
         0                     , //    ButtonRoundFunctionNext.OnUpPtr
         0                     , //    ButtonRoundFunctionNext.OnDownPtr
         @ButtonRoundFunctionNextOnClick, //    ButtonRoundFunctionNext.OnClickPtr
         0                       //    ButtonRoundFunctionNext.OnPressPtr
         ); code; far;

var ButtonRoundF0 : TButton_Round;
    ButtonRoundF0_Caption : string[1];

var ButtonRoundF1 : TButton_Round;
    ButtonRoundF1_Caption : string[1];

var ButtonRoundF2 : TButton_Round;
    ButtonRoundF2_Caption : string[1];

var ButtonRoundF3 : TButton_Round;
    ButtonRoundF3_Caption : string[1];

var ButtonRoundF4 : TButton_Round;
    ButtonRoundF4_Caption : string[1];

var ButtonRoundF5 : TButton_Round;
    ButtonRoundF5_Caption : string[1];

    const ButtonRoundDecSpeed_Caption : string[9] = 'Dec Speed'; code; far;
    const ButtonRoundDecSpeed : TCButton_Round = 
         (
         0                     , //   ButtonRoundDecSpeed.OwnerScreenID
         9                     , //   ButtonRoundDecSpeed.Order           
         145                   , //   ButtonRoundDecSpeed.Left            
         126                   , //   ButtonRoundDecSpeed.Top              
         170                   , //   ButtonRoundDecSpeed.Width            
         54                    , //   ButtonRoundDecSpeed.Height        
         0                     , //   ButtonRoundDecSpeed.Pen_Width          
         0x0000                , //   ButtonRoundDecSpeed.Pen_Color       
         1                     , //   ButtonRoundDecSpeed.Visible         
         1                     , //   ButtonRoundDecSpeed.Active           
         1                     , //   ButtonRoundDecSpeed.Transparent     
         @ButtonRoundDecSpeed_Caption, //   ButtonRoundDecSpeed.Caption        
         _taCenter             , //   ButtonRoundDecSpeed.TextAlign        
         @Tahoma11x13_Regular  , //   ButtonRoundDecSpeed.FontName        
         0x0000                , //   ButtonRoundDecSpeed.FontColor       
         1                     , //   ButtonRoundDecSpeed.Gradient        
         0                     , //   ButtonRoundDecSpeed.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundDecSpeed.Gradient_Start_Color    
         0x630C                , //   ButtonRoundDecSpeed.Gradient_End_Color    
         0xC618                , //   ButtonRoundDecSpeed.Color           
         1                     , //   ButtonRoundDecSpeed.CornerRadius           
         1                     , //   ButtonRoundDecSpeed.PressColEnabled 
         0xE71C                , //   ButtonRoundDecSpeed.Press_Color     
         0                     , //    ButtonRoundDecSpeed.OnUpPtr
         0                     , //    ButtonRoundDecSpeed.OnDownPtr
         @ButtonRoundDecSpeedOnClick, //    ButtonRoundDecSpeed.OnClickPtr
         0                       //    ButtonRoundDecSpeed.OnPressPtr
         ); code; far;

    const ButtonRoundIncSpeed_Caption : string[9] = 'Inc Speed'; code; far;
    const ButtonRoundIncSpeed : TCButton_Round = 
         (
         0                     , //   ButtonRoundIncSpeed.OwnerScreenID
         10                    , //   ButtonRoundIncSpeed.Order           
         145                   , //   ButtonRoundIncSpeed.Left            
         70                    , //   ButtonRoundIncSpeed.Top              
         170                   , //   ButtonRoundIncSpeed.Width            
         55                    , //   ButtonRoundIncSpeed.Height        
         0                     , //   ButtonRoundIncSpeed.Pen_Width          
         0x0000                , //   ButtonRoundIncSpeed.Pen_Color       
         1                     , //   ButtonRoundIncSpeed.Visible         
         1                     , //   ButtonRoundIncSpeed.Active           
         1                     , //   ButtonRoundIncSpeed.Transparent     
         @ButtonRoundIncSpeed_Caption, //   ButtonRoundIncSpeed.Caption        
         _taCenter             , //   ButtonRoundIncSpeed.TextAlign        
         @Tahoma11x13_Regular  , //   ButtonRoundIncSpeed.FontName        
         0x0000                , //   ButtonRoundIncSpeed.FontColor       
         1                     , //   ButtonRoundIncSpeed.Gradient        
         0                     , //   ButtonRoundIncSpeed.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundIncSpeed.Gradient_Start_Color    
         0x630C                , //   ButtonRoundIncSpeed.Gradient_End_Color    
         0xC618                , //   ButtonRoundIncSpeed.Color           
         1                     , //   ButtonRoundIncSpeed.CornerRadius           
         1                     , //   ButtonRoundIncSpeed.PressColEnabled 
         0xE71C                , //   ButtonRoundIncSpeed.Press_Color     
         0                     , //    ButtonRoundIncSpeed.OnUpPtr
         0                     , //    ButtonRoundIncSpeed.OnDownPtr
         @ButtonRoundIncSpeedOnClick, //    ButtonRoundIncSpeed.OnClickPtr
         0                       //    ButtonRoundIncSpeed.OnPressPtr
         ); code; far;

    const ButtonRoundReverse_Caption : string[1] = ''; code; far;
    const ButtonRoundReverse : TCButton_Round = 
         (
         0                     , //   ButtonRoundReverse.OwnerScreenID
         11                    , //   ButtonRoundReverse.Order           
         145                   , //   ButtonRoundReverse.Left            
         35                    , //   ButtonRoundReverse.Top              
         170                   , //   ButtonRoundReverse.Width            
         35                    , //   ButtonRoundReverse.Height        
         0                     , //   ButtonRoundReverse.Pen_Width          
         0x0000                , //   ButtonRoundReverse.Pen_Color       
         1                     , //   ButtonRoundReverse.Visible         
         0                     , //   ButtonRoundReverse.Active           
         1                     , //   ButtonRoundReverse.Transparent     
         @ButtonRoundReverse_Caption, //   ButtonRoundReverse.Caption        
         _taCenter             , //   ButtonRoundReverse.TextAlign        
         @Tahoma11x13_Regular  , //   ButtonRoundReverse.FontName        
         0x0000                , //   ButtonRoundReverse.FontColor       
         1                     , //   ButtonRoundReverse.Gradient        
         0                     , //   ButtonRoundReverse.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundReverse.Gradient_Start_Color    
         0x630C                , //   ButtonRoundReverse.Gradient_End_Color    
         0xC618                , //   ButtonRoundReverse.Color           
         1                     , //   ButtonRoundReverse.CornerRadius           
         1                     , //   ButtonRoundReverse.PressColEnabled 
         0xE71C                , //   ButtonRoundReverse.Press_Color     
         0                     , //    ButtonRoundReverse.OnUpPtr
         0                     , //    ButtonRoundReverse.OnDownPtr
         0                     , //    ButtonRoundReverse.OnClickPtr
         0                       //    ButtonRoundReverse.OnPressPtr
         ); code; far;

var ProgressBarSpeed : TProgressBar;
    ProgressBarSpeed_Caption : string[5];

var ButtonRoundTrainWizard : TButton_Round;
    ButtonRoundTrainWizard_Caption : string[1];

var Line3 : TLine;
var Line4 : TLine;
var ButtonRoundTrainLongShort : TButton_Round;
    ButtonRoundTrainLongShort_Caption : string[1];

var ButtonRoundTrainSpeedStep : TButton_Round;
    ButtonRoundTrainSpeedStep_Caption : string[1];

    const ButtonRoundTrain_Caption : string[6] = 'Train:'; code; far;
    const ButtonRoundTrain : TCButton_Round = 
         (
         0                     , //   ButtonRoundTrain.OwnerScreenID
         18                    , //   ButtonRoundTrain.Order           
         130                   , //   ButtonRoundTrain.Left            
         211                   , //   ButtonRoundTrain.Top              
         50                    , //   ButtonRoundTrain.Width            
         28                    , //   ButtonRoundTrain.Height        
         0                     , //   ButtonRoundTrain.Pen_Width          
         0x0000                , //   ButtonRoundTrain.Pen_Color       
         1                     , //   ButtonRoundTrain.Visible         
         0                     , //   ButtonRoundTrain.Active           
         1                     , //   ButtonRoundTrain.Transparent     
         @ButtonRoundTrain_Caption, //   ButtonRoundTrain.Caption        
         _taCenter             , //   ButtonRoundTrain.TextAlign        
         @Tahoma16x19_Regular  , //   ButtonRoundTrain.FontName        
         0x0000                , //   ButtonRoundTrain.FontColor       
         1                     , //   ButtonRoundTrain.Gradient        
         0                     , //   ButtonRoundTrain.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundTrain.Gradient_Start_Color    
         0x630C                , //   ButtonRoundTrain.Gradient_End_Color    
         0xC618                , //   ButtonRoundTrain.Color           
         3                     , //   ButtonRoundTrain.CornerRadius           
         1                     , //   ButtonRoundTrain.PressColEnabled 
         0xE71C                , //   ButtonRoundTrain.Press_Color     
         0                     , //    ButtonRoundTrain.OnUpPtr
         0                     , //    ButtonRoundTrain.OnDownPtr
         @ButtonRoundTrainWizardOnClick, //    ButtonRoundTrain.OnClickPtr
         0                       //    ButtonRoundTrain.OnPressPtr
         ); code; far;

var RadioButtonForward : TRadioButton;
    RadioButtonForward_Caption : string[7];

var RadioButtonReverse : TRadioButton;
    RadioButtonReverse_Caption : string[7];

    const ButtonRoundEmergencyStop_Caption : string[6] = 'E Stop'; code; far;
    const ButtonRoundEmergencyStop : TCButton_Round = 
         (
         0                     , //   ButtonRoundEmergencyStop.OwnerScreenID
         21                    , //   ButtonRoundEmergencyStop.Order           
         145                   , //   ButtonRoundEmergencyStop.Left            
         5                     , //   ButtonRoundEmergencyStop.Top              
         85                    , //   ButtonRoundEmergencyStop.Width            
         30                    , //   ButtonRoundEmergencyStop.Height        
         0                     , //   ButtonRoundEmergencyStop.Pen_Width          
         0x0000                , //   ButtonRoundEmergencyStop.Pen_Color       
         1                     , //   ButtonRoundEmergencyStop.Visible         
         1                     , //   ButtonRoundEmergencyStop.Active           
         1                     , //   ButtonRoundEmergencyStop.Transparent     
         @ButtonRoundEmergencyStop_Caption, //   ButtonRoundEmergencyStop.Caption        
         _taCenter             , //   ButtonRoundEmergencyStop.TextAlign        
         @Tahoma11x13_Regular  , //   ButtonRoundEmergencyStop.FontName        
         0x0000                , //   ButtonRoundEmergencyStop.FontColor       
         1                     , //   ButtonRoundEmergencyStop.Gradient        
         0                     , //   ButtonRoundEmergencyStop.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundEmergencyStop.Gradient_Start_Color    
         0x630C                , //   ButtonRoundEmergencyStop.Gradient_End_Color    
         0xC618                , //   ButtonRoundEmergencyStop.Color           
         1                     , //   ButtonRoundEmergencyStop.CornerRadius           
         1                     , //   ButtonRoundEmergencyStop.PressColEnabled 
         0xE71C                , //   ButtonRoundEmergencyStop.Press_Color     
         0                     , //    ButtonRoundEmergencyStop.OnUpPtr
         0                     , //    ButtonRoundEmergencyStop.OnDownPtr
         @ButtonRoundEmergencyStopOnClick, //    ButtonRoundEmergencyStop.OnClickPtr
         0                       //    ButtonRoundEmergencyStop.OnPressPtr
         ); code; far;

    const ButtonRoundStop_Caption : string[4] = 'Stop'; code; far;
    const ButtonRoundStop : TCButton_Round = 
         (
         0                     , //   ButtonRoundStop.OwnerScreenID
         22                    , //   ButtonRoundStop.Order           
         230                   , //   ButtonRoundStop.Left            
         5                     , //   ButtonRoundStop.Top              
         85                    , //   ButtonRoundStop.Width            
         30                    , //   ButtonRoundStop.Height        
         0                     , //   ButtonRoundStop.Pen_Width          
         0x0000                , //   ButtonRoundStop.Pen_Color       
         1                     , //   ButtonRoundStop.Visible         
         1                     , //   ButtonRoundStop.Active           
         1                     , //   ButtonRoundStop.Transparent     
         @ButtonRoundStop_Caption, //   ButtonRoundStop.Caption        
         _taCenter             , //   ButtonRoundStop.TextAlign        
         @Tahoma11x13_Regular  , //   ButtonRoundStop.FontName        
         0x0000                , //   ButtonRoundStop.FontColor       
         1                     , //   ButtonRoundStop.Gradient        
         0                     , //   ButtonRoundStop.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundStop.Gradient_Start_Color    
         0x630C                , //   ButtonRoundStop.Gradient_End_Color    
         0xC618                , //   ButtonRoundStop.Color           
         1                     , //   ButtonRoundStop.CornerRadius           
         1                     , //   ButtonRoundStop.PressColEnabled 
         0xE71C                , //   ButtonRoundStop.Press_Color     
         0                     , //    ButtonRoundStop.OnUpPtr
         0                     , //    ButtonRoundStop.OnDownPtr
         @ButtonRoundStopOnClick, //    ButtonRoundStop.OnClickPtr
         0                       //    ButtonRoundStop.OnPressPtr
         ); code; far;

      const Screen2_Buttons_Round  : array[9] of ^TButton_Round =
         (
         @ButtonRoundF0,       
         @ButtonRoundF1,       
         @ButtonRoundF2,       
         @ButtonRoundF3,       
         @ButtonRoundF4,       
         @ButtonRoundF5,       
         @ButtonRoundTrainWizard,
         @ButtonRoundTrainLongShort,
         @ButtonRoundTrainSpeedStep
         ); code; far;
      const Screen2_CButtons_Round  : array[8] of ^TCButton_Round =
         (
         @ButtonRoundFunctionBack,
         @ButtonRoundFunctionNext,
         @ButtonRoundDecSpeed, 
         @ButtonRoundIncSpeed, 
         @ButtonRoundReverse,  
         @ButtonRoundTrain,    
         @ButtonRoundEmergencyStop,
         @ButtonRoundStop      
         ); code; far;
      const Screen2_CBoxes  : array[1] of ^TCBox =
         (
         @Box1                 
         ); code; far;
      const Screen2_Lines  : array[2] of ^TLine =
         (
         @Line3,               
         @Line4                
         ); code; far;
      const Screen2_RadioButtons  : array[2] of ^TRadioButton =
         (
         @RadioButtonForward,  
         @RadioButtonReverse   
         ); code; far;
      const Screen2_ProgressBars  : array[1] of ^TProgressBar =
         (
         @ProgressBarSpeed     
         ); code; far;

const Screen3_CButtons_Round  : array[14] of ^TCButton_Round; code; far; forward;
const Screen3_Labels  : array[1] of ^TLabel; code; far; forward;
const Screen3_CBoxes  : array[1] of ^TCBox; code; far; forward;
const Screen3_Boxes_Round  : array[2] of ^TBox_Round; code; far; forward;
const Screen3_CBoxes_Round  : array[1] of ^TCBox_Round; code; far; forward;
const Screen3_Lines  : array[3] of ^TLine; code; far; forward;
const Screen3_RadioButtons  : array[5] of ^TRadioButton; code; far; forward;

var TrainSelectorDCC           : TScreen;
var BoxRound2 : TBox_Round;
var BoxRound1 : TBox_Round;
    const BoxKeyboardAddressBkgnd : TCBox = 
         (
         1                     , //   BoxKeyboardAddressBkgnd.OwnerScreenID
         2                     , //   BoxKeyboardAddressBkgnd.Order           
         190                   , //   BoxKeyboardAddressBkgnd.Left           
         20                    , //   BoxKeyboardAddressBkgnd.Top             
         115                   , //   BoxKeyboardAddressBkgnd.Width           
         40                    , //   BoxKeyboardAddressBkgnd.Height          
         2                     , //   BoxKeyboardAddressBkgnd.Pen_Width       
         0x8410                , //   BoxKeyboardAddressBkgnd.Pen_Color       
         1                     , //   BoxKeyboardAddressBkgnd.Visible         
         0                     , //   BoxKeyboardAddressBkgnd.Active          
         1                     , //   BoxKeyboardAddressBkgnd.Transparent     
         0                     , //   BoxKeyboardAddressBkgnd.Gradient        
         0                     , //   BoxKeyboardAddressBkgnd.Gradient_Orientation    
         0xFFFF                , //   BoxKeyboardAddressBkgnd.Gradient_Start_Color    
         0xC618                , //   BoxKeyboardAddressBkgnd.Gradient_End_Color      
         0x07E8                , //   BoxKeyboardAddressBkgnd.Color           
         1                     , //   BoxKeyboardAddressBkgnd.PressColEnabled 
         0xE71C                , //   BoxKeyboardAddressBkgnd.Press_Color     
         0                     , //    BoxKeyboardAddressBkgnd.OnUpPtr
         0                     , //    BoxKeyboardAddressBkgnd.OnDownPtr
         0                     , //    BoxKeyboardAddressBkgnd.OnClickPtr
         0                       //    BoxKeyboardAddressBkgnd.OnPressPtr
         ); code; far;
var RadioButtonKeyboardShort : TRadioButton;
    RadioButtonKeyboardShort_Caption : string[5];

var RadioButtonKeyBoardLong : TRadioButton;
    RadioButtonKeyBoardLong_Caption : string[4];

var LabelKeyboardAddress : TLabel;
    LabelKeyboardAddress_Caption : string[5];

    const ButtonRoundKeyBoardOK_Caption : string[2] = 'Ok'; code; far;
    const ButtonRoundKeyBoardOK : TCButton_Round = 
         (
         1                     , //   ButtonRoundKeyBoardOK.OwnerScreenID
         6                     , //   ButtonRoundKeyBoardOK.Order           
         180                   , //   ButtonRoundKeyBoardOK.Left            
         160                   , //   ButtonRoundKeyBoardOK.Top              
         135                   , //   ButtonRoundKeyBoardOK.Width            
         35                    , //   ButtonRoundKeyBoardOK.Height        
         0                     , //   ButtonRoundKeyBoardOK.Pen_Width          
         0x0000                , //   ButtonRoundKeyBoardOK.Pen_Color       
         1                     , //   ButtonRoundKeyBoardOK.Visible         
         1                     , //   ButtonRoundKeyBoardOK.Active           
         1                     , //   ButtonRoundKeyBoardOK.Transparent     
         @ButtonRoundKeyBoardOK_Caption, //   ButtonRoundKeyBoardOK.Caption        
         _taCenter             , //   ButtonRoundKeyBoardOK.TextAlign        
         @Tahoma16x19_Regular  , //   ButtonRoundKeyBoardOK.FontName        
         0x0000                , //   ButtonRoundKeyBoardOK.FontColor       
         1                     , //   ButtonRoundKeyBoardOK.Gradient        
         0                     , //   ButtonRoundKeyBoardOK.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundKeyBoardOK.Gradient_Start_Color    
         0x630C                , //   ButtonRoundKeyBoardOK.Gradient_End_Color    
         0xC618                , //   ButtonRoundKeyBoardOK.Color           
         1                     , //   ButtonRoundKeyBoardOK.CornerRadius           
         1                     , //   ButtonRoundKeyBoardOK.PressColEnabled 
         0xE71C                , //   ButtonRoundKeyBoardOK.Press_Color     
         0                     , //    ButtonRoundKeyBoardOK.OnUpPtr
         0                     , //    ButtonRoundKeyBoardOK.OnDownPtr
         @ButtonRoundKeyboardOKOnClick, //    ButtonRoundKeyBoardOK.OnClickPtr
         0                       //    ButtonRoundKeyBoardOK.OnPressPtr
         ); code; far;

    const ButtonRoundKeyboardCancel_Caption : string[6] = 'Cancel'; code; far;
    const ButtonRoundKeyboardCancel : TCButton_Round = 
         (
         1                     , //   ButtonRoundKeyboardCancel.OwnerScreenID
         7                     , //   ButtonRoundKeyboardCancel.Order           
         180                   , //   ButtonRoundKeyboardCancel.Left            
         195                   , //   ButtonRoundKeyboardCancel.Top              
         135                   , //   ButtonRoundKeyboardCancel.Width            
         35                    , //   ButtonRoundKeyboardCancel.Height        
         0                     , //   ButtonRoundKeyboardCancel.Pen_Width          
         0x0000                , //   ButtonRoundKeyboardCancel.Pen_Color       
         1                     , //   ButtonRoundKeyboardCancel.Visible         
         1                     , //   ButtonRoundKeyboardCancel.Active           
         1                     , //   ButtonRoundKeyboardCancel.Transparent     
         @ButtonRoundKeyboardCancel_Caption, //   ButtonRoundKeyboardCancel.Caption        
         _taCenter             , //   ButtonRoundKeyboardCancel.TextAlign        
         @Tahoma16x19_Regular  , //   ButtonRoundKeyboardCancel.FontName        
         0x0000                , //   ButtonRoundKeyboardCancel.FontColor       
         1                     , //   ButtonRoundKeyboardCancel.Gradient        
         0                     , //   ButtonRoundKeyboardCancel.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundKeyboardCancel.Gradient_Start_Color    
         0x630C                , //   ButtonRoundKeyboardCancel.Gradient_End_Color    
         0xC618                , //   ButtonRoundKeyboardCancel.Color           
         1                     , //   ButtonRoundKeyboardCancel.CornerRadius           
         1                     , //   ButtonRoundKeyboardCancel.PressColEnabled 
         0xE71C                , //   ButtonRoundKeyboardCancel.Press_Color     
         0                     , //    ButtonRoundKeyboardCancel.OnUpPtr
         0                     , //    ButtonRoundKeyboardCancel.OnDownPtr
         @ButtonRoundKeyboardCancelOnClick, //    ButtonRoundKeyboardCancel.OnClickPtr
         0                       //    ButtonRoundKeyboardCancel.OnPressPtr
         ); code; far;

var LineKeyboard1 : TLine;
    const ButtonRoundKeyBoard1_Caption : string[1] = '1'; code; far;
    const ButtonRoundKeyBoard1 : TCButton_Round = 
         (
         1                     , //   ButtonRoundKeyBoard1.OwnerScreenID
         9                     , //   ButtonRoundKeyBoard1.Order           
         5                     , //   ButtonRoundKeyBoard1.Left            
         10                    , //   ButtonRoundKeyBoard1.Top              
         55                    , //   ButtonRoundKeyBoard1.Width            
         55                    , //   ButtonRoundKeyBoard1.Height        
         0                     , //   ButtonRoundKeyBoard1.Pen_Width          
         0x0000                , //   ButtonRoundKeyBoard1.Pen_Color       
         1                     , //   ButtonRoundKeyBoard1.Visible         
         1                     , //   ButtonRoundKeyBoard1.Active           
         1                     , //   ButtonRoundKeyBoard1.Transparent     
         @ButtonRoundKeyBoard1_Caption, //   ButtonRoundKeyBoard1.Caption        
         _taCenter             , //   ButtonRoundKeyBoard1.TextAlign        
         @Tahoma24x29_Regular  , //   ButtonRoundKeyBoard1.FontName        
         0x0000                , //   ButtonRoundKeyBoard1.FontColor       
         1                     , //   ButtonRoundKeyBoard1.Gradient        
         0                     , //   ButtonRoundKeyBoard1.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundKeyBoard1.Gradient_Start_Color    
         0x630C                , //   ButtonRoundKeyBoard1.Gradient_End_Color    
         0xC618                , //   ButtonRoundKeyBoard1.Color           
         1                     , //   ButtonRoundKeyBoard1.CornerRadius           
         1                     , //   ButtonRoundKeyBoard1.PressColEnabled 
         0xE71C                , //   ButtonRoundKeyBoard1.Press_Color     
         0                     , //    ButtonRoundKeyBoard1.OnUpPtr
         0                     , //    ButtonRoundKeyBoard1.OnDownPtr
         @ButtonRoundKeyBoard1OnClick, //    ButtonRoundKeyBoard1.OnClickPtr
         0                       //    ButtonRoundKeyBoard1.OnPressPtr
         ); code; far;

    const ButtonRoundKeyBoard2_Caption : string[1] = '2'; code; far;
    const ButtonRoundKeyBoard2 : TCButton_Round = 
         (
         1                     , //   ButtonRoundKeyBoard2.OwnerScreenID
         10                    , //   ButtonRoundKeyBoard2.Order           
         60                    , //   ButtonRoundKeyBoard2.Left            
         10                    , //   ButtonRoundKeyBoard2.Top              
         55                    , //   ButtonRoundKeyBoard2.Width            
         55                    , //   ButtonRoundKeyBoard2.Height        
         0                     , //   ButtonRoundKeyBoard2.Pen_Width          
         0x0000                , //   ButtonRoundKeyBoard2.Pen_Color       
         1                     , //   ButtonRoundKeyBoard2.Visible         
         1                     , //   ButtonRoundKeyBoard2.Active           
         1                     , //   ButtonRoundKeyBoard2.Transparent     
         @ButtonRoundKeyBoard2_Caption, //   ButtonRoundKeyBoard2.Caption        
         _taCenter             , //   ButtonRoundKeyBoard2.TextAlign        
         @Tahoma24x29_Regular  , //   ButtonRoundKeyBoard2.FontName        
         0x0000                , //   ButtonRoundKeyBoard2.FontColor       
         1                     , //   ButtonRoundKeyBoard2.Gradient        
         0                     , //   ButtonRoundKeyBoard2.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundKeyBoard2.Gradient_Start_Color    
         0x630C                , //   ButtonRoundKeyBoard2.Gradient_End_Color    
         0xC618                , //   ButtonRoundKeyBoard2.Color           
         1                     , //   ButtonRoundKeyBoard2.CornerRadius           
         1                     , //   ButtonRoundKeyBoard2.PressColEnabled 
         0xE71C                , //   ButtonRoundKeyBoard2.Press_Color     
         0                     , //    ButtonRoundKeyBoard2.OnUpPtr
         0                     , //    ButtonRoundKeyBoard2.OnDownPtr
         @ButtonRoundKeyBoard2OnClick, //    ButtonRoundKeyBoard2.OnClickPtr
         0                       //    ButtonRoundKeyBoard2.OnPressPtr
         ); code; far;

    const ButtonRoundKeyBoard3_Caption : string[1] = '3'; code; far;
    const ButtonRoundKeyBoard3 : TCButton_Round = 
         (
         1                     , //   ButtonRoundKeyBoard3.OwnerScreenID
         11                    , //   ButtonRoundKeyBoard3.Order           
         115                   , //   ButtonRoundKeyBoard3.Left            
         10                    , //   ButtonRoundKeyBoard3.Top              
         55                    , //   ButtonRoundKeyBoard3.Width            
         55                    , //   ButtonRoundKeyBoard3.Height        
         0                     , //   ButtonRoundKeyBoard3.Pen_Width          
         0x0000                , //   ButtonRoundKeyBoard3.Pen_Color       
         1                     , //   ButtonRoundKeyBoard3.Visible         
         1                     , //   ButtonRoundKeyBoard3.Active           
         1                     , //   ButtonRoundKeyBoard3.Transparent     
         @ButtonRoundKeyBoard3_Caption, //   ButtonRoundKeyBoard3.Caption        
         _taCenter             , //   ButtonRoundKeyBoard3.TextAlign        
         @Tahoma24x29_Regular  , //   ButtonRoundKeyBoard3.FontName        
         0x0000                , //   ButtonRoundKeyBoard3.FontColor       
         1                     , //   ButtonRoundKeyBoard3.Gradient        
         0                     , //   ButtonRoundKeyBoard3.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundKeyBoard3.Gradient_Start_Color    
         0x630C                , //   ButtonRoundKeyBoard3.Gradient_End_Color    
         0xC618                , //   ButtonRoundKeyBoard3.Color           
         1                     , //   ButtonRoundKeyBoard3.CornerRadius           
         1                     , //   ButtonRoundKeyBoard3.PressColEnabled 
         0xE71C                , //   ButtonRoundKeyBoard3.Press_Color     
         0                     , //    ButtonRoundKeyBoard3.OnUpPtr
         0                     , //    ButtonRoundKeyBoard3.OnDownPtr
         @ButtonRoundKeyBoard3OnClick, //    ButtonRoundKeyBoard3.OnClickPtr
         0                       //    ButtonRoundKeyBoard3.OnPressPtr
         ); code; far;

    const ButtonRoundKeyBoard4_Caption : string[1] = '4'; code; far;
    const ButtonRoundKeyBoard4 : TCButton_Round = 
         (
         1                     , //   ButtonRoundKeyBoard4.OwnerScreenID
         12                    , //   ButtonRoundKeyBoard4.Order           
         5                     , //   ButtonRoundKeyBoard4.Left            
         65                    , //   ButtonRoundKeyBoard4.Top              
         55                    , //   ButtonRoundKeyBoard4.Width            
         55                    , //   ButtonRoundKeyBoard4.Height        
         0                     , //   ButtonRoundKeyBoard4.Pen_Width          
         0x0000                , //   ButtonRoundKeyBoard4.Pen_Color       
         1                     , //   ButtonRoundKeyBoard4.Visible         
         1                     , //   ButtonRoundKeyBoard4.Active           
         1                     , //   ButtonRoundKeyBoard4.Transparent     
         @ButtonRoundKeyBoard4_Caption, //   ButtonRoundKeyBoard4.Caption        
         _taCenter             , //   ButtonRoundKeyBoard4.TextAlign        
         @Tahoma24x29_Regular  , //   ButtonRoundKeyBoard4.FontName        
         0x0000                , //   ButtonRoundKeyBoard4.FontColor       
         1                     , //   ButtonRoundKeyBoard4.Gradient        
         0                     , //   ButtonRoundKeyBoard4.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundKeyBoard4.Gradient_Start_Color    
         0x630C                , //   ButtonRoundKeyBoard4.Gradient_End_Color    
         0xC618                , //   ButtonRoundKeyBoard4.Color           
         1                     , //   ButtonRoundKeyBoard4.CornerRadius           
         1                     , //   ButtonRoundKeyBoard4.PressColEnabled 
         0xE71C                , //   ButtonRoundKeyBoard4.Press_Color     
         0                     , //    ButtonRoundKeyBoard4.OnUpPtr
         0                     , //    ButtonRoundKeyBoard4.OnDownPtr
         @ButtonRoundKeyBoard4OnClick, //    ButtonRoundKeyBoard4.OnClickPtr
         0                       //    ButtonRoundKeyBoard4.OnPressPtr
         ); code; far;

    const ButtonRoundKeyBoard5_Caption : string[1] = '5'; code; far;
    const ButtonRoundKeyBoard5 : TCButton_Round = 
         (
         1                     , //   ButtonRoundKeyBoard5.OwnerScreenID
         13                    , //   ButtonRoundKeyBoard5.Order           
         60                    , //   ButtonRoundKeyBoard5.Left            
         65                    , //   ButtonRoundKeyBoard5.Top              
         55                    , //   ButtonRoundKeyBoard5.Width            
         55                    , //   ButtonRoundKeyBoard5.Height        
         0                     , //   ButtonRoundKeyBoard5.Pen_Width          
         0x0000                , //   ButtonRoundKeyBoard5.Pen_Color       
         1                     , //   ButtonRoundKeyBoard5.Visible         
         1                     , //   ButtonRoundKeyBoard5.Active           
         1                     , //   ButtonRoundKeyBoard5.Transparent     
         @ButtonRoundKeyBoard5_Caption, //   ButtonRoundKeyBoard5.Caption        
         _taCenter             , //   ButtonRoundKeyBoard5.TextAlign        
         @Tahoma24x29_Regular  , //   ButtonRoundKeyBoard5.FontName        
         0x0000                , //   ButtonRoundKeyBoard5.FontColor       
         1                     , //   ButtonRoundKeyBoard5.Gradient        
         0                     , //   ButtonRoundKeyBoard5.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundKeyBoard5.Gradient_Start_Color    
         0x630C                , //   ButtonRoundKeyBoard5.Gradient_End_Color    
         0xC618                , //   ButtonRoundKeyBoard5.Color           
         1                     , //   ButtonRoundKeyBoard5.CornerRadius           
         1                     , //   ButtonRoundKeyBoard5.PressColEnabled 
         0xE71C                , //   ButtonRoundKeyBoard5.Press_Color     
         0                     , //    ButtonRoundKeyBoard5.OnUpPtr
         0                     , //    ButtonRoundKeyBoard5.OnDownPtr
         @ButtonRoundKeyBoard5OnClick, //    ButtonRoundKeyBoard5.OnClickPtr
         0                       //    ButtonRoundKeyBoard5.OnPressPtr
         ); code; far;

    const ButtonRoundKeyBoard6_Caption : string[1] = '6'; code; far;
    const ButtonRoundKeyBoard6 : TCButton_Round = 
         (
         1                     , //   ButtonRoundKeyBoard6.OwnerScreenID
         14                    , //   ButtonRoundKeyBoard6.Order           
         115                   , //   ButtonRoundKeyBoard6.Left            
         65                    , //   ButtonRoundKeyBoard6.Top              
         55                    , //   ButtonRoundKeyBoard6.Width            
         55                    , //   ButtonRoundKeyBoard6.Height        
         0                     , //   ButtonRoundKeyBoard6.Pen_Width          
         0x0000                , //   ButtonRoundKeyBoard6.Pen_Color       
         1                     , //   ButtonRoundKeyBoard6.Visible         
         1                     , //   ButtonRoundKeyBoard6.Active           
         1                     , //   ButtonRoundKeyBoard6.Transparent     
         @ButtonRoundKeyBoard6_Caption, //   ButtonRoundKeyBoard6.Caption        
         _taCenter             , //   ButtonRoundKeyBoard6.TextAlign        
         @Tahoma24x29_Regular  , //   ButtonRoundKeyBoard6.FontName        
         0x0000                , //   ButtonRoundKeyBoard6.FontColor       
         1                     , //   ButtonRoundKeyBoard6.Gradient        
         0                     , //   ButtonRoundKeyBoard6.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundKeyBoard6.Gradient_Start_Color    
         0x630C                , //   ButtonRoundKeyBoard6.Gradient_End_Color    
         0xC618                , //   ButtonRoundKeyBoard6.Color           
         1                     , //   ButtonRoundKeyBoard6.CornerRadius           
         1                     , //   ButtonRoundKeyBoard6.PressColEnabled 
         0xE71C                , //   ButtonRoundKeyBoard6.Press_Color     
         0                     , //    ButtonRoundKeyBoard6.OnUpPtr
         0                     , //    ButtonRoundKeyBoard6.OnDownPtr
         @ButtonRoundKeyBoard6OnClick, //    ButtonRoundKeyBoard6.OnClickPtr
         0                       //    ButtonRoundKeyBoard6.OnPressPtr
         ); code; far;

    const ButtonRoundKeyBoard7_Caption : string[1] = '7'; code; far;
    const ButtonRoundKeyBoard7 : TCButton_Round = 
         (
         1                     , //   ButtonRoundKeyBoard7.OwnerScreenID
         15                    , //   ButtonRoundKeyBoard7.Order           
         5                     , //   ButtonRoundKeyBoard7.Left            
         120                   , //   ButtonRoundKeyBoard7.Top              
         55                    , //   ButtonRoundKeyBoard7.Width            
         55                    , //   ButtonRoundKeyBoard7.Height        
         0                     , //   ButtonRoundKeyBoard7.Pen_Width          
         0x0000                , //   ButtonRoundKeyBoard7.Pen_Color       
         1                     , //   ButtonRoundKeyBoard7.Visible         
         1                     , //   ButtonRoundKeyBoard7.Active           
         1                     , //   ButtonRoundKeyBoard7.Transparent     
         @ButtonRoundKeyBoard7_Caption, //   ButtonRoundKeyBoard7.Caption        
         _taCenter             , //   ButtonRoundKeyBoard7.TextAlign        
         @Tahoma24x29_Regular  , //   ButtonRoundKeyBoard7.FontName        
         0x0000                , //   ButtonRoundKeyBoard7.FontColor       
         1                     , //   ButtonRoundKeyBoard7.Gradient        
         0                     , //   ButtonRoundKeyBoard7.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundKeyBoard7.Gradient_Start_Color    
         0x630C                , //   ButtonRoundKeyBoard7.Gradient_End_Color    
         0xC618                , //   ButtonRoundKeyBoard7.Color           
         1                     , //   ButtonRoundKeyBoard7.CornerRadius           
         1                     , //   ButtonRoundKeyBoard7.PressColEnabled 
         0xE71C                , //   ButtonRoundKeyBoard7.Press_Color     
         0                     , //    ButtonRoundKeyBoard7.OnUpPtr
         0                     , //    ButtonRoundKeyBoard7.OnDownPtr
         @ButtonRoundKeyBoard7OnClick, //    ButtonRoundKeyBoard7.OnClickPtr
         0                       //    ButtonRoundKeyBoard7.OnPressPtr
         ); code; far;

    const ButtonRoundKeyBoard8_Caption : string[1] = '8'; code; far;
    const ButtonRoundKeyBoard8 : TCButton_Round = 
         (
         1                     , //   ButtonRoundKeyBoard8.OwnerScreenID
         16                    , //   ButtonRoundKeyBoard8.Order           
         60                    , //   ButtonRoundKeyBoard8.Left            
         120                   , //   ButtonRoundKeyBoard8.Top              
         55                    , //   ButtonRoundKeyBoard8.Width            
         55                    , //   ButtonRoundKeyBoard8.Height        
         0                     , //   ButtonRoundKeyBoard8.Pen_Width          
         0x0000                , //   ButtonRoundKeyBoard8.Pen_Color       
         1                     , //   ButtonRoundKeyBoard8.Visible         
         1                     , //   ButtonRoundKeyBoard8.Active           
         1                     , //   ButtonRoundKeyBoard8.Transparent     
         @ButtonRoundKeyBoard8_Caption, //   ButtonRoundKeyBoard8.Caption        
         _taCenter             , //   ButtonRoundKeyBoard8.TextAlign        
         @Tahoma24x29_Regular  , //   ButtonRoundKeyBoard8.FontName        
         0x0000                , //   ButtonRoundKeyBoard8.FontColor       
         1                     , //   ButtonRoundKeyBoard8.Gradient        
         0                     , //   ButtonRoundKeyBoard8.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundKeyBoard8.Gradient_Start_Color    
         0x630C                , //   ButtonRoundKeyBoard8.Gradient_End_Color    
         0xC618                , //   ButtonRoundKeyBoard8.Color           
         1                     , //   ButtonRoundKeyBoard8.CornerRadius           
         1                     , //   ButtonRoundKeyBoard8.PressColEnabled 
         0xE71C                , //   ButtonRoundKeyBoard8.Press_Color     
         0                     , //    ButtonRoundKeyBoard8.OnUpPtr
         0                     , //    ButtonRoundKeyBoard8.OnDownPtr
         @ButtonRoundKeyBoard8OnClick, //    ButtonRoundKeyBoard8.OnClickPtr
         0                       //    ButtonRoundKeyBoard8.OnPressPtr
         ); code; far;

    const ButtonRoundKeyBoard9_Caption : string[1] = '9'; code; far;
    const ButtonRoundKeyBoard9 : TCButton_Round = 
         (
         1                     , //   ButtonRoundKeyBoard9.OwnerScreenID
         17                    , //   ButtonRoundKeyBoard9.Order           
         115                   , //   ButtonRoundKeyBoard9.Left            
         120                   , //   ButtonRoundKeyBoard9.Top              
         55                    , //   ButtonRoundKeyBoard9.Width            
         55                    , //   ButtonRoundKeyBoard9.Height        
         0                     , //   ButtonRoundKeyBoard9.Pen_Width          
         0x0000                , //   ButtonRoundKeyBoard9.Pen_Color       
         1                     , //   ButtonRoundKeyBoard9.Visible         
         1                     , //   ButtonRoundKeyBoard9.Active           
         1                     , //   ButtonRoundKeyBoard9.Transparent     
         @ButtonRoundKeyBoard9_Caption, //   ButtonRoundKeyBoard9.Caption        
         _taCenter             , //   ButtonRoundKeyBoard9.TextAlign        
         @Tahoma24x29_Regular  , //   ButtonRoundKeyBoard9.FontName        
         0x0000                , //   ButtonRoundKeyBoard9.FontColor       
         1                     , //   ButtonRoundKeyBoard9.Gradient        
         0                     , //   ButtonRoundKeyBoard9.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundKeyBoard9.Gradient_Start_Color    
         0x630C                , //   ButtonRoundKeyBoard9.Gradient_End_Color    
         0xC618                , //   ButtonRoundKeyBoard9.Color           
         1                     , //   ButtonRoundKeyBoard9.CornerRadius           
         1                     , //   ButtonRoundKeyBoard9.PressColEnabled 
         0xE71C                , //   ButtonRoundKeyBoard9.Press_Color     
         0                     , //    ButtonRoundKeyBoard9.OnUpPtr
         0                     , //    ButtonRoundKeyBoard9.OnDownPtr
         @ButtonRoundKeyBoard9OnClick, //    ButtonRoundKeyBoard9.OnClickPtr
         0                       //    ButtonRoundKeyBoard9.OnPressPtr
         ); code; far;

    const ButtonRoundKeyBoard0_Caption : string[1] = '0'; code; far;
    const ButtonRoundKeyBoard0 : TCButton_Round = 
         (
         1                     , //   ButtonRoundKeyBoard0.OwnerScreenID
         18                    , //   ButtonRoundKeyBoard0.Order           
         60                    , //   ButtonRoundKeyBoard0.Left            
         175                   , //   ButtonRoundKeyBoard0.Top              
         55                    , //   ButtonRoundKeyBoard0.Width            
         55                    , //   ButtonRoundKeyBoard0.Height        
         0                     , //   ButtonRoundKeyBoard0.Pen_Width          
         0x0000                , //   ButtonRoundKeyBoard0.Pen_Color       
         1                     , //   ButtonRoundKeyBoard0.Visible         
         1                     , //   ButtonRoundKeyBoard0.Active           
         1                     , //   ButtonRoundKeyBoard0.Transparent     
         @ButtonRoundKeyBoard0_Caption, //   ButtonRoundKeyBoard0.Caption        
         _taCenter             , //   ButtonRoundKeyBoard0.TextAlign        
         @Tahoma24x29_Regular  , //   ButtonRoundKeyBoard0.FontName        
         0x0000                , //   ButtonRoundKeyBoard0.FontColor       
         1                     , //   ButtonRoundKeyBoard0.Gradient        
         0                     , //   ButtonRoundKeyBoard0.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundKeyBoard0.Gradient_Start_Color    
         0x630C                , //   ButtonRoundKeyBoard0.Gradient_End_Color    
         0xC618                , //   ButtonRoundKeyBoard0.Color           
         1                     , //   ButtonRoundKeyBoard0.CornerRadius           
         1                     , //   ButtonRoundKeyBoard0.PressColEnabled 
         0xE71C                , //   ButtonRoundKeyBoard0.Press_Color     
         0                     , //    ButtonRoundKeyBoard0.OnUpPtr
         0                     , //    ButtonRoundKeyBoard0.OnDownPtr
         @ButtonRoundKeyboard0OnClick, //    ButtonRoundKeyBoard0.OnClickPtr
         0                       //    ButtonRoundKeyBoard0.OnPressPtr
         ); code; far;

    const ButtonRoundKeyboardClear_Caption : string[5] = 'Clear'; code; far;
    const ButtonRoundKeyboardClear : TCButton_Round = 
         (
         1                     , //   ButtonRoundKeyboardClear.OwnerScreenID
         19                    , //   ButtonRoundKeyboardClear.Order           
         5                     , //   ButtonRoundKeyboardClear.Left            
         175                   , //   ButtonRoundKeyboardClear.Top              
         55                    , //   ButtonRoundKeyboardClear.Width            
         55                    , //   ButtonRoundKeyboardClear.Height        
         0                     , //   ButtonRoundKeyboardClear.Pen_Width          
         0x0000                , //   ButtonRoundKeyboardClear.Pen_Color       
         1                     , //   ButtonRoundKeyboardClear.Visible         
         1                     , //   ButtonRoundKeyboardClear.Active           
         1                     , //   ButtonRoundKeyboardClear.Transparent     
         @ButtonRoundKeyboardClear_Caption, //   ButtonRoundKeyboardClear.Caption        
         _taCenter             , //   ButtonRoundKeyboardClear.TextAlign        
         @Tahoma11x13_Regular  , //   ButtonRoundKeyboardClear.FontName        
         0x0000                , //   ButtonRoundKeyboardClear.FontColor       
         1                     , //   ButtonRoundKeyboardClear.Gradient        
         0                     , //   ButtonRoundKeyboardClear.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundKeyboardClear.Gradient_Start_Color    
         0x630C                , //   ButtonRoundKeyboardClear.Gradient_End_Color    
         0xC618                , //   ButtonRoundKeyboardClear.Color           
         1                     , //   ButtonRoundKeyboardClear.CornerRadius           
         1                     , //   ButtonRoundKeyboardClear.PressColEnabled 
         0xE71C                , //   ButtonRoundKeyboardClear.Press_Color     
         0                     , //    ButtonRoundKeyboardClear.OnUpPtr
         0                     , //    ButtonRoundKeyboardClear.OnDownPtr
         @ButtonRoundKeyboardClearOnClick, //    ButtonRoundKeyboardClear.OnClickPtr
         0                       //    ButtonRoundKeyboardClear.OnPressPtr
         ); code; far;

    const ButtonRoundKeyboardBackspace_Caption : string[4] = 'Back'; code; far;
    const ButtonRoundKeyboardBackspace : TCButton_Round = 
         (
         1                     , //   ButtonRoundKeyboardBackspace.OwnerScreenID
         20                    , //   ButtonRoundKeyboardBackspace.Order           
         115                   , //   ButtonRoundKeyboardBackspace.Left            
         175                   , //   ButtonRoundKeyboardBackspace.Top              
         56                    , //   ButtonRoundKeyboardBackspace.Width            
         55                    , //   ButtonRoundKeyboardBackspace.Height        
         0                     , //   ButtonRoundKeyboardBackspace.Pen_Width          
         0x0000                , //   ButtonRoundKeyboardBackspace.Pen_Color       
         1                     , //   ButtonRoundKeyboardBackspace.Visible         
         1                     , //   ButtonRoundKeyboardBackspace.Active           
         1                     , //   ButtonRoundKeyboardBackspace.Transparent     
         @ButtonRoundKeyboardBackspace_Caption, //   ButtonRoundKeyboardBackspace.Caption        
         _taCenter             , //   ButtonRoundKeyboardBackspace.TextAlign        
         @Tahoma11x13_Regular  , //   ButtonRoundKeyboardBackspace.FontName        
         0x0000                , //   ButtonRoundKeyboardBackspace.FontColor       
         1                     , //   ButtonRoundKeyboardBackspace.Gradient        
         0                     , //   ButtonRoundKeyboardBackspace.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundKeyboardBackspace.Gradient_Start_Color    
         0x630C                , //   ButtonRoundKeyboardBackspace.Gradient_End_Color    
         0xC618                , //   ButtonRoundKeyboardBackspace.Color           
         1                     , //   ButtonRoundKeyboardBackspace.CornerRadius           
         1                     , //   ButtonRoundKeyboardBackspace.PressColEnabled 
         0xE71C                , //   ButtonRoundKeyboardBackspace.Press_Color     
         0                     , //    ButtonRoundKeyboardBackspace.OnUpPtr
         0                     , //    ButtonRoundKeyboardBackspace.OnDownPtr
         @ButtonRoundKeyboardBackspaceOnClick, //    ButtonRoundKeyboardBackspace.OnClickPtr
         0                       //    ButtonRoundKeyboardBackspace.OnPressPtr
         ); code; far;

var Line1 : TLine;
var Line2 : TLine;
    const BoxRound3 : TCBox_Round = 
         (
         1                     , //   BoxRound3.OwnerScreenID
         23                    , //   BoxRound3.Order           
         180                   , //   BoxRound3.Left           
         105                   , //   BoxRound3.Top             
         135                   , //   BoxRound3.Width           
         55                    , //   BoxRound3.Height          
         0                     , //   BoxRound3.Pen_Width       
         0x0000                , //   BoxRound3.Pen_Color       
         1                     , //   BoxRound3.Visible         
         0                     , //   BoxRound3.Active          
         1                     , //   BoxRound3.Transparent     
         1                     , //   BoxRound3.Gradient        
         0                     , //   BoxRound3.Gradient_Orientation    
         0xFFFF                , //   BoxRound3.Gradient_Start_Color    
         0x630C                , //   BoxRound3.Gradient_End_Color      
         0xC618                , //   BoxRound3.Color           
         1                     , //   BoxRound3.CornerRadius           
         1                     , //   BoxRound3.PressColEnabled 
         0xE71C                , //   BoxRound3.Press_Color     
         0                     , //    BoxRound3.OnUpPtr
         0                     , //    BoxRound3.OnDownPtr
         0                     , //    BoxRound3.OnClickPtr
         0                       //    BoxRound3.OnPressPtr
         ); code; far;
var RadioButtonKeyboard14Step : TRadioButton;
    RadioButtonKeyboard14Step_Caption : string[7];

var RadioButtonKeyboard128Step : TRadioButton;
    RadioButtonKeyboard128Step_Caption : string[8];

var RadioButtonKeyboard28Step : TRadioButton;
    RadioButtonKeyboard28Step_Caption : string[7];

      const Screen3_CButtons_Round  : array[14] of ^TCButton_Round =
         (
         @ButtonRoundKeyBoardOK,
         @ButtonRoundKeyboardCancel,
         @ButtonRoundKeyBoard1,
         @ButtonRoundKeyBoard2,
         @ButtonRoundKeyBoard3,
         @ButtonRoundKeyBoard4,
         @ButtonRoundKeyBoard5,
         @ButtonRoundKeyBoard6,
         @ButtonRoundKeyBoard7,
         @ButtonRoundKeyBoard8,
         @ButtonRoundKeyBoard9,
         @ButtonRoundKeyBoard0,
         @ButtonRoundKeyboardClear,
         @ButtonRoundKeyboardBackspace
         ); code; far;
      const Screen3_Labels  : array[1] of ^TLabel =
         (
         @LabelKeyboardAddress 
         ); code; far;
      const Screen3_CBoxes  : array[1] of ^TCBox =
         (
         @BoxKeyboardAddressBkgnd
         ); code; far;
      const Screen3_Boxes_Round  : array[2] of ^TBox_Round =
         (
         @BoxRound2,           
         @BoxRound1            
         ); code; far;
      const Screen3_CBoxes_Round  : array[1] of ^TCBox_Round =
         (
         @BoxRound3            
         ); code; far;
      const Screen3_Lines  : array[3] of ^TLine =
         (
         @LineKeyboard1,       
         @Line1,               
         @Line2                
         ); code; far;
      const Screen3_RadioButtons  : array[5] of ^TRadioButton =
         (
         @RadioButtonKeyboardShort,
         @RadioButtonKeyBoardLong,
         @RadioButtonKeyboard14Step,
         @RadioButtonKeyboard128Step,
         @RadioButtonKeyboard28Step
         ); code; far;

const Screen4_Buttons  : array[1] of ^TButton; code; far; forward;
const Screen4_Buttons_Round  : array[2] of ^TButton_Round; code; far; forward;
const Screen4_Labels  : array[2] of ^TLabel; code; far; forward;
const Screen4_CBoxes  : array[1] of ^TCBox; code; far; forward;

var TrainSelectWizard           : TScreen;
var ButtonRoundWizardByAddress : TButton_Round;
    ButtonRoundWizardByAddress_Caption : string[17];

var ButtonRoundWizardByList : TButton_Round;
    ButtonRoundWizardByList_Caption : string[18];

    const Box2 : TCBox = 
         (
         2                     , //   Box2.OwnerScreenID
         2                     , //   Box2.Order           
         0                     , //   Box2.Left           
         0                     , //   Box2.Top             
         320                   , //   Box2.Width           
         30                    , //   Box2.Height          
         0                     , //   Box2.Pen_Width       
         0x0000                , //   Box2.Pen_Color       
         1                     , //   Box2.Visible         
         0                     , //   Box2.Active          
         1                     , //   Box2.Transparent     
         1                     , //   Box2.Gradient        
         0                     , //   Box2.Gradient_Orientation    
         0xFFFF                , //   Box2.Gradient_Start_Color    
         0x630C                , //   Box2.Gradient_End_Color      
         0xC618                , //   Box2.Color           
         1                     , //   Box2.PressColEnabled 
         0xE71C                , //   Box2.Press_Color     
         0                     , //    Box2.OnUpPtr
         0                     , //    Box2.OnDownPtr
         0                     , //    Box2.OnClickPtr
         0                       //    Box2.OnPressPtr
         ); code; far;
var Label1 : TLabel;
    Label1_Caption : string[21];

var ButtonWizardCancel : TButton;
    ButtonWizardCancel_Caption : string[6];

var Label2 : TLabel;
    Label2_Caption : string[40];

      const Screen4_Buttons  : array[1] of ^TButton =
         (
         @ButtonWizardCancel   
         ); code; far;
      const Screen4_Buttons_Round  : array[2] of ^TButton_Round =
         (
         @ButtonRoundWizardByAddress,
         @ButtonRoundWizardByList
         ); code; far;
      const Screen4_Labels  : array[2] of ^TLabel =
         (
         @Label1,              
         @Label2               
         ); code; far;
      const Screen4_CBoxes  : array[1] of ^TCBox =
         (
         @Box2                 
         ); code; far;

const Screen5_Buttons_Round  : array[6] of ^TButton_Round; code; far; forward;
const Screen5_CButtons_Round  : array[3] of ^TCButton_Round; code; far; forward;

var TrainSelectorOpenLCB           : TScreen;
var ButtonRoundTrainOpenLCB1 : TButton_Round;
    ButtonRoundTrainOpenLCB1_Caption : string[1];

var ButtonRoundTrainOpenLCB2 : TButton_Round;
    ButtonRoundTrainOpenLCB2_Caption : string[1];

var ButtonRoundTrainOpenLCB3 : TButton_Round;
    ButtonRoundTrainOpenLCB3_Caption : string[1];

var ButtonRoundTrainOpenLCB4 : TButton_Round;
    ButtonRoundTrainOpenLCB4_Caption : string[1];

var ButtonRoundTrainOpenLCB5 : TButton_Round;
    ButtonRoundTrainOpenLCB5_Caption : string[1];

var ButtonRound6 : TButton_Round;
    ButtonRound6_Caption : string[1];

    const ButtonRoundTrainOpenLCBNext_Caption : string[4] = 'Next'; code; far;
    const ButtonRoundTrainOpenLCBNext : TCButton_Round = 
         (
         3                     , //   ButtonRoundTrainOpenLCBNext.OwnerScreenID
         6                     , //   ButtonRoundTrainOpenLCBNext.Order           
         1                     , //   ButtonRoundTrainOpenLCBNext.Left            
         211                   , //   ButtonRoundTrainOpenLCBNext.Top              
         100                   , //   ButtonRoundTrainOpenLCBNext.Width            
         29                    , //   ButtonRoundTrainOpenLCBNext.Height        
         0                     , //   ButtonRoundTrainOpenLCBNext.Pen_Width          
         0x0000                , //   ButtonRoundTrainOpenLCBNext.Pen_Color       
         1                     , //   ButtonRoundTrainOpenLCBNext.Visible         
         1                     , //   ButtonRoundTrainOpenLCBNext.Active           
         1                     , //   ButtonRoundTrainOpenLCBNext.Transparent     
         @ButtonRoundTrainOpenLCBNext_Caption, //   ButtonRoundTrainOpenLCBNext.Caption        
         _taCenter             , //   ButtonRoundTrainOpenLCBNext.TextAlign        
         @Tahoma16x19_Regular  , //   ButtonRoundTrainOpenLCBNext.FontName        
         0x0000                , //   ButtonRoundTrainOpenLCBNext.FontColor       
         1                     , //   ButtonRoundTrainOpenLCBNext.Gradient        
         0                     , //   ButtonRoundTrainOpenLCBNext.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundTrainOpenLCBNext.Gradient_Start_Color    
         0x630C                , //   ButtonRoundTrainOpenLCBNext.Gradient_End_Color    
         0xC618                , //   ButtonRoundTrainOpenLCBNext.Color           
         3                     , //   ButtonRoundTrainOpenLCBNext.CornerRadius           
         1                     , //   ButtonRoundTrainOpenLCBNext.PressColEnabled 
         0xE71C                , //   ButtonRoundTrainOpenLCBNext.Press_Color     
         0                     , //    ButtonRoundTrainOpenLCBNext.OnUpPtr
         0                     , //    ButtonRoundTrainOpenLCBNext.OnDownPtr
         0                     , //    ButtonRoundTrainOpenLCBNext.OnClickPtr
         0                       //    ButtonRoundTrainOpenLCBNext.OnPressPtr
         ); code; far;

    const ButtonRoundTrainOpenLCBPrevious_Caption : string[7] = 'Prevous'; code; far;
    const ButtonRoundTrainOpenLCBPrevious : TCButton_Round = 
         (
         3                     , //   ButtonRoundTrainOpenLCBPrevious.OwnerScreenID
         7                     , //   ButtonRoundTrainOpenLCBPrevious.Order           
         100                   , //   ButtonRoundTrainOpenLCBPrevious.Left            
         211                   , //   ButtonRoundTrainOpenLCBPrevious.Top              
         100                   , //   ButtonRoundTrainOpenLCBPrevious.Width            
         29                    , //   ButtonRoundTrainOpenLCBPrevious.Height        
         0                     , //   ButtonRoundTrainOpenLCBPrevious.Pen_Width          
         0x0000                , //   ButtonRoundTrainOpenLCBPrevious.Pen_Color       
         1                     , //   ButtonRoundTrainOpenLCBPrevious.Visible         
         1                     , //   ButtonRoundTrainOpenLCBPrevious.Active           
         1                     , //   ButtonRoundTrainOpenLCBPrevious.Transparent     
         @ButtonRoundTrainOpenLCBPrevious_Caption, //   ButtonRoundTrainOpenLCBPrevious.Caption        
         _taCenter             , //   ButtonRoundTrainOpenLCBPrevious.TextAlign        
         @Tahoma16x19_Regular  , //   ButtonRoundTrainOpenLCBPrevious.FontName        
         0x0000                , //   ButtonRoundTrainOpenLCBPrevious.FontColor       
         1                     , //   ButtonRoundTrainOpenLCBPrevious.Gradient        
         0                     , //   ButtonRoundTrainOpenLCBPrevious.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundTrainOpenLCBPrevious.Gradient_Start_Color    
         0x630C                , //   ButtonRoundTrainOpenLCBPrevious.Gradient_End_Color    
         0xC618                , //   ButtonRoundTrainOpenLCBPrevious.Color           
         3                     , //   ButtonRoundTrainOpenLCBPrevious.CornerRadius           
         1                     , //   ButtonRoundTrainOpenLCBPrevious.PressColEnabled 
         0xE71C                , //   ButtonRoundTrainOpenLCBPrevious.Press_Color     
         0                     , //    ButtonRoundTrainOpenLCBPrevious.OnUpPtr
         0                     , //    ButtonRoundTrainOpenLCBPrevious.OnDownPtr
         0                     , //    ButtonRoundTrainOpenLCBPrevious.OnClickPtr
         0                       //    ButtonRoundTrainOpenLCBPrevious.OnPressPtr
         ); code; far;

    const ButtonRoundTrainOpenLCBCancel_Caption : string[6] = 'Cancel'; code; far;
    const ButtonRoundTrainOpenLCBCancel : TCButton_Round = 
         (
         3                     , //   ButtonRoundTrainOpenLCBCancel.OwnerScreenID
         8                     , //   ButtonRoundTrainOpenLCBCancel.Order           
         200                   , //   ButtonRoundTrainOpenLCBCancel.Left            
         211                   , //   ButtonRoundTrainOpenLCBCancel.Top              
         120                   , //   ButtonRoundTrainOpenLCBCancel.Width            
         29                    , //   ButtonRoundTrainOpenLCBCancel.Height        
         0                     , //   ButtonRoundTrainOpenLCBCancel.Pen_Width          
         0x0000                , //   ButtonRoundTrainOpenLCBCancel.Pen_Color       
         1                     , //   ButtonRoundTrainOpenLCBCancel.Visible         
         1                     , //   ButtonRoundTrainOpenLCBCancel.Active           
         1                     , //   ButtonRoundTrainOpenLCBCancel.Transparent     
         @ButtonRoundTrainOpenLCBCancel_Caption, //   ButtonRoundTrainOpenLCBCancel.Caption        
         _taCenter             , //   ButtonRoundTrainOpenLCBCancel.TextAlign        
         @Tahoma16x19_Regular  , //   ButtonRoundTrainOpenLCBCancel.FontName        
         0x0000                , //   ButtonRoundTrainOpenLCBCancel.FontColor       
         1                     , //   ButtonRoundTrainOpenLCBCancel.Gradient        
         0                     , //   ButtonRoundTrainOpenLCBCancel.Gradient_Orientation    
         0xFFFF                , //   ButtonRoundTrainOpenLCBCancel.Gradient_Start_Color    
         0x630C                , //   ButtonRoundTrainOpenLCBCancel.Gradient_End_Color    
         0xC618                , //   ButtonRoundTrainOpenLCBCancel.Color           
         3                     , //   ButtonRoundTrainOpenLCBCancel.CornerRadius           
         1                     , //   ButtonRoundTrainOpenLCBCancel.PressColEnabled 
         0xE71C                , //   ButtonRoundTrainOpenLCBCancel.Press_Color     
         0                     , //    ButtonRoundTrainOpenLCBCancel.OnUpPtr
         0                     , //    ButtonRoundTrainOpenLCBCancel.OnDownPtr
         @ButtonRoundTrainOpenLCBCancelOnClick, //    ButtonRoundTrainOpenLCBCancel.OnClickPtr
         0                       //    ButtonRoundTrainOpenLCBCancel.OnPressPtr
         ); code; far;

      const Screen5_Buttons_Round  : array[6] of ^TButton_Round =
         (
         @ButtonRoundTrainOpenLCB1,
         @ButtonRoundTrainOpenLCB2,
         @ButtonRoundTrainOpenLCB3,
         @ButtonRoundTrainOpenLCB4,
         @ButtonRoundTrainOpenLCB5,
         @ButtonRound6         
         ); code; far;
      const Screen5_CButtons_Round  : array[3] of ^TCButton_Round =
         (
         @ButtonRoundTrainOpenLCBNext,
         @ButtonRoundTrainOpenLCBPrevious,
         @ButtonRoundTrainOpenLCBCancel
         ); code; far;

const DScreens : array[4] of ^TScreen =
         (
                  @Throttle             ,//   ThrottleScreenID = 0
                  @TrainSelectorDCC     ,//   TrainSelectorDCCScreenID = 1
                  @TrainSelectWizard    ,//   TrainSelectWizardScreenID = 2
                  @TrainSelectorOpenLCB //   TrainSelectorOpenLCBScreenID = 3
         ); code; far;
const CScreens : array[1] of ^TCScreen = 
         (
                  @Start                //   StartScreenID = 32768
         ); code; far;

var CurrentMyScreen : TMyScreen;
implementation



procedure Auxiliary_Code();
  begin
    // Place your code here
  end;

// set index
procedure Set_Index(index : byte);
  begin
    TFT_RS := 0;
    Lo(LATA) := index;
    TFT_WR := 0;
    TFT_WR := 1;
  end;

// write command
procedure Write_Command(cmd : byte);
  begin
    TFT_RS := 1;
    Lo(LATA) := cmd;
    TFT_WR := 0;
    TFT_WR := 1;
  end;

// write data
procedure Write_Data(_data : word);
  begin
    TFT_RS := 1;
    Lo(LATE) := Hi(_data);
    Lo(LATA) := Lo(_data);
    TFT_WR := 0;
    TFT_WR := 1;
  end;


procedure Init_ADC();
  begin
    AD1PCFGL := 0xCFFF;
    AD1PCFGH := 0xCFFF;
    ADC1_Init();
  end;
procedure InitializeTouchPanel(); // static
  begin
    Init_ADC();
    TFT_Set_Active(@Set_Index, @Write_Command, @Write_Data);
    TFT_Init(320, 240);

    TP_TFT_Init(320, 240, 13, 12);                                  // Initialize touch panel
    TP_TFT_Set_ADC_Threshold(ADC_THRESHOLD);                            // Set touch panel ADC threshold

    PenDown := 0;
    PressedObject := 0;
    PressedObjectType := -1;
  end;


procedure Calibrate();
  begin
    TFT_Set_Pen(CL_WHITE, 3);
    TFT_Set_Font(@TFT_defaultFont, CL_WHITE, FO_HORIZONTAL);
    TFT_Write_Text('Touch selected corners for calibration', 50, 80);
    TFT_Line(315, 1, 319, 1);
    TFT_Line(310, 10, 319, 1);
    TFT_Line(319, 5, 319, 1);
    TFT_Write_Text('first here', 230, 20);

    TP_TFT_Calibrate_Min();                      // Calibration of TP minimum
    Delay_ms(500);

    TFT_Set_Pen(CL_BLACK, 3);
    TFT_Set_Font(@TFT_defaultFont, CL_BLACK, FO_HORIZONTAL);
    TFT_Line(315, 1, 319, 1);
    TFT_Line(310, 10, 319, 1);
    TFT_Line(319, 5, 319, 1);
    TFT_Write_Text('first here', 230, 20);

    TFT_Set_Pen(CL_WHITE, 3);
    TFT_Set_Font(@TFT_defaultFont, CL_WHITE, FO_HORIZONTAL);
    TFT_Line(0, 239, 0, 235);
    TFT_Line(0, 239, 5, 239);
    TFT_Line(0, 239, 10, 230);
    TFT_Write_Text('now here ', 15, 200);

    TP_TFT_Calibrate_Max();                       // Calibration of TP maximum
    Delay_ms(500);
  end;


procedure InitializeObjects();    // static
  begin

    Throttle.Color                     := 0xD6BA;
    Throttle.Width                     := 320;
    Throttle.Height                    := 240;
    Throttle.ButtonsCount              := 0;
    Throttle.Buttons_RoundCount        := 9;
    Throttle.Buttons_Round             := @Screen2_Buttons_Round;
    Throttle.CButtons_RoundCount       := 8;
    Throttle.CButtons_Round            := @Screen2_CButtons_Round;
    Throttle.LabelsCount               := 0;
    Throttle.CBoxesCount               := 1;
    Throttle.CBoxes                    := @Screen2_CBoxes;
    Throttle.Boxes_RoundCount          := 0;
    Throttle.CBoxes_RoundCount         := 0;
    Throttle.LinesCount                := 2;
    Throttle.Lines                     := @Screen2_Lines;
    Throttle.RadioButtonsCount         := 2;
    Throttle.RadioButtons              := @Screen2_RadioButtons;
    Throttle.ProgressBarsCount         := 1;
    Throttle.ProgressBars              := @Screen2_ProgressBars;
    Throttle.ObjectsCount              := 23;

    TrainSelectorDCC.Color                     := 0xD6BA;
    TrainSelectorDCC.Width                     := 320;
    TrainSelectorDCC.Height                    := 240;
    TrainSelectorDCC.ButtonsCount              := 0;
    TrainSelectorDCC.Buttons_RoundCount        := 0;
    TrainSelectorDCC.CButtons_RoundCount       := 14;
    TrainSelectorDCC.CButtons_Round            := @Screen3_CButtons_Round;
    TrainSelectorDCC.LabelsCount               := 1;
    TrainSelectorDCC.Labels                    := @Screen3_Labels;
    TrainSelectorDCC.CBoxesCount               := 1;
    TrainSelectorDCC.CBoxes                    := @Screen3_CBoxes;
    TrainSelectorDCC.Boxes_RoundCount          := 2;
    TrainSelectorDCC.Boxes_Round               := @Screen3_Boxes_Round;
    TrainSelectorDCC.CBoxes_RoundCount         := 1;
    TrainSelectorDCC.CBoxes_Round              := @Screen3_CBoxes_Round;
    TrainSelectorDCC.LinesCount                := 3;
    TrainSelectorDCC.Lines                     := @Screen3_Lines;
    TrainSelectorDCC.RadioButtonsCount         := 5;
    TrainSelectorDCC.RadioButtons              := @Screen3_RadioButtons;
    TrainSelectorDCC.ProgressBarsCount         := 0;
    TrainSelectorDCC.ObjectsCount              := 27;

    TrainSelectWizard.Color                     := 0xD6BA;
    TrainSelectWizard.Width                     := 320;
    TrainSelectWizard.Height                    := 240;
    TrainSelectWizard.ButtonsCount              := 1;
    TrainSelectWizard.Buttons                   := @Screen4_Buttons;
    TrainSelectWizard.Buttons_RoundCount        := 2;
    TrainSelectWizard.Buttons_Round             := @Screen4_Buttons_Round;
    TrainSelectWizard.CButtons_RoundCount       := 0;
    TrainSelectWizard.LabelsCount               := 2;
    TrainSelectWizard.Labels                    := @Screen4_Labels;
    TrainSelectWizard.CBoxesCount               := 1;
    TrainSelectWizard.CBoxes                    := @Screen4_CBoxes;
    TrainSelectWizard.Boxes_RoundCount          := 0;
    TrainSelectWizard.CBoxes_RoundCount         := 0;
    TrainSelectWizard.LinesCount                := 0;
    TrainSelectWizard.RadioButtonsCount         := 0;
    TrainSelectWizard.ProgressBarsCount         := 0;
    TrainSelectWizard.ObjectsCount              := 6;

    TrainSelectorOpenLCB.Color                     := 0xD6BA;
    TrainSelectorOpenLCB.Width                     := 320;
    TrainSelectorOpenLCB.Height                    := 240;
    TrainSelectorOpenLCB.ButtonsCount              := 0;
    TrainSelectorOpenLCB.Buttons_RoundCount        := 6;
    TrainSelectorOpenLCB.Buttons_Round             := @Screen5_Buttons_Round;
    TrainSelectorOpenLCB.CButtons_RoundCount       := 3;
    TrainSelectorOpenLCB.CButtons_Round            := @Screen5_CButtons_Round;
    TrainSelectorOpenLCB.LabelsCount               := 0;
    TrainSelectorOpenLCB.CBoxesCount               := 0;
    TrainSelectorOpenLCB.Boxes_RoundCount          := 0;
    TrainSelectorOpenLCB.CBoxes_RoundCount         := 0;
    TrainSelectorOpenLCB.LinesCount                := 0;
    TrainSelectorOpenLCB.RadioButtonsCount         := 0;
    TrainSelectorOpenLCB.ProgressBarsCount         := 0;
    TrainSelectorOpenLCB.ObjectsCount              := 9;


    BoxRoundStartBkGnd.OwnerScreenID       := 32768;
    BoxRoundStartBkGnd.Order               := 3;
    BoxRoundStartBkGnd.Left                := 57;
    BoxRoundStartBkGnd.Top                 := 70;
    BoxRoundStartBkGnd.Width               := 202;
    BoxRoundStartBkGnd.Height              := 101;
    BoxRoundStartBkGnd.Pen_Width           := 1;
    BoxRoundStartBkGnd.Pen_Color           := 0x0000;
    BoxRoundStartBkGnd.Visible             := 1;
    BoxRoundStartBkGnd.Active              := 0;
    BoxRoundStartBkGnd.Transparent         := 1;
    BoxRoundStartBkGnd.Gradient            := 1;
    BoxRoundStartBkGnd.Gradient_Orientation := 0;
    BoxRoundStartBkGnd.Gradient_Start_Color := 0xFFFF;
    BoxRoundStartBkGnd.Gradient_End_Color  := 0xC618;
    BoxRoundStartBkGnd.Color               := 0xC618;
    BoxRoundStartBkGnd.PressColEnabled     := 1;
    BoxRoundStartBkGnd.Press_Color         := 0x8410;
    BoxRoundStartBkGnd.Corner_Radius       := 3;
    BoxRoundStartBkGnd.OnUpPtr             := 0;
    BoxRoundStartBkGnd.OnDownPtr           := 0;
    BoxRoundStartBkGnd.OnClickPtr          := 0;
    BoxRoundStartBkGnd.OnPressPtr          := 0;

    ImageStart.OwnerScreenID       := 32768;
    ImageStart.Order               := 4;
    ImageStart.Left                := 82;
    ImageStart.Top                 := 89;
    ImageStart.Width               := 155;
    ImageStart.Height              := 64;
    ImageStart.Picture_Type        := 0;
    ImageStart.Picture_Ratio       := 1;
    ImageStart.Picture_Name        := @OpenLCB_bmp;
    ImageStart.Visible             := 1;
    ImageStart.Active              := 1;
    ImageStart.OnUpPtr             := 0;
    ImageStart.OnDownPtr           := 0;
    ImageStart.OnClickPtr          := 0;
    ImageStart.OnPressPtr          := 0;

    ProgressBarStart.OwnerScreenID       := 32768;
    ProgressBarStart.Order               := 5;
    ProgressBarStart.Left                := 60;
    ProgressBarStart.Top                 := 215;
    ProgressBarStart.Width               := 193;
    ProgressBarStart.Height              := 17;
    ProgressBarStart.Pen_Width           := 1;
    ProgressBarStart.Pen_Color           := 0x0000;
    ProgressBarStart.Visible             := 1;
    ProgressBarStart.Transparent         := 1;
    ProgressBarStart.Caption             := @ProgressBarStart_Caption;
    ProgressBarStart_Caption             := '0%';
    ProgressBarStart.FontName            := @Tahoma11x13_Regular;
    ProgressBarStart.Font_Color          := 0x0000;
    ProgressBarStart.Gradient            := 1;
    ProgressBarStart.Gradient_Orientation := 0;
    ProgressBarStart.Gradient_Start_Color := 0xFFFF;
    ProgressBarStart.Gradient_End_Color  := 0x07E0;
    ProgressBarStart.Color               := 0xA65E;
    ProgressBarStart.Background_Color    := 0x8410;
    ProgressBarStart.Min                 := 0;
    ProgressBarStart.Max                 := 25;
    ProgressBarStart.Position            := 0;
    ProgressBarStart.Show_Position       := 1;
    ProgressBarStart.Show_Percentage     := 1;
    ProgressBarStart.Smooth              := 1;
    ProgressBarStart.Rounded             := 1;
    ProgressBarStart.Corner_Radius       := 1;

    ButtonLoginMessage.OwnerScreenID       := 32768;
    ButtonLoginMessage.Order               := 6;
    ButtonLoginMessage.Left                := 6;
    ButtonLoginMessage.Top                 := 195;
    ButtonLoginMessage.Width               := 310;
    ButtonLoginMessage.Height              := 17;
    ButtonLoginMessage.Pen_Width           := 0;
    ButtonLoginMessage.Pen_Color           := 0x0000;
    ButtonLoginMessage.Visible             := 1;
    ButtonLoginMessage.Active              := 0;
    ButtonLoginMessage.Transparent         := 1;
    ButtonLoginMessage.Caption             := @ButtonLoginMessage_Caption;
    ButtonLoginMessage_Caption             := 'Booting....';
    ButtonLoginMessage.TextAlign           := _taCenter;
    ButtonLoginMessage.FontName            := @Tahoma11x13_Regular;
    ButtonLoginMessage.PressColEnabled     := 1;
    ButtonLoginMessage.Font_Color          := 0xCE79;
    ButtonLoginMessage.Gradient            := 0;
    ButtonLoginMessage.Gradient_Orientation := 0;
    ButtonLoginMessage.Gradient_Start_Color := 0xFFFF;
    ButtonLoginMessage.Gradient_End_Color  := 0xC618;
    ButtonLoginMessage.Color               := 0x2124;
    ButtonLoginMessage.Press_Color         := 0xE71C;
    ButtonLoginMessage.OnUpPtr             := 0;
    ButtonLoginMessage.OnDownPtr           := 0;
    ButtonLoginMessage.OnClickPtr          := 0;
    ButtonLoginMessage.OnPressPtr          := 0;

    ButtonRoundF0.OwnerScreenID       := 0;
    ButtonRoundF0.Order               := 3;
    ButtonRoundF0.Left                := 5;
    ButtonRoundF0.Top                 := 0;
    ButtonRoundF0.Width               := 125;
    ButtonRoundF0.Height              := 35;
    ButtonRoundF0.Pen_Width           := 0;
    ButtonRoundF0.Pen_Color           := 0x0000;
    ButtonRoundF0.Visible             := 1;
    ButtonRoundF0.Active              := 1;
    ButtonRoundF0.Transparent         := 1;
    ButtonRoundF0.Caption             := @ButtonRoundF0_Caption;
    ButtonRoundF0_Caption             := '';
    ButtonRoundF0.TextAlign           := _taCenter;
    ButtonRoundF0.FontName            := @Tahoma11x13_Regular;
    ButtonRoundF0.PressColEnabled     := 1;
    ButtonRoundF0.Font_Color          := 0x0000;
    ButtonRoundF0.Gradient            := 1;
    ButtonRoundF0.Gradient_Orientation := 0;
    ButtonRoundF0.Gradient_Start_Color := 0xFFFF;
    ButtonRoundF0.Gradient_End_Color  := 0x630C;
    ButtonRoundF0.Color               := 0xC618;
    ButtonRoundF0.Press_Color         := 0xE71C;
    ButtonRoundF0.Corner_Radius       := 1;
    ButtonRoundF0.OnUpPtr             := 0;
    ButtonRoundF0.OnDownPtr           := 0;
    ButtonRoundF0.OnClickPtr          := @ButtonRoundF0OnClick;
    ButtonRoundF0.OnPressPtr          := 0;

    ButtonRoundF1.OwnerScreenID       := 0;
    ButtonRoundF1.Order               := 4;
    ButtonRoundF1.Left                := 5;
    ButtonRoundF1.Top                 := 35;
    ButtonRoundF1.Width               := 125;
    ButtonRoundF1.Height              := 35;
    ButtonRoundF1.Pen_Width           := 0;
    ButtonRoundF1.Pen_Color           := 0x0000;
    ButtonRoundF1.Visible             := 1;
    ButtonRoundF1.Active              := 1;
    ButtonRoundF1.Transparent         := 1;
    ButtonRoundF1.Caption             := @ButtonRoundF1_Caption;
    ButtonRoundF1_Caption             := '';
    ButtonRoundF1.TextAlign           := _taCenter;
    ButtonRoundF1.FontName            := @Tahoma11x13_Regular;
    ButtonRoundF1.PressColEnabled     := 1;
    ButtonRoundF1.Font_Color          := 0x0000;
    ButtonRoundF1.Gradient            := 1;
    ButtonRoundF1.Gradient_Orientation := 0;
    ButtonRoundF1.Gradient_Start_Color := 0xFFFF;
    ButtonRoundF1.Gradient_End_Color  := 0x630C;
    ButtonRoundF1.Color               := 0xC618;
    ButtonRoundF1.Press_Color         := 0xE71C;
    ButtonRoundF1.Corner_Radius       := 1;
    ButtonRoundF1.OnUpPtr             := 0;
    ButtonRoundF1.OnDownPtr           := 0;
    ButtonRoundF1.OnClickPtr          := @ButtonRoundF1OnClick;
    ButtonRoundF1.OnPressPtr          := 0;

    ButtonRoundF2.OwnerScreenID       := 0;
    ButtonRoundF2.Order               := 5;
    ButtonRoundF2.Left                := 5;
    ButtonRoundF2.Top                 := 70;
    ButtonRoundF2.Width               := 125;
    ButtonRoundF2.Height              := 35;
    ButtonRoundF2.Pen_Width           := 0;
    ButtonRoundF2.Pen_Color           := 0x0000;
    ButtonRoundF2.Visible             := 1;
    ButtonRoundF2.Active              := 1;
    ButtonRoundF2.Transparent         := 1;
    ButtonRoundF2.Caption             := @ButtonRoundF2_Caption;
    ButtonRoundF2_Caption             := '';
    ButtonRoundF2.TextAlign           := _taCenter;
    ButtonRoundF2.FontName            := @Tahoma11x13_Regular;
    ButtonRoundF2.PressColEnabled     := 1;
    ButtonRoundF2.Font_Color          := 0x0000;
    ButtonRoundF2.Gradient            := 1;
    ButtonRoundF2.Gradient_Orientation := 0;
    ButtonRoundF2.Gradient_Start_Color := 0xFFFF;
    ButtonRoundF2.Gradient_End_Color  := 0x630C;
    ButtonRoundF2.Color               := 0xC618;
    ButtonRoundF2.Press_Color         := 0xE71C;
    ButtonRoundF2.Corner_Radius       := 1;
    ButtonRoundF2.OnUpPtr             := 0;
    ButtonRoundF2.OnDownPtr           := 0;
    ButtonRoundF2.OnClickPtr          := @ButtonRoundF2OnClick;
    ButtonRoundF2.OnPressPtr          := 0;

    ButtonRoundF3.OwnerScreenID       := 0;
    ButtonRoundF3.Order               := 6;
    ButtonRoundF3.Left                := 5;
    ButtonRoundF3.Top                 := 105;
    ButtonRoundF3.Width               := 125;
    ButtonRoundF3.Height              := 35;
    ButtonRoundF3.Pen_Width           := 0;
    ButtonRoundF3.Pen_Color           := 0x0000;
    ButtonRoundF3.Visible             := 1;
    ButtonRoundF3.Active              := 1;
    ButtonRoundF3.Transparent         := 1;
    ButtonRoundF3.Caption             := @ButtonRoundF3_Caption;
    ButtonRoundF3_Caption             := '';
    ButtonRoundF3.TextAlign           := _taCenter;
    ButtonRoundF3.FontName            := @Tahoma11x13_Regular;
    ButtonRoundF3.PressColEnabled     := 1;
    ButtonRoundF3.Font_Color          := 0x0000;
    ButtonRoundF3.Gradient            := 1;
    ButtonRoundF3.Gradient_Orientation := 0;
    ButtonRoundF3.Gradient_Start_Color := 0xFFFF;
    ButtonRoundF3.Gradient_End_Color  := 0x630C;
    ButtonRoundF3.Color               := 0xC618;
    ButtonRoundF3.Press_Color         := 0xE71C;
    ButtonRoundF3.Corner_Radius       := 1;
    ButtonRoundF3.OnUpPtr             := 0;
    ButtonRoundF3.OnDownPtr           := 0;
    ButtonRoundF3.OnClickPtr          := @ButtonRoundF3OnClick;
    ButtonRoundF3.OnPressPtr          := 0;

    ButtonRoundF4.OwnerScreenID       := 0;
    ButtonRoundF4.Order               := 7;
    ButtonRoundF4.Left                := 5;
    ButtonRoundF4.Top                 := 140;
    ButtonRoundF4.Width               := 125;
    ButtonRoundF4.Height              := 35;
    ButtonRoundF4.Pen_Width           := 0;
    ButtonRoundF4.Pen_Color           := 0x0000;
    ButtonRoundF4.Visible             := 1;
    ButtonRoundF4.Active              := 1;
    ButtonRoundF4.Transparent         := 1;
    ButtonRoundF4.Caption             := @ButtonRoundF4_Caption;
    ButtonRoundF4_Caption             := '';
    ButtonRoundF4.TextAlign           := _taCenter;
    ButtonRoundF4.FontName            := @Tahoma11x13_Regular;
    ButtonRoundF4.PressColEnabled     := 1;
    ButtonRoundF4.Font_Color          := 0x0000;
    ButtonRoundF4.Gradient            := 1;
    ButtonRoundF4.Gradient_Orientation := 0;
    ButtonRoundF4.Gradient_Start_Color := 0xFFFF;
    ButtonRoundF4.Gradient_End_Color  := 0x630C;
    ButtonRoundF4.Color               := 0xC618;
    ButtonRoundF4.Press_Color         := 0xE71C;
    ButtonRoundF4.Corner_Radius       := 1;
    ButtonRoundF4.OnUpPtr             := 0;
    ButtonRoundF4.OnDownPtr           := 0;
    ButtonRoundF4.OnClickPtr          := @ButtonRoundF4OnClick;
    ButtonRoundF4.OnPressPtr          := 0;

    ButtonRoundF5.OwnerScreenID       := 0;
    ButtonRoundF5.Order               := 8;
    ButtonRoundF5.Left                := 5;
    ButtonRoundF5.Top                 := 175;
    ButtonRoundF5.Width               := 125;
    ButtonRoundF5.Height              := 35;
    ButtonRoundF5.Pen_Width           := 0;
    ButtonRoundF5.Pen_Color           := 0x0000;
    ButtonRoundF5.Visible             := 1;
    ButtonRoundF5.Active              := 1;
    ButtonRoundF5.Transparent         := 1;
    ButtonRoundF5.Caption             := @ButtonRoundF5_Caption;
    ButtonRoundF5_Caption             := '';
    ButtonRoundF5.TextAlign           := _taCenter;
    ButtonRoundF5.FontName            := @Tahoma11x13_Regular;
    ButtonRoundF5.PressColEnabled     := 1;
    ButtonRoundF5.Font_Color          := 0x0000;
    ButtonRoundF5.Gradient            := 1;
    ButtonRoundF5.Gradient_Orientation := 0;
    ButtonRoundF5.Gradient_Start_Color := 0xFFFF;
    ButtonRoundF5.Gradient_End_Color  := 0x630C;
    ButtonRoundF5.Color               := 0xC618;
    ButtonRoundF5.Press_Color         := 0xE71C;
    ButtonRoundF5.Corner_Radius       := 1;
    ButtonRoundF5.OnUpPtr             := 0;
    ButtonRoundF5.OnDownPtr           := 0;
    ButtonRoundF5.OnClickPtr          := @ButtonRoundF5OnClick;
    ButtonRoundF5.OnPressPtr          := 0;

    ProgressBarSpeed.OwnerScreenID       := 0;
    ProgressBarSpeed.Order               := 12;
    ProgressBarSpeed.Left                := 145;
    ProgressBarSpeed.Top                 := 185;
    ProgressBarSpeed.Width               := 170;
    ProgressBarSpeed.Height              := 20;
    ProgressBarSpeed.Pen_Width           := 0;
    ProgressBarSpeed.Pen_Color           := 0x0000;
    ProgressBarSpeed.Visible             := 1;
    ProgressBarSpeed.Transparent         := 1;
    ProgressBarSpeed.Caption             := @ProgressBarSpeed_Caption;
    ProgressBarSpeed_Caption             := '0';
    ProgressBarSpeed.FontName            := @Tahoma11x13_Regular;
    ProgressBarSpeed.Font_Color          := 0x0000;
    ProgressBarSpeed.Gradient            := 1;
    ProgressBarSpeed.Gradient_Orientation := 0;
    ProgressBarSpeed.Gradient_Start_Color := 0x843F;
    ProgressBarSpeed.Gradient_End_Color  := 0x001F;
    ProgressBarSpeed.Color               := 0xA65E;
    ProgressBarSpeed.Background_Color    := 0xC618;
    ProgressBarSpeed.Min                 := 0;
    ProgressBarSpeed.Max                 := 100;
    ProgressBarSpeed.Position            := 0;
    ProgressBarSpeed.Show_Position       := 1;
    ProgressBarSpeed.Show_Percentage     := 0;
    ProgressBarSpeed.Smooth              := 1;
    ProgressBarSpeed.Rounded             := 0;
    ProgressBarSpeed.Corner_Radius       := 4;

    ButtonRoundTrainWizard.OwnerScreenID       := 0;
    ButtonRoundTrainWizard.Order               := 13;
    ButtonRoundTrainWizard.Left                := 180;
    ButtonRoundTrainWizard.Top                 := 211;
    ButtonRoundTrainWizard.Width               := 85;
    ButtonRoundTrainWizard.Height              := 28;
    ButtonRoundTrainWizard.Pen_Width           := 0;
    ButtonRoundTrainWizard.Pen_Color           := 0x0000;
    ButtonRoundTrainWizard.Visible             := 1;
    ButtonRoundTrainWizard.Active              := 1;
    ButtonRoundTrainWizard.Transparent         := 1;
    ButtonRoundTrainWizard.Caption             := @ButtonRoundTrainWizard_Caption;
    ButtonRoundTrainWizard_Caption             := '3';
    ButtonRoundTrainWizard.TextAlign           := _taCenter;
    ButtonRoundTrainWizard.FontName            := @Tahoma16x19_Regular;
    ButtonRoundTrainWizard.PressColEnabled     := 1;
    ButtonRoundTrainWizard.Font_Color          := 0x0000;
    ButtonRoundTrainWizard.Gradient            := 1;
    ButtonRoundTrainWizard.Gradient_Orientation := 0;
    ButtonRoundTrainWizard.Gradient_Start_Color := 0xFFFF;
    ButtonRoundTrainWizard.Gradient_End_Color  := 0x630C;
    ButtonRoundTrainWizard.Color               := 0xC618;
    ButtonRoundTrainWizard.Press_Color         := 0xE71C;
    ButtonRoundTrainWizard.Corner_Radius       := 3;
    ButtonRoundTrainWizard.OnUpPtr             := 0;
    ButtonRoundTrainWizard.OnDownPtr           := 0;
    ButtonRoundTrainWizard.OnClickPtr          := @ButtonRoundTrainWizardOnClick;
    ButtonRoundTrainWizard.OnPressPtr          := 0;

    Line3.OwnerScreenID       := 0;
    Line3.Order               := 14;
    Line3.First_Point_X       := 136;
    Line3.First_Point_Y       := 0;
    Line3.Second_Point_X      := 136;
    Line3.Second_Point_Y      := 210;
    Line3.Visible             := 1;
    Line3.Pen_Width           := 3;
    Line3.Color               := 0x8410;

    Line4.OwnerScreenID       := 0;
    Line4.Order               := 15;
    Line4.First_Point_X       := 139;
    Line4.First_Point_Y       := 35;
    Line4.Second_Point_X      := 139;
    Line4.Second_Point_Y      := 245;
    Line4.Visible             := 1;
    Line4.Pen_Width           := 3;
    Line4.Color               := 0xC618;

    ButtonRoundTrainLongShort.OwnerScreenID       := 0;
    ButtonRoundTrainLongShort.Order               := 16;
    ButtonRoundTrainLongShort.Left                := 300;
    ButtonRoundTrainLongShort.Top                 := 211;
    ButtonRoundTrainLongShort.Width               := 20;
    ButtonRoundTrainLongShort.Height              := 28;
    ButtonRoundTrainLongShort.Pen_Width           := 0;
    ButtonRoundTrainLongShort.Pen_Color           := 0x0000;
    ButtonRoundTrainLongShort.Visible             := 1;
    ButtonRoundTrainLongShort.Active              := 0;
    ButtonRoundTrainLongShort.Transparent         := 1;
    ButtonRoundTrainLongShort.Caption             := @ButtonRoundTrainLongShort_Caption;
    ButtonRoundTrainLongShort_Caption             := '';
    ButtonRoundTrainLongShort.TextAlign           := _taCenter;
    ButtonRoundTrainLongShort.FontName            := @Tahoma16x19_Regular;
    ButtonRoundTrainLongShort.PressColEnabled     := 1;
    ButtonRoundTrainLongShort.Font_Color          := 0x0000;
    ButtonRoundTrainLongShort.Gradient            := 1;
    ButtonRoundTrainLongShort.Gradient_Orientation := 0;
    ButtonRoundTrainLongShort.Gradient_Start_Color := 0xFFFF;
    ButtonRoundTrainLongShort.Gradient_End_Color  := 0x630C;
    ButtonRoundTrainLongShort.Color               := 0xC618;
    ButtonRoundTrainLongShort.Press_Color         := 0xE71C;
    ButtonRoundTrainLongShort.Corner_Radius       := 3;
    ButtonRoundTrainLongShort.OnUpPtr             := 0;
    ButtonRoundTrainLongShort.OnDownPtr           := 0;
    ButtonRoundTrainLongShort.OnClickPtr          := 0;
    ButtonRoundTrainLongShort.OnPressPtr          := 0;

    ButtonRoundTrainSpeedStep.OwnerScreenID       := 0;
    ButtonRoundTrainSpeedStep.Order               := 17;
    ButtonRoundTrainSpeedStep.Left                := 265;
    ButtonRoundTrainSpeedStep.Top                 := 211;
    ButtonRoundTrainSpeedStep.Width               := 36;
    ButtonRoundTrainSpeedStep.Height              := 28;
    ButtonRoundTrainSpeedStep.Pen_Width           := 0;
    ButtonRoundTrainSpeedStep.Pen_Color           := 0x0000;
    ButtonRoundTrainSpeedStep.Visible             := 1;
    ButtonRoundTrainSpeedStep.Active              := 0;
    ButtonRoundTrainSpeedStep.Transparent         := 1;
    ButtonRoundTrainSpeedStep.Caption             := @ButtonRoundTrainSpeedStep_Caption;
    ButtonRoundTrainSpeedStep_Caption             := '';
    ButtonRoundTrainSpeedStep.TextAlign           := _taCenter;
    ButtonRoundTrainSpeedStep.FontName            := @Tahoma16x19_Regular;
    ButtonRoundTrainSpeedStep.PressColEnabled     := 1;
    ButtonRoundTrainSpeedStep.Font_Color          := 0x0000;
    ButtonRoundTrainSpeedStep.Gradient            := 1;
    ButtonRoundTrainSpeedStep.Gradient_Orientation := 0;
    ButtonRoundTrainSpeedStep.Gradient_Start_Color := 0xFFFF;
    ButtonRoundTrainSpeedStep.Gradient_End_Color  := 0x630C;
    ButtonRoundTrainSpeedStep.Color               := 0xC618;
    ButtonRoundTrainSpeedStep.Press_Color         := 0xE71C;
    ButtonRoundTrainSpeedStep.Corner_Radius       := 3;
    ButtonRoundTrainSpeedStep.OnUpPtr             := 0;
    ButtonRoundTrainSpeedStep.OnDownPtr           := 0;
    ButtonRoundTrainSpeedStep.OnClickPtr          := 0;
    ButtonRoundTrainSpeedStep.OnPressPtr          := 0;

    RadioButtonForward.OwnerScreenID       := 0;
    RadioButtonForward.Order               := 19;
    RadioButtonForward.Left                := 160;
    RadioButtonForward.Top                 := 45;
    RadioButtonForward.Width               := 61;
    RadioButtonForward.Height              := 16;
    RadioButtonForward.Pen_Width           := 1;
    RadioButtonForward.Pen_Color           := 0x0000;
    RadioButtonForward.Visible             := 1;
    RadioButtonForward.Active              := 1;
    RadioButtonForward.Checked             := 1;
    RadioButtonForward.Transparent         := 1;
    RadioButtonForward.Caption             := @RadioButtonForward_Caption;
    RadioButtonForward_Caption             := 'Forward';
    RadioButtonForward.TextAlign           := _taLeft;
    RadioButtonForward.FontName            := @Tahoma11x13_Regular;
    RadioButtonForward.PressColEnabled     := 1;
    RadioButtonForward.Font_Color          := 0x0000;
    RadioButtonForward.Gradient            := 1;
    RadioButtonForward.Gradient_Orientation := 0;
    RadioButtonForward.Gradient_Start_Color := 0xFFFF;
    RadioButtonForward.Gradient_End_Color  := 0xC618;
    RadioButtonForward.Color               := 0xC618;
    RadioButtonForward.Press_Color         := 0xE71C;
    RadioButtonForward.Background_Color    := 0x8410;
    RadioButtonForward.OnUpPtr             := 0;
    RadioButtonForward.OnDownPtr           := 0;
    RadioButtonForward.OnClickPtr          := @RadioButtonForwardOnClick;
    RadioButtonForward.OnPressPtr          := 0;

    RadioButtonReverse.OwnerScreenID       := 0;
    RadioButtonReverse.Order               := 20;
    RadioButtonReverse.Left                := 240;
    RadioButtonReverse.Top                 := 45;
    RadioButtonReverse.Width               := 60;
    RadioButtonReverse.Height              := 16;
    RadioButtonReverse.Pen_Width           := 1;
    RadioButtonReverse.Pen_Color           := 0x0000;
    RadioButtonReverse.Visible             := 1;
    RadioButtonReverse.Active              := 1;
    RadioButtonReverse.Checked             := 0;
    RadioButtonReverse.Transparent         := 1;
    RadioButtonReverse.Caption             := @RadioButtonReverse_Caption;
    RadioButtonReverse_Caption             := 'Reverse';
    RadioButtonReverse.TextAlign           := _taLeft;
    RadioButtonReverse.FontName            := @Tahoma11x13_Regular;
    RadioButtonReverse.PressColEnabled     := 1;
    RadioButtonReverse.Font_Color          := 0x0000;
    RadioButtonReverse.Gradient            := 1;
    RadioButtonReverse.Gradient_Orientation := 0;
    RadioButtonReverse.Gradient_Start_Color := 0xFFFF;
    RadioButtonReverse.Gradient_End_Color  := 0xC618;
    RadioButtonReverse.Color               := 0xC618;
    RadioButtonReverse.Press_Color         := 0xE71C;
    RadioButtonReverse.Background_Color    := 0x8410;
    RadioButtonReverse.OnUpPtr             := 0;
    RadioButtonReverse.OnDownPtr           := 0;
    RadioButtonReverse.OnClickPtr          := @RadioButtonReverseOnClick;
    RadioButtonReverse.OnPressPtr          := 0;

    BoxRound2.OwnerScreenID       := 1;
    BoxRound2.Order               := 0;
    BoxRound2.Left                := 180;
    BoxRound2.Top                 := 10;
    BoxRound2.Width               := 135;
    BoxRound2.Height              := 60;
    BoxRound2.Pen_Width           := 0;
    BoxRound2.Pen_Color           := 0x0000;
    BoxRound2.Visible             := 1;
    BoxRound2.Active              := 1;
    BoxRound2.Transparent         := 1;
    BoxRound2.Gradient            := 1;
    BoxRound2.Gradient_Orientation := 0;
    BoxRound2.Gradient_Start_Color := 0xFFFF;
    BoxRound2.Gradient_End_Color  := 0x630C;
    BoxRound2.Color               := 0xC618;
    BoxRound2.PressColEnabled     := 1;
    BoxRound2.Press_Color         := 0xE71C;
    BoxRound2.Corner_Radius       := 1;
    BoxRound2.OnUpPtr             := 0;
    BoxRound2.OnDownPtr           := 0;
    BoxRound2.OnClickPtr          := 0;
    BoxRound2.OnPressPtr          := 0;

    BoxRound1.OwnerScreenID       := 1;
    BoxRound1.Order               := 1;
    BoxRound1.Left                := 180;
    BoxRound1.Top                 := 70;
    BoxRound1.Width               := 135;
    BoxRound1.Height              := 35;
    BoxRound1.Pen_Width           := 0;
    BoxRound1.Pen_Color           := 0x0000;
    BoxRound1.Visible             := 1;
    BoxRound1.Active              := 1;
    BoxRound1.Transparent         := 1;
    BoxRound1.Gradient            := 1;
    BoxRound1.Gradient_Orientation := 0;
    BoxRound1.Gradient_Start_Color := 0xFFFF;
    BoxRound1.Gradient_End_Color  := 0x630C;
    BoxRound1.Color               := 0xC618;
    BoxRound1.PressColEnabled     := 1;
    BoxRound1.Press_Color         := 0xE71C;
    BoxRound1.Corner_Radius       := 1;
    BoxRound1.OnUpPtr             := 0;
    BoxRound1.OnDownPtr           := 0;
    BoxRound1.OnClickPtr          := 0;
    BoxRound1.OnPressPtr          := 0;

    RadioButtonKeyboardShort.OwnerScreenID       := 1;
    RadioButtonKeyboardShort.Order               := 3;
    RadioButtonKeyboardShort.Left                := 192;
    RadioButtonKeyboardShort.Top                 := 80;
    RadioButtonKeyboardShort.Width               := 46;
    RadioButtonKeyboardShort.Height              := 15;
    RadioButtonKeyboardShort.Pen_Width           := 1;
    RadioButtonKeyboardShort.Pen_Color           := 0x0000;
    RadioButtonKeyboardShort.Visible             := 1;
    RadioButtonKeyboardShort.Active              := 1;
    RadioButtonKeyboardShort.Checked             := 0;
    RadioButtonKeyboardShort.Transparent         := 1;
    RadioButtonKeyboardShort.Caption             := @RadioButtonKeyboardShort_Caption;
    RadioButtonKeyboardShort_Caption             := 'Short';
    RadioButtonKeyboardShort.TextAlign           := _taLeft;
    RadioButtonKeyboardShort.FontName            := @Tahoma11x13_Regular;
    RadioButtonKeyboardShort.PressColEnabled     := 1;
    RadioButtonKeyboardShort.Font_Color          := 0x0000;
    RadioButtonKeyboardShort.Gradient            := 1;
    RadioButtonKeyboardShort.Gradient_Orientation := 0;
    RadioButtonKeyboardShort.Gradient_Start_Color := 0xFFFF;
    RadioButtonKeyboardShort.Gradient_End_Color  := 0xC618;
    RadioButtonKeyboardShort.Color               := 0xC618;
    RadioButtonKeyboardShort.Press_Color         := 0xE71C;
    RadioButtonKeyboardShort.Background_Color    := 0x8410;
    RadioButtonKeyboardShort.OnUpPtr             := 0;
    RadioButtonKeyboardShort.OnDownPtr           := 0;
    RadioButtonKeyboardShort.OnClickPtr          := @RadioButtonKeyboardShortOnClick;
    RadioButtonKeyboardShort.OnPressPtr          := 0;

    RadioButtonKeyBoardLong.OwnerScreenID       := 1;
    RadioButtonKeyBoardLong.Order               := 4;
    RadioButtonKeyBoardLong.Left                := 256;
    RadioButtonKeyBoardLong.Top                 := 80;
    RadioButtonKeyBoardLong.Width               := 44;
    RadioButtonKeyBoardLong.Height              := 16;
    RadioButtonKeyBoardLong.Pen_Width           := 1;
    RadioButtonKeyBoardLong.Pen_Color           := 0x0000;
    RadioButtonKeyBoardLong.Visible             := 1;
    RadioButtonKeyBoardLong.Active              := 1;
    RadioButtonKeyBoardLong.Checked             := 1;
    RadioButtonKeyBoardLong.Transparent         := 1;
    RadioButtonKeyBoardLong.Caption             := @RadioButtonKeyBoardLong_Caption;
    RadioButtonKeyBoardLong_Caption             := 'Long';
    RadioButtonKeyBoardLong.TextAlign           := _taLeft;
    RadioButtonKeyBoardLong.FontName            := @Tahoma11x13_Regular;
    RadioButtonKeyBoardLong.PressColEnabled     := 1;
    RadioButtonKeyBoardLong.Font_Color          := 0x0000;
    RadioButtonKeyBoardLong.Gradient            := 1;
    RadioButtonKeyBoardLong.Gradient_Orientation := 0;
    RadioButtonKeyBoardLong.Gradient_Start_Color := 0xFFFF;
    RadioButtonKeyBoardLong.Gradient_End_Color  := 0xC618;
    RadioButtonKeyBoardLong.Color               := 0xC618;
    RadioButtonKeyBoardLong.Press_Color         := 0xE71C;
    RadioButtonKeyBoardLong.Background_Color    := 0x8410;
    RadioButtonKeyBoardLong.OnUpPtr             := 0;
    RadioButtonKeyBoardLong.OnDownPtr           := 0;
    RadioButtonKeyBoardLong.OnClickPtr          := @RadioButtonKeyboardLongOnClick;
    RadioButtonKeyBoardLong.OnPressPtr          := 0;

    LabelKeyboardAddress.OwnerScreenID       := 1;
    LabelKeyboardAddress.Order               := 5;
    LabelKeyboardAddress.Left                := 215;
    LabelKeyboardAddress.Top                 := 25;
    LabelKeyboardAddress.Width               := 68;
    LabelKeyboardAddress.Height              := 32;
    LabelKeyboardAddress.Visible             := 1;
    LabelKeyboardAddress.Active              := 1;
    LabelKeyboardAddress.Caption             := @LabelKeyboardAddress_Caption;
    LabelKeyboardAddress_Caption             := '00003';
    LabelKeyboardAddress.FontName            := @Tahoma24x29_Regular;
    LabelKeyboardAddress.Font_Color          := 0x0000;
    LabelKeyboardAddress.OnUpPtr             := 0;
    LabelKeyboardAddress.OnDownPtr           := 0;
    LabelKeyboardAddress.OnClickPtr          := 0;
    LabelKeyboardAddress.OnPressPtr          := 0;

    LineKeyboard1.OwnerScreenID       := 1;
    LineKeyboard1.Order               := 8;
    LineKeyboard1.First_Point_X       := 175;
    LineKeyboard1.First_Point_Y       := 0;
    LineKeyboard1.Second_Point_X      := 176;
    LineKeyboard1.Second_Point_Y      := 240;
    LineKeyboard1.Visible             := 1;
    LineKeyboard1.Pen_Width           := 1;
    LineKeyboard1.Color               := 0x0000;

    Line1.OwnerScreenID       := 1;
    Line1.Order               := 21;
    Line1.First_Point_X       := 190;
    Line1.First_Point_Y       := 20;
    Line1.Second_Point_X      := 304;
    Line1.Second_Point_Y      := 20;
    Line1.Visible             := 1;
    Line1.Pen_Width           := 2;
    Line1.Color               := 0xC618;

    Line2.OwnerScreenID       := 1;
    Line2.Order               := 22;
    Line2.First_Point_X       := 190;
    Line2.First_Point_Y       := 20;
    Line2.Second_Point_X      := 190;
    Line2.Second_Point_Y      := 59;
    Line2.Visible             := 1;
    Line2.Pen_Width           := 2;
    Line2.Color               := 0xC618;

    RadioButtonKeyboard14Step.OwnerScreenID       := 1;
    RadioButtonKeyboard14Step.Order               := 24;
    RadioButtonKeyboard14Step.Left                := 190;
    RadioButtonKeyboard14Step.Top                 := 110;
    RadioButtonKeyboard14Step.Width               := 58;
    RadioButtonKeyboard14Step.Height              := 16;
    RadioButtonKeyboard14Step.Pen_Width           := 1;
    RadioButtonKeyboard14Step.Pen_Color           := 0x0000;
    RadioButtonKeyboard14Step.Visible             := 1;
    RadioButtonKeyboard14Step.Active              := 1;
    RadioButtonKeyboard14Step.Checked             := 0;
    RadioButtonKeyboard14Step.Transparent         := 1;
    RadioButtonKeyboard14Step.Caption             := @RadioButtonKeyboard14Step_Caption;
    RadioButtonKeyboard14Step_Caption             := '14 Step';
    RadioButtonKeyboard14Step.TextAlign           := _taLeft;
    RadioButtonKeyboard14Step.FontName            := @Tahoma11x13_Regular;
    RadioButtonKeyboard14Step.PressColEnabled     := 1;
    RadioButtonKeyboard14Step.Font_Color          := 0x0000;
    RadioButtonKeyboard14Step.Gradient            := 1;
    RadioButtonKeyboard14Step.Gradient_Orientation := 0;
    RadioButtonKeyboard14Step.Gradient_Start_Color := 0xFFFF;
    RadioButtonKeyboard14Step.Gradient_End_Color  := 0xC618;
    RadioButtonKeyboard14Step.Color               := 0xC618;
    RadioButtonKeyboard14Step.Press_Color         := 0xE71C;
    RadioButtonKeyboard14Step.Background_Color    := 0x8410;
    RadioButtonKeyboard14Step.OnUpPtr             := 0;
    RadioButtonKeyboard14Step.OnDownPtr           := 0;
    RadioButtonKeyboard14Step.OnClickPtr          := @RadioButtonKeyboard14StepOnClick;
    RadioButtonKeyboard14Step.OnPressPtr          := 0;

    RadioButtonKeyboard128Step.OwnerScreenID       := 1;
    RadioButtonKeyboard128Step.Order               := 25;
    RadioButtonKeyboard128Step.Left                := 190;
    RadioButtonKeyboard128Step.Top                 := 135;
    RadioButtonKeyboard128Step.Width               := 64;
    RadioButtonKeyboard128Step.Height              := 16;
    RadioButtonKeyboard128Step.Pen_Width           := 1;
    RadioButtonKeyboard128Step.Pen_Color           := 0x0000;
    RadioButtonKeyboard128Step.Visible             := 1;
    RadioButtonKeyboard128Step.Active              := 1;
    RadioButtonKeyboard128Step.Checked             := 0;
    RadioButtonKeyboard128Step.Transparent         := 1;
    RadioButtonKeyboard128Step.Caption             := @RadioButtonKeyboard128Step_Caption;
    RadioButtonKeyboard128Step_Caption             := '128 Step';
    RadioButtonKeyboard128Step.TextAlign           := _taLeft;
    RadioButtonKeyboard128Step.FontName            := @Tahoma11x13_Regular;
    RadioButtonKeyboard128Step.PressColEnabled     := 1;
    RadioButtonKeyboard128Step.Font_Color          := 0x0000;
    RadioButtonKeyboard128Step.Gradient            := 1;
    RadioButtonKeyboard128Step.Gradient_Orientation := 0;
    RadioButtonKeyboard128Step.Gradient_Start_Color := 0xFFFF;
    RadioButtonKeyboard128Step.Gradient_End_Color  := 0xC618;
    RadioButtonKeyboard128Step.Color               := 0xC618;
    RadioButtonKeyboard128Step.Press_Color         := 0xE71C;
    RadioButtonKeyboard128Step.Background_Color    := 0x8410;
    RadioButtonKeyboard128Step.OnUpPtr             := 0;
    RadioButtonKeyboard128Step.OnDownPtr           := 0;
    RadioButtonKeyboard128Step.OnClickPtr          := @RadioButtonKeyboard128StepOnClick;
    RadioButtonKeyboard128Step.OnPressPtr          := 0;

    RadioButtonKeyboard28Step.OwnerScreenID       := 1;
    RadioButtonKeyboard28Step.Order               := 26;
    RadioButtonKeyboard28Step.Left                := 255;
    RadioButtonKeyboard28Step.Top                 := 110;
    RadioButtonKeyboard28Step.Width               := 58;
    RadioButtonKeyboard28Step.Height              := 16;
    RadioButtonKeyboard28Step.Pen_Width           := 1;
    RadioButtonKeyboard28Step.Pen_Color           := 0x0000;
    RadioButtonKeyboard28Step.Visible             := 1;
    RadioButtonKeyboard28Step.Active              := 1;
    RadioButtonKeyboard28Step.Checked             := 1;
    RadioButtonKeyboard28Step.Transparent         := 1;
    RadioButtonKeyboard28Step.Caption             := @RadioButtonKeyboard28Step_Caption;
    RadioButtonKeyboard28Step_Caption             := '28 Step';
    RadioButtonKeyboard28Step.TextAlign           := _taLeft;
    RadioButtonKeyboard28Step.FontName            := @Tahoma11x13_Regular;
    RadioButtonKeyboard28Step.PressColEnabled     := 1;
    RadioButtonKeyboard28Step.Font_Color          := 0x0000;
    RadioButtonKeyboard28Step.Gradient            := 1;
    RadioButtonKeyboard28Step.Gradient_Orientation := 0;
    RadioButtonKeyboard28Step.Gradient_Start_Color := 0xFFFF;
    RadioButtonKeyboard28Step.Gradient_End_Color  := 0xC618;
    RadioButtonKeyboard28Step.Color               := 0xC618;
    RadioButtonKeyboard28Step.Press_Color         := 0xE71C;
    RadioButtonKeyboard28Step.Background_Color    := 0x8410;
    RadioButtonKeyboard28Step.OnUpPtr             := 0;
    RadioButtonKeyboard28Step.OnDownPtr           := 0;
    RadioButtonKeyboard28Step.OnClickPtr          := @RadioButtonKeyboard28StepOnClick;
    RadioButtonKeyboard28Step.OnPressPtr          := 0;

    ButtonRoundWizardByAddress.OwnerScreenID       := 2;
    ButtonRoundWizardByAddress.Order               := 0;
    ButtonRoundWizardByAddress.Left                := 55;
    ButtonRoundWizardByAddress.Top                 := 70;
    ButtonRoundWizardByAddress.Width               := 200;
    ButtonRoundWizardByAddress.Height              := 55;
    ButtonRoundWizardByAddress.Pen_Width           := 0;
    ButtonRoundWizardByAddress.Pen_Color           := 0x0000;
    ButtonRoundWizardByAddress.Visible             := 1;
    ButtonRoundWizardByAddress.Active              := 1;
    ButtonRoundWizardByAddress.Transparent         := 1;
    ButtonRoundWizardByAddress.Caption             := @ButtonRoundWizardByAddress_Caption;
    ButtonRoundWizardByAddress_Caption             := 'By DCC Address...';
    ButtonRoundWizardByAddress.TextAlign           := _taCenter;
    ButtonRoundWizardByAddress.FontName            := @Tahoma16x19_Regular;
    ButtonRoundWizardByAddress.PressColEnabled     := 1;
    ButtonRoundWizardByAddress.Font_Color          := 0x0000;
    ButtonRoundWizardByAddress.Gradient            := 1;
    ButtonRoundWizardByAddress.Gradient_Orientation := 0;
    ButtonRoundWizardByAddress.Gradient_Start_Color := 0xFFFF;
    ButtonRoundWizardByAddress.Gradient_End_Color  := 0x630C;
    ButtonRoundWizardByAddress.Color               := 0xC618;
    ButtonRoundWizardByAddress.Press_Color         := 0xE71C;
    ButtonRoundWizardByAddress.Corner_Radius       := 1;
    ButtonRoundWizardByAddress.OnUpPtr             := 0;
    ButtonRoundWizardByAddress.OnDownPtr           := 0;
    ButtonRoundWizardByAddress.OnClickPtr          := @ButtonRoundWizardByAddressOnClick;
    ButtonRoundWizardByAddress.OnPressPtr          := 0;

    ButtonRoundWizardByList.OwnerScreenID       := 2;
    ButtonRoundWizardByList.Order               := 1;
    ButtonRoundWizardByList.Left                := 55;
    ButtonRoundWizardByList.Top                 := 125;
    ButtonRoundWizardByList.Width               := 200;
    ButtonRoundWizardByList.Height              := 55;
    ButtonRoundWizardByList.Pen_Width           := 0;
    ButtonRoundWizardByList.Pen_Color           := 0x0000;
    ButtonRoundWizardByList.Visible             := 1;
    ButtonRoundWizardByList.Active              := 1;
    ButtonRoundWizardByList.Transparent         := 1;
    ButtonRoundWizardByList.Caption             := @ButtonRoundWizardByList_Caption;
    ButtonRoundWizardByList_Caption             := 'By OpenLCB List...';
    ButtonRoundWizardByList.TextAlign           := _taCenter;
    ButtonRoundWizardByList.FontName            := @Tahoma16x19_Regular;
    ButtonRoundWizardByList.PressColEnabled     := 1;
    ButtonRoundWizardByList.Font_Color          := 0x0000;
    ButtonRoundWizardByList.Gradient            := 1;
    ButtonRoundWizardByList.Gradient_Orientation := 0;
    ButtonRoundWizardByList.Gradient_Start_Color := 0xFFFF;
    ButtonRoundWizardByList.Gradient_End_Color  := 0x630C;
    ButtonRoundWizardByList.Color               := 0xC618;
    ButtonRoundWizardByList.Press_Color         := 0xE71C;
    ButtonRoundWizardByList.Corner_Radius       := 1;
    ButtonRoundWizardByList.OnUpPtr             := 0;
    ButtonRoundWizardByList.OnDownPtr           := 0;
    ButtonRoundWizardByList.OnClickPtr          := @ButtonRoundWizardByListOnClick;
    ButtonRoundWizardByList.OnPressPtr          := 0;

    Label1.OwnerScreenID       := 2;
    Label1.Order               := 3;
    Label1.Left                := 80;
    Label1.Top                 := 5;
    Label1.Width               := 155;
    Label1.Height              := 21;
    Label1.Visible             := 1;
    Label1.Active              := 1;
    Label1.Caption             := @Label1_Caption;
    Label1_Caption             := 'Train Selector Wizard';
    Label1.FontName            := @Tahoma16x19_Regular;
    Label1.Font_Color          := 0x0000;
    Label1.OnUpPtr             := 0;
    Label1.OnDownPtr           := 0;
    Label1.OnClickPtr          := 0;
    Label1.OnPressPtr          := 0;

    ButtonWizardCancel.OwnerScreenID       := 2;
    ButtonWizardCancel.Order               := 4;
    ButtonWizardCancel.Left                := 55;
    ButtonWizardCancel.Top                 := 195;
    ButtonWizardCancel.Width               := 200;
    ButtonWizardCancel.Height              := 39;
    ButtonWizardCancel.Pen_Width           := 0;
    ButtonWizardCancel.Pen_Color           := 0x0000;
    ButtonWizardCancel.Visible             := 1;
    ButtonWizardCancel.Active              := 1;
    ButtonWizardCancel.Transparent         := 1;
    ButtonWizardCancel.Caption             := @ButtonWizardCancel_Caption;
    ButtonWizardCancel_Caption             := 'Cancel';
    ButtonWizardCancel.TextAlign           := _taCenter;
    ButtonWizardCancel.FontName            := @Tahoma16x19_Regular;
    ButtonWizardCancel.PressColEnabled     := 1;
    ButtonWizardCancel.Font_Color          := 0x0000;
    ButtonWizardCancel.Gradient            := 1;
    ButtonWizardCancel.Gradient_Orientation := 0;
    ButtonWizardCancel.Gradient_Start_Color := 0xFFFF;
    ButtonWizardCancel.Gradient_End_Color  := 0x630C;
    ButtonWizardCancel.Color               := 0xC618;
    ButtonWizardCancel.Press_Color         := 0xE71C;
    ButtonWizardCancel.OnUpPtr             := 0;
    ButtonWizardCancel.OnDownPtr           := 0;
    ButtonWizardCancel.OnClickPtr          := @ButtonWizardCancelOnClick;
    ButtonWizardCancel.OnPressPtr          := 0;

    Label2.OwnerScreenID       := 2;
    Label2.Order               := 5;
    Label2.Left                := 20;
    Label2.Top                 := 40;
    Label2.Width               := 296;
    Label2.Height              := 21;
    Label2.Visible             := 1;
    Label2.Active              := 1;
    Label2.Caption             := @Label2_Caption;
    Label2_Caption             := 'How would you like to select your Train?';
    Label2.FontName            := @Tahoma16x19_Regular;
    Label2.Font_Color          := 0x0000;
    Label2.OnUpPtr             := 0;
    Label2.OnDownPtr           := 0;
    Label2.OnClickPtr          := 0;
    Label2.OnPressPtr          := 0;

    ButtonRoundTrainOpenLCB1.OwnerScreenID       := 3;
    ButtonRoundTrainOpenLCB1.Order               := 0;
    ButtonRoundTrainOpenLCB1.Left                := 0;
    ButtonRoundTrainOpenLCB1.Top                 := 1;
    ButtonRoundTrainOpenLCB1.Width               := 320;
    ButtonRoundTrainOpenLCB1.Height              := 35;
    ButtonRoundTrainOpenLCB1.Pen_Width           := 0;
    ButtonRoundTrainOpenLCB1.Pen_Color           := 0x0000;
    ButtonRoundTrainOpenLCB1.Visible             := 1;
    ButtonRoundTrainOpenLCB1.Active              := 1;
    ButtonRoundTrainOpenLCB1.Transparent         := 1;
    ButtonRoundTrainOpenLCB1.Caption             := @ButtonRoundTrainOpenLCB1_Caption;
    ButtonRoundTrainOpenLCB1_Caption             := '';
    ButtonRoundTrainOpenLCB1.TextAlign           := _taCenter;
    ButtonRoundTrainOpenLCB1.FontName            := @Tahoma11x13_Regular;
    ButtonRoundTrainOpenLCB1.PressColEnabled     := 1;
    ButtonRoundTrainOpenLCB1.Font_Color          := 0x0000;
    ButtonRoundTrainOpenLCB1.Gradient            := 1;
    ButtonRoundTrainOpenLCB1.Gradient_Orientation := 0;
    ButtonRoundTrainOpenLCB1.Gradient_Start_Color := 0xFFFF;
    ButtonRoundTrainOpenLCB1.Gradient_End_Color  := 0x630C;
    ButtonRoundTrainOpenLCB1.Color               := 0xC618;
    ButtonRoundTrainOpenLCB1.Press_Color         := 0xE71C;
    ButtonRoundTrainOpenLCB1.Corner_Radius       := 1;
    ButtonRoundTrainOpenLCB1.OnUpPtr             := 0;
    ButtonRoundTrainOpenLCB1.OnDownPtr           := 0;
    ButtonRoundTrainOpenLCB1.OnClickPtr          := 0;
    ButtonRoundTrainOpenLCB1.OnPressPtr          := 0;

    ButtonRoundTrainOpenLCB2.OwnerScreenID       := 3;
    ButtonRoundTrainOpenLCB2.Order               := 1;
    ButtonRoundTrainOpenLCB2.Left                := 0;
    ButtonRoundTrainOpenLCB2.Top                 := 35;
    ButtonRoundTrainOpenLCB2.Width               := 320;
    ButtonRoundTrainOpenLCB2.Height              := 35;
    ButtonRoundTrainOpenLCB2.Pen_Width           := 0;
    ButtonRoundTrainOpenLCB2.Pen_Color           := 0x0000;
    ButtonRoundTrainOpenLCB2.Visible             := 1;
    ButtonRoundTrainOpenLCB2.Active              := 1;
    ButtonRoundTrainOpenLCB2.Transparent         := 1;
    ButtonRoundTrainOpenLCB2.Caption             := @ButtonRoundTrainOpenLCB2_Caption;
    ButtonRoundTrainOpenLCB2_Caption             := '';
    ButtonRoundTrainOpenLCB2.TextAlign           := _taCenter;
    ButtonRoundTrainOpenLCB2.FontName            := @Tahoma11x13_Regular;
    ButtonRoundTrainOpenLCB2.PressColEnabled     := 1;
    ButtonRoundTrainOpenLCB2.Font_Color          := 0x0000;
    ButtonRoundTrainOpenLCB2.Gradient            := 1;
    ButtonRoundTrainOpenLCB2.Gradient_Orientation := 0;
    ButtonRoundTrainOpenLCB2.Gradient_Start_Color := 0xFFFF;
    ButtonRoundTrainOpenLCB2.Gradient_End_Color  := 0x630C;
    ButtonRoundTrainOpenLCB2.Color               := 0xC618;
    ButtonRoundTrainOpenLCB2.Press_Color         := 0xE71C;
    ButtonRoundTrainOpenLCB2.Corner_Radius       := 1;
    ButtonRoundTrainOpenLCB2.OnUpPtr             := 0;
    ButtonRoundTrainOpenLCB2.OnDownPtr           := 0;
    ButtonRoundTrainOpenLCB2.OnClickPtr          := 0;
    ButtonRoundTrainOpenLCB2.OnPressPtr          := 0;

    ButtonRoundTrainOpenLCB3.OwnerScreenID       := 3;
    ButtonRoundTrainOpenLCB3.Order               := 2;
    ButtonRoundTrainOpenLCB3.Left                := 0;
    ButtonRoundTrainOpenLCB3.Top                 := 71;
    ButtonRoundTrainOpenLCB3.Width               := 320;
    ButtonRoundTrainOpenLCB3.Height              := 35;
    ButtonRoundTrainOpenLCB3.Pen_Width           := 0;
    ButtonRoundTrainOpenLCB3.Pen_Color           := 0x0000;
    ButtonRoundTrainOpenLCB3.Visible             := 1;
    ButtonRoundTrainOpenLCB3.Active              := 1;
    ButtonRoundTrainOpenLCB3.Transparent         := 1;
    ButtonRoundTrainOpenLCB3.Caption             := @ButtonRoundTrainOpenLCB3_Caption;
    ButtonRoundTrainOpenLCB3_Caption             := '';
    ButtonRoundTrainOpenLCB3.TextAlign           := _taCenter;
    ButtonRoundTrainOpenLCB3.FontName            := @Tahoma11x13_Regular;
    ButtonRoundTrainOpenLCB3.PressColEnabled     := 1;
    ButtonRoundTrainOpenLCB3.Font_Color          := 0x0000;
    ButtonRoundTrainOpenLCB3.Gradient            := 1;
    ButtonRoundTrainOpenLCB3.Gradient_Orientation := 0;
    ButtonRoundTrainOpenLCB3.Gradient_Start_Color := 0xFFFF;
    ButtonRoundTrainOpenLCB3.Gradient_End_Color  := 0x630C;
    ButtonRoundTrainOpenLCB3.Color               := 0xC618;
    ButtonRoundTrainOpenLCB3.Press_Color         := 0xE71C;
    ButtonRoundTrainOpenLCB3.Corner_Radius       := 1;
    ButtonRoundTrainOpenLCB3.OnUpPtr             := 0;
    ButtonRoundTrainOpenLCB3.OnDownPtr           := 0;
    ButtonRoundTrainOpenLCB3.OnClickPtr          := 0;
    ButtonRoundTrainOpenLCB3.OnPressPtr          := 0;

    ButtonRoundTrainOpenLCB4.OwnerScreenID       := 3;
    ButtonRoundTrainOpenLCB4.Order               := 3;
    ButtonRoundTrainOpenLCB4.Left                := 0;
    ButtonRoundTrainOpenLCB4.Top                 := 105;
    ButtonRoundTrainOpenLCB4.Width               := 320;
    ButtonRoundTrainOpenLCB4.Height              := 35;
    ButtonRoundTrainOpenLCB4.Pen_Width           := 0;
    ButtonRoundTrainOpenLCB4.Pen_Color           := 0x0000;
    ButtonRoundTrainOpenLCB4.Visible             := 1;
    ButtonRoundTrainOpenLCB4.Active              := 1;
    ButtonRoundTrainOpenLCB4.Transparent         := 1;
    ButtonRoundTrainOpenLCB4.Caption             := @ButtonRoundTrainOpenLCB4_Caption;
    ButtonRoundTrainOpenLCB4_Caption             := '';
    ButtonRoundTrainOpenLCB4.TextAlign           := _taCenter;
    ButtonRoundTrainOpenLCB4.FontName            := @Tahoma11x13_Regular;
    ButtonRoundTrainOpenLCB4.PressColEnabled     := 1;
    ButtonRoundTrainOpenLCB4.Font_Color          := 0x0000;
    ButtonRoundTrainOpenLCB4.Gradient            := 1;
    ButtonRoundTrainOpenLCB4.Gradient_Orientation := 0;
    ButtonRoundTrainOpenLCB4.Gradient_Start_Color := 0xFFFF;
    ButtonRoundTrainOpenLCB4.Gradient_End_Color  := 0x630C;
    ButtonRoundTrainOpenLCB4.Color               := 0xC618;
    ButtonRoundTrainOpenLCB4.Press_Color         := 0xE71C;
    ButtonRoundTrainOpenLCB4.Corner_Radius       := 1;
    ButtonRoundTrainOpenLCB4.OnUpPtr             := 0;
    ButtonRoundTrainOpenLCB4.OnDownPtr           := 0;
    ButtonRoundTrainOpenLCB4.OnClickPtr          := 0;
    ButtonRoundTrainOpenLCB4.OnPressPtr          := 0;

    ButtonRoundTrainOpenLCB5.OwnerScreenID       := 3;
    ButtonRoundTrainOpenLCB5.Order               := 4;
    ButtonRoundTrainOpenLCB5.Left                := 0;
    ButtonRoundTrainOpenLCB5.Top                 := 141;
    ButtonRoundTrainOpenLCB5.Width               := 320;
    ButtonRoundTrainOpenLCB5.Height              := 35;
    ButtonRoundTrainOpenLCB5.Pen_Width           := 0;
    ButtonRoundTrainOpenLCB5.Pen_Color           := 0x0000;
    ButtonRoundTrainOpenLCB5.Visible             := 1;
    ButtonRoundTrainOpenLCB5.Active              := 1;
    ButtonRoundTrainOpenLCB5.Transparent         := 1;
    ButtonRoundTrainOpenLCB5.Caption             := @ButtonRoundTrainOpenLCB5_Caption;
    ButtonRoundTrainOpenLCB5_Caption             := '';
    ButtonRoundTrainOpenLCB5.TextAlign           := _taCenter;
    ButtonRoundTrainOpenLCB5.FontName            := @Tahoma11x13_Regular;
    ButtonRoundTrainOpenLCB5.PressColEnabled     := 1;
    ButtonRoundTrainOpenLCB5.Font_Color          := 0x0000;
    ButtonRoundTrainOpenLCB5.Gradient            := 1;
    ButtonRoundTrainOpenLCB5.Gradient_Orientation := 0;
    ButtonRoundTrainOpenLCB5.Gradient_Start_Color := 0xFFFF;
    ButtonRoundTrainOpenLCB5.Gradient_End_Color  := 0x630C;
    ButtonRoundTrainOpenLCB5.Color               := 0xC618;
    ButtonRoundTrainOpenLCB5.Press_Color         := 0xE71C;
    ButtonRoundTrainOpenLCB5.Corner_Radius       := 1;
    ButtonRoundTrainOpenLCB5.OnUpPtr             := 0;
    ButtonRoundTrainOpenLCB5.OnDownPtr           := 0;
    ButtonRoundTrainOpenLCB5.OnClickPtr          := 0;
    ButtonRoundTrainOpenLCB5.OnPressPtr          := 0;

    ButtonRound6.OwnerScreenID       := 3;
    ButtonRound6.Order               := 5;
    ButtonRound6.Left                := 0;
    ButtonRound6.Top                 := 175;
    ButtonRound6.Width               := 320;
    ButtonRound6.Height              := 35;
    ButtonRound6.Pen_Width           := 0;
    ButtonRound6.Pen_Color           := 0x0000;
    ButtonRound6.Visible             := 1;
    ButtonRound6.Active              := 1;
    ButtonRound6.Transparent         := 1;
    ButtonRound6.Caption             := @ButtonRound6_Caption;
    ButtonRound6_Caption             := '';
    ButtonRound6.TextAlign           := _taCenter;
    ButtonRound6.FontName            := @Tahoma11x13_Regular;
    ButtonRound6.PressColEnabled     := 1;
    ButtonRound6.Font_Color          := 0x0000;
    ButtonRound6.Gradient            := 1;
    ButtonRound6.Gradient_Orientation := 0;
    ButtonRound6.Gradient_Start_Color := 0xFFFF;
    ButtonRound6.Gradient_End_Color  := 0x630C;
    ButtonRound6.Color               := 0xC618;
    ButtonRound6.Press_Color         := 0xE71C;
    ButtonRound6.Corner_Radius       := 1;
    ButtonRound6.OnUpPtr             := 0;
    ButtonRound6.OnDownPtr           := 0;
    ButtonRound6.OnClickPtr          := 0;
    ButtonRound6.OnPressPtr          := 0;
  end;

function IsInsideObject (X, Y, Left, Top, Width, Height : word) : byte; // static
begin
  if ( (Left<= X) and (Left+ Width - 1 >= X) and
       (Top <= Y)  and (Top + Height - 1 >= Y) ) then
    Result := 1
  else
    Result := 0;
end;

function GetButton (index : byte) : ^TButton; // static
var objPtr : ^ const code far ^TButton;
  begin
    objPtr := CurrentMyScreen.Buttons + index;
    Result := objPtr^;
  end;

function GetRoundButton (index : byte) : ^TButton_Round; // static
var objPtr : ^ const code far ^TButton_Round;
  begin
    objPtr := CurrentMyScreen.Buttons_Round + index;
    Result := objPtr^;
  end;

function GetCRoundButton (index : byte) : ^TCButton_Round; // static
var objPtr : ^ const code far ^TCButton_Round;
  begin
    objPtr := CurrentMyScreen.CButtons_Round + index;
    Result := objPtr^;
  end;

function GetLabel (index : byte) : ^TLabel; // static
var objPtr : ^ const code far ^TLabel;
  begin
    objPtr := CurrentMyScreen.Labels + index;
    Result := objPtr^;
  end;

function GetCLabel (index : byte) : ^TCLabel; // static
var objPtr : ^ const code far ^TCLabel;
  begin
    objPtr := CurrentMyScreen.CLabels + index;
    Result := objPtr^;
  end;

function GetImage (index : byte) : ^TImage; // static
var objPtr : ^ const code far ^TImage;
  begin
    objPtr := CurrentMyScreen.Images + index;
    Result := objPtr^;
  end;

function GetCBox (index : byte) : ^TCBox; // static
var objPtr : ^ const code far ^TCBox;
  begin
    objPtr := CurrentMyScreen.CBoxes + index;
    Result := objPtr^;
  end;

function GetBox_Round (index : byte) : ^TBox_Round; // static
var objPtr : ^ const code far ^TBox_Round;
  begin
    objPtr := CurrentMyScreen.Boxes_Round + index;
    Result := objPtr^;
  end;

function GetCBox_Round (index : byte) : ^TCBox_Round; // static
var objPtr : ^ const code far ^TCBox_Round;
  begin
    objPtr := CurrentMyScreen.CBoxes_Round + index;
    Result := objPtr^;
  end;

function GetLine (index : byte) : ^TLine; // static
var objPtr : ^ const code far ^TLine;
  begin
    objPtr := CurrentMyScreen.Lines + index;
    Result := objPtr^;
  end;

function GetRadioButton (index : byte) : ^TRadioButton; // static
var objPtr : ^ const code far ^TRadioButton;
  begin
    objPtr := CurrentMyScreen.RadioButtons + index;
    Result := objPtr^;
  end;

function GetProgressBar (index : byte) : ^TProgressBar; // static
var objPtr : ^ const code far ^TProgressBar;
  begin
    objPtr := CurrentMyScreen.ProgressBars + index;
    Result := objPtr^;
  end;


procedure DeleteTrailingSpaces(var str : string);
var counter : byte;
  begin
    while TRUE do
      begin
        if (str[0] = ' ') then
          begin
            for counter := 0 to strlen(str) do
              str[counter] := str[counter+1];
        end
      else
        break;
    end;
  end;


procedure DrawButton(Abutton : ^TButton);
  begin
    if (Abutton^.Visible = 1) then
      begin
        if object_pressed = 1 then
          begin
            object_pressed := 0;
            TFT_Set_Brush(Abutton^.Transparent, Abutton^.Press_Color, Abutton^.Gradient, Abutton^.Gradient_Orientation, Abutton^.Gradient_End_Color, Abutton^.Gradient_Start_Color);
          end
        else
          TFT_Set_Brush(Abutton^.Transparent, Abutton^.Color, Abutton^.Gradient, Abutton^.Gradient_Orientation, Abutton^.Gradient_Start_Color, Abutton^.Gradient_End_Color);
        TFT_Set_Pen(Abutton^.Pen_Color, Abutton^.Pen_Width);
        TFT_Rectangle(Abutton^.Left, Abutton^.Top, Abutton^.Left + Abutton^.Width - 1, Abutton^.Top + Abutton^.Height - 1);
        TFT_Set_Font(Abutton^.FontName, Abutton^.Font_Color, FO_HORIZONTAL);
        TFT_Write_Text_Return_Pos(Abutton^.Caption, Abutton^.Left, Abutton^.Top);
        if (Abutton^.TextAlign = _taLeft) then
          TFT_Write_Text(Abutton^.Caption, Abutton^.Left + 4, (Abutton^.Top + ((Abutton^.Height - caption_height) div 2)))
        else if (Abutton^.TextAlign = _taCenter) then
          TFT_Write_Text(Abutton^.Caption, (Abutton^.Left + (Abutton^.Width - caption_length) div 2), (Abutton^.Top + ((Abutton^.Height - caption_height) div 2)))
        else if (Abutton^.TextAlign = _taRight) then
          TFT_Write_Text(Abutton^.Caption, Abutton^.Left + (Abutton^.Width - caption_length - 4), (Abutton^.Top + (Abutton^.Height - caption_height) div 2));
      end;
  end;

procedure DrawRoundButton(Around_button : ^TButton_Round);
  begin
      if (Around_button^.Visible = 1) then
        begin
          if (object_pressed = 1) then
            begin
              object_pressed := 0;
              TFT_Set_Brush(Around_button^.Transparent, Around_button^.Press_Color, Around_button^.Gradient, Around_button^.Gradient_Orientation,
                            Around_button^.Gradient_End_Color, Around_button^.Gradient_Start_Color);
            end
          else
            TFT_Set_Brush(Around_button^.Transparent, Around_button^.Color, Around_button^.Gradient, Around_button^.Gradient_Orientation,
                          Around_button^.Gradient_Start_Color, Around_button^.Gradient_End_Color);
          TFT_Set_Pen(Around_button^.Pen_Color, Around_button^.Pen_Width);
          TFT_Rectangle_Round_Edges(Around_button^.Left + 1, Around_button^.Top + 1,
                                    Around_button^.Left + Around_button^.Width - 2,
                                    Around_button^.Top + Around_button^.Height - 2, Around_button^.Corner_Radius);
          TFT_Set_Font(Around_button^.FontName, Around_button^.Font_Color, FO_HORIZONTAL);
          TFT_Write_Text_Return_Pos(Around_button^.Caption, Around_button^.Left, Around_button^.Top);
          if (Around_button^.TextAlign = _taLeft) then
            TFT_Write_Text(Around_button^.Caption, Around_button^.Left + 4, (Around_button^.Top + ((Around_button^.Height - caption_height) div 2)))
          else if (Around_button^.TextAlign = _taCenter) then
            TFT_Write_Text(Around_button^.Caption, (Around_button^.Left + (Around_button^.Width - caption_length) div 2), (Around_button^.Top + ((Around_button^.Height - caption_height) div 2)))
          else if (Around_button^.TextAlign = _taRight) then
            TFT_Write_Text(Around_button^.Caption, Around_button^.Left + (Around_button^.Width - caption_length - 4), (Around_button^.Top + (Around_button^.Height - caption_height) div 2));
        end;
  end;

procedure DrawCRoundButton(Around_button : ^TCButton_Round);
  begin
      if (Around_button^.Visible = 1) then
        begin
          if (object_pressed = 1) then
            begin
              object_pressed := 0;
              TFT_Set_Brush(Around_button^.Transparent, Around_button^.Press_Color, Around_button^.Gradient, Around_button^.Gradient_Orientation,
                            Around_button^.Gradient_End_Color, Around_button^.Gradient_Start_Color);
            end
          else
            TFT_Set_Brush(Around_button^.Transparent, Around_button^.Color, Around_button^.Gradient, Around_button^.Gradient_Orientation,
                          Around_button^.Gradient_Start_Color, Around_button^.Gradient_End_Color);
          TFT_Set_Pen(Around_button^.Pen_Color, Around_button^.Pen_Width);
          TFT_Rectangle_Round_Edges(Around_button^.Left + 1, Around_button^.Top + 1,
                                    Around_button^.Left + Around_button^.Width - 2,
                                    Around_button^.Top + Around_button^.Height - 2, Around_button^.Corner_Radius);
          TFT_Set_Font(Around_button^.FontName, Around_button^.Font_Color, FO_HORIZONTAL);
          TFT_Write_Const_Text_Return_Pos(Around_button^.Caption, Around_button^.Left, Around_button^.Top);
          if (Around_button^.TextAlign = _taLeft) then
            TFT_Write_Const_Text(Around_button^.Caption, Around_button^.Left + 4, (Around_button^.Top + ((Around_button^.Height - caption_height) div 2)))
          else if (Around_button^.TextAlign = _taCenter) then
            TFT_Write_Const_Text(Around_button^.Caption, (Around_button^.Left + (Around_button^.Width - caption_length) div 2), (Around_button^.Top + ((Around_button^.Height - caption_height) div 2)))
          else if (Around_button^.TextAlign = _taRight) then
            TFT_Write_Const_Text(Around_button^.Caption, Around_button^.Left + (Around_button^.Width - caption_length - 4), (Around_button^.Top + (Around_button^.Height - caption_height) div 2));
        end;
  end;

procedure DrawLabel(ALabel : ^TLabel);
  begin
    if (ALabel^.Visible = 1) then
      begin
        TFT_Set_Font(ALabel^.FontName, ALabel^.Font_Color, FO_HORIZONTAL);
          TFT_Write_Text(ALabel^.Caption, ALabel^.Left, ALabel^.Top);
      end;
end;

procedure DrawCLabel(ALabel : ^TCLabel);
  begin
    if (ALabel^.Visible = 1) then
      begin
        TFT_Set_Font(ALabel^.FontName, ALabel^.Font_Color, FO_HORIZONTAL);
          TFT_Write_Const_Text(ALabel^.Caption, ALabel^.Left, ALabel^.Top);
      end;
end;

procedure DrawImage(AImage : ^TImage);
  begin
    if (AImage^.Visible) then
      begin
        TFT_Image(AImage^.Left, AImage^.Top, AImage^.Picture_Name, AImage^.Picture_Ratio);
      end;
end;

procedure DrawCBox(ABox : ^TCBox);
  begin
    if (ABox^.Visible = 1) then
      begin
        if object_pressed = 1 then
          begin
            object_pressed := 0;
            TFT_Set_Brush(ABox^.Transparent, ABox^.Press_Color, ABox^.Gradient, ABox^.Gradient_Orientation, ABox^.Gradient_End_Color, ABox^.Gradient_Start_Color);
          end
        else
          TFT_Set_Brush(ABox^.Transparent, ABox^.Color, ABox^.Gradient, ABox^.Gradient_Orientation, ABox^.Gradient_Start_Color, ABox^.Gradient_End_Color);
        TFT_Set_Pen(ABox^.Pen_Color, ABox^.Pen_Width);
        TFT_Rectangle(ABox^.Left, ABox^.Top, ABox^.Left + ABox^.Width - 1, ABox^.Top + ABox^.Height - 1);
      end;
  end;

procedure DrawRoundBox(Around_box : ^TBox_Round);
  begin
    if (Around_box^.Visible = 1) then
      begin
        if object_pressed = 1 then
          begin
            object_pressed := 0;
            TFT_Set_Brush(Around_box^.Transparent, Around_box^.Press_Color, Around_box^.Gradient, Around_box^.Gradient_Orientation,
                          Around_box^.Gradient_End_Color, Around_box^.Gradient_Start_Color);
          end
        else
          TFT_Set_Brush(Around_box^.Transparent, Around_box^.Color, Around_box^.Gradient, Around_box^.Gradient_Orientation,
                        Around_box^.Gradient_Start_Color, Around_box^.Gradient_End_Color);
        TFT_Set_Pen(Around_box^.Pen_Color, Around_box^.Pen_Width);
        TFT_Rectangle_Round_Edges(Around_box^.Left + 1, Around_box^.Top + 1,
                                  Around_box^.Left + Around_box^.Width - 2,
                                  Around_box^.Top + Around_box^.Height - 2, Around_box^.Corner_Radius)
      end;
  end;

procedure DrawCRoundBox(Around_box : ^TCBox_Round);
  begin
    if (Around_box^.Visible = 1) then
      begin
        if object_pressed = 1 then
          begin
            object_pressed := 0;
            TFT_Set_Brush(Around_box^.Transparent, Around_box^.Press_Color, Around_box^.Gradient, Around_box^.Gradient_Orientation,
                          Around_box^.Gradient_End_Color, Around_box^.Gradient_Start_Color);
          end
        else
          TFT_Set_Brush(Around_box^.Transparent, Around_box^.Color, Around_box^.Gradient, Around_box^.Gradient_Orientation,
                        Around_box^.Gradient_Start_Color, Around_box^.Gradient_End_Color);
        TFT_Set_Pen(Around_box^.Pen_Color, Around_box^.Pen_Width);
        TFT_Rectangle_Round_Edges(Around_box^.Left + 1, Around_box^.Top + 1,
                                  Around_box^.Left + Around_box^.Width - 2,
                                  Around_box^.Top + Around_box^.Height - 2, Around_box^.Corner_Radius)
      end;
  end;

procedure DrawLine(Aline : ^TLine);
  begin
    if (Aline^.Visible = 1) then
      begin
        TFT_Set_Pen(Aline^.Color, Aline^.Pen_Width);
        TFT_Line(Aline^.First_Point_X, Aline^.First_Point_Y, Aline^.Second_Point_X, Aline^.Second_Point_Y);
      end;
  end;

procedure DrawRadioButton(ARadioButton : ^TRadioButton);
var circleOffset : integer;
begin
  if (ARadioButton^.Visible = 1) then
    begin
      circleOffset := ARadioButton^.Height / 5;
      TFT_Set_Pen(ARadioButton^.Pen_Color, ARadioButton^.Pen_Width);
      TFT_Set_Font(ARadioButton^.FontName, ARadioButton^.Font_Color, FO_HORIZONTAL);
      if (ARadioButton^.TextAlign = _taLeft) then
        begin
          TFT_Set_Brush(ARadioButton^.Transparent,ARadioButton^.Background_Color,0,0,0,0);
          TFT_Circle(ARadioButton^.Left + ARadioButton^.Height div 2, ARadioButton^.Top + ARadioButton^.Height div 2, ARadioButton^.Height div 2);
          if (ARadioButton^.Checked = 1) then
            begin
              if (object_pressed = 1) then
                begin
                  object_pressed := 0;
                  TFT_Set_Brush(ARadioButton^.Transparent, ARadioButton^.Press_Color, ARadioButton^.Gradient, ARadioButton^.Gradient_Orientation, ARadioButton^.Gradient_End_Color, ARadioButton^.Gradient_Start_Color);
                end
              else
                TFT_Set_Brush(ARadioButton^.Transparent, ARadioButton^.Color, ARadioButton^.Gradient, ARadioButton^.Gradient_Orientation, ARadioButton^.Gradient_Start_Color, ARadioButton^.Gradient_End_Color);
              TFT_Circle(ARadioButton^.Left + ARadioButton^.Height div 2 , ARadioButton^.Top + ARadioButton^.Height div 2, ARadioButton^.Height div 2 - circleOffset);
            end;
          TFT_Write_Text_Return_Pos(ARadioButton^.Caption, ARadioButton^.Left + ARadioButton^.Height + 4, ARadioButton^.Top);
          TFT_Write_Text(ARadioButton^.Caption, ARadioButton^.Left + ARadioButton^.Height + 4, (ARadioButton^.Top + ((ARadioButton^.Height - caption_height) div 2)));
        end
      else
        begin
          TFT_Set_Brush(ARadioButton^.Transparent,ARadioButton^.Background_Color,0,0,0,0);
          TFT_Circle(ARadioButton^.Left  + ARadioButton^.Width - ARadioButton^.Height div 2, ARadioButton^.Top + ARadioButton^.Height div 2, ARadioButton^.Height div 2);
          if (ARadioButton^.Checked = 1) then
            begin
              if (object_pressed = 1) then
                begin
                  object_pressed := 0;
                  TFT_Set_Brush(ARadioButton^.Transparent, ARadioButton^.Press_Color, ARadioButton^.Gradient, ARadioButton^.Gradient_Orientation, ARadioButton^.Gradient_End_Color, ARadioButton^.Gradient_Start_Color);
                end
              else 
                TFT_Set_Brush(ARadioButton^.Transparent, ARadioButton^.Color, ARadioButton^.Gradient, ARadioButton^.Gradient_Orientation, ARadioButton^.Gradient_Start_Color, ARadioButton^.Gradient_End_Color);
              TFT_Circle(ARadioButton^.Left  + ARadioButton^.Width - ARadioButton^.Height div 2, ARadioButton^.Top + ARadioButton^.Height div 2, ARadioButton^.Height div 2 - circleOffset);
            end;
          TFT_Write_Text_Return_Pos(ARadioButton^.Caption, ARadioButton^.Left + 3, ARadioButton^.Top);
          TFT_Write_Text(ARadioButton^.Caption, ARadioButton^.Left + 3, ARadioButton^.Top + (ARadioButton^.Height - caption_height) div 2);
        end;
    end;
end;

procedure UpdatePBPosition(AProgressBar : ^TProgressBar);
 var
  locPosition : dword;
  move_offset  : integer;
  cnt : integer;
  tmpStr : string[8];
  tmpWidth : word;
  tmpRound :  word;
  begin
  move_offset := 10;
  locPosition := (dword(AProgressBar^.Position - AProgressBar^.Min)) * 100 / (AProgressBar^.Max - AProgressBar^.Min);
    if (AProgressBar^.Visible = 1) then
      begin
    TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Background_Color, 0,0,0,0);
    TFT_Set_Pen(AProgressBar^.Background_Color, AProgressBar^.Pen_Width);
    TFT_Write_Text_Return_Pos(AProgressBar^.Caption, AProgressBar^.Left, AProgressBar^.Top);
    if (caption_height >  AProgressBar^.Height) then
        caption_height :=  AProgressBar^.Height;
    if (caption_length >  AProgressBar^.Width)then 
        caption_length :=  AProgressBar^.Width;
    if (AProgressBar^.Position < (AProgressBar^.Left + (AProgressBar^.Width - caption_length) div 2)) then
      begin
    TFT_Rectangle(AProgressBar^.Left + (AProgressBar^.Width - caption_length) div 2,
                  AProgressBar^.Top +(AProgressBar^.Height - caption_height) div 2,
                  AProgressBar^.Left + (AProgressBar^.Width - caption_length) div 2 + caption_length,
                  AProgressBar^.Top +(AProgressBar^.Height - caption_height) div 2 + caption_height);
      end;
    TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Color, AProgressBar^.Gradient, AProgressBar^.Gradient_Orientation, AProgressBar^.Gradient_Start_Color, AProgressBar^.Gradient_End_Color);
    TFT_Set_Pen(AProgressBar^.Pen_Color, AProgressBar^.Pen_Width);
       if (AProgressBar^.Rounded = 1) then
         begin
           // First draw back rect
           if (locPosition > 0) then
             begin
               // Then position rect
               TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Color, AProgressBar^.Gradient, AProgressBar^.Gradient_Orientation, AProgressBar^.Gradient_Start_Color, AProgressBar^.Gradient_End_Color);
               TFT_Rectangle(AProgressBar^.Left + AProgressBar^.Corner_Radius, AProgressBar^.Top,  AProgressBar^.Left + AProgressBar^.Corner_Radius  + locPosition *  (AProgressBar^.Width-AProgressBar^.Corner_Radius*2) div 100, AProgressBar^.Top + AProgressBar^.Height);
             end;
         end
       else
         begin
          if (locPosition > 0) then
            begin
              // Then position rect
              TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Color, AProgressBar^.Gradient, AProgressBar^.Gradient_Orientation, AProgressBar^.Gradient_Start_Color, AProgressBar^.Gradient_End_Color);
              TFT_Rectangle(AProgressBar^.Left, AProgressBar^.Top,  AProgressBar^.Left + (locPosition * AProgressBar^.Width) div 100, AProgressBar^.Top + AProgressBar^.Height);
            end;
         end;
       // Draw not smoothed position rect
       if (AProgressBar^.Smooth <> 1) then
          begin
            if(AProgressBar^.Rounded = 1) then
               begin
                 tmpRound := AProgressBar^.Corner_Radius;
                 cnt := move_offset + tmpRound;
                 tmpWidth := AProgressBar^.Width - AProgressBar^.Corner_Radius * 2;
               end
            else
               begin
                 tmpRound := 0;
                 cnt := move_offset;
                 tmpWidth := AProgressBar^.Width;
               end;
            TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Background_Color, 0,0,0,0);
            while (cnt-tmpRound < (locPosition * tmpWidth) div 100) do
              begin
                if  (cnt - tmpRound + 3 >=  tmpWidth * locPosition) then
                    TFT_Rectangle(AProgressBar^.Left + cnt, AProgressBar^.Top, AProgressBar^.Left + tmpRound  + tmpWidth * locPosition , AProgressBar^.Top + AProgressBar^.Height)
                else
                    TFT_Rectangle(AProgressBar^.Left + cnt, AProgressBar^.Top,  AProgressBar^.Left + cnt + 3, AProgressBar^.Top + AProgressBar^.Height);
                cnt := cnt + move_offset + 3;
              end;
          end;
    // Clear caption frist
    if (AProgressBar^.Show_Position = 1) then
       begin
        if (AProgressBar^.Show_Percentage = 1) then
           begin
             WordToStr(locPosition , tmpStr);
             DeleteTrailingSpaces(tmpStr);
             strcpy(AProgressBar^.Caption, tmpStr);
             strcat(AProgressBar^.Caption, '%');
           end
         else 
           begin
             WordToStr(AProgressBar^.Position , tmpStr);
             DeleteTrailingSpaces(tmpStr);
             strcpy(AProgressBar^.Caption, tmpStr);
           end
       end;
            TFT_Set_Font(AProgressBar^.FontName, AProgressBar^.Font_Color, FO_HORIZONTAL);
            TFT_Write_Text_Return_Pos(AProgressBar^.Caption, AProgressBar^.Left, AProgressBar^.Top);
            TFT_Write_Text(AProgressBar^.Caption, AProgressBar^.Left + (AProgressBar^.Width - caption_length) div 2, AProgressBar^.Top + (AProgressBar^.Height - caption_height) div 2);
 end;
end;

procedure DrawProgressBar(AProgressBar : ^TProgressBar);
 var
  locPosition : dword;
  move_offset : integer;
  cnt : integer;
  tmpWidth : word;
  tmpRound : word;
  _tmpI, _tmpII : word;
  tmpStr : string[8];
  begin
  move_offset := 10;
    _tmpI := AProgressBar^.Position - AProgressBar^.Min;
    _tmpII := AProgressBar^.Max - AProgressBar^.Min;
    locPosition := dword(_tmpI) * 100 div _tmpII;
    if (AProgressBar^.Visible = 1) then
      begin
       TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Background_Color, 0,0,0,0);
       TFT_Set_Pen(AProgressBar^.Pen_Color, AProgressBar^.Pen_Width);
       if (AProgressBar^.Rounded = 1) then
         begin
           // First draw back rect
           TFT_Rectangle_Round_Edges(AProgressBar^.Left, AProgressBar^.Top,  AProgressBar^.Left + AProgressBar^.Width, AProgressBar^.Top + AProgressBar^.Height, AProgressBar^.Corner_Radius);
           if (locPosition > 0) then
             begin
               // Then position rect
               TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Color, AProgressBar^.Gradient, AProgressBar^.Gradient_Orientation, AProgressBar^.Gradient_Start_Color, AProgressBar^.Gradient_End_Color);
               TFT_Rectangle(AProgressBar^.Left + AProgressBar^.Corner_Radius, AProgressBar^.Top,  AProgressBar^.Left + AProgressBar^.Corner_Radius  + locPosition *  (AProgressBar^.Width-AProgressBar^.Corner_Radius*2) div 100, AProgressBar^.Top + AProgressBar^.Height);
             end;
         end
       else
         begin
          // First draw back rect
          TFT_Rectangle(AProgressBar^.Left, AProgressBar^.Top, AProgressBar^.Left + AProgressBar^.Width, AProgressBar^.Top + AProgressBar^.Height);
          if (locPosition > 0) then
            begin
              // Then position rect
              TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Color, AProgressBar^.Gradient, AProgressBar^.Gradient_Orientation, AProgressBar^.Gradient_Start_Color, AProgressBar^.Gradient_End_Color);
              TFT_Rectangle(AProgressBar^.Left, AProgressBar^.Top,  AProgressBar^.Left + (locPosition * AProgressBar^.Width) div 100, AProgressBar^.Top + AProgressBar^.Height);
            end;
         end;
       // Draw not smoothed position rect
       if (AProgressBar^.Smooth <> 1) then
          begin
            if(AProgressBar^.Rounded = 1) then
               begin
                 tmpRound := AProgressBar^.Corner_Radius;
                 cnt := move_offset + tmpRound;
                 tmpWidth := AProgressBar^.Width - AProgressBar^.Corner_Radius * 2;
               end
            else
               begin
                 tmpRound := 0;
                 cnt := move_offset;
                 tmpWidth := AProgressBar^.Width;
               end;
            TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Background_Color, 0,0,0,0);
            while (cnt-tmpRound < (locPosition * tmpWidth) div 100) do
              begin
                if  (cnt - tmpRound + 3 >=  tmpWidth * locPosition) then
                    TFT_Rectangle(AProgressBar^.Left + cnt, AProgressBar^.Top, AProgressBar^.Left + tmpRound  + tmpWidth * locPosition , AProgressBar^.Top + AProgressBar^.Height)
                else
                    TFT_Rectangle(AProgressBar^.Left + cnt, AProgressBar^.Top,  AProgressBar^.Left + cnt + 3, AProgressBar^.Top + AProgressBar^.Height);
                cnt := cnt + move_offset + 3;
              end;
          end;
       // Clear caption first
       if (AProgressBar^.Show_Position = 1) then
          begin
            if (AProgressBar^.Show_Percentage = 1) then
              begin
                WordToStr(locPosition , tmpStr);
                DeleteTrailingSpaces(tmpStr);
                strcpy(AProgressBar^.Caption, tmpStr);
                strcat(AProgressBar^.Caption, '%');
              end
            else 
              begin
               WordToStr(AProgressBar^.Position , tmpStr);
               DeleteTrailingSpaces(tmpStr);
               strcpy(AProgressBar^.Caption, tmpStr);
            end;
        TFT_Set_Font(AProgressBar^.FontName, AProgressBar^.Font_Color, FO_HORIZONTAL);
        TFT_Write_Text_Return_Pos(AProgressBar^.Caption, AProgressBar^.Left, AProgressBar^.Top);
        TFT_Write_Text(AProgressBar^.Caption, AProgressBar^.Left + (AProgressBar^.Width - caption_length) div 2, AProgressBar^.Top + (AProgressBar^.Height - caption_height) div 2);
    end;
 end;
end;

procedure SetCurrentMyScreenByIndex(aScreenID : word);
begin
  memset(@CurrentMyScreen, 0, sizeof(CurrentMyScreen));
  if (aScreenID and 0x8000) then
    begin
      aScreenID := aScreenID xor 0x8000;
      CurrentMyScreen.Color        :=  CScreens[aScreenID]^.Color;
      CurrentMyScreen.Width        :=  CScreens[aScreenID]^.Width;
      CurrentMyScreen.Height       :=  CScreens[aScreenID]^.Height;
      CurrentMyScreen.ObjectsCount :=  CScreens[aScreenID]^.ObjectsCount;
      CurrentMyScreen.ButtonsCount   :=  CScreens[aScreenID]^.ButtonsCount;
      CurrentMyScreen.Buttons        :=  CScreens[aScreenID]^.Buttons;
      CurrentMyScreen.CLabelsCount   :=  CScreens[aScreenID]^.CLabelsCount;
      CurrentMyScreen.CLabels        :=  CScreens[aScreenID]^.CLabels;
      CurrentMyScreen.ImagesCount   :=  CScreens[aScreenID]^.ImagesCount;
      CurrentMyScreen.Images        :=  CScreens[aScreenID]^.Images;
      CurrentMyScreen.Boxes_RoundCount   :=  CScreens[aScreenID]^.Boxes_RoundCount;
      CurrentMyScreen.Boxes_Round        :=  CScreens[aScreenID]^.Boxes_Round;
      CurrentMyScreen.ProgressBarsCount   :=  CScreens[aScreenID]^.ProgressBarsCount;
      CurrentMyScreen.ProgressBars        :=  CScreens[aScreenID]^.ProgressBars;
    end
  else
    begin
      CurrentMyScreen.Color        :=  DScreens[aScreenID]^.Color;
      CurrentMyScreen.Width        :=  DScreens[aScreenID]^.Width;
      CurrentMyScreen.Height       :=  DScreens[aScreenID]^.Height;
      CurrentMyScreen.ObjectsCount :=  DScreens[aScreenID]^.ObjectsCount;
      CurrentMyScreen.ButtonsCount   :=  DScreens[aScreenID]^.ButtonsCount;
      CurrentMyScreen.Buttons        :=  DScreens[aScreenID]^.Buttons;
      CurrentMyScreen.Buttons_RoundCount   :=  DScreens[aScreenID]^.Buttons_RoundCount;
      CurrentMyScreen.Buttons_Round        :=  DScreens[aScreenID]^.Buttons_Round;
      CurrentMyScreen.CButtons_RoundCount   :=  DScreens[aScreenID]^.CButtons_RoundCount;
      CurrentMyScreen.CButtons_Round        :=  DScreens[aScreenID]^.CButtons_Round;
      CurrentMyScreen.LabelsCount   :=  DScreens[aScreenID]^.LabelsCount;
      CurrentMyScreen.Labels        :=  DScreens[aScreenID]^.Labels;
      CurrentMyScreen.CBoxesCount   :=  DScreens[aScreenID]^.CBoxesCount;
      CurrentMyScreen.CBoxes        :=  DScreens[aScreenID]^.CBoxes;
      CurrentMyScreen.Boxes_RoundCount   :=  DScreens[aScreenID]^.Boxes_RoundCount;
      CurrentMyScreen.Boxes_Round        :=  DScreens[aScreenID]^.Boxes_Round;
      CurrentMyScreen.CBoxes_RoundCount   :=  DScreens[aScreenID]^.CBoxes_RoundCount;
      CurrentMyScreen.CBoxes_Round        :=  DScreens[aScreenID]^.CBoxes_Round;
      CurrentMyScreen.LinesCount   :=  DScreens[aScreenID]^.LinesCount;
      CurrentMyScreen.Lines        :=  DScreens[aScreenID]^.Lines;
      CurrentMyScreen.RadioButtonsCount   :=  DScreens[aScreenID]^.RadioButtonsCount;
      CurrentMyScreen.RadioButtons        :=  DScreens[aScreenID]^.RadioButtons;
      CurrentMyScreen.ProgressBarsCount   :=  DScreens[aScreenID]^.ProgressBarsCount;
      CurrentMyScreen.ProgressBars        :=  DScreens[aScreenID]^.ProgressBars;
    end;
end;

procedure DrawScreen(aScreenID : word);
var order : word;
var button_idx : byte;
    local_button : ^TButton;
var round_button_idx : byte;
    local_round_button : ^TButton_Round;
var round_cbutton_idx : byte;
    local_round_cbutton : ^TCButton_Round;
var label_idx : byte;
    local_label : ^TLabel;
var clabel_idx : byte;
    local_clabel : ^TCLabel;
var image_idx : byte;
    local_image : ^TImage;
var cbox_idx : byte;
    local_cbox : ^TCBox;
var round_box_idx : byte;
    local_round_box : ^TBox_Round;
var round_cbox_idx : byte;
    local_round_cbox : ^TCBox_Round;
var line_idx : byte;
    local_line : ^TLine;
var radio_button_idx : byte;
    local_radio_button : ^TRadioButton;
var progress_bar_idx : byte;
    local_progress_bar : ^TProgressBar;
var save_bled, save_bled_direction : byte;

  begin
    object_pressed := 0;
    order := 0;
    button_idx := 0;
    round_button_idx := 0;
    round_cbutton_idx := 0;
    label_idx := 0;
    clabel_idx := 0;
    image_idx := 0;
    cbox_idx := 0;
    round_box_idx := 0;
    round_cbox_idx := 0;
    line_idx := 0;
    radio_button_idx := 0;
    progress_bar_idx := 0;
    SetCurrentMyScreenByIndex(aScreenID);
    CurrentScreenID := aScreenID;

    if (display_width <> CurrentMyScreen.Width) or (display_height <> CurrentMyScreen.Height) then
      begin
        save_bled := TFT_BLED;
        save_bled_direction := TFT_BLED_Direction;
        TFT_BLED_Direction := 0;
        TFT_BLED           := 0;
        TFT_Set_Active(@Set_Index, @Write_Command, @Write_Data);
        TFT_Init(CurrentMyScreen.Width, CurrentMyScreen.Height);
        TP_TFT_Init(CurrentMyScreen.Width, CurrentMyScreen.Height, 13, 12);                                  // Initialize touch panel
        TP_TFT_Set_ADC_Threshold(ADC_THRESHOLD);                              // Set touch panel ADC threshold
        TFT_Fill_Screen(CurrentMyScreen.Color);
        display_width := CurrentMyScreen.Width;
        display_height := CurrentMyScreen.Height;
        TFT_BLED           := save_bled;
        TFT_BLED_Direction := save_bled_direction;
    end
    else
      TFT_Fill_Screen(CurrentMyScreen.Color);


    while (order < CurrentMyScreen.ObjectsCount) do
      begin
      if (button_idx < CurrentMyScreen.ButtonsCount) then
        begin
          local_button := GetButton(button_idx);
          if (order = local_button^.Order) then
            begin
              Inc(button_idx);
              Inc(order);
              DrawButton(local_button);
            end;
        end;

      if (round_button_idx < CurrentMyScreen.Buttons_RoundCount) then
        begin
          local_round_button := GetRoundButton(round_button_idx);
          if (order = local_round_button^.Order) then
            begin
              Inc(round_button_idx);
              Inc(order);
              DrawRoundButton(local_round_button);
            end;
        end;

      if (round_cbutton_idx < CurrentMyScreen.CButtons_RoundCount) then
        begin
          local_round_cbutton := GetCRoundButton(round_cbutton_idx);
          if (order = local_round_cbutton^.Order) then
            begin
              Inc(round_cbutton_idx);
              Inc(order);
              DrawCRoundButton(local_round_cbutton);
            end;
        end;

      if (label_idx < CurrentMyScreen.LabelsCount) then
        begin
          local_label := GetLabel(label_idx);
          if (order = local_label^.Order) then
            begin
              Inc(label_idx);
              Inc(order);
              DrawLabel(local_label);
            end;
        end;

      if (clabel_idx < CurrentMyScreen.CLabelsCount) then
        begin
          local_clabel := GetCLabel(clabel_idx);
          if (order = local_clabel^.Order) then
            begin
              Inc(clabel_idx);
              Inc(order);
              DrawCLabel(local_clabel);
            end;
        end;

      if (cbox_idx < CurrentMyScreen.CBoxesCount) then
        begin
          local_cbox := GetCBox(cbox_idx);
          if (order = local_cbox^.Order) then
            begin
              Inc(cbox_idx);
              Inc(order);
              DrawCBox(local_cbox);
            end;
        end;

      if (round_box_idx < CurrentMyScreen.Boxes_RoundCount) then
        begin
          local_round_box := GetBox_Round(round_box_idx);
          if (order = local_round_box^.Order) then
            begin
              Inc(round_box_idx);
              Inc(order);
              DrawRoundBox(local_round_box);
            end;
        end;

      if (round_cbox_idx < CurrentMyScreen.CBoxes_RoundCount) then
        begin
          local_round_cbox := GetCBox_Round(round_cbox_idx);
          if (order = local_round_cbox^.Order) then
            begin
              Inc(round_cbox_idx);
              Inc(order);
              DrawCRoundBox(local_round_cbox);
            end;
        end;

      if (line_idx < CurrentMyScreen.LinesCount) then
        begin
          local_line := GetLine(line_idx);
          if (order = local_line^.Order) then
            begin
              Inc(line_idx);
              Inc(order);
              DrawLine(local_line);
            end;
        end;

      if (image_idx < CurrentMyScreen.ImagesCount) then
        begin
          local_image := GetImage(image_idx);
          if (order = local_image^.Order) then
            begin
              Inc(image_idx);
              Inc(order);
              DrawImage(local_image);
            end;
        end;

      if (radio_button_idx < CurrentMyScreen.RadioButtonsCount) then
        begin
          local_radio_button := GetRadioButton(radio_button_idx);
          if (order = local_radio_button^.Order) then
            begin
              Inc(radio_button_idx);
              Inc(order);
              DrawRadioButton(local_radio_button);
            end;
        end;

      if (progress_bar_idx < CurrentMyScreen.ProgressBarsCount) then
        begin
          local_progress_bar := GetProgressBar(progress_bar_idx);
          if (order = local_progress_bar^.Order) then
            begin
              Inc(progress_bar_idx);
              Inc(order);
              DrawProgressBar(local_progress_bar);
            end;
        end;

    end;
end;

procedure Get_Object( X : word; Y : word);
var counter : integer;
  begin
    button_order        := -1;
    round_button_order  := -1;
    round_cbutton_order := -1;
    label_order         := -1;
    clabel_order        := -1;
    image_order         := -1;
    cbox_order          := -1;
    box_round_order     := -1;
    cbox_round_order    := -1;
    radio_button_order  := -1;
    //  Buttons
    counter := CurrentMyScreen.ButtonsCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_button := GetButton(_object_count);
        if (local_button^.Active = 1) then
          if (IsInsideObject(X, Y, local_button^.Left, local_button^.Top,
                             local_button^.Width, local_button^.Height) = 1) then
            begin
              button_order := local_button^.Order;
              exec_button := local_button;
            end;
      end;

    //  Buttons with Round Edges
    counter := CurrentMyScreen.Buttons_RoundCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_round_button := GetRoundButton(_object_count);
        if (local_round_button^.Active = 1) then
          if (IsInsideObject(X, Y, local_round_button^.Left, local_round_button^.Top,
                             local_round_button^.Width, local_round_button^.Height) = 1) then
            begin
              round_button_order := local_round_button^.Order;
              exec_round_button := local_round_button;
            end;
      end;

    //  CButtons with Round Edges
    counter := CurrentMyScreen.CButtons_RoundCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_round_cbutton := GetCRoundButton(_object_count);
        if (local_round_cbutton^.Active = 1) then
          if (IsInsideObject(X, Y, local_round_cbutton^.Left, local_round_cbutton^.Top,
                             local_round_cbutton^.Width, local_round_cbutton^.Height) = 1) then
            begin
              round_cbutton_order := local_round_cbutton^.Order;
              exec_round_cbutton := local_round_cbutton;
            end;
      end;

    //  Labels
    counter := CurrentMyScreen.LabelsCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_label := GetLabel(_object_count);
        if (local_label^.Active = 1) then
          if (IsInsideObject(X, Y, local_label^.Left, local_label^.Top,
                             local_label^.Width, local_label^.Height) = 1) then
            begin
              label_order := local_label^.Order;
              exec_label := local_label;
            end;
      end;

    //  CLabels
    counter := CurrentMyScreen.CLabelsCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_clabel := GetCLabel(_object_count);
        if (local_clabel^.Active = 1) then
          if (IsInsideObject(X, Y, local_clabel^.Left, local_clabel^.Top,
                             local_clabel^.Width, local_clabel^.Height) = 1) then
            begin
              clabel_order := local_clabel^.Order;
              exec_clabel := local_clabel;
            end;
      end;

    //  Images
    counter := CurrentMyScreen.ImagesCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_image := GetImage(_object_count);
        if (local_image^.Active = 1) then
          if (IsInsideObject(X, Y, local_image^.Left, local_image^.Top,
                             local_image^.Width, local_image^.Height) = 1) then
            begin
              image_order := local_image^.Order;
              exec_image := local_image;
            end;
      end;

    //  CBoxes
    counter := CurrentMyScreen.CBoxesCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_cbox := GetCBox(_object_count);
        if (local_cbox^.Active = 1) then
          if (IsInsideObject(X, Y, local_cbox^.Left, local_cbox^.Top,
                             local_cbox^.Width, local_cbox^.Height) = 1) then
            begin
              cbox_order := local_cbox^.Order;
              exec_cbox := local_cbox;
            end;
      end;

    //  Boxes with Round Edges
    counter := CurrentMyScreen.Boxes_RoundCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_round_box := GetBox_Round(_object_count);
        if (local_round_box^.Active = 1) then
          if (IsInsideObject(X, Y, local_round_box^.Left, local_round_box^.Top,
                             local_round_box^.Width, local_round_box^.Height) = 1) then
            begin
              box_round_order := local_round_box^.Order;
              exec_round_box := local_round_box;
            end;
      end;

    //  CBoxes with Round Edges
    counter := CurrentMyScreen.CBoxes_RoundCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_round_cbox := GetCBox_Round(_object_count);
        if (local_round_cbox^.Active = 1) then
          if (IsInsideObject(X, Y, local_round_cbox^.Left, local_round_cbox^.Top,
                             local_round_cbox^.Width, local_round_cbox^.Height) = 1) then
            begin
              cbox_round_order := local_round_cbox^.Order;
              exec_round_cbox := local_round_cbox;
            end;
      end;

    // RadioButtons
    counter := CurrentMyScreen.RadioButtonsCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_radio_button := GetRadioButton(_object_count);
        if (local_radio_button^.Active = 1) then
          if (IsInsideObject(X, Y, local_radio_button^.Left, local_radio_button^.Top,
                             local_radio_button^.Width, local_radio_button^.Height) = 1) then
            begin
              radio_button_order := local_radio_button^.Order;
              exec_radio_button := local_radio_button;
            end;
      end;

    _object_count := -1;
    if (button_order >  _object_count ) then
      _object_count := button_order;
    if (round_button_order >  _object_count ) then
      _object_count := round_button_order;
    if (round_cbutton_order >  _object_count ) then
      _object_count := round_cbutton_order;
    if (label_order >  _object_count ) then
      _object_count := label_order;
    if (clabel_order >  _object_count ) then
      _object_count := clabel_order;
    if (image_order >  _object_count ) then
      _object_count := image_order;
    if (cbox_order >  _object_count ) then
      _object_count := cbox_order;
    if (box_round_order >  _object_count ) then
      _object_count := box_round_order;
    if (cbox_round_order >  _object_count ) then
      _object_count := cbox_round_order;
    if (radio_button_order >  _object_count ) then
      _object_count := radio_button_order;
  end;


procedure Process_TP_Press( X : word; Y : word); // static
  begin
    exec_button         := 0;
    exec_round_button   := 0;
    exec_round_cbutton  := 0;
    exec_label          := 0;
    exec_clabel         := 0;
    exec_image          := 0;
    exec_cbox           := 0;
    exec_round_box      := 0;
    exec_round_cbox     := 0;
    exec_radio_button   := 0;

    Get_Object(X, Y);

    if (_object_count <> -1) then
      begin
        if (_object_count = button_order) then
          if (exec_button^.Active = 1) then
            if (exec_button^.OnPressPtr <> 0) then
              begin
                exec_button^.OnPressPtr^();
                exit;
              end;

        if (_object_count = round_button_order) then
          if (exec_round_button^.Active = 1) then
            if (exec_round_button^.OnPressPtr <> 0) then
              begin
                exec_round_button^.OnPressPtr^();
                exit;
              end;

        if (_object_count = round_cbutton_order) then
          if (exec_round_cbutton^.Active = 1) then
            if (exec_round_cbutton^.OnPressPtr <> 0) then
              begin
                exec_round_cbutton^.OnPressPtr^();
                exit;
              end;

        if (_object_count = label_order) then
          if (exec_label^.Active = 1) then
            if (exec_label^.OnPressPtr <> 0) then
              begin
                exec_label^.OnPressPtr^();
                exit;
              end;

        if (_object_count = clabel_order) then
          if (exec_clabel^.Active = 1) then
            if (exec_clabel^.OnPressPtr <> 0) then
              begin
                exec_clabel^.OnPressPtr^();
                exit;
              end;

        if (_object_count = image_order) then
          if (exec_image^.Active = 1) then
            if (exec_image^.OnPressPtr <> 0) then
              begin
                exec_image^.OnPressPtr^();
                exit;
              end;

        if (_object_count = cbox_order) then
          if (exec_cbox^.Active = 1) then
            if (exec_cbox^.OnPressPtr <> 0) then
              begin
                exec_cbox^.OnPressPtr^();
                exit;
              end;

        if (_object_count = box_round_order) then
          if (exec_round_box^.Active = 1) then
            if (exec_round_box^.OnPressPtr <> 0) then
              begin
                exec_round_box^.OnPressPtr^();
                exit;
              end;

        if (_object_count = cbox_round_order) then
          if (exec_round_cbox^.Active = 1) then
            if (exec_round_cbox^.OnPressPtr <> 0) then
              begin
                exec_round_cbox^.OnPressPtr^();
                exit;
              end;

        if (_object_count = radio_button_order) then
          if (exec_radio_button^.Active = 1) then
            if (exec_radio_button^.OnPressPtr <> 0) then
              begin
                exec_radio_button^.OnPressPtr^();
                exit;
              end;

      end;
  end;

procedure Process_TP_Up( X : word; Y : word); // static
  begin
    case PressedObjectType of
      // Button
      0 : begin
            if (PressedObject <> 0) then
              begin
                exec_button := ^TButton(PressedObject);
                if ((exec_button^.PressColEnabled = 1) and (exec_button^.OwnerScreenID = CurrentScreenID)) then
                  DrawButton(exec_button);
              end;
          end;
      // Round Button
      1 : begin
            if (PressedObject <> 0) then
              begin
                exec_round_button := ^TButton_Round(PressedObject);
                if ((exec_round_button^.PressColEnabled = 1) and (exec_round_button^.OwnerScreenID = CurrentScreenID)) then
                  DrawRoundButton(exec_round_button);
              end;
          end;
      // Round CButton
      9 : begin
            if (PressedObject <> 0) then
              begin
                exec_round_cbutton := ^TCButton_Round(PressedObject);
                if ((exec_round_cbutton^.PressColEnabled = 1) and (exec_round_cbutton^.OwnerScreenID = CurrentScreenID)) then
                  DrawCRoundButton(exec_round_cbutton);
              end;
          end;
      // CBox
      14 : begin
            if (PressedObject <> 0) then
              begin
                exec_cbox := ^TCBox(PressedObject);
                if ((exec_cbox^.PressColEnabled = 1) and (exec_cbox^.OwnerScreenID = CurrentScreenID)) then
                  DrawCBox(exec_cbox);
              end;
          end;
      // Round Box
      7 : begin
            if (PressedObject <> 0) then
              begin
                exec_round_box := ^TBox_Round(PressedObject);
                if ((exec_round_box^.PressColEnabled = 1) and (exec_round_box^.OwnerScreenID = CurrentScreenID)) then
                  DrawRoundBox(exec_round_box);
              end;
          end;
      // CRound Box
      15 : begin
            if (PressedObject <> 0) then
              begin
                exec_round_cbox := ^TCBox_Round(PressedObject);
                if ((exec_round_cbox^.PressColEnabled = 1) and (exec_round_cbox^.OwnerScreenID = CurrentScreenID)) then
                  DrawCRoundBox(exec_round_cbox);
              end;
          end;
      // Radio Button
      17 : begin
            if (PressedObject <> 0) then
              begin
                exec_radio_button := ^TRadioButton(PressedObject);
                if ((exec_radio_button^.PressColEnabled = 1) and (exec_radio_button^.OwnerScreenID = CurrentScreenID)) then
                  DrawRadioButton(exec_radio_button);
              end;
          end;
    end;

    exec_label          := 0;
    exec_clabel          := 0;
    exec_image          := 0;

    Get_Object(X, Y);

    if (_object_count <> -1) then
      begin
        // Buttons
        if (_object_count = button_order) then
          begin
            if (exec_button^.Active = 1) then
              begin
                if (exec_button^.OnUpPtr <> 0) then
                  exec_button^.OnUpPtr();
                if PressedObject = TPointer(exec_button) then
                  if (exec_button^.OnClickPtr <> 0) then
                    exec_button^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // Buttons with Round Edges
        if (_object_count = round_button_order) then
          begin
            if (exec_round_button^.Active = 1) then
              begin
                if (exec_round_button^.OnUpPtr <> 0) then
                  exec_round_button^.OnUpPtr();
                if PressedObject = TPointer(exec_round_button) then
                  if (exec_round_button^.OnClickPtr <> 0) then
                    exec_round_button^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // CButtons with Round Edges
        if (_object_count = round_cbutton_order) then
          begin
            if (exec_round_cbutton^.Active = 1) then
              begin
                if (exec_round_cbutton^.OnUpPtr <> 0) then
                  exec_round_cbutton^.OnUpPtr();
                if PressedObject = TPointer(exec_round_cbutton) then
                  if (exec_round_cbutton^.OnClickPtr <> 0) then
                    exec_round_cbutton^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // Labels
        if (_object_count = label_order) then
          begin
            if (exec_label^.Active = 1) then
              begin
                if (exec_label^.OnUpPtr <> 0) then
                  exec_label^.OnUpPtr();
                if PressedObject = TPointer(exec_label) then
                  if (exec_label^.OnClickPtr <> 0) then
                    exec_label^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // CLabels
        if (_object_count = clabel_order) then
          begin
            if (exec_clabel^.Active = 1) then
              begin
                if (exec_clabel^.OnUpPtr <> 0) then
                  exec_clabel^.OnUpPtr();
                if PressedObject = TPointer(exec_clabel) then
                  if (exec_clabel^.OnClickPtr <> 0) then
                    exec_clabel^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // Images
        if (_object_count = image_order) then
          begin
            if (exec_image^.Active = 1) then
              begin
                if (exec_image^.OnUpPtr <> 0) then
                  exec_image^.OnUpPtr();
                if PressedObject = TPointer(exec_image) then
                  if (exec_image^.OnClickPtr <> 0) then
                    exec_image^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // CBoxes
        if (_object_count = cbox_order) then
          begin
            if (exec_cbox^.Active = 1) then
              begin
                if (exec_cbox^.OnUpPtr <> 0) then
                  exec_cbox^.OnUpPtr();
                if PressedObject = TPointer(exec_cbox) then
                  if (exec_cbox^.OnClickPtr <> 0) then
                    exec_cbox^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // Boxes with Round Edges
        if (_object_count = box_round_order) then
          begin
            if (exec_round_box^.Active = 1) then
              begin
                if (exec_round_box^.OnUpPtr <> 0) then
                  exec_round_box^.OnUpPtr();
                if PressedObject = TPointer(exec_round_box) then
                  if (exec_round_box^.OnClickPtr <> 0) then
                    exec_round_box^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // CBoxes with Round Edges
        if (_object_count = cbox_round_order) then
          begin
            if (exec_round_cbox^.Active = 1) then
              begin
                if (exec_round_cbox^.OnUpPtr <> 0) then
                  exec_round_cbox^.OnUpPtr();
                if PressedObject = TPointer(exec_round_cbox) then
                  if (exec_round_cbox^.OnClickPtr <> 0) then
                    exec_round_cbox^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // RadioButtons
        if (_object_count = radio_button_order) then
          begin
            if (exec_radio_button^.Active = 1) then
              begin
                if (exec_radio_button^.OnUpPtr <> 0) then
                  exec_radio_button^.OnUpPtr();
                if PressedObject = TPointer(exec_radio_button) then
                  if (exec_radio_button^.OnClickPtr <> 0) then
                    exec_radio_button^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

      end;
    PressedObject := 0;
    PressedObjectType := -1;
  end;

procedure Process_TP_Down( X : word; Y : word); // static
  begin
    object_pressed      := 0;
    exec_button         := 0;
    exec_round_button   := 0;
    exec_round_cbutton  := 0;
    exec_label          := 0;
    exec_clabel         := 0;
    exec_image          := 0;
    exec_cbox           := 0;
    exec_round_box      := 0;
    exec_round_cbox     := 0;
    exec_radio_button   := 0;

    Get_Object(X, Y);

    if (_object_count <> -1) then
      begin
        if (_object_count = button_order) then
          if (exec_button^.Active = 1) then
            begin
              if (exec_button^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawButton(exec_button);
                end;
              PressedObject := TPointer(exec_button);
              PressedObjectType := 0;
              if (exec_button^.OnDownPtr <> 0) then
                begin
                  exec_button^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = round_button_order) then
          if (exec_round_button^.Active = 1) then
            begin
              if (exec_round_button^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawRoundButton(exec_round_button);
                end;
              PressedObject := TPointer(exec_round_button);
              PressedObjectType := 1;
              if (exec_round_button^.OnDownPtr <> 0) then
                begin
                  exec_round_button^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = round_cbutton_order) then
          if (exec_round_cbutton^.Active = 1) then
            begin
              if (exec_round_cbutton^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawCRoundButton(exec_round_cbutton);
                end;
              PressedObject := TPointer(exec_round_cbutton);
              PressedObjectType := 9;
              if (exec_round_cbutton^.OnDownPtr <> 0) then
                begin
                  exec_round_cbutton^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = label_order) then
          if (exec_label^.Active = 1) then
            begin
              PressedObject := TPointer(exec_label);
              PressedObjectType := 2;
              if (exec_label^.OnDownPtr <> 0) then
                begin
                  exec_label^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = clabel_order) then
          if (exec_clabel^.Active = 1) then
            begin
              PressedObject := TPointer(exec_clabel);
              PressedObjectType := 10;
              if (exec_clabel^.OnDownPtr <> 0) then
                begin
                  exec_clabel^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = image_order) then
          if (exec_image^.Active = 1) then
            begin
              PressedObject := TPointer(exec_image);
              PressedObjectType := 3;
              if (exec_image^.OnDownPtr <> 0) then
                begin
                  exec_image^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = cbox_order) then
          if (exec_cbox^.Active = 1) then
            begin
              if (exec_cbox^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawCBox(exec_cbox);
                end;
              PressedObject := TPointer(exec_cbox);
              PressedObjectType := 14;
              if (exec_cbox^.OnDownPtr <> 0) then
                begin
                  exec_cbox^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = box_round_order) then
          if (exec_round_box^.Active = 1) then
            begin
              if (exec_round_box^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawRoundBox(exec_round_box);
                end;
              PressedObject := TPointer(exec_round_box);
              PressedObjectType := 7;
              if (exec_round_box^.OnDownPtr <> 0) then
                begin
                  exec_round_box^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = cbox_round_order) then
          if (exec_round_cbox^.Active = 1) then
            begin
              if (exec_round_cbox^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawCRoundBox(exec_round_cbox);
                end;
              PressedObject := TPointer(exec_round_cbox);
              PressedObjectType := 15;
              if (exec_round_cbox^.OnDownPtr <> 0) then
                begin
                  exec_round_cbox^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = radio_button_order) then
          if (exec_radio_button^.Active = 1) then
            begin
              if (exec_radio_button^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawRadioButton(exec_radio_button);
                end;
              PressedObject := TPointer(exec_radio_button);
              PressedObjectType := 17;
              if (exec_radio_button^.OnDownPtr <> 0) then
                begin
                  exec_radio_button^.OnDownPtr^();
                  exit;
                end;
            end;

      end;
  end;

procedure Check_TP();
  begin
    if (TP_TFT_Press_Detect()) then
      begin
        if (TP_TFT_Get_Coordinates(@Xcoord, @Ycoord) = 0) then
            // After a PRESS is detected read X-Y and convert it to Display dimensions space
          begin
            Process_TP_Press(Xcoord, Ycoord);
            if PenDown = 0 then
              begin
                PenDown := 1;
                Process_TP_Down(Xcoord, Ycoord);
              end;
          end;
      end
    else if PenDown = 1 then
      begin
        PenDown := 0;
        Process_TP_Up(Xcoord, Ycoord);
      end;
  end;

procedure Init_MCU();
  begin
    TRISE := 0;
    TFT_DataPort_Direction := 0;
    CLKDIV := CLKDIV and 0xFFE0;    // PLLPRE<4:0> = 0  ->  N1 = 2    8MHz / 2 = 4MHz
                                    // (must be within 0.8 MHz to 8 MHz range)
    PLLFBD :=   30;                 // PLLDIV<8:0> = 30 ->  M = 32    4MHz * 32 = 128MHz
                                    // (must be within 100 MHz to 200 MHz range)
    PLLPOST_1_bit := 0;
    PLLPOST_0_bit := 0;             // PLLPOST<1:0> = 0 ->  N2 = 2    128MHz / 2 = 64MHz
                                    // (must be within 12.5 MHz to 80 MHz range)
    Delay_ms(150);
    TFT_Set_Default_Mode();
    TP_TFT_Rotate_180(0);
    TFT_Set_Active(@Set_Index, @Write_Command, @Write_Data);
  end;

procedure Start_TP();
  begin
    Init_MCU();

    InitializeTouchPanel();

    Delay_ms(1000);
    TFT_Fill_Screen(0);
    Calibrate();
    TFT_Fill_Screen(0);

    InitializeObjects();
    display_width := Start.Width;
    display_height := Start.Height;
    DrawScreen(32768);
  end;

end.
