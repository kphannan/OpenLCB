unit Throttle_driver;

uses Throttle_objects, Throttle_resources;

/////////////////////////
// External Declarations
/////////////////////////

procedure DrawScreen(aScreenID : word);
procedure Process_TP_Press( X : word; Y : word);
procedure Check_TP();
procedure Start_TP();
procedure DrawRoundButton(Around_button : ^TButton_Round);
procedure DrawLabel(ALabel : ^TLabel);
procedure DrawCLabel(ALabel : ^TCLabel);
procedure DrawImage(AImage : ^TImage);
procedure DrawCircleButton(ACircle_button : ^TCircleButton);
procedure DrawBox(ABox : ^TBox);
procedure DrawCBox(ABox : ^TCBox);
procedure DrawRoundBox(Around_box : ^TBox_Round);
procedure DrawLine(Aline : ^TLine);
procedure DrawRadioButton(ARadioButton : ^TRadioButton);
procedure DrawProgressBar(AProgressBar : ^TProgressBar);
procedure UpdatePBPosition(AProgressBar : ^TProgressBar);


// TFT module connections
var TFT_DataPort : char  at LATA;
    TFT_RST : sbit  at LATC1_bit;
    TFT_BLED : sbit  at LATC2_bit;
    TFT_RS : sbit  at LATB15_bit;
    TFT_CS : sbit  at LATC3_bit;
    TFT_RD : sbit  at LATD12_bit;
    TFT_WR : sbit  at LATD13_bit;
    TFT_DataPort_Direction : char  at TRISA;
    TFT_RST_Direction : sbit  at TRISC1_bit;
    TFT_BLED_Direction : sbit  at TRISC2_bit;
    TFT_RS_Direction : sbit  at TRISB15_bit;
    TFT_CS_Direction : sbit  at TRISC3_bit;
    TFT_RD_Direction : sbit  at TRISD12_bit;
    TFT_WR_Direction : sbit  at TRISD13_bit;
// End TFT module connections

// Touch Panel module connections
var DriveX_Left : sbit at LATB13_bit;
var DriveX_Right : sbit at LATB11_bit;
var DriveY_Up : sbit at LATB12_bit;
var DriveY_Down : sbit at LATB10_bit;
var DriveX_Left_Direction : sbit at TRISB13_bit;
var DriveX_Right_Direction : sbit at TRISB11_bit;
var DriveY_Up_Direction : sbit at TRISB12_bit;
var DriveY_Down_Direction : sbit at TRISB10_bit;
// End Touch Panel module connections

// Global variables
var Xcoord, Ycoord : word;
const ADC_THRESHOLD = 800;
var PenDown : byte;
type TPointer = dword;
var PressedObject : TPointer;
var PressedObjectType : integer;
var display_width, display_height : word;

var
    _object_count : integer;
    object_pressed : byte;
    local_round_button : ^TButton_Round;
    exec_round_button : ^TButton_Round;
    round_button_order : integer;
    local_label : ^TLabel;
    exec_label : ^TLabel;
    label_order : integer;
    local_clabel : ^TCLabel;
    exec_clabel : ^TCLabel;
    clabel_order : integer;
    local_image : ^TImage;
    exec_image : ^TImage;
    image_order : integer;
    local_circle_button : ^TCircleButton;
    exec_circle_button : ^TCircleButton;
    circle_button_order : integer;
    local_box : ^TBox;
    exec_box : ^TBox;
    box_order : integer;
    local_cbox : ^TCBox;
    exec_cbox : ^TCBox;
    cbox_order : integer;
    local_round_box : ^TBox_Round;
    exec_round_box : ^TBox_Round;
    box_round_order : integer;
    local_radio_button : ^TRadioButton;
    exec_radio_button : ^TRadioButton;
    radio_button_order : integer;
    local_progress_bar : ^TProgressBar;
    exec_progress_bar : ^TProgressBar;
    progress_bar_order : integer;



/////////////////////////
var CurrentScreenID : word;

const Screen1_CLabels  : array[4] of ^TCLabel; code; far; forward;
const Screen1_Images  : array[1] of ^TImage; code; far; forward;
const Screen1_CBoxes  : array[1] of ^TCBox; code; far; forward;
const Screen1_Boxes_Round  : array[1] of ^TBox_Round; code; far; forward;
const Screen1_ProgressBars  : array[1] of ^TProgressBar; code; far; forward;

const Start           : TCScreen =
         (
         0xA514                ,//  Start.Color
         320                   ,//  Start.Width                     
         240                   ,//  Start.Height                    
         8                     ,//  Start.ObjectsCount             
         4                     ,//  Start.CLabelsCount              
         @Screen1_CLabels      ,//  Start.CLabels
         1                     ,//  Start.ImagesCount              
         @Screen1_Images       ,//  Start.Images
         1                     ,//  Start.CBoxesCount              
         @Screen1_CBoxes       ,//  Start.CBoxes
         1                     ,//  Start.Boxes_RoundCount              
         @Screen1_Boxes_Round  ,//  Start.Boxes_Round
         1                     ,//  Start.ProgressBarsCount         
         @Screen1_ProgressBars //  Start._ProgressBars
         ); code; far;

    const Bkgnd : TCBox = 
         (
         32768                 , //   Bkgnd.OwnerScreenID
         0                     , //   Bkgnd.Order           
         0                     , //   Bkgnd.Left           
         0                     , //   Bkgnd.Top             
         320                   , //   Bkgnd.Width           
         240                   , //   Bkgnd.Height          
         1                     , //   Bkgnd.Pen_Width       
         0x0000                , //   Bkgnd.Pen_Color       
         1                     , //   Bkgnd.Visible         
         0                     , //   Bkgnd.Active          
         1                     , //   Bkgnd.Transparent     
         1                     , //   Bkgnd.Gradient        
         0                     , //   Bkgnd.Gradient_Orientation    
         0x2104                , //   Bkgnd.Gradient_Orientation    
         0x8410                , //   Bkgnd.Gradient_End_Color    
         0xC618                , //   Bkgnd.Color           
         1                     , //   Bkgnd.PressColEnabled 
         0x8410                , //   Bkgnd.Press_Color     
         0                     , //    Bkgnd.OnUpPtr
         0                     , //    Bkgnd.OnDownPtr
         0                     , //    Bkgnd.OnClickPtr
         0                       //    Bkgnd.OnPressPtr
         ); code; far;
    const LabelStartMustangpeak_Caption : string[23] = 'Mustangpeak Engineering'; code; far;
    const LabelStartMustangpeak : TCLabel = 
         (
         32768                 , //   LabelStartMustangpeak.OwnerScreenID
         1                     , //   LabelStartMustangpeak.Order          
         19                    , //   LabelStartMustangpeak.Left           
         11                    , //   LabelStartMustangpeak.Top             
         283                   , //   LabelStartMustangpeak.Width         
         28                    , //   LabelStartMustangpeak.Height       
         @LabelStartMustangpeak_Caption, //   LabelStartMustangpeak.Caption        
         @Tahoma25x25_Bold     , //   LabelStartMustangpeak.FontName       
         0xFFFF                , //   LabelStartMustangpeak.Font_Color     
         1                     , //   LabelStartMustangpeak.Visible        
         0                     , //   LabelStartMustangpeak.Active        
         0                     , //    LabelStartMustangpeak.OnUpPtr
         0                     , //    LabelStartMustangpeak.OnDownPtr
         0                     , //    LabelStartMustangpeak.OnClickPtr
         0                       //    LabelStartMustangpeak.OnPressPtr
         ); code; far;

    const LabelStartThrottle_Caption : string[16] = 'OpenLCB Throttle'; code; far;
    const LabelStartThrottle : TCLabel = 
         (
         32768                 , //   LabelStartThrottle.OwnerScreenID
         2                     , //   LabelStartThrottle.Order          
         92                    , //   LabelStartThrottle.Left           
         42                    , //   LabelStartThrottle.Top             
         129                   , //   LabelStartThrottle.Width         
         21                    , //   LabelStartThrottle.Height       
         @LabelStartThrottle_Caption, //   LabelStartThrottle.Caption        
         @Tahoma16x19_Regular  , //   LabelStartThrottle.FontName       
         0xFFFF                , //   LabelStartThrottle.Font_Color     
         1                     , //   LabelStartThrottle.Visible        
         0                     , //   LabelStartThrottle.Active        
         0                     , //    LabelStartThrottle.OnUpPtr
         0                     , //    LabelStartThrottle.OnDownPtr
         0                     , //    LabelStartThrottle.OnClickPtr
         0                       //    LabelStartThrottle.OnPressPtr
         ); code; far;

    const LabelStartLoading_Caption : string[10] = 'Loading...'; code; far;
    const LabelStartLoading : TCLabel = 
         (
         32768                 , //   LabelStartLoading.OwnerScreenID
         3                     , //   LabelStartLoading.Order          
         122                   , //   LabelStartLoading.Left           
         192                   , //   LabelStartLoading.Top             
         72                    , //   LabelStartLoading.Width         
         21                    , //   LabelStartLoading.Height       
         @LabelStartLoading_Caption, //   LabelStartLoading.Caption        
         @Tahoma16x19_Regular  , //   LabelStartLoading.FontName       
         0xFFFF                , //   LabelStartLoading.Font_Color     
         1                     , //   LabelStartLoading.Visible        
         1                     , //   LabelStartLoading.Active        
         0                     , //    LabelStartLoading.OnUpPtr
         0                     , //    LabelStartLoading.OnDownPtr
         0                     , //    LabelStartLoading.OnClickPtr
         0                       //    LabelStartLoading.OnPressPtr
         ); code; far;

    const LabelStartVer_Caption : string[11] = 'Version 0.1'; code; far;
    const LabelStartVer : TCLabel = 
         (
         32768                 , //   LabelStartVer.OwnerScreenID
         4                     , //   LabelStartVer.Order          
         112                   , //   LabelStartVer.Left           
         173                   , //   LabelStartVer.Top             
         82                    , //   LabelStartVer.Width         
         21                    , //   LabelStartVer.Height       
         @LabelStartVer_Caption, //   LabelStartVer.Caption        
         @Tahoma16x19_Regular  , //   LabelStartVer.FontName       
         0xFFFF                , //   LabelStartVer.Font_Color     
         1                     , //   LabelStartVer.Visible        
         1                     , //   LabelStartVer.Active        
         0                     , //    LabelStartVer.OnUpPtr
         0                     , //    LabelStartVer.OnDownPtr
         0                     , //    LabelStartVer.OnClickPtr
         0                       //    LabelStartVer.OnPressPtr
         ); code; far;

var BoxRoundStartBkGnd : TBox_Round;
var ImageStart : TImage;
var ProgressBarStart : TProgressBar;
    ProgressBarStart_Caption : string[5];

      const Screen1_CLabels  : array[4] of ^TCLabel =
         (
         @LabelStartMustangpeak,
         @LabelStartThrottle,  
         @LabelStartLoading,   
         @LabelStartVer        
         ); code; far;
      const Screen1_Images  : array[1] of ^TImage =
         (
         @ImageStart           
         ); code; far;
      const Screen1_CBoxes  : array[1] of ^TCBox =
         (
         @Bkgnd                
         ); code; far;
      const Screen1_Boxes_Round  : array[1] of ^TBox_Round =
         (
         @BoxRoundStartBkGnd   
         ); code; far;
      const Screen1_ProgressBars  : array[1] of ^TProgressBar =
         (
         @ProgressBarStart     
         ); code; far;

const Screen2_Buttons_Round  : array[14] of ^TButton_Round; code; far; forward;
const Screen2_Boxes  : array[1] of ^TBox; code; far; forward;
const Screen2_ProgressBars  : array[1] of ^TProgressBar; code; far; forward;

var Throttle           : TScreen;
var Box1 : TBox;
var ButtonRound2 : TButton_Round;
    ButtonRound2_Caption : string[1];

var ButtonRound3 : TButton_Round;
    ButtonRound3_Caption : string[1];

var ButtonRound4 : TButton_Round;
    ButtonRound4_Caption : string[10];

var ButtonRound5 : TButton_Round;
    ButtonRound5_Caption : string[10];

var ButtonRound6 : TButton_Round;
    ButtonRound6_Caption : string[10];

var ButtonRound7 : TButton_Round;
    ButtonRound7_Caption : string[10];

var ButtonRound8 : TButton_Round;
    ButtonRound8_Caption : string[10];

var ButtonRound9 : TButton_Round;
    ButtonRound9_Caption : string[10];

var ButtonRound10 : TButton_Round;
    ButtonRound10_Caption : string[10];

var ButtonRound11 : TButton_Round;
    ButtonRound11_Caption : string[9];

var ButtonRound12 : TButton_Round;
    ButtonRound12_Caption : string[9];

var ButtonRound13 : TButton_Round;
    ButtonRound13_Caption : string[7];

var ButtonRound14 : TButton_Round;
    ButtonRound14_Caption : string[7];

var ProgressBar1 : TProgressBar;
    ProgressBar1_Caption : string[5];

var ButtonRound15 : TButton_Round;
    ButtonRound15_Caption : string[10];

      const Screen2_Buttons_Round  : array[14] of ^TButton_Round =
         (
         @ButtonRound2,        
         @ButtonRound3,        
         @ButtonRound4,        
         @ButtonRound5,        
         @ButtonRound6,        
         @ButtonRound7,        
         @ButtonRound8,        
         @ButtonRound9,        
         @ButtonRound10,       
         @ButtonRound11,       
         @ButtonRound12,       
         @ButtonRound13,       
         @ButtonRound14,       
         @ButtonRound15        
         ); code; far;
      const Screen2_Boxes  : array[1] of ^TBox =
         (
         @Box1                 
         ); code; far;
      const Screen2_ProgressBars  : array[1] of ^TProgressBar =
         (
         @ProgressBar1         
         ); code; far;

const Screen3_Buttons_Round  : array[2] of ^TButton_Round; code; far; forward;
const Screen3_Labels  : array[2] of ^TLabel; code; far; forward;
const Screen3_CircleButtons  : array[10] of ^TCircleButton; code; far; forward;
const Screen3_Lines  : array[1] of ^TLine; code; far; forward;
const Screen3_RadioButtons  : array[2] of ^TRadioButton; code; far; forward;

var TrainSelector           : TScreen;
var CircleButton1 : TCircleButton;
    CircleButton1_Caption : string[1];

var CircleButton2 : TCircleButton;
    CircleButton2_Caption : string[1];

var CircleButton3 : TCircleButton;
    CircleButton3_Caption : string[1];

var CircleButton4 : TCircleButton;
    CircleButton4_Caption : string[1];

var CircleButton5 : TCircleButton;
    CircleButton5_Caption : string[1];

var CircleButton6 : TCircleButton;
    CircleButton6_Caption : string[1];

var CircleButton7 : TCircleButton;
    CircleButton7_Caption : string[1];

var CircleButton8 : TCircleButton;
    CircleButton8_Caption : string[1];

var CircleButton9 : TCircleButton;
    CircleButton9_Caption : string[1];

var CircleButton10 : TCircleButton;
    CircleButton10_Caption : string[1];

var Label1 : TLabel;
    Label1_Caption : string[7];

var RadioButton1 : TRadioButton;
    RadioButton1_Caption : string[5];

var RadioButton2 : TRadioButton;
    RadioButton2_Caption : string[4];

var Label2 : TLabel;
    Label2_Caption : string[4];

var ButtonRound16 : TButton_Round;
    ButtonRound16_Caption : string[2];

var ButtonRound17 : TButton_Round;
    ButtonRound17_Caption : string[6];

var Line1 : TLine;
      const Screen3_Buttons_Round  : array[2] of ^TButton_Round =
         (
         @ButtonRound16,       
         @ButtonRound17        
         ); code; far;
      const Screen3_Labels  : array[2] of ^TLabel =
         (
         @Label1,              
         @Label2               
         ); code; far;
      const Screen3_CircleButtons  : array[10] of ^TCircleButton =
         (
         @CircleButton1,       
         @CircleButton2,       
         @CircleButton3,       
         @CircleButton4,       
         @CircleButton5,       
         @CircleButton6,       
         @CircleButton7,       
         @CircleButton8,       
         @CircleButton9,       
         @CircleButton10       
         ); code; far;
      const Screen3_Lines  : array[1] of ^TLine =
         (
         @Line1                
         ); code; far;
      const Screen3_RadioButtons  : array[2] of ^TRadioButton =
         (
         @RadioButton1,        
         @RadioButton2         
         ); code; far;

const DScreens : array[2] of ^TScreen =
         (
                  @Throttle             ,//   ThrottleScreenID = 0
                  @TrainSelector        //   TrainSelectorScreenID = 1
         ); code; far;
const CScreens : array[1] of ^TCScreen = 
         (
                  @Start                //   StartScreenID = 32768
         ); code; far;

var CurrentMyScreen : TMyScreen;
implementation



procedure Auxiliary_Code();
  begin
    // Place your code here
  end;

// set index
procedure Set_Index(index : byte);
  begin
    TFT_RS := 0;
    Lo(LATA) := index;
    TFT_WR := 0;
    TFT_WR := 1;
  end;

// write command
procedure Write_Command(cmd : byte);
  begin
    TFT_RS := 1;
    Lo(LATA) := cmd;
    TFT_WR := 0;
    TFT_WR := 1;
  end;

// write data
procedure Write_Data(_data : word);
  begin
    TFT_RS := 1;
    Lo(LATE) := Hi(_data);
    Lo(LATA) := Lo(_data);
    TFT_WR := 0;
    TFT_WR := 1;
  end;


procedure Init_ADC();
  begin
    AD1PCFGL := 0xCFFF;
    AD1PCFGH := 0xCFFF;
    ADC1_Init();
  end;
procedure InitializeTouchPanel(); // static
  begin
    Init_ADC();
    TFT_Set_Active(@Set_Index, @Write_Command, @Write_Data);
    TFT_Init(320, 240);

    TP_TFT_Init(320, 240, 13, 12);                                  // Initialize touch panel
    TP_TFT_Set_ADC_Threshold(ADC_THRESHOLD);                            // Set touch panel ADC threshold

    PenDown := 0;
    PressedObject := 0;
    PressedObjectType := -1;
  end;


procedure Calibrate();
  begin
    TFT_Set_Pen(CL_WHITE, 3);
    TFT_Set_Font(@TFT_defaultFont, CL_WHITE, FO_HORIZONTAL);
    TFT_Write_Text('Touch selected corners for calibration', 50, 80);
    TFT_Line(315, 1, 319, 1);
    TFT_Line(310, 10, 319, 1);
    TFT_Line(319, 5, 319, 1);
    TFT_Write_Text('first here', 230, 20);

    TP_TFT_Calibrate_Min();                      // Calibration of TP minimum
    Delay_ms(500);

    TFT_Set_Pen(CL_BLACK, 3);
    TFT_Set_Font(@TFT_defaultFont, CL_BLACK, FO_HORIZONTAL);
    TFT_Line(315, 1, 319, 1);
    TFT_Line(310, 10, 319, 1);
    TFT_Line(319, 5, 319, 1);
    TFT_Write_Text('first here', 230, 20);

    TFT_Set_Pen(CL_WHITE, 3);
    TFT_Set_Font(@TFT_defaultFont, CL_WHITE, FO_HORIZONTAL);
    TFT_Line(0, 239, 0, 235);
    TFT_Line(0, 239, 5, 239);
    TFT_Line(0, 239, 10, 230);
    TFT_Write_Text('now here ', 15, 200);

    TP_TFT_Calibrate_Max();                       // Calibration of TP maximum
    Delay_ms(500);
  end;


procedure InitializeObjects();    // static
  begin

    Throttle.Color                     := 0x5AEB;
    Throttle.Width                     := 320;
    Throttle.Height                    := 240;
    Throttle.Buttons_RoundCount        := 14;
    Throttle.Buttons_Round             := @Screen2_Buttons_Round;
    Throttle.LabelsCount               := 0;
    Throttle.CircleButtonsCount        := 0;
    Throttle.BoxesCount                := 1;
    Throttle.Boxes                     := @Screen2_Boxes;
    Throttle.LinesCount                := 0;
    Throttle.RadioButtonsCount         := 0;
    Throttle.ProgressBarsCount         := 1;
    Throttle.ProgressBars              := @Screen2_ProgressBars;
    Throttle.ObjectsCount              := 16;

    TrainSelector.Color                     := 0x5AEB;
    TrainSelector.Width                     := 320;
    TrainSelector.Height                    := 240;
    TrainSelector.Buttons_RoundCount        := 2;
    TrainSelector.Buttons_Round             := @Screen3_Buttons_Round;
    TrainSelector.LabelsCount               := 2;
    TrainSelector.Labels                    := @Screen3_Labels;
    TrainSelector.CircleButtonsCount        := 10;
    TrainSelector.CircleButtons             := @Screen3_CircleButtons;
    TrainSelector.BoxesCount                := 0;
    TrainSelector.LinesCount                := 1;
    TrainSelector.Lines                     := @Screen3_Lines;
    TrainSelector.RadioButtonsCount         := 2;
    TrainSelector.RadioButtons              := @Screen3_RadioButtons;
    TrainSelector.ProgressBarsCount         := 0;
    TrainSelector.ObjectsCount              := 17;


    BoxRoundStartBkGnd.OwnerScreenID       := 32768;
    BoxRoundStartBkGnd.Order               := 5;
    BoxRoundStartBkGnd.Left                := 57;
    BoxRoundStartBkGnd.Top                 := 70;
    BoxRoundStartBkGnd.Width               := 202;
    BoxRoundStartBkGnd.Height              := 101;
    BoxRoundStartBkGnd.Pen_Width           := 1;
    BoxRoundStartBkGnd.Pen_Color           := 0x0000;
    BoxRoundStartBkGnd.Visible             := 1;
    BoxRoundStartBkGnd.Active              := 1;
    BoxRoundStartBkGnd.Transparent         := 1;
    BoxRoundStartBkGnd.Gradient            := 1;
    BoxRoundStartBkGnd.Gradient_Orientation := 0;
    BoxRoundStartBkGnd.Gradient_Start_Color := 0xFFFF;
    BoxRoundStartBkGnd.Gradient_End_Color  := 0xC618;
    BoxRoundStartBkGnd.Color               := 0xC618;
    BoxRoundStartBkGnd.PressColEnabled     := 1;
    BoxRoundStartBkGnd.Press_Color         := 0x8410;
    BoxRoundStartBkGnd.Corner_Radius       := 3;
    BoxRoundStartBkGnd.OnUpPtr             := 0;
    BoxRoundStartBkGnd.OnDownPtr           := 0;
    BoxRoundStartBkGnd.OnClickPtr          := 0;
    BoxRoundStartBkGnd.OnPressPtr          := 0;

    ImageStart.OwnerScreenID       := 32768;
    ImageStart.Order               := 6;
    ImageStart.Left                := 81;
    ImageStart.Top                 := 91;
    ImageStart.Width               := 155;
    ImageStart.Height              := 64;
    ImageStart.Picture_Type        := 0;
    ImageStart.Picture_Ratio       := 1;
    ImageStart.Picture_Name        := @OpenLCB_bmp;
    ImageStart.Visible             := 1;
    ImageStart.Active              := 1;
    ImageStart.OnUpPtr             := 0;
    ImageStart.OnDownPtr           := 0;
    ImageStart.OnClickPtr          := 0;
    ImageStart.OnPressPtr          := 0;

    ProgressBarStart.OwnerScreenID       := 32768;
    ProgressBarStart.Order               := 7;
    ProgressBarStart.Left                := 60;
    ProgressBarStart.Top                 := 215;
    ProgressBarStart.Width               := 193;
    ProgressBarStart.Height              := 17;
    ProgressBarStart.Pen_Width           := 1;
    ProgressBarStart.Pen_Color           := 0x0000;
    ProgressBarStart.Visible             := 1;
    ProgressBarStart.Transparent         := 1;
    ProgressBarStart.Caption             := @ProgressBarStart_Caption;
    ProgressBarStart_Caption             := '0%';
    ProgressBarStart.FontName            := @Tahoma11x13_Regular;
    ProgressBarStart.Font_Color          := 0x0000;
    ProgressBarStart.Gradient            := 1;
    ProgressBarStart.Gradient_Orientation := 0;
    ProgressBarStart.Gradient_Start_Color := 0xFFFF;
    ProgressBarStart.Gradient_End_Color  := 0x07E0;
    ProgressBarStart.Color               := 0xA65E;
    ProgressBarStart.Background_Color    := 0x8410;
    ProgressBarStart.Min                 := 0;
    ProgressBarStart.Max                 := 100;
    ProgressBarStart.Position            := 0;
    ProgressBarStart.Show_Position       := 1;
    ProgressBarStart.Show_Percentage     := 1;
    ProgressBarStart.Smooth              := 1;
    ProgressBarStart.Rounded             := 1;
    ProgressBarStart.Corner_Radius       := 3;

    Box1.OwnerScreenID       := 0;
    Box1.Order               := 0;
    Box1.Left                := 0;
    Box1.Top                 := 215;
    Box1.Width               := 320;
    Box1.Height              := 25;
    Box1.Pen_Width           := 1;
    Box1.Pen_Color           := 0x0000;
    Box1.Visible             := 1;
    Box1.Active              := 1;
    Box1.Transparent         := 1;
    Box1.Gradient            := 1;
    Box1.Gradient_Orientation := 0;
    Box1.Gradient_Start_Color := 0xFFFF;
    Box1.Gradient_End_Color  := 0xC618;
    Box1.Color               := 0xC618;
    Box1.PressColEnabled     := 1;
    Box1.Press_Color         := 0xE71C;
    Box1.OnUpPtr             := 0;
    Box1.OnDownPtr           := 0;
    Box1.OnClickPtr          := 0;
    Box1.OnPressPtr          := 0;

    ButtonRound2.OwnerScreenID       := 0;
    ButtonRound2.Order               := 1;
    ButtonRound2.Left                := 1;
    ButtonRound2.Top                 := 216;
    ButtonRound2.Width               := 75;
    ButtonRound2.Height              := 23;
    ButtonRound2.Pen_Width           := 0;
    ButtonRound2.Pen_Color           := 0x0000;
    ButtonRound2.Visible             := 1;
    ButtonRound2.Active              := 1;
    ButtonRound2.Transparent         := 1;
    ButtonRound2.Caption             := @ButtonRound2_Caption;
    ButtonRound2_Caption             := '<';
    ButtonRound2.TextAlign           := _taCenter;
    ButtonRound2.FontName            := @Tahoma11x13_Regular;
    ButtonRound2.PressColEnabled     := 1;
    ButtonRound2.Font_Color          := 0x0000;
    ButtonRound2.Gradient            := 1;
    ButtonRound2.Gradient_Orientation := 0;
    ButtonRound2.Gradient_Start_Color := 0xFFFF;
    ButtonRound2.Gradient_End_Color  := 0xC618;
    ButtonRound2.Color               := 0xC618;
    ButtonRound2.Press_Color         := 0xE71C;
    ButtonRound2.Corner_Radius       := 3;
    ButtonRound2.OnUpPtr             := 0;
    ButtonRound2.OnDownPtr           := 0;
    ButtonRound2.OnClickPtr          := 0;
    ButtonRound2.OnPressPtr          := 0;

    ButtonRound3.OwnerScreenID       := 0;
    ButtonRound3.Order               := 2;
    ButtonRound3.Left                := 75;
    ButtonRound3.Top                 := 216;
    ButtonRound3.Width               := 70;
    ButtonRound3.Height              := 23;
    ButtonRound3.Pen_Width           := 0;
    ButtonRound3.Pen_Color           := 0x0000;
    ButtonRound3.Visible             := 1;
    ButtonRound3.Active              := 1;
    ButtonRound3.Transparent         := 1;
    ButtonRound3.Caption             := @ButtonRound3_Caption;
    ButtonRound3_Caption             := '>';
    ButtonRound3.TextAlign           := _taCenter;
    ButtonRound3.FontName            := @Tahoma11x13_Regular;
    ButtonRound3.PressColEnabled     := 1;
    ButtonRound3.Font_Color          := 0x0000;
    ButtonRound3.Gradient            := 1;
    ButtonRound3.Gradient_Orientation := 0;
    ButtonRound3.Gradient_Start_Color := 0xFFFF;
    ButtonRound3.Gradient_End_Color  := 0xC618;
    ButtonRound3.Color               := 0xC618;
    ButtonRound3.Press_Color         := 0xE71C;
    ButtonRound3.Corner_Radius       := 3;
    ButtonRound3.OnUpPtr             := 0;
    ButtonRound3.OnDownPtr           := 0;
    ButtonRound3.OnClickPtr          := 0;
    ButtonRound3.OnPressPtr          := 0;

    ButtonRound4.OwnerScreenID       := 0;
    ButtonRound4.Order               := 3;
    ButtonRound4.Left                := 5;
    ButtonRound4.Top                 := 5;
    ButtonRound4.Width               := 140;
    ButtonRound4.Height              := 25;
    ButtonRound4.Pen_Width           := 1;
    ButtonRound4.Pen_Color           := 0x0000;
    ButtonRound4.Visible             := 1;
    ButtonRound4.Active              := 1;
    ButtonRound4.Transparent         := 1;
    ButtonRound4.Caption             := @ButtonRound4_Caption;
    ButtonRound4_Caption             := 'Function 0';
    ButtonRound4.TextAlign           := _taCenter;
    ButtonRound4.FontName            := @Tahoma11x13_Regular;
    ButtonRound4.PressColEnabled     := 1;
    ButtonRound4.Font_Color          := 0x0000;
    ButtonRound4.Gradient            := 1;
    ButtonRound4.Gradient_Orientation := 0;
    ButtonRound4.Gradient_Start_Color := 0xFFFF;
    ButtonRound4.Gradient_End_Color  := 0xC618;
    ButtonRound4.Color               := 0xC618;
    ButtonRound4.Press_Color         := 0xE71C;
    ButtonRound4.Corner_Radius       := 10;
    ButtonRound4.OnUpPtr             := 0;
    ButtonRound4.OnDownPtr           := 0;
    ButtonRound4.OnClickPtr          := 0;
    ButtonRound4.OnPressPtr          := 0;

    ButtonRound5.OwnerScreenID       := 0;
    ButtonRound5.Order               := 4;
    ButtonRound5.Left                := 5;
    ButtonRound5.Top                 := 35;
    ButtonRound5.Width               := 140;
    ButtonRound5.Height              := 25;
    ButtonRound5.Pen_Width           := 1;
    ButtonRound5.Pen_Color           := 0x0000;
    ButtonRound5.Visible             := 1;
    ButtonRound5.Active              := 1;
    ButtonRound5.Transparent         := 1;
    ButtonRound5.Caption             := @ButtonRound5_Caption;
    ButtonRound5_Caption             := 'Function 1';
    ButtonRound5.TextAlign           := _taCenter;
    ButtonRound5.FontName            := @Tahoma11x13_Regular;
    ButtonRound5.PressColEnabled     := 1;
    ButtonRound5.Font_Color          := 0x0000;
    ButtonRound5.Gradient            := 1;
    ButtonRound5.Gradient_Orientation := 0;
    ButtonRound5.Gradient_Start_Color := 0xFFFF;
    ButtonRound5.Gradient_End_Color  := 0xC618;
    ButtonRound5.Color               := 0xC618;
    ButtonRound5.Press_Color         := 0xE71C;
    ButtonRound5.Corner_Radius       := 10;
    ButtonRound5.OnUpPtr             := 0;
    ButtonRound5.OnDownPtr           := 0;
    ButtonRound5.OnClickPtr          := 0;
    ButtonRound5.OnPressPtr          := 0;

    ButtonRound6.OwnerScreenID       := 0;
    ButtonRound6.Order               := 5;
    ButtonRound6.Left                := 5;
    ButtonRound6.Top                 := 65;
    ButtonRound6.Width               := 140;
    ButtonRound6.Height              := 25;
    ButtonRound6.Pen_Width           := 1;
    ButtonRound6.Pen_Color           := 0x0000;
    ButtonRound6.Visible             := 1;
    ButtonRound6.Active              := 1;
    ButtonRound6.Transparent         := 1;
    ButtonRound6.Caption             := @ButtonRound6_Caption;
    ButtonRound6_Caption             := 'Function 2';
    ButtonRound6.TextAlign           := _taCenter;
    ButtonRound6.FontName            := @Tahoma11x13_Regular;
    ButtonRound6.PressColEnabled     := 1;
    ButtonRound6.Font_Color          := 0x0000;
    ButtonRound6.Gradient            := 1;
    ButtonRound6.Gradient_Orientation := 0;
    ButtonRound6.Gradient_Start_Color := 0xFFFF;
    ButtonRound6.Gradient_End_Color  := 0xC618;
    ButtonRound6.Color               := 0xC618;
    ButtonRound6.Press_Color         := 0xE71C;
    ButtonRound6.Corner_Radius       := 10;
    ButtonRound6.OnUpPtr             := 0;
    ButtonRound6.OnDownPtr           := 0;
    ButtonRound6.OnClickPtr          := 0;
    ButtonRound6.OnPressPtr          := 0;

    ButtonRound7.OwnerScreenID       := 0;
    ButtonRound7.Order               := 6;
    ButtonRound7.Left                := 5;
    ButtonRound7.Top                 := 95;
    ButtonRound7.Width               := 140;
    ButtonRound7.Height              := 25;
    ButtonRound7.Pen_Width           := 1;
    ButtonRound7.Pen_Color           := 0x0000;
    ButtonRound7.Visible             := 1;
    ButtonRound7.Active              := 1;
    ButtonRound7.Transparent         := 1;
    ButtonRound7.Caption             := @ButtonRound7_Caption;
    ButtonRound7_Caption             := 'Function 3';
    ButtonRound7.TextAlign           := _taCenter;
    ButtonRound7.FontName            := @Tahoma11x13_Regular;
    ButtonRound7.PressColEnabled     := 1;
    ButtonRound7.Font_Color          := 0x0000;
    ButtonRound7.Gradient            := 1;
    ButtonRound7.Gradient_Orientation := 0;
    ButtonRound7.Gradient_Start_Color := 0xFFFF;
    ButtonRound7.Gradient_End_Color  := 0xC618;
    ButtonRound7.Color               := 0xC618;
    ButtonRound7.Press_Color         := 0xE71C;
    ButtonRound7.Corner_Radius       := 10;
    ButtonRound7.OnUpPtr             := 0;
    ButtonRound7.OnDownPtr           := 0;
    ButtonRound7.OnClickPtr          := 0;
    ButtonRound7.OnPressPtr          := 0;

    ButtonRound8.OwnerScreenID       := 0;
    ButtonRound8.Order               := 7;
    ButtonRound8.Left                := 5;
    ButtonRound8.Top                 := 125;
    ButtonRound8.Width               := 140;
    ButtonRound8.Height              := 25;
    ButtonRound8.Pen_Width           := 1;
    ButtonRound8.Pen_Color           := 0x0000;
    ButtonRound8.Visible             := 1;
    ButtonRound8.Active              := 1;
    ButtonRound8.Transparent         := 1;
    ButtonRound8.Caption             := @ButtonRound8_Caption;
    ButtonRound8_Caption             := 'Function 4';
    ButtonRound8.TextAlign           := _taCenter;
    ButtonRound8.FontName            := @Tahoma11x13_Regular;
    ButtonRound8.PressColEnabled     := 1;
    ButtonRound8.Font_Color          := 0x0000;
    ButtonRound8.Gradient            := 1;
    ButtonRound8.Gradient_Orientation := 0;
    ButtonRound8.Gradient_Start_Color := 0xFFFF;
    ButtonRound8.Gradient_End_Color  := 0xC618;
    ButtonRound8.Color               := 0xC618;
    ButtonRound8.Press_Color         := 0xE71C;
    ButtonRound8.Corner_Radius       := 10;
    ButtonRound8.OnUpPtr             := 0;
    ButtonRound8.OnDownPtr           := 0;
    ButtonRound8.OnClickPtr          := 0;
    ButtonRound8.OnPressPtr          := 0;

    ButtonRound9.OwnerScreenID       := 0;
    ButtonRound9.Order               := 8;
    ButtonRound9.Left                := 5;
    ButtonRound9.Top                 := 155;
    ButtonRound9.Width               := 140;
    ButtonRound9.Height              := 25;
    ButtonRound9.Pen_Width           := 1;
    ButtonRound9.Pen_Color           := 0x0000;
    ButtonRound9.Visible             := 1;
    ButtonRound9.Active              := 1;
    ButtonRound9.Transparent         := 1;
    ButtonRound9.Caption             := @ButtonRound9_Caption;
    ButtonRound9_Caption             := 'Function 5';
    ButtonRound9.TextAlign           := _taCenter;
    ButtonRound9.FontName            := @Tahoma11x13_Regular;
    ButtonRound9.PressColEnabled     := 1;
    ButtonRound9.Font_Color          := 0x0000;
    ButtonRound9.Gradient            := 1;
    ButtonRound9.Gradient_Orientation := 0;
    ButtonRound9.Gradient_Start_Color := 0xFFFF;
    ButtonRound9.Gradient_End_Color  := 0xC618;
    ButtonRound9.Color               := 0xC618;
    ButtonRound9.Press_Color         := 0xE71C;
    ButtonRound9.Corner_Radius       := 10;
    ButtonRound9.OnUpPtr             := 0;
    ButtonRound9.OnDownPtr           := 0;
    ButtonRound9.OnClickPtr          := 0;
    ButtonRound9.OnPressPtr          := 0;

    ButtonRound10.OwnerScreenID       := 0;
    ButtonRound10.Order               := 9;
    ButtonRound10.Left                := 5;
    ButtonRound10.Top                 := 185;
    ButtonRound10.Width               := 140;
    ButtonRound10.Height              := 25;
    ButtonRound10.Pen_Width           := 1;
    ButtonRound10.Pen_Color           := 0x0000;
    ButtonRound10.Visible             := 1;
    ButtonRound10.Active              := 1;
    ButtonRound10.Transparent         := 1;
    ButtonRound10.Caption             := @ButtonRound10_Caption;
    ButtonRound10_Caption             := 'Function 6';
    ButtonRound10.TextAlign           := _taCenter;
    ButtonRound10.FontName            := @Tahoma11x13_Regular;
    ButtonRound10.PressColEnabled     := 1;
    ButtonRound10.Font_Color          := 0x0000;
    ButtonRound10.Gradient            := 1;
    ButtonRound10.Gradient_Orientation := 0;
    ButtonRound10.Gradient_Start_Color := 0xFFFF;
    ButtonRound10.Gradient_End_Color  := 0xC618;
    ButtonRound10.Color               := 0xC618;
    ButtonRound10.Press_Color         := 0xE71C;
    ButtonRound10.Corner_Radius       := 10;
    ButtonRound10.OnUpPtr             := 0;
    ButtonRound10.OnDownPtr           := 0;
    ButtonRound10.OnClickPtr          := 0;
    ButtonRound10.OnPressPtr          := 0;

    ButtonRound11.OwnerScreenID       := 0;
    ButtonRound11.Order               := 10;
    ButtonRound11.Left                := 155;
    ButtonRound11.Top                 := 100;
    ButtonRound11.Width               := 155;
    ButtonRound11.Height              := 55;
    ButtonRound11.Pen_Width           := 1;
    ButtonRound11.Pen_Color           := 0x0000;
    ButtonRound11.Visible             := 1;
    ButtonRound11.Active              := 1;
    ButtonRound11.Transparent         := 1;
    ButtonRound11.Caption             := @ButtonRound11_Caption;
    ButtonRound11_Caption             := 'Dec Speed';
    ButtonRound11.TextAlign           := _taCenter;
    ButtonRound11.FontName            := @Tahoma11x13_Regular;
    ButtonRound11.PressColEnabled     := 1;
    ButtonRound11.Font_Color          := 0x0000;
    ButtonRound11.Gradient            := 1;
    ButtonRound11.Gradient_Orientation := 0;
    ButtonRound11.Gradient_Start_Color := 0xFFFF;
    ButtonRound11.Gradient_End_Color  := 0xC618;
    ButtonRound11.Color               := 0xC618;
    ButtonRound11.Press_Color         := 0xE71C;
    ButtonRound11.Corner_Radius       := 3;
    ButtonRound11.OnUpPtr             := 0;
    ButtonRound11.OnDownPtr           := 0;
    ButtonRound11.OnClickPtr          := 0;
    ButtonRound11.OnPressPtr          := 0;

    ButtonRound12.OwnerScreenID       := 0;
    ButtonRound12.Order               := 11;
    ButtonRound12.Left                := 155;
    ButtonRound12.Top                 := 40;
    ButtonRound12.Width               := 155;
    ButtonRound12.Height              := 55;
    ButtonRound12.Pen_Width           := 1;
    ButtonRound12.Pen_Color           := 0x0000;
    ButtonRound12.Visible             := 1;
    ButtonRound12.Active              := 1;
    ButtonRound12.Transparent         := 1;
    ButtonRound12.Caption             := @ButtonRound12_Caption;
    ButtonRound12_Caption             := 'Inc Speed';
    ButtonRound12.TextAlign           := _taCenter;
    ButtonRound12.FontName            := @Tahoma11x13_Regular;
    ButtonRound12.PressColEnabled     := 1;
    ButtonRound12.Font_Color          := 0x0000;
    ButtonRound12.Gradient            := 1;
    ButtonRound12.Gradient_Orientation := 0;
    ButtonRound12.Gradient_Start_Color := 0xFFFF;
    ButtonRound12.Gradient_End_Color  := 0xC618;
    ButtonRound12.Color               := 0xC618;
    ButtonRound12.Press_Color         := 0xE71C;
    ButtonRound12.Corner_Radius       := 3;
    ButtonRound12.OnUpPtr             := 0;
    ButtonRound12.OnDownPtr           := 0;
    ButtonRound12.OnClickPtr          := 0;
    ButtonRound12.OnPressPtr          := 0;

    ButtonRound13.OwnerScreenID       := 0;
    ButtonRound13.Order               := 12;
    ButtonRound13.Left                := 155;
    ButtonRound13.Top                 := 185;
    ButtonRound13.Width               := 75;
    ButtonRound13.Height              := 25;
    ButtonRound13.Pen_Width           := 1;
    ButtonRound13.Pen_Color           := 0x0000;
    ButtonRound13.Visible             := 1;
    ButtonRound13.Active              := 1;
    ButtonRound13.Transparent         := 1;
    ButtonRound13.Caption             := @ButtonRound13_Caption;
    ButtonRound13_Caption             := 'Forward';
    ButtonRound13.TextAlign           := _taCenter;
    ButtonRound13.FontName            := @Tahoma11x13_Regular;
    ButtonRound13.PressColEnabled     := 1;
    ButtonRound13.Font_Color          := 0x0000;
    ButtonRound13.Gradient            := 1;
    ButtonRound13.Gradient_Orientation := 0;
    ButtonRound13.Gradient_Start_Color := 0xFFFF;
    ButtonRound13.Gradient_End_Color  := 0xC618;
    ButtonRound13.Color               := 0xC618;
    ButtonRound13.Press_Color         := 0xE71C;
    ButtonRound13.Corner_Radius       := 3;
    ButtonRound13.OnUpPtr             := 0;
    ButtonRound13.OnDownPtr           := 0;
    ButtonRound13.OnClickPtr          := 0;
    ButtonRound13.OnPressPtr          := 0;

    ButtonRound14.OwnerScreenID       := 0;
    ButtonRound14.Order               := 13;
    ButtonRound14.Left                := 235;
    ButtonRound14.Top                 := 185;
    ButtonRound14.Width               := 75;
    ButtonRound14.Height              := 25;
    ButtonRound14.Pen_Width           := 1;
    ButtonRound14.Pen_Color           := 0x0000;
    ButtonRound14.Visible             := 1;
    ButtonRound14.Active              := 1;
    ButtonRound14.Transparent         := 1;
    ButtonRound14.Caption             := @ButtonRound14_Caption;
    ButtonRound14_Caption             := 'Reverse';
    ButtonRound14.TextAlign           := _taCenter;
    ButtonRound14.FontName            := @Tahoma11x13_Regular;
    ButtonRound14.PressColEnabled     := 1;
    ButtonRound14.Font_Color          := 0x0000;
    ButtonRound14.Gradient            := 1;
    ButtonRound14.Gradient_Orientation := 0;
    ButtonRound14.Gradient_Start_Color := 0xFFFF;
    ButtonRound14.Gradient_End_Color  := 0xC618;
    ButtonRound14.Color               := 0xC618;
    ButtonRound14.Press_Color         := 0xE71C;
    ButtonRound14.Corner_Radius       := 3;
    ButtonRound14.OnUpPtr             := 0;
    ButtonRound14.OnDownPtr           := 0;
    ButtonRound14.OnClickPtr          := 0;
    ButtonRound14.OnPressPtr          := 0;

    ProgressBar1.OwnerScreenID       := 0;
    ProgressBar1.Order               := 14;
    ProgressBar1.Left                := 155;
    ProgressBar1.Top                 := 160;
    ProgressBar1.Width               := 155;
    ProgressBar1.Height              := 17;
    ProgressBar1.Pen_Width           := 1;
    ProgressBar1.Pen_Color           := 0x0000;
    ProgressBar1.Visible             := 1;
    ProgressBar1.Transparent         := 1;
    ProgressBar1.Caption             := @ProgressBar1_Caption;
    ProgressBar1_Caption             := '20%';
    ProgressBar1.FontName            := @Tahoma11x13_Regular;
    ProgressBar1.Font_Color          := 0x0000;
    ProgressBar1.Gradient            := 1;
    ProgressBar1.Gradient_Orientation := 0;
    ProgressBar1.Gradient_Start_Color := 0xFFFF;
    ProgressBar1.Gradient_End_Color  := 0x0418;
    ProgressBar1.Color               := 0xA65E;
    ProgressBar1.Background_Color    := 0x8410;
    ProgressBar1.Min                 := 0;
    ProgressBar1.Max                 := 100;
    ProgressBar1.Position            := 20;
    ProgressBar1.Show_Position       := 1;
    ProgressBar1.Show_Percentage     := 1;
    ProgressBar1.Smooth              := 1;
    ProgressBar1.Rounded             := 1;
    ProgressBar1.Corner_Radius       := 1;

    ButtonRound15.OwnerScreenID       := 0;
    ButtonRound15.Order               := 15;
    ButtonRound15.Left                := 155;
    ButtonRound15.Top                 := 5;
    ButtonRound15.Width               := 155;
    ButtonRound15.Height              := 25;
    ButtonRound15.Pen_Width           := 1;
    ButtonRound15.Pen_Color           := 0x0000;
    ButtonRound15.Visible             := 1;
    ButtonRound15.Active              := 1;
    ButtonRound15.Transparent         := 1;
    ButtonRound15.Caption             := @ButtonRound15_Caption;
    ButtonRound15_Caption             := 'Address...';
    ButtonRound15.TextAlign           := _taCenter;
    ButtonRound15.FontName            := @Tahoma11x13_Regular;
    ButtonRound15.PressColEnabled     := 1;
    ButtonRound15.Font_Color          := 0x0000;
    ButtonRound15.Gradient            := 1;
    ButtonRound15.Gradient_Orientation := 0;
    ButtonRound15.Gradient_Start_Color := 0xFFFF;
    ButtonRound15.Gradient_End_Color  := 0xC618;
    ButtonRound15.Color               := 0xC618;
    ButtonRound15.Press_Color         := 0xE71C;
    ButtonRound15.Corner_Radius       := 4;
    ButtonRound15.OnUpPtr             := 0;
    ButtonRound15.OnDownPtr           := 0;
    ButtonRound15.OnClickPtr          := 0;
    ButtonRound15.OnPressPtr          := 0;

    CircleButton1.OwnerScreenID       := 1;
    CircleButton1.Order               := 0;
    CircleButton1.Left                := 70;
    CircleButton1.Top                 := 175;
    CircleButton1.Radius              := 25;
    CircleButton1.Pen_Width           := 1;
    CircleButton1.Pen_Color           := 0x0000;
    CircleButton1.Visible             := 1;
    CircleButton1.Active              := 1;
    CircleButton1.Transparent         := 1;
    CircleButton1.Caption             := @CircleButton1_Caption;
    CircleButton1_Caption             := '0';
    CircleButton1.TextAlign           := _taCenter;
    CircleButton1.FontName            := @Tahoma11x13_Regular;
    CircleButton1.PressColEnabled     := 1;
    CircleButton1.Font_Color          := 0x0000;
    CircleButton1.Gradient            := 1;
    CircleButton1.Gradient_Orientation := 0;
    CircleButton1.Gradient_Start_Color := 0xFFFF;
    CircleButton1.Gradient_End_Color  := 0xC618;
    CircleButton1.Color               := 0xC618;
    CircleButton1.Press_Color         := 0xE71C;
    CircleButton1.OnUpPtr             := 0;
    CircleButton1.OnDownPtr           := 0;
    CircleButton1.OnClickPtr          := 0;
    CircleButton1.OnPressPtr          := 0;

    CircleButton2.OwnerScreenID       := 1;
    CircleButton2.Order               := 1;
    CircleButton2.Left                := 70;
    CircleButton2.Top                 := 120;
    CircleButton2.Radius              := 25;
    CircleButton2.Pen_Width           := 1;
    CircleButton2.Pen_Color           := 0x0000;
    CircleButton2.Visible             := 1;
    CircleButton2.Active              := 1;
    CircleButton2.Transparent         := 1;
    CircleButton2.Caption             := @CircleButton2_Caption;
    CircleButton2_Caption             := '8';
    CircleButton2.TextAlign           := _taCenter;
    CircleButton2.FontName            := @Tahoma11x13_Regular;
    CircleButton2.PressColEnabled     := 1;
    CircleButton2.Font_Color          := 0x0000;
    CircleButton2.Gradient            := 1;
    CircleButton2.Gradient_Orientation := 0;
    CircleButton2.Gradient_Start_Color := 0xFFFF;
    CircleButton2.Gradient_End_Color  := 0xC618;
    CircleButton2.Color               := 0xC618;
    CircleButton2.Press_Color         := 0xE71C;
    CircleButton2.OnUpPtr             := 0;
    CircleButton2.OnDownPtr           := 0;
    CircleButton2.OnClickPtr          := 0;
    CircleButton2.OnPressPtr          := 0;

    CircleButton3.OwnerScreenID       := 1;
    CircleButton3.Order               := 2;
    CircleButton3.Left                := 15;
    CircleButton3.Top                 := 120;
    CircleButton3.Radius              := 25;
    CircleButton3.Pen_Width           := 1;
    CircleButton3.Pen_Color           := 0x0000;
    CircleButton3.Visible             := 1;
    CircleButton3.Active              := 1;
    CircleButton3.Transparent         := 1;
    CircleButton3.Caption             := @CircleButton3_Caption;
    CircleButton3_Caption             := '7';
    CircleButton3.TextAlign           := _taCenter;
    CircleButton3.FontName            := @Tahoma11x13_Regular;
    CircleButton3.PressColEnabled     := 1;
    CircleButton3.Font_Color          := 0x0000;
    CircleButton3.Gradient            := 1;
    CircleButton3.Gradient_Orientation := 0;
    CircleButton3.Gradient_Start_Color := 0xFFFF;
    CircleButton3.Gradient_End_Color  := 0xC618;
    CircleButton3.Color               := 0xC618;
    CircleButton3.Press_Color         := 0xE71C;
    CircleButton3.OnUpPtr             := 0;
    CircleButton3.OnDownPtr           := 0;
    CircleButton3.OnClickPtr          := 0;
    CircleButton3.OnPressPtr          := 0;

    CircleButton4.OwnerScreenID       := 1;
    CircleButton4.Order               := 3;
    CircleButton4.Left                := 125;
    CircleButton4.Top                 := 65;
    CircleButton4.Radius              := 25;
    CircleButton4.Pen_Width           := 1;
    CircleButton4.Pen_Color           := 0x0000;
    CircleButton4.Visible             := 1;
    CircleButton4.Active              := 1;
    CircleButton4.Transparent         := 1;
    CircleButton4.Caption             := @CircleButton4_Caption;
    CircleButton4_Caption             := '6';
    CircleButton4.TextAlign           := _taCenter;
    CircleButton4.FontName            := @Tahoma11x13_Regular;
    CircleButton4.PressColEnabled     := 1;
    CircleButton4.Font_Color          := 0x0000;
    CircleButton4.Gradient            := 1;
    CircleButton4.Gradient_Orientation := 0;
    CircleButton4.Gradient_Start_Color := 0xFFFF;
    CircleButton4.Gradient_End_Color  := 0xC618;
    CircleButton4.Color               := 0xC618;
    CircleButton4.Press_Color         := 0xE71C;
    CircleButton4.OnUpPtr             := 0;
    CircleButton4.OnDownPtr           := 0;
    CircleButton4.OnClickPtr          := 0;
    CircleButton4.OnPressPtr          := 0;

    CircleButton5.OwnerScreenID       := 1;
    CircleButton5.Order               := 4;
    CircleButton5.Left                := 70;
    CircleButton5.Top                 := 65;
    CircleButton5.Radius              := 25;
    CircleButton5.Pen_Width           := 1;
    CircleButton5.Pen_Color           := 0x0000;
    CircleButton5.Visible             := 1;
    CircleButton5.Active              := 1;
    CircleButton5.Transparent         := 1;
    CircleButton5.Caption             := @CircleButton5_Caption;
    CircleButton5_Caption             := '5';
    CircleButton5.TextAlign           := _taCenter;
    CircleButton5.FontName            := @Tahoma11x13_Regular;
    CircleButton5.PressColEnabled     := 1;
    CircleButton5.Font_Color          := 0x0000;
    CircleButton5.Gradient            := 1;
    CircleButton5.Gradient_Orientation := 0;
    CircleButton5.Gradient_Start_Color := 0xFFFF;
    CircleButton5.Gradient_End_Color  := 0xC618;
    CircleButton5.Color               := 0xC618;
    CircleButton5.Press_Color         := 0xE71C;
    CircleButton5.OnUpPtr             := 0;
    CircleButton5.OnDownPtr           := 0;
    CircleButton5.OnClickPtr          := 0;
    CircleButton5.OnPressPtr          := 0;

    CircleButton6.OwnerScreenID       := 1;
    CircleButton6.Order               := 5;
    CircleButton6.Left                := 125;
    CircleButton6.Top                 := 120;
    CircleButton6.Radius              := 25;
    CircleButton6.Pen_Width           := 1;
    CircleButton6.Pen_Color           := 0x0000;
    CircleButton6.Visible             := 1;
    CircleButton6.Active              := 1;
    CircleButton6.Transparent         := 1;
    CircleButton6.Caption             := @CircleButton6_Caption;
    CircleButton6_Caption             := '9';
    CircleButton6.TextAlign           := _taCenter;
    CircleButton6.FontName            := @Tahoma11x13_Regular;
    CircleButton6.PressColEnabled     := 1;
    CircleButton6.Font_Color          := 0x0000;
    CircleButton6.Gradient            := 1;
    CircleButton6.Gradient_Orientation := 0;
    CircleButton6.Gradient_Start_Color := 0xFFFF;
    CircleButton6.Gradient_End_Color  := 0xC618;
    CircleButton6.Color               := 0xC618;
    CircleButton6.Press_Color         := 0xE71C;
    CircleButton6.OnUpPtr             := 0;
    CircleButton6.OnDownPtr           := 0;
    CircleButton6.OnClickPtr          := 0;
    CircleButton6.OnPressPtr          := 0;

    CircleButton7.OwnerScreenID       := 1;
    CircleButton7.Order               := 6;
    CircleButton7.Left                := 15;
    CircleButton7.Top                 := 65;
    CircleButton7.Radius              := 25;
    CircleButton7.Pen_Width           := 1;
    CircleButton7.Pen_Color           := 0x0000;
    CircleButton7.Visible             := 1;
    CircleButton7.Active              := 1;
    CircleButton7.Transparent         := 1;
    CircleButton7.Caption             := @CircleButton7_Caption;
    CircleButton7_Caption             := '4';
    CircleButton7.TextAlign           := _taCenter;
    CircleButton7.FontName            := @Tahoma11x13_Regular;
    CircleButton7.PressColEnabled     := 1;
    CircleButton7.Font_Color          := 0x0000;
    CircleButton7.Gradient            := 1;
    CircleButton7.Gradient_Orientation := 0;
    CircleButton7.Gradient_Start_Color := 0xFFFF;
    CircleButton7.Gradient_End_Color  := 0xC618;
    CircleButton7.Color               := 0xC618;
    CircleButton7.Press_Color         := 0xE71C;
    CircleButton7.OnUpPtr             := 0;
    CircleButton7.OnDownPtr           := 0;
    CircleButton7.OnClickPtr          := 0;
    CircleButton7.OnPressPtr          := 0;

    CircleButton8.OwnerScreenID       := 1;
    CircleButton8.Order               := 7;
    CircleButton8.Left                := 125;
    CircleButton8.Top                 := 10;
    CircleButton8.Radius              := 25;
    CircleButton8.Pen_Width           := 1;
    CircleButton8.Pen_Color           := 0x0000;
    CircleButton8.Visible             := 1;
    CircleButton8.Active              := 1;
    CircleButton8.Transparent         := 1;
    CircleButton8.Caption             := @CircleButton8_Caption;
    CircleButton8_Caption             := '3';
    CircleButton8.TextAlign           := _taCenter;
    CircleButton8.FontName            := @Tahoma11x13_Regular;
    CircleButton8.PressColEnabled     := 1;
    CircleButton8.Font_Color          := 0x0000;
    CircleButton8.Gradient            := 1;
    CircleButton8.Gradient_Orientation := 0;
    CircleButton8.Gradient_Start_Color := 0xFFFF;
    CircleButton8.Gradient_End_Color  := 0xC618;
    CircleButton8.Color               := 0xC618;
    CircleButton8.Press_Color         := 0xE71C;
    CircleButton8.OnUpPtr             := 0;
    CircleButton8.OnDownPtr           := 0;
    CircleButton8.OnClickPtr          := 0;
    CircleButton8.OnPressPtr          := 0;

    CircleButton9.OwnerScreenID       := 1;
    CircleButton9.Order               := 8;
    CircleButton9.Left                := 70;
    CircleButton9.Top                 := 10;
    CircleButton9.Radius              := 25;
    CircleButton9.Pen_Width           := 1;
    CircleButton9.Pen_Color           := 0x0000;
    CircleButton9.Visible             := 1;
    CircleButton9.Active              := 1;
    CircleButton9.Transparent         := 1;
    CircleButton9.Caption             := @CircleButton9_Caption;
    CircleButton9_Caption             := '2';
    CircleButton9.TextAlign           := _taCenter;
    CircleButton9.FontName            := @Tahoma11x13_Regular;
    CircleButton9.PressColEnabled     := 1;
    CircleButton9.Font_Color          := 0x0000;
    CircleButton9.Gradient            := 1;
    CircleButton9.Gradient_Orientation := 0;
    CircleButton9.Gradient_Start_Color := 0xFFFF;
    CircleButton9.Gradient_End_Color  := 0xC618;
    CircleButton9.Color               := 0xC618;
    CircleButton9.Press_Color         := 0xE71C;
    CircleButton9.OnUpPtr             := 0;
    CircleButton9.OnDownPtr           := 0;
    CircleButton9.OnClickPtr          := 0;
    CircleButton9.OnPressPtr          := 0;

    CircleButton10.OwnerScreenID       := 1;
    CircleButton10.Order               := 9;
    CircleButton10.Left                := 15;
    CircleButton10.Top                 := 10;
    CircleButton10.Radius              := 25;
    CircleButton10.Pen_Width           := 1;
    CircleButton10.Pen_Color           := 0x0000;
    CircleButton10.Visible             := 1;
    CircleButton10.Active              := 1;
    CircleButton10.Transparent         := 1;
    CircleButton10.Caption             := @CircleButton10_Caption;
    CircleButton10_Caption             := '1';
    CircleButton10.TextAlign           := _taCenter;
    CircleButton10.FontName            := @Tahoma11x13_Regular;
    CircleButton10.PressColEnabled     := 1;
    CircleButton10.Font_Color          := 0x0000;
    CircleButton10.Gradient            := 1;
    CircleButton10.Gradient_Orientation := 0;
    CircleButton10.Gradient_Start_Color := 0xFFFF;
    CircleButton10.Gradient_End_Color  := 0xC618;
    CircleButton10.Color               := 0xC618;
    CircleButton10.Press_Color         := 0xE71C;
    CircleButton10.OnUpPtr             := 0;
    CircleButton10.OnDownPtr           := 0;
    CircleButton10.OnClickPtr          := 0;
    CircleButton10.OnPressPtr          := 0;

    Label1.OwnerScreenID       := 1;
    Label1.Order               := 10;
    Label1.Left                := 205;
    Label1.Top                 := 20;
    Label1.Width               := 86;
    Label1.Height              := 32;
    Label1.Visible             := 1;
    Label1.Active              := 1;
    Label1.Caption             := @Label1_Caption;
    Label1_Caption             := 'Address';
    Label1.FontName            := @Tahoma24x29_Regular;
    Label1.Font_Color          := 0x0000;
    Label1.OnUpPtr             := 0;
    Label1.OnDownPtr           := 0;
    Label1.OnClickPtr          := 0;
    Label1.OnPressPtr          := 0;

    RadioButton1.OwnerScreenID       := 1;
    RadioButton1.Order               := 11;
    RadioButton1.Left                := 205;
    RadioButton1.Top                 := 95;
    RadioButton1.Width               := 47;
    RadioButton1.Height              := 16;
    RadioButton1.Pen_Width           := 1;
    RadioButton1.Pen_Color           := 0x0000;
    RadioButton1.Visible             := 1;
    RadioButton1.Active              := 1;
    RadioButton1.Checked             := 0;
    RadioButton1.Transparent         := 1;
    RadioButton1.Caption             := @RadioButton1_Caption;
    RadioButton1_Caption             := 'Short';
    RadioButton1.TextAlign           := _taLeft;
    RadioButton1.FontName            := @Tahoma11x13_Regular;
    RadioButton1.PressColEnabled     := 1;
    RadioButton1.Font_Color          := 0x0000;
    RadioButton1.Gradient            := 1;
    RadioButton1.Gradient_Orientation := 0;
    RadioButton1.Gradient_Start_Color := 0xFFFF;
    RadioButton1.Gradient_End_Color  := 0xC618;
    RadioButton1.Color               := 0xC618;
    RadioButton1.Press_Color         := 0xE71C;
    RadioButton1.Background_Color    := 0x8410;
    RadioButton1.OnUpPtr             := 0;
    RadioButton1.OnDownPtr           := 0;
    RadioButton1.OnClickPtr          := 0;
    RadioButton1.OnPressPtr          := 0;

    RadioButton2.OwnerScreenID       := 1;
    RadioButton2.Order               := 12;
    RadioButton2.Left                := 265;
    RadioButton2.Top                 := 95;
    RadioButton2.Width               := 44;
    RadioButton2.Height              := 16;
    RadioButton2.Pen_Width           := 1;
    RadioButton2.Pen_Color           := 0x0000;
    RadioButton2.Visible             := 1;
    RadioButton2.Active              := 1;
    RadioButton2.Checked             := 1;
    RadioButton2.Transparent         := 1;
    RadioButton2.Caption             := @RadioButton2_Caption;
    RadioButton2_Caption             := 'Long';
    RadioButton2.TextAlign           := _taLeft;
    RadioButton2.FontName            := @Tahoma11x13_Regular;
    RadioButton2.PressColEnabled     := 1;
    RadioButton2.Font_Color          := 0x0000;
    RadioButton2.Gradient            := 1;
    RadioButton2.Gradient_Orientation := 0;
    RadioButton2.Gradient_Start_Color := 0xFFFF;
    RadioButton2.Gradient_End_Color  := 0xC618;
    RadioButton2.Color               := 0xC618;
    RadioButton2.Press_Color         := 0xE71C;
    RadioButton2.Background_Color    := 0x8410;
    RadioButton2.OnUpPtr             := 0;
    RadioButton2.OnDownPtr           := 0;
    RadioButton2.OnClickPtr          := 0;
    RadioButton2.OnPressPtr          := 0;

    Label2.OwnerScreenID       := 1;
    Label2.Order               := 13;
    Label2.Left                := 220;
    Label2.Top                 := 55;
    Label2.Width               := 54;
    Label2.Height              := 32;
    Label2.Visible             := 1;
    Label2.Active              := 1;
    Label2.Caption             := @Label2_Caption;
    Label2_Caption             := '1234';
    Label2.FontName            := @Tahoma24x29_Regular;
    Label2.Font_Color          := 0x0000;
    Label2.OnUpPtr             := 0;
    Label2.OnDownPtr           := 0;
    Label2.OnClickPtr          := 0;
    Label2.OnPressPtr          := 0;

    ButtonRound16.OwnerScreenID       := 1;
    ButtonRound16.Order               := 14;
    ButtonRound16.Left                := 200;
    ButtonRound16.Top                 := 155;
    ButtonRound16.Width               := 110;
    ButtonRound16.Height              := 35;
    ButtonRound16.Pen_Width           := 1;
    ButtonRound16.Pen_Color           := 0x0000;
    ButtonRound16.Visible             := 1;
    ButtonRound16.Active              := 1;
    ButtonRound16.Transparent         := 1;
    ButtonRound16.Caption             := @ButtonRound16_Caption;
    ButtonRound16_Caption             := 'Ok';
    ButtonRound16.TextAlign           := _taCenter;
    ButtonRound16.FontName            := @Tahoma11x13_Regular;
    ButtonRound16.PressColEnabled     := 1;
    ButtonRound16.Font_Color          := 0x0000;
    ButtonRound16.Gradient            := 1;
    ButtonRound16.Gradient_Orientation := 0;
    ButtonRound16.Gradient_Start_Color := 0xFFFF;
    ButtonRound16.Gradient_End_Color  := 0xC618;
    ButtonRound16.Color               := 0xC618;
    ButtonRound16.Press_Color         := 0xE71C;
    ButtonRound16.Corner_Radius       := 3;
    ButtonRound16.OnUpPtr             := 0;
    ButtonRound16.OnDownPtr           := 0;
    ButtonRound16.OnClickPtr          := 0;
    ButtonRound16.OnPressPtr          := 0;

    ButtonRound17.OwnerScreenID       := 1;
    ButtonRound17.Order               := 15;
    ButtonRound17.Left                := 200;
    ButtonRound17.Top                 := 195;
    ButtonRound17.Width               := 110;
    ButtonRound17.Height              := 35;
    ButtonRound17.Pen_Width           := 1;
    ButtonRound17.Pen_Color           := 0x0000;
    ButtonRound17.Visible             := 1;
    ButtonRound17.Active              := 1;
    ButtonRound17.Transparent         := 1;
    ButtonRound17.Caption             := @ButtonRound17_Caption;
    ButtonRound17_Caption             := 'Cancel';
    ButtonRound17.TextAlign           := _taCenter;
    ButtonRound17.FontName            := @Tahoma11x13_Regular;
    ButtonRound17.PressColEnabled     := 1;
    ButtonRound17.Font_Color          := 0x0000;
    ButtonRound17.Gradient            := 1;
    ButtonRound17.Gradient_Orientation := 0;
    ButtonRound17.Gradient_Start_Color := 0xFFFF;
    ButtonRound17.Gradient_End_Color  := 0xC618;
    ButtonRound17.Color               := 0xC618;
    ButtonRound17.Press_Color         := 0xE71C;
    ButtonRound17.Corner_Radius       := 3;
    ButtonRound17.OnUpPtr             := 0;
    ButtonRound17.OnDownPtr           := 0;
    ButtonRound17.OnClickPtr          := 0;
    ButtonRound17.OnPressPtr          := 0;

    Line1.OwnerScreenID       := 1;
    Line1.Order               := 16;
    Line1.First_Point_X       := 185;
    Line1.First_Point_Y       := 0;
    Line1.Second_Point_X      := 186;
    Line1.Second_Point_Y      := 240;
    Line1.Visible             := 1;
    Line1.Pen_Width           := 1;
    Line1.Color               := 0x0000;
  end;

function IsInsideObject (X, Y, Left, Top, Width, Height : word) : byte; // static
begin
  if ( (Left<= X) and (Left+ Width - 1 >= X) and
       (Top <= Y)  and (Top + Height - 1 >= Y) ) then
    Result := 1
  else
    Result := 0;
end;

function GetRoundButton (index : byte) : ^TButton_Round; // static
var objPtr : ^ const code far ^TButton_Round;
  begin
    objPtr := CurrentMyScreen.Buttons_Round + index;
    Result := objPtr^;
  end;

function GetLabel (index : byte) : ^TLabel; // static
var objPtr : ^ const code far ^TLabel;
  begin
    objPtr := CurrentMyScreen.Labels + index;
    Result := objPtr^;
  end;

function GetCLabel (index : byte) : ^TCLabel; // static
var objPtr : ^ const code far ^TCLabel;
  begin
    objPtr := CurrentMyScreen.CLabels + index;
    Result := objPtr^;
  end;

function GetImage (index : byte) : ^TImage; // static
var objPtr : ^ const code far ^TImage;
  begin
    objPtr := CurrentMyScreen.Images + index;
    Result := objPtr^;
  end;

function GetCircleButton (index : byte) : ^TCircleButton; // static
var objPtr : ^ const code far ^TCircleButton;
  begin
    objPtr := CurrentMyScreen.CircleButtons + index;
    Result := objPtr^;
  end;

function GetBox (index : byte) : ^TBox; // static
var objPtr : ^ const code far ^TBox;
  begin
    objPtr := CurrentMyScreen.Boxes + index;
    Result := objPtr^;
  end;

function GetCBox (index : byte) : ^TCBox; // static
var objPtr : ^ const code far ^TCBox;
  begin
    objPtr := CurrentMyScreen.CBoxes + index;
    Result := objPtr^;
  end;

function GetBox_Round (index : byte) : ^TBox_Round; // static
var objPtr : ^ const code far ^TBox_Round;
  begin
    objPtr := CurrentMyScreen.Boxes_Round + index;
    Result := objPtr^;
  end;

function GetLine (index : byte) : ^TLine; // static
var objPtr : ^ const code far ^TLine;
  begin
    objPtr := CurrentMyScreen.Lines + index;
    Result := objPtr^;
  end;

function GetRadioButton (index : byte) : ^TRadioButton; // static
var objPtr : ^ const code far ^TRadioButton;
  begin
    objPtr := CurrentMyScreen.RadioButtons + index;
    Result := objPtr^;
  end;

function GetProgressBar (index : byte) : ^TProgressBar; // static
var objPtr : ^ const code far ^TProgressBar;
  begin
    objPtr := CurrentMyScreen.ProgressBars + index;
    Result := objPtr^;
  end;


procedure DeleteTrailingSpaces(var str : string);
var counter : byte;
  begin
    while TRUE do
      begin
        if (str[0] = ' ') then
          begin
            for counter := 0 to strlen(str) do
              str[counter] := str[counter+1];
        end
      else
        break;
    end;
  end;


procedure DrawRoundButton(Around_button : ^TButton_Round);
  begin
      if (Around_button^.Visible = 1) then
        begin
          if (object_pressed = 1) then
            begin
              object_pressed := 0;
              TFT_Set_Brush(Around_button^.Transparent, Around_button^.Press_Color, Around_button^.Gradient, Around_button^.Gradient_Orientation,
                            Around_button^.Gradient_End_Color, Around_button^.Gradient_Start_Color);
            end
          else
            TFT_Set_Brush(Around_button^.Transparent, Around_button^.Color, Around_button^.Gradient, Around_button^.Gradient_Orientation,
                          Around_button^.Gradient_Start_Color, Around_button^.Gradient_End_Color);
          TFT_Set_Pen(Around_button^.Pen_Color, Around_button^.Pen_Width);
          TFT_Rectangle_Round_Edges(Around_button^.Left + 1, Around_button^.Top + 1,
                                    Around_button^.Left + Around_button^.Width - 2,
                                    Around_button^.Top + Around_button^.Height - 2, Around_button^.Corner_Radius);
          TFT_Set_Font(Around_button^.FontName, Around_button^.Font_Color, FO_HORIZONTAL);
          TFT_Write_Text_Return_Pos(Around_button^.Caption, Around_button^.Left, Around_button^.Top);
          if (Around_button^.TextAlign = _taLeft) then
            TFT_Write_Text(Around_button^.Caption, Around_button^.Left + 4, (Around_button^.Top + ((Around_button^.Height - caption_height) div 2)))
          else if (Around_button^.TextAlign = _taCenter) then
            TFT_Write_Text(Around_button^.Caption, (Around_button^.Left + (Around_button^.Width - caption_length) div 2), (Around_button^.Top + ((Around_button^.Height - caption_height) div 2)))
          else if (Around_button^.TextAlign = _taRight) then
            TFT_Write_Text(Around_button^.Caption, Around_button^.Left + (Around_button^.Width - caption_length - 4), (Around_button^.Top + (Around_button^.Height - caption_height) div 2));
        end;
  end;

procedure DrawLabel(ALabel : ^TLabel);
  begin
    if (ALabel^.Visible = 1) then
      begin
        TFT_Set_Font(ALabel^.FontName, ALabel^.Font_Color, FO_HORIZONTAL);
          TFT_Write_Text(ALabel^.Caption, ALabel^.Left, ALabel^.Top);
      end;
end;

procedure DrawCLabel(ALabel : ^TCLabel);
  begin
    if (ALabel^.Visible = 1) then
      begin
        TFT_Set_Font(ALabel^.FontName, ALabel^.Font_Color, FO_HORIZONTAL);
          TFT_Write_Const_Text(ALabel^.Caption, ALabel^.Left, ALabel^.Top);
      end;
end;

procedure DrawImage(AImage : ^TImage);
  begin
    if (AImage^.Visible) then
      begin
        TFT_Image(AImage^.Left, AImage^.Top, AImage^.Picture_Name, AImage^.Picture_Ratio);
      end;
end;

procedure DrawCircleButton(ACircle_button : ^TCircleButton);
  begin
    if (ACircle_button^.Visible = 1) then
      begin
        if object_pressed = 1 then
          begin
            object_pressed := 0;
            TFT_Set_Brush(ACircle_button^.Transparent, ACircle_button^.Press_Color, ACircle_button^.Gradient, ACircle_button^.Gradient_Orientation,
                          ACircle_button^.Gradient_End_Color, ACircle_button^.Gradient_Start_Color);
          end
        else
          TFT_Set_Brush(ACircle_button^.Transparent, ACircle_button^.Color, ACircle_button^.Gradient, ACircle_button^.Gradient_Orientation,
                        ACircle_button^.Gradient_Start_Color, ACircle_button^.Gradient_End_Color);
        TFT_Set_Pen(ACircle_button^.Pen_Color, ACircle_button^.Pen_Width);
          TFT_Circle(ACircle_button^.Left + ACircle_button^.Radius,
                     ACircle_button^.Top + ACircle_button^.Radius,
                     ACircle_button^.Radius);
        TFT_Set_Font(ACircle_button^.FontName, ACircle_button^.Font_Color, FO_HORIZONTAL);
        TFT_Write_Text_Return_Pos(ACircle_button^.Caption, ACircle_button^.Left, ACircle_button^.Top);
        if (ACircle_button^.TextAlign = _taLeft) then
          TFT_Write_Text(ACircle_button^.Caption, ACircle_button^.Left + 4, (ACircle_button^.Top + ACircle_button^.Radius - caption_height div 2))
        else if (ACircle_button^.TextAlign = _taCenter) then
          TFT_Write_Text(ACircle_button^.Caption, (ACircle_button^.Left + (ACircle_button^.Radius*2 - caption_length) div 2), (ACircle_button^.Top + ACircle_button^.Radius - caption_height div 2))
        else if (ACircle_button^.TextAlign = _taRight) then
          TFT_Write_Text(ACircle_button^.Caption, ACircle_button^.Left + (ACircle_button^.Radius*2 - caption_length - 4), (ACircle_button^.Top + ACircle_button^.Radius - caption_height div 2));
      end;
  end;

procedure DrawBox(ABox : ^TBox);
  begin
    if (ABox^.Visible = 1) then
      begin
        if object_pressed = 1 then
          begin
            object_pressed := 0;
            TFT_Set_Brush(ABox^.Transparent, ABox^.Press_Color, ABox^.Gradient, ABox^.Gradient_Orientation, ABox^.Gradient_End_Color, ABox^.Gradient_Start_Color);
          end
        else
          TFT_Set_Brush(ABox^.Transparent, ABox^.Color, ABox^.Gradient, ABox^.Gradient_Orientation, ABox^.Gradient_Start_Color, ABox^.Gradient_End_Color);
        TFT_Set_Pen(ABox^.Pen_Color, ABox^.Pen_Width);
        TFT_Rectangle(ABox^.Left, ABox^.Top, ABox^.Left + ABox^.Width - 1, ABox^.Top + ABox^.Height - 1);
      end;
  end;

procedure DrawCBox(ABox : ^TCBox);
  begin
    if (ABox^.Visible = 1) then
      begin
        if object_pressed = 1 then
          begin
            object_pressed := 0;
            TFT_Set_Brush(ABox^.Transparent, ABox^.Press_Color, ABox^.Gradient, ABox^.Gradient_Orientation, ABox^.Gradient_End_Color, ABox^.Gradient_Start_Color);
          end
        else
          TFT_Set_Brush(ABox^.Transparent, ABox^.Color, ABox^.Gradient, ABox^.Gradient_Orientation, ABox^.Gradient_Start_Color, ABox^.Gradient_End_Color);
        TFT_Set_Pen(ABox^.Pen_Color, ABox^.Pen_Width);
        TFT_Rectangle(ABox^.Left, ABox^.Top, ABox^.Left + ABox^.Width - 1, ABox^.Top + ABox^.Height - 1);
      end;
  end;

procedure DrawRoundBox(Around_box : ^TBox_Round);
  begin
    if (Around_box^.Visible = 1) then
      begin
        if object_pressed = 1 then
          begin
            object_pressed := 0;
            TFT_Set_Brush(Around_box^.Transparent, Around_box^.Press_Color, Around_box^.Gradient, Around_box^.Gradient_Orientation,
                          Around_box^.Gradient_End_Color, Around_box^.Gradient_Start_Color);
          end
        else
          TFT_Set_Brush(Around_box^.Transparent, Around_box^.Color, Around_box^.Gradient, Around_box^.Gradient_Orientation,
                        Around_box^.Gradient_Start_Color, Around_box^.Gradient_End_Color);
        TFT_Set_Pen(Around_box^.Pen_Color, Around_box^.Pen_Width);
        TFT_Rectangle_Round_Edges(Around_box^.Left + 1, Around_box^.Top + 1,
                                  Around_box^.Left + Around_box^.Width - 2,
                                  Around_box^.Top + Around_box^.Height - 2, Around_box^.Corner_Radius)
      end;
  end;

procedure DrawLine(Aline : ^TLine);
  begin
    if (Aline^.Visible = 1) then
      begin
        TFT_Set_Pen(Aline^.Color, Aline^.Pen_Width);
        TFT_Line(Aline^.First_Point_X, Aline^.First_Point_Y, Aline^.Second_Point_X, Aline^.Second_Point_Y);
      end;
  end;

procedure DrawRadioButton(ARadioButton : ^TRadioButton);
var circleOffset : integer;
begin
  if (ARadioButton^.Visible = 1) then
    begin
      circleOffset := ARadioButton^.Height / 5;
      TFT_Set_Pen(ARadioButton^.Pen_Color, ARadioButton^.Pen_Width);
      TFT_Set_Font(ARadioButton^.FontName, ARadioButton^.Font_Color, FO_HORIZONTAL);
      if (ARadioButton^.TextAlign = _taLeft) then
        begin
          TFT_Set_Brush(ARadioButton^.Transparent,ARadioButton^.Background_Color,0,0,0,0);
          TFT_Circle(ARadioButton^.Left + ARadioButton^.Height div 2, ARadioButton^.Top + ARadioButton^.Height div 2, ARadioButton^.Height div 2);
          if (ARadioButton^.Checked = 1) then
            begin
              if (object_pressed = 1) then
                begin
                  object_pressed := 0;
                  TFT_Set_Brush(ARadioButton^.Transparent, ARadioButton^.Press_Color, ARadioButton^.Gradient, ARadioButton^.Gradient_Orientation, ARadioButton^.Gradient_End_Color, ARadioButton^.Gradient_Start_Color);
                end
              else
                TFT_Set_Brush(ARadioButton^.Transparent, ARadioButton^.Color, ARadioButton^.Gradient, ARadioButton^.Gradient_Orientation, ARadioButton^.Gradient_Start_Color, ARadioButton^.Gradient_End_Color);
              TFT_Circle(ARadioButton^.Left + ARadioButton^.Height div 2 , ARadioButton^.Top + ARadioButton^.Height div 2, ARadioButton^.Height div 2 - circleOffset);
            end;
          TFT_Write_Text_Return_Pos(ARadioButton^.Caption, ARadioButton^.Left + ARadioButton^.Height + 4, ARadioButton^.Top);
          TFT_Write_Text(ARadioButton^.Caption, ARadioButton^.Left + ARadioButton^.Height + 4, (ARadioButton^.Top + ((ARadioButton^.Height - caption_height) div 2)));
        end
      else
        begin
          TFT_Set_Brush(ARadioButton^.Transparent,ARadioButton^.Background_Color,0,0,0,0);
          TFT_Circle(ARadioButton^.Left  + ARadioButton^.Width - ARadioButton^.Height div 2, ARadioButton^.Top + ARadioButton^.Height div 2, ARadioButton^.Height div 2);
          if (ARadioButton^.Checked = 1) then
            begin
              if (object_pressed = 1) then
                begin
                  object_pressed := 0;
                  TFT_Set_Brush(ARadioButton^.Transparent, ARadioButton^.Press_Color, ARadioButton^.Gradient, ARadioButton^.Gradient_Orientation, ARadioButton^.Gradient_End_Color, ARadioButton^.Gradient_Start_Color);
                end
              else 
                TFT_Set_Brush(ARadioButton^.Transparent, ARadioButton^.Color, ARadioButton^.Gradient, ARadioButton^.Gradient_Orientation, ARadioButton^.Gradient_Start_Color, ARadioButton^.Gradient_End_Color);
              TFT_Circle(ARadioButton^.Left  + ARadioButton^.Width - ARadioButton^.Height div 2, ARadioButton^.Top + ARadioButton^.Height div 2, ARadioButton^.Height div 2 - circleOffset);
            end;
          TFT_Write_Text_Return_Pos(ARadioButton^.Caption, ARadioButton^.Left + 3, ARadioButton^.Top);
          TFT_Write_Text(ARadioButton^.Caption, ARadioButton^.Left + 3, ARadioButton^.Top + (ARadioButton^.Height - caption_height) div 2);
        end;
    end;
end;

procedure UpdatePBPosition(AProgressBar : ^TProgressBar);
 var
  locPosition : dword;
  move_offset  : integer;
  cnt : integer;
  tmpStr : string[8];
  tmpWidth : word;
  tmpRound :  word;
  begin
  move_offset := 10;
  locPosition := (dword(AProgressBar^.Position - AProgressBar^.Min)) * 100 / (AProgressBar^.Max - AProgressBar^.Min);
    if (AProgressBar^.Visible = 1) then
      begin
    TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Background_Color, 0,0,0,0);
    TFT_Set_Pen(AProgressBar^.Background_Color, AProgressBar^.Pen_Width);
    TFT_Write_Text_Return_Pos(AProgressBar^.Caption, AProgressBar^.Left, AProgressBar^.Top);
    if (caption_height >  AProgressBar^.Height) then
        caption_height :=  AProgressBar^.Height;
    if (caption_length >  AProgressBar^.Width)then 
        caption_length :=  AProgressBar^.Width;
    if (AProgressBar^.Position < (AProgressBar^.Left + (AProgressBar^.Width - caption_length) div 2)) then
      begin
    TFT_Rectangle(AProgressBar^.Left + (AProgressBar^.Width - caption_length) div 2,
                  AProgressBar^.Top +(AProgressBar^.Height - caption_height) div 2,
                  AProgressBar^.Left + (AProgressBar^.Width - caption_length) div 2 + caption_length,
                  AProgressBar^.Top +(AProgressBar^.Height - caption_height) div 2 + caption_height);
      end;
    TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Color, AProgressBar^.Gradient, AProgressBar^.Gradient_Orientation, AProgressBar^.Gradient_Start_Color, AProgressBar^.Gradient_End_Color);
    TFT_Set_Pen(AProgressBar^.Pen_Color, AProgressBar^.Pen_Width);
       if (AProgressBar^.Rounded = 1) then
         begin
           // First draw back rect
           if (locPosition > 0) then
             begin
               // Then position rect
               TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Color, AProgressBar^.Gradient, AProgressBar^.Gradient_Orientation, AProgressBar^.Gradient_Start_Color, AProgressBar^.Gradient_End_Color);
               TFT_Rectangle(AProgressBar^.Left + AProgressBar^.Corner_Radius, AProgressBar^.Top,  AProgressBar^.Left + AProgressBar^.Corner_Radius  + locPosition *  (AProgressBar^.Width-AProgressBar^.Corner_Radius*2) div 100, AProgressBar^.Top + AProgressBar^.Height);
             end;
         end
       else
         begin
          if (locPosition > 0) then
            begin
              // Then position rect
              TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Color, AProgressBar^.Gradient, AProgressBar^.Gradient_Orientation, AProgressBar^.Gradient_Start_Color, AProgressBar^.Gradient_End_Color);
              TFT_Rectangle(AProgressBar^.Left, AProgressBar^.Top,  AProgressBar^.Left + (locPosition * AProgressBar^.Width) div 100, AProgressBar^.Top + AProgressBar^.Height);
            end;
         end;
       // Draw not smoothed position rect
       if (AProgressBar^.Smooth <> 1) then
          begin
            if(AProgressBar^.Rounded = 1) then
               begin
                 tmpRound := AProgressBar^.Corner_Radius;
                 cnt := move_offset + tmpRound;
                 tmpWidth := AProgressBar^.Width - AProgressBar^.Corner_Radius * 2;
               end
            else
               begin
                 tmpRound := 0;
                 cnt := move_offset;
                 tmpWidth := AProgressBar^.Width;
               end;
            TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Background_Color, 0,0,0,0);
            while (cnt-tmpRound < (locPosition * tmpWidth) div 100) do
              begin
                if  (cnt - tmpRound + 3 >=  tmpWidth * locPosition) then
                    TFT_Rectangle(AProgressBar^.Left + cnt, AProgressBar^.Top, AProgressBar^.Left + tmpRound  + tmpWidth * locPosition , AProgressBar^.Top + AProgressBar^.Height)
                else
                    TFT_Rectangle(AProgressBar^.Left + cnt, AProgressBar^.Top,  AProgressBar^.Left + cnt + 3, AProgressBar^.Top + AProgressBar^.Height);
                cnt := cnt + move_offset + 3;
              end;
          end;
    // Clear caption frist
    if (AProgressBar^.Show_Position = 1) then
       begin
        if (AProgressBar^.Show_Percentage = 1) then
           begin
             WordToStr(locPosition , tmpStr);
             DeleteTrailingSpaces(tmpStr);
             strcpy(AProgressBar^.Caption, tmpStr);
             strcat(AProgressBar^.Caption, '%');
           end
         else 
           begin
             WordToStr(AProgressBar^.Position , tmpStr);
             DeleteTrailingSpaces(tmpStr);
             strcpy(AProgressBar^.Caption, tmpStr);
           end
       end;
            TFT_Set_Font(AProgressBar^.FontName, AProgressBar^.Font_Color, FO_HORIZONTAL);
            TFT_Write_Text_Return_Pos(AProgressBar^.Caption, AProgressBar^.Left, AProgressBar^.Top);
            TFT_Write_Text(AProgressBar^.Caption, AProgressBar^.Left + (AProgressBar^.Width - caption_length) div 2, AProgressBar^.Top + (AProgressBar^.Height - caption_height) div 2);
 end;
end;

procedure DrawProgressBar(AProgressBar : ^TProgressBar);
 var
  locPosition : dword;
  move_offset : integer;
  cnt : integer;
  tmpWidth : word;
  tmpRound : word;
  _tmpI, _tmpII : word;
  tmpStr : string[8];
  begin
  move_offset := 10;
    _tmpI := AProgressBar^.Position - AProgressBar^.Min;
    _tmpII := AProgressBar^.Max - AProgressBar^.Min;
    locPosition := dword(_tmpI) * 100 div _tmpII;
    if (AProgressBar^.Visible = 1) then
      begin
       TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Background_Color, 0,0,0,0);
       TFT_Set_Pen(AProgressBar^.Pen_Color, AProgressBar^.Pen_Width);
       if (AProgressBar^.Rounded = 1) then
         begin
           // First draw back rect
           TFT_Rectangle_Round_Edges(AProgressBar^.Left, AProgressBar^.Top,  AProgressBar^.Left + AProgressBar^.Width, AProgressBar^.Top + AProgressBar^.Height, AProgressBar^.Corner_Radius);
           if (locPosition > 0) then
             begin
               // Then position rect
               TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Color, AProgressBar^.Gradient, AProgressBar^.Gradient_Orientation, AProgressBar^.Gradient_Start_Color, AProgressBar^.Gradient_End_Color);
               TFT_Rectangle(AProgressBar^.Left + AProgressBar^.Corner_Radius, AProgressBar^.Top,  AProgressBar^.Left + AProgressBar^.Corner_Radius  + locPosition *  (AProgressBar^.Width-AProgressBar^.Corner_Radius*2) div 100, AProgressBar^.Top + AProgressBar^.Height);
             end;
         end
       else
         begin
          // First draw back rect
          TFT_Rectangle(AProgressBar^.Left, AProgressBar^.Top, AProgressBar^.Left + AProgressBar^.Width, AProgressBar^.Top + AProgressBar^.Height);
          if (locPosition > 0) then
            begin
              // Then position rect
              TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Color, AProgressBar^.Gradient, AProgressBar^.Gradient_Orientation, AProgressBar^.Gradient_Start_Color, AProgressBar^.Gradient_End_Color);
              TFT_Rectangle(AProgressBar^.Left, AProgressBar^.Top,  AProgressBar^.Left + (locPosition * AProgressBar^.Width) div 100, AProgressBar^.Top + AProgressBar^.Height);
            end;
         end;
       // Draw not smoothed position rect
       if (AProgressBar^.Smooth <> 1) then
          begin
            if(AProgressBar^.Rounded = 1) then
               begin
                 tmpRound := AProgressBar^.Corner_Radius;
                 cnt := move_offset + tmpRound;
                 tmpWidth := AProgressBar^.Width - AProgressBar^.Corner_Radius * 2;
               end
            else
               begin
                 tmpRound := 0;
                 cnt := move_offset;
                 tmpWidth := AProgressBar^.Width;
               end;
            TFT_Set_Brush(AProgressBar^.Transparent, AProgressBar^.Background_Color, 0,0,0,0);
            while (cnt-tmpRound < (locPosition * tmpWidth) div 100) do
              begin
                if  (cnt - tmpRound + 3 >=  tmpWidth * locPosition) then
                    TFT_Rectangle(AProgressBar^.Left + cnt, AProgressBar^.Top, AProgressBar^.Left + tmpRound  + tmpWidth * locPosition , AProgressBar^.Top + AProgressBar^.Height)
                else
                    TFT_Rectangle(AProgressBar^.Left + cnt, AProgressBar^.Top,  AProgressBar^.Left + cnt + 3, AProgressBar^.Top + AProgressBar^.Height);
                cnt := cnt + move_offset + 3;
              end;
          end;
       // Clear caption first
       if (AProgressBar^.Show_Position = 1) then
          begin
            if (AProgressBar^.Show_Percentage = 1) then
              begin
                WordToStr(locPosition , tmpStr);
                DeleteTrailingSpaces(tmpStr);
                strcpy(AProgressBar^.Caption, tmpStr);
                strcat(AProgressBar^.Caption, '%');
              end
            else 
              begin
               WordToStr(AProgressBar^.Position , tmpStr);
               DeleteTrailingSpaces(tmpStr);
               strcpy(AProgressBar^.Caption, tmpStr);
            end;
        TFT_Set_Font(AProgressBar^.FontName, AProgressBar^.Font_Color, FO_HORIZONTAL);
        TFT_Write_Text_Return_Pos(AProgressBar^.Caption, AProgressBar^.Left, AProgressBar^.Top);
        TFT_Write_Text(AProgressBar^.Caption, AProgressBar^.Left + (AProgressBar^.Width - caption_length) div 2, AProgressBar^.Top + (AProgressBar^.Height - caption_height) div 2);
    end;
 end;
end;

procedure SetCurrentMyScreenByIndex(aScreenID : word);
begin
  memset(@CurrentMyScreen, 0, sizeof(CurrentMyScreen));
  if (aScreenID and 0x8000) then
    begin
      aScreenID := aScreenID xor 0x8000;
      CurrentMyScreen.Color        :=  CScreens[aScreenID]^.Color;
      CurrentMyScreen.Width        :=  CScreens[aScreenID]^.Width;
      CurrentMyScreen.Height       :=  CScreens[aScreenID]^.Height;
      CurrentMyScreen.ObjectsCount :=  CScreens[aScreenID]^.ObjectsCount;
      CurrentMyScreen.CLabelsCount   :=  CScreens[aScreenID]^.CLabelsCount;
      CurrentMyScreen.CLabels        :=  CScreens[aScreenID]^.CLabels;
      CurrentMyScreen.ImagesCount   :=  CScreens[aScreenID]^.ImagesCount;
      CurrentMyScreen.Images        :=  CScreens[aScreenID]^.Images;
      CurrentMyScreen.CBoxesCount   :=  CScreens[aScreenID]^.CBoxesCount;
      CurrentMyScreen.CBoxes        :=  CScreens[aScreenID]^.CBoxes;
      CurrentMyScreen.Boxes_RoundCount   :=  CScreens[aScreenID]^.Boxes_RoundCount;
      CurrentMyScreen.Boxes_Round        :=  CScreens[aScreenID]^.Boxes_Round;
      CurrentMyScreen.ProgressBarsCount   :=  CScreens[aScreenID]^.ProgressBarsCount;
      CurrentMyScreen.ProgressBars        :=  CScreens[aScreenID]^.ProgressBars;
    end
  else
    begin
      CurrentMyScreen.Color        :=  DScreens[aScreenID]^.Color;
      CurrentMyScreen.Width        :=  DScreens[aScreenID]^.Width;
      CurrentMyScreen.Height       :=  DScreens[aScreenID]^.Height;
      CurrentMyScreen.ObjectsCount :=  DScreens[aScreenID]^.ObjectsCount;
      CurrentMyScreen.Buttons_RoundCount   :=  DScreens[aScreenID]^.Buttons_RoundCount;
      CurrentMyScreen.Buttons_Round        :=  DScreens[aScreenID]^.Buttons_Round;
      CurrentMyScreen.LabelsCount   :=  DScreens[aScreenID]^.LabelsCount;
      CurrentMyScreen.Labels        :=  DScreens[aScreenID]^.Labels;
      CurrentMyScreen.CircleButtonsCount   :=  DScreens[aScreenID]^.CircleButtonsCount;
      CurrentMyScreen.CircleButtons        :=  DScreens[aScreenID]^.CircleButtons;
      CurrentMyScreen.BoxesCount   :=  DScreens[aScreenID]^.BoxesCount;
      CurrentMyScreen.Boxes        :=  DScreens[aScreenID]^.Boxes;
      CurrentMyScreen.LinesCount   :=  DScreens[aScreenID]^.LinesCount;
      CurrentMyScreen.Lines        :=  DScreens[aScreenID]^.Lines;
      CurrentMyScreen.RadioButtonsCount   :=  DScreens[aScreenID]^.RadioButtonsCount;
      CurrentMyScreen.RadioButtons        :=  DScreens[aScreenID]^.RadioButtons;
      CurrentMyScreen.ProgressBarsCount   :=  DScreens[aScreenID]^.ProgressBarsCount;
      CurrentMyScreen.ProgressBars        :=  DScreens[aScreenID]^.ProgressBars;
    end;
end;

procedure DrawScreen(aScreenID : word);
var order : word;
var round_button_idx : byte;
    local_round_button : ^TButton_Round;
var label_idx : byte;
    local_label : ^TLabel;
var clabel_idx : byte;
    local_clabel : ^TCLabel;
var image_idx : byte;
    local_image : ^TImage;
var circle_button_idx : byte;
    local_circle_button : ^TCircleButton;
var box_idx : byte;
    local_box : ^TBox;
var cbox_idx : byte;
    local_cbox : ^TCBox;
var round_box_idx : byte;
    local_round_box : ^TBox_Round;
var line_idx : byte;
    local_line : ^TLine;
var radio_button_idx : byte;
    local_radio_button : ^TRadioButton;
var progress_bar_idx : byte;
    local_progress_bar : ^TProgressBar;
var save_bled, save_bled_direction : byte;

  begin
    object_pressed := 0;
    order := 0;
    round_button_idx := 0;
    label_idx := 0;
    clabel_idx := 0;
    image_idx := 0;
    circle_button_idx := 0;
    box_idx := 0;
    cbox_idx := 0;
    round_box_idx := 0;
    line_idx := 0;
    radio_button_idx := 0;
    progress_bar_idx := 0;
    SetCurrentMyScreenByIndex(aScreenID);
    CurrentScreenID := aScreenID;

    if (display_width <> CurrentMyScreen.Width) or (display_height <> CurrentMyScreen.Height) then
      begin
        save_bled := TFT_BLED;
        save_bled_direction := TFT_BLED_Direction;
        TFT_BLED_Direction := 0;
        TFT_BLED           := 0;
        TFT_Set_Active(@Set_Index, @Write_Command, @Write_Data);
        TFT_Init(CurrentMyScreen.Width, CurrentMyScreen.Height);
        TP_TFT_Init(CurrentMyScreen.Width, CurrentMyScreen.Height, 13, 12);                                  // Initialize touch panel
        TP_TFT_Set_ADC_Threshold(ADC_THRESHOLD);                              // Set touch panel ADC threshold
        TFT_Fill_Screen(CurrentMyScreen.Color);
        display_width := CurrentMyScreen.Width;
        display_height := CurrentMyScreen.Height;
        TFT_BLED           := save_bled;
        TFT_BLED_Direction := save_bled_direction;
    end
    else
      TFT_Fill_Screen(CurrentMyScreen.Color);


    while (order < CurrentMyScreen.ObjectsCount) do
      begin
      if (round_button_idx < CurrentMyScreen.Buttons_RoundCount) then
        begin
          local_round_button := GetRoundButton(round_button_idx);
          if (order = local_round_button^.Order) then
            begin
              Inc(round_button_idx);
              Inc(order);
              DrawRoundButton(local_round_button);
            end;
        end;

      if (label_idx < CurrentMyScreen.LabelsCount) then
        begin
          local_label := GetLabel(label_idx);
          if (order = local_label^.Order) then
            begin
              Inc(label_idx);
              Inc(order);
              DrawLabel(local_label);
            end;
        end;

      if (clabel_idx < CurrentMyScreen.CLabelsCount) then
        begin
          local_clabel := GetCLabel(clabel_idx);
          if (order = local_clabel^.Order) then
            begin
              Inc(clabel_idx);
              Inc(order);
              DrawCLabel(local_clabel);
            end;
        end;

      if (circle_button_idx < CurrentMyScreen.CircleButtonsCount) then
        begin
          local_circle_button := GetCircleButton(circle_button_idx);
          if (order = local_circle_button^.Order) then
            begin
              Inc(circle_button_idx);
              Inc(order);
              DrawCircleButton(local_circle_button);
            end;
        end;

      if (box_idx < CurrentMyScreen.BoxesCount) then
        begin
          local_box := GetBox(box_idx);
          if (order = local_box^.Order) then
            begin
              Inc(box_idx);
              Inc(order);
              DrawBox(local_box);
            end;
        end;

      if (cbox_idx < CurrentMyScreen.CBoxesCount) then
        begin
          local_cbox := GetCBox(cbox_idx);
          if (order = local_cbox^.Order) then
            begin
              Inc(cbox_idx);
              Inc(order);
              DrawCBox(local_cbox);
            end;
        end;

      if (round_box_idx < CurrentMyScreen.Boxes_RoundCount) then
        begin
          local_round_box := GetBox_Round(round_box_idx);
          if (order = local_round_box^.Order) then
            begin
              Inc(round_box_idx);
              Inc(order);
              DrawRoundBox(local_round_box);
            end;
        end;

      if (line_idx < CurrentMyScreen.LinesCount) then
        begin
          local_line := GetLine(line_idx);
          if (order = local_line^.Order) then
            begin
              Inc(line_idx);
              Inc(order);
              DrawLine(local_line);
            end;
        end;

      if (image_idx < CurrentMyScreen.ImagesCount) then
        begin
          local_image := GetImage(image_idx);
          if (order = local_image^.Order) then
            begin
              Inc(image_idx);
              Inc(order);
              DrawImage(local_image);
            end;
        end;

      if (radio_button_idx < CurrentMyScreen.RadioButtonsCount) then
        begin
          local_radio_button := GetRadioButton(radio_button_idx);
          if (order = local_radio_button^.Order) then
            begin
              Inc(radio_button_idx);
              Inc(order);
              DrawRadioButton(local_radio_button);
            end;
        end;

      if (progress_bar_idx < CurrentMyScreen.ProgressBarsCount) then
        begin
          local_progress_bar := GetProgressBar(progress_bar_idx);
          if (order = local_progress_bar^.Order) then
            begin
              Inc(progress_bar_idx);
              Inc(order);
              DrawProgressBar(local_progress_bar);
            end;
        end;

    end;
end;

procedure Get_Object( X : word; Y : word);
var counter : integer;
  begin
    round_button_order  := -1;
    label_order         := -1;
    clabel_order        := -1;
    image_order         := -1;
    circle_button_order := -1;
    box_order           := -1;
    cbox_order          := -1;
    box_round_order     := -1;
    radio_button_order  := -1;
    //  Buttons with Round Edges
    counter := CurrentMyScreen.Buttons_RoundCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_round_button := GetRoundButton(_object_count);
        if (local_round_button^.Active = 1) then
          if (IsInsideObject(X, Y, local_round_button^.Left, local_round_button^.Top,
                             local_round_button^.Width, local_round_button^.Height) = 1) then
            begin
              round_button_order := local_round_button^.Order;
              exec_round_button := local_round_button;
            end;
      end;

    //  Labels
    counter := CurrentMyScreen.LabelsCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_label := GetLabel(_object_count);
        if (local_label^.Active = 1) then
          if (IsInsideObject(X, Y, local_label^.Left, local_label^.Top,
                             local_label^.Width, local_label^.Height) = 1) then
            begin
              label_order := local_label^.Order;
              exec_label := local_label;
            end;
      end;

    //  CLabels
    counter := CurrentMyScreen.CLabelsCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_clabel := GetCLabel(_object_count);
        if (local_clabel^.Active = 1) then
          if (IsInsideObject(X, Y, local_clabel^.Left, local_clabel^.Top,
                             local_clabel^.Width, local_clabel^.Height) = 1) then
            begin
              clabel_order := local_clabel^.Order;
              exec_clabel := local_clabel;
            end;
      end;

    //  Images
    counter := CurrentMyScreen.ImagesCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_image := GetImage(_object_count);
        if (local_image^.Active = 1) then
          if (IsInsideObject(X, Y, local_image^.Left, local_image^.Top,
                             local_image^.Width, local_image^.Height) = 1) then
            begin
              image_order := local_image^.Order;
              exec_image := local_image;
            end;
      end;

    //  Circle Buttons
    counter := CurrentMyScreen.CircleButtonsCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_circle_button := GetCircleButton(_object_count);
        if (local_circle_button^.Active = 1) then
          if (IsInsideObject(X, Y, local_circle_button^.Left, local_circle_button^.Top,
                            (local_circle_button^.Radius * 2), (local_circle_button^.Radius * 2)) = 1) then
            begin
              circle_button_order := local_circle_button^.Order;
              exec_circle_button := local_circle_button;
            end;
      end;

    //  Boxes
    counter := CurrentMyScreen.BoxesCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_box := GetBox(_object_count);
        if (local_box^.Active = 1) then
          if (IsInsideObject(X, Y, local_box^.Left, local_box^.Top,
                             local_box^.Width, local_box^.Height) = 1) then
            begin
              box_order := local_box^.Order;
              exec_box := local_box;
            end;
      end;

    //  CBoxes
    counter := CurrentMyScreen.CBoxesCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_cbox := GetCBox(_object_count);
        if (local_cbox^.Active = 1) then
          if (IsInsideObject(X, Y, local_cbox^.Left, local_cbox^.Top,
                             local_cbox^.Width, local_cbox^.Height) = 1) then
            begin
              cbox_order := local_cbox^.Order;
              exec_cbox := local_cbox;
            end;
      end;

    //  Boxes with Round Edges
    counter := CurrentMyScreen.Boxes_RoundCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_round_box := GetBox_Round(_object_count);
        if (local_round_box^.Active = 1) then
          if (IsInsideObject(X, Y, local_round_box^.Left, local_round_box^.Top,
                             local_round_box^.Width, local_round_box^.Height) = 1) then
            begin
              box_round_order := local_round_box^.Order;
              exec_round_box := local_round_box;
            end;
      end;

    // RadioButtons
    counter := CurrentMyScreen.RadioButtonsCount;
    for _object_count := 0 to counter - 1 do
      begin
        local_radio_button := GetRadioButton(_object_count);
        if (local_radio_button^.Active = 1) then
          if (IsInsideObject(X, Y, local_radio_button^.Left, local_radio_button^.Top,
                             local_radio_button^.Width, local_radio_button^.Height) = 1) then
            begin
              radio_button_order := local_radio_button^.Order;
              exec_radio_button := local_radio_button;
            end;
      end;

    _object_count := -1;
    if (round_button_order >  _object_count ) then
      _object_count := round_button_order;
    if (label_order >  _object_count ) then
      _object_count := label_order;
    if (clabel_order >  _object_count ) then
      _object_count := clabel_order;
    if (image_order >  _object_count ) then
      _object_count := image_order;
    if (circle_button_order >  _object_count ) then
      _object_count := circle_button_order;
    if (box_order >  _object_count ) then
      _object_count := box_order;
    if (cbox_order >  _object_count ) then
      _object_count := cbox_order;
    if (box_round_order >  _object_count ) then
      _object_count := box_round_order;
    if (radio_button_order >  _object_count ) then
      _object_count := radio_button_order;
  end;


procedure Process_TP_Press( X : word; Y : word); // static
  begin
    exec_round_button   := 0;
    exec_label          := 0;
    exec_clabel         := 0;
    exec_image          := 0;
    exec_circle_button  := 0;
    exec_box            := 0;
    exec_cbox           := 0;
    exec_round_box      := 0;
    exec_radio_button   := 0;

    Get_Object(X, Y);

    if (_object_count <> -1) then
      begin
        if (_object_count = round_button_order) then
          if (exec_round_button^.Active = 1) then
            if (exec_round_button^.OnPressPtr <> 0) then
              begin
                exec_round_button^.OnPressPtr^();
                exit;
              end;

        if (_object_count = label_order) then
          if (exec_label^.Active = 1) then
            if (exec_label^.OnPressPtr <> 0) then
              begin
                exec_label^.OnPressPtr^();
                exit;
              end;

        if (_object_count = clabel_order) then
          if (exec_clabel^.Active = 1) then
            if (exec_clabel^.OnPressPtr <> 0) then
              begin
                exec_clabel^.OnPressPtr^();
                exit;
              end;

        if (_object_count = image_order) then
          if (exec_image^.Active = 1) then
            if (exec_image^.OnPressPtr <> 0) then
              begin
                exec_image^.OnPressPtr^();
                exit;
              end;

        if (_object_count = circle_button_order) then
          if (exec_circle_button^.Active = 1) then
            if (exec_circle_button^.OnPressPtr <> 0) then
              begin
                exec_circle_button^.OnPressPtr^();
                exit;
              end;

        if (_object_count = box_order) then
          if (exec_box^.Active = 1) then
            if (exec_box^.OnPressPtr <> 0) then
              begin
                exec_box^.OnPressPtr^();
                exit;
              end;

        if (_object_count = cbox_order) then
          if (exec_cbox^.Active = 1) then
            if (exec_cbox^.OnPressPtr <> 0) then
              begin
                exec_cbox^.OnPressPtr^();
                exit;
              end;

        if (_object_count = box_round_order) then
          if (exec_round_box^.Active = 1) then
            if (exec_round_box^.OnPressPtr <> 0) then
              begin
                exec_round_box^.OnPressPtr^();
                exit;
              end;

        if (_object_count = radio_button_order) then
          if (exec_radio_button^.Active = 1) then
            if (exec_radio_button^.OnPressPtr <> 0) then
              begin
                exec_radio_button^.OnPressPtr^();
                exit;
              end;

      end;
  end;

procedure Process_TP_Up( X : word; Y : word); // static
  begin
    case PressedObjectType of
      // Round Button
      1 : begin
            if (PressedObject <> 0) then
              begin
                exec_round_button := ^TButton_Round(PressedObject);
                if ((exec_round_button^.PressColEnabled = 1) and (exec_round_button^.OwnerScreenID = CurrentScreenID)) then
                  DrawRoundButton(exec_round_button);
              end;
          end;
      // Circle Button
      5 : begin
            if (PressedObject <> 0) then
              begin
                exec_circle_button := ^TCircleButton(PressedObject);
                if ((exec_circle_button^.PressColEnabled = 1) and (exec_circle_button^.OwnerScreenID = CurrentScreenID)) then
                  DrawCircleButton(exec_circle_button);
              end;
          end;
      // Box
      6 : begin
            if (PressedObject <> 0) then
              begin
                exec_box := ^TBox(PressedObject);
                if ((exec_box^.PressColEnabled = 1) and (exec_box^.OwnerScreenID = CurrentScreenID)) then
                  DrawBox(exec_box);
              end;
          end;
      // CBox
      14 : begin
            if (PressedObject <> 0) then
              begin
                exec_cbox := ^TCBox(PressedObject);
                if ((exec_cbox^.PressColEnabled = 1) and (exec_cbox^.OwnerScreenID = CurrentScreenID)) then
                  DrawCBox(exec_cbox);
              end;
          end;
      // Round Box
      7 : begin
            if (PressedObject <> 0) then
              begin
                exec_round_box := ^TBox_Round(PressedObject);
                if ((exec_round_box^.PressColEnabled = 1) and (exec_round_box^.OwnerScreenID = CurrentScreenID)) then
                  DrawRoundBox(exec_round_box);
              end;
          end;
      // Radio Button
      17 : begin
            if (PressedObject <> 0) then
              begin
                exec_radio_button := ^TRadioButton(PressedObject);
                if ((exec_radio_button^.PressColEnabled = 1) and (exec_radio_button^.OwnerScreenID = CurrentScreenID)) then
                  DrawRadioButton(exec_radio_button);
              end;
          end;
    end;

    exec_label          := 0;
    exec_clabel          := 0;
    exec_image          := 0;

    Get_Object(X, Y);

    if (_object_count <> -1) then
      begin
        // Buttons with Round Edges
        if (_object_count = round_button_order) then
          begin
            if (exec_round_button^.Active = 1) then
              begin
                if (exec_round_button^.OnUpPtr <> 0) then
                  exec_round_button^.OnUpPtr();
                if PressedObject = TPointer(exec_round_button) then
                  if (exec_round_button^.OnClickPtr <> 0) then
                    exec_round_button^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // Labels
        if (_object_count = label_order) then
          begin
            if (exec_label^.Active = 1) then
              begin
                if (exec_label^.OnUpPtr <> 0) then
                  exec_label^.OnUpPtr();
                if PressedObject = TPointer(exec_label) then
                  if (exec_label^.OnClickPtr <> 0) then
                    exec_label^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // CLabels
        if (_object_count = clabel_order) then
          begin
            if (exec_clabel^.Active = 1) then
              begin
                if (exec_clabel^.OnUpPtr <> 0) then
                  exec_clabel^.OnUpPtr();
                if PressedObject = TPointer(exec_clabel) then
                  if (exec_clabel^.OnClickPtr <> 0) then
                    exec_clabel^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // Images
        if (_object_count = image_order) then
          begin
            if (exec_image^.Active = 1) then
              begin
                if (exec_image^.OnUpPtr <> 0) then
                  exec_image^.OnUpPtr();
                if PressedObject = TPointer(exec_image) then
                  if (exec_image^.OnClickPtr <> 0) then
                    exec_image^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // Circle Buttons
        if (_object_count = circle_button_order) then
          begin
            if (exec_circle_button^.Active = 1) then
              begin
                if (exec_circle_button^.OnUpPtr <> 0) then
                  exec_circle_button^.OnUpPtr();
                if PressedObject = TPointer(exec_circle_button) then
                  if (exec_circle_button^.OnClickPtr <> 0) then
                    exec_circle_button^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // Boxes
        if (_object_count = box_order) then
          begin
            if (exec_box^.Active = 1) then
              begin
                if (exec_box^.OnUpPtr <> 0) then
                  exec_box^.OnUpPtr();
                if PressedObject = TPointer(exec_box) then
                  if (exec_box^.OnClickPtr <> 0) then
                    exec_box^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // CBoxes
        if (_object_count = cbox_order) then
          begin
            if (exec_cbox^.Active = 1) then
              begin
                if (exec_cbox^.OnUpPtr <> 0) then
                  exec_cbox^.OnUpPtr();
                if PressedObject = TPointer(exec_cbox) then
                  if (exec_cbox^.OnClickPtr <> 0) then
                    exec_cbox^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // Boxes with Round Edges
        if (_object_count = box_round_order) then
          begin
            if (exec_round_box^.Active = 1) then
              begin
                if (exec_round_box^.OnUpPtr <> 0) then
                  exec_round_box^.OnUpPtr();
                if PressedObject = TPointer(exec_round_box) then
                  if (exec_round_box^.OnClickPtr <> 0) then
                    exec_round_box^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

        // RadioButtons
        if (_object_count = radio_button_order) then
          begin
            if (exec_radio_button^.Active = 1) then
              begin
                if (exec_radio_button^.OnUpPtr <> 0) then
                  exec_radio_button^.OnUpPtr();
                if PressedObject = TPointer(exec_radio_button) then
                  if (exec_radio_button^.OnClickPtr <> 0) then
                    exec_radio_button^.OnClickPtr^();
                PressedObject := 0;
                PressedObjectType := -1;
                exit;
              end;
          end;

      end;
    PressedObject := 0;
    PressedObjectType := -1;
  end;

procedure Process_TP_Down( X : word; Y : word); // static
  begin
    object_pressed      := 0;
    exec_round_button   := 0;
    exec_label          := 0;
    exec_clabel         := 0;
    exec_image          := 0;
    exec_circle_button  := 0;
    exec_box            := 0;
    exec_cbox           := 0;
    exec_round_box      := 0;
    exec_radio_button   := 0;

    Get_Object(X, Y);

    if (_object_count <> -1) then
      begin
        if (_object_count = round_button_order) then
          if (exec_round_button^.Active = 1) then
            begin
              if (exec_round_button^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawRoundButton(exec_round_button);
                end;
              PressedObject := TPointer(exec_round_button);
              PressedObjectType := 1;
              if (exec_round_button^.OnDownPtr <> 0) then
                begin
                  exec_round_button^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = label_order) then
          if (exec_label^.Active = 1) then
            begin
              PressedObject := TPointer(exec_label);
              PressedObjectType := 2;
              if (exec_label^.OnDownPtr <> 0) then
                begin
                  exec_label^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = clabel_order) then
          if (exec_clabel^.Active = 1) then
            begin
              PressedObject := TPointer(exec_clabel);
              PressedObjectType := 10;
              if (exec_clabel^.OnDownPtr <> 0) then
                begin
                  exec_clabel^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = image_order) then
          if (exec_image^.Active = 1) then
            begin
              PressedObject := TPointer(exec_image);
              PressedObjectType := 3;
              if (exec_image^.OnDownPtr <> 0) then
                begin
                  exec_image^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = circle_button_order) then
          if (exec_circle_button^.Active = 1) then
            begin
              if (exec_circle_button^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawCircleButton(exec_circle_button);
                end;
              PressedObject := TPointer(exec_circle_button);
              PressedObjectType := 5;
              if (exec_circle_button^.OnDownPtr <> 0) then
                begin
                  exec_circle_button^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = box_order) then
          if (exec_box^.Active = 1) then
            begin
              if (exec_box^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawBox(exec_box);
                end;
              PressedObject := TPointer(exec_box);
              PressedObjectType := 6;
              if (exec_box^.OnDownPtr <> 0) then
                begin
                  exec_box^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = cbox_order) then
          if (exec_cbox^.Active = 1) then
            begin
              if (exec_cbox^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawCBox(exec_cbox);
                end;
              PressedObject := TPointer(exec_cbox);
              PressedObjectType := 14;
              if (exec_cbox^.OnDownPtr <> 0) then
                begin
                  exec_cbox^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = box_round_order) then
          if (exec_round_box^.Active = 1) then
            begin
              if (exec_round_box^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawRoundBox(exec_round_box);
                end;
              PressedObject := TPointer(exec_round_box);
              PressedObjectType := 7;
              if (exec_round_box^.OnDownPtr <> 0) then
                begin
                  exec_round_box^.OnDownPtr^();
                  exit;
                end;
            end;

        if (_object_count = radio_button_order) then
          if (exec_radio_button^.Active = 1) then
            begin
              if (exec_radio_button^.PressColEnabled = 1) then
                begin
                  object_pressed := 1;
                  DrawRadioButton(exec_radio_button);
                end;
              PressedObject := TPointer(exec_radio_button);
              PressedObjectType := 17;
              if (exec_radio_button^.OnDownPtr <> 0) then
                begin
                  exec_radio_button^.OnDownPtr^();
                  exit;
                end;
            end;

      end;
  end;

procedure Check_TP();
  begin
    if (TP_TFT_Press_Detect()) then
      begin
        if (TP_TFT_Get_Coordinates(@Xcoord, @Ycoord) = 0) then
            // After a PRESS is detected read X-Y and convert it to Display dimensions space
          begin
            Process_TP_Press(Xcoord, Ycoord);
            if PenDown = 0 then
              begin
                PenDown := 1;
                Process_TP_Down(Xcoord, Ycoord);
              end;
          end;
      end
    else if PenDown = 1 then
      begin
        PenDown := 0;
        Process_TP_Up(Xcoord, Ycoord);
      end;
  end;

procedure Init_MCU();
  begin
    TRISE := 0;
    TFT_DataPort_Direction := 0;
    CLKDIV := CLKDIV and 0xFFE0;    // PLLPRE<4:0> = 0  ->  N1 = 2    8MHz / 2 = 4MHz
                                    // (must be within 0.8 MHz to 8 MHz range)
    PLLFBD :=   30;                 // PLLDIV<8:0> = 30 ->  M = 32    4MHz * 32 = 128MHz
                                    // (must be within 100 MHz to 200 MHz range)
    PLLPOST_1_bit := 0;
    PLLPOST_0_bit := 0;             // PLLPOST<1:0> = 0 ->  N2 = 2    128MHz / 2 = 64MHz
                                    // (must be within 12.5 MHz to 80 MHz range)
    Delay_ms(150);
    TFT_Set_Default_Mode();
    TP_TFT_Rotate_180(0);
    TFT_Set_Active(@Set_Index, @Write_Command, @Write_Data);
  end;

procedure Start_TP();
  begin
    Init_MCU();

    InitializeTouchPanel();

    Delay_ms(1000);
    TFT_Fill_Screen(0);
    Calibrate();
    TFT_Fill_Screen(0);

    InitializeObjects();
    display_width := Start.Width;
    display_height := Start.Height;
    DrawScreen(32768);
  end;

end.
