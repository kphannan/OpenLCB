--------------
Starting DatagramTest
OpenLcb_can_init
setup done
queue_xmt_wait: [17020573]
queue_xmt_wait: [16304573]
queue_xmt_wait: [15050573]
queue_xmt_wait: [14607573]
queue_xmt_wait: [10700573]
queue_xmt_wait: [10701573] 02 03 04 05 06 07
queue_xmt_wait: [19100573] 02 03 04 05 06 07
send datagram B
queue_xmt_wait: [1bbfd573] 10 11 12 13 14 15 16 17
queue_xmt_wait: [1dbfd573] 18 19 1a 1b 1c 1d 1e
one second done

--------------
send a first datagram 
queue_xmt_wait: [1bbff573] 10 11 12 13 14 15 16 17
queue_xmt_wait: [1cbff573] 18 19 1a 1b 1c 1d 1e 00
queue_xmt_wait: [1dbff573] 00 00 00 00 00 00 00
1st still in use, OK
datagram reply for another, expect it doesn't clear buffer
can_get_frame:  [19a28bfd] 00 01
2nd error: should be still in use

datagram reply for this, expect it clears buffer
can_get_frame:  [19a28bfd] 01 11
OK, send 0 length datagram
queue_xmt_wait: [1abff573]
handle datagram ack reply
can_get_frame:  [19a28bfd] 01 11

send long datagram to test nak reply
queue_xmt_wait: [1bbff573] 20 21 22 23 24 25 26 27
queue_xmt_wait: [1cbff573] 28 29 2a 2b 2c 2d 2e 2f
queue_xmt_wait: [1dbff573] 30 31 32 33 34 35 36
datagram nak reply for different node, ignore
can_get_frame:  [19a48bfd] 00 01
queue_xmt_wait: [1bbff573] 20 21 22 23 24 25 26 27
queue_xmt_wait: [1cbff573] 28 29 2a 2b 2c 2d 2e 2f
queue_xmt_wait: [1dbff573] 30 31 32 33 34 35 36
datagram nak reply from different node, ignore
can_get_frame:  [19a48111] 01 11
queue_xmt_wait: [1bbff573] 20 21 22 23 24 25 26 27
queue_xmt_wait: [1cbff573] 28 29 2a 2b 2c 2d 2e 2f
queue_xmt_wait: [1dbff573] 30 31 32 33 34 35 36
handle datagram nak reply by resending
can_get_frame:  [19a48bfd] 01 11
queue_xmt_wait: [1bbff573] 20 21 22 23 24 25 26 27
queue_xmt_wait: [1cbff573] 28 29 2a 2b 2c 2d 2e 2f
queue_xmt_wait: [1dbff573] 30 31 32 33 34 35 36
handle 2nd datagram nak reply by resending again
can_get_frame:  [19a48bfd] 01 11
queue_xmt_wait: [1bbff573] 20 21 22 23 24 25 26 27
queue_xmt_wait: [1cbff573] 28 29 2a 2b 2c 2d 2e 2f
queue_xmt_wait: [1dbff573] 30 31 32 33 34 35 36
final positive reply clears buffer
can_get_frame:  [19a28bfd] 01 11

--------------
Start to test receiving datagrams

Receive single fragment datagram OK
can_get_frame:  [1a573bfd] 40 41 42 43
consume datagram of length 4: 40 41 42 43 
queue_xmt_wait: [19a28573] 0b fd

Receive three fragment datagram OK
can_get_frame:  [1b573bfd] 50 41 42 43
can_get_frame:  [1c573bfd] 60 41 42 43
can_get_frame:  [1d573bfd] 70 41 42 43
consume datagram of length 12: 50 41 42 43 60 41 42 43 70 41 42 43 
queue_xmt_wait: [19a28573] 0b fd

Receive single fragment datagram, return fail
can_get_frame:  [1a573bfd] 40 41 42 43
consume datagram of length 4: 40 41 42 43 
queue_xmt_wait: [19a48573] 0b fd 10 40

test ends
