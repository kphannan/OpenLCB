;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 12/7/2012 7:07:44 AM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000045592  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x005A0E  	23054
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x0059C4  	22980
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x0058C2  	22722
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
0x0100	0x000000  	0
0x0102	0x000000  	0
0x0104	0x000000  	0
0x0106	0x000000  	0
0x0108	0x000000  	0
0x010A	0x000000  	0
0x010C	0x000000  	0
0x010E	0x000000  	0
0x0110	0x000000  	0
0x0112	0x000000  	0
0x0114	0x000000  	0
0x0116	0x000000  	0
0x0118	0x000000  	0
0x011A	0x000000  	0
0x011C	0x000000  	0
0x011E	0x000000  	0
0x0120	0x000000  	0
0x0122	0x000000  	0
0x0124	0x000000  	0
0x0126	0x000000  	0
0x0128	0x000000  	0
0x012A	0x000000  	0
0x012C	0x000000  	0
0x012E	0x000000  	0
0x0130	0x000000  	0
0x0132	0x000000  	0
0x0134	0x000000  	0
0x0136	0x000000  	0
0x0138	0x000000  	0
0x013A	0x000000  	0
0x013C	0x000000  	0
0x013E	0x000000  	0
0x0140	0x000000  	0
0x0142	0x000000  	0
0x0144	0x000000  	0
0x0146	0x000000  	0
0x0148	0x000000  	0
0x014A	0x000000  	0
0x014C	0x000000  	0
0x014E	0x000000  	0
0x0150	0x000000  	0
0x0152	0x000000  	0
0x0154	0x000000  	0
0x0156	0x000000  	0
0x0158	0x000000  	0
0x015A	0x000000  	0
0x015C	0x000000  	0
0x015E	0x000000  	0
0x0160	0x000000  	0
0x0162	0x000000  	0
0x0164	0x000000  	0
0x0166	0x000000  	0
0x0168	0x000000  	0
0x016A	0x000000  	0
0x016C	0x000000  	0
0x016E	0x000000  	0
0x0170	0x000000  	0
0x0172	0x000000  	0
0x0174	0x000000  	0
0x0176	0x000000  	0
0x0178	0x000000  	0
0x017A	0x000000  	0
0x017C	0x000000  	0
0x017E	0x000000  	0
0x0180	0x000000  	0
0x0182	0x000000  	0
0x0184	0x000000  	0
0x0186	0x000000  	0
0x0188	0x000000  	0
0x018A	0x000000  	0
0x018C	0x000000  	0
0x018E	0x000000  	0
0x0190	0x000000  	0
0x0192	0x000000  	0
0x0194	0x000000  	0
0x0196	0x000000  	0
0x0198	0x000000  	0
0x019A	0x000000  	0
0x019C	0x000000  	0
0x019E	0x000000  	0
0x01A0	0x000000  	0
0x01A2	0x000000  	0
0x01A4	0x000000  	0
0x01A6	0x000000  	0
0x01A8	0x000000  	0
0x01AA	0x000000  	0
0x01AC	0x000000  	0
0x01AE	0x000000  	0
0x01B0	0x000000  	0
0x01B2	0x000000  	0
0x01B4	0x000000  	0
0x01B6	0x000000  	0
0x01B8	0x000000  	0
0x01BA	0x000000  	0
0x01BC	0x000000  	0
0x01BE	0x000000  	0
0x01C0	0x000000  	0
0x01C2	0x000000  	0
0x01C4	0x000000  	0
0x01C6	0x000000  	0
0x01C8	0x000000  	0
0x01CA	0x000000  	0
0x01CC	0x000000  	0
0x01CE	0x000000  	0
0x01D0	0x000000  	0
0x01D2	0x000000  	0
0x01D4	0x000000  	0
0x01D6	0x000000  	0
0x01D8	0x000000  	0
0x01DA	0x000000  	0
0x01DC	0x000000  	0
0x01DE	0x000000  	0
0x01E0	0x000000  	0
0x01E2	0x000000  	0
0x01E4	0x000000  	0
0x01E6	0x000000  	0
0x01E8	0x000000  	0
0x01EA	0x000000  	0
0x01EC	0x000000  	0
0x01EE	0x000000  	0
0x01F0	0x000000  	0
0x01F2	0x000000  	0
0x01F4	0x000000  	0
0x01F6	0x000000  	0
0x01F8	0x000000  	0
0x01FA	0x000000  	0
0x01FC	0x000000  	0
0x01FE	0x000000  	0
_main:
0x5592	0x2263EF  	MOV	#9790, W15
0x5594	0x22FFF0  	MOV	#12287, W0
0x5596	0xB7A020  	MOV	WREG, SPLIM
0x5598	0x202010  	MOV	#513, W0
0x559A	0xB7A032  	MOV	WREG, DSRPAG
0x559C	0x200040  	MOV	#4, W0
0x559E	0xB72044  	IOR	CORCON
0x55A0	0xFA0048  	LNK	#72
;dsPIC33EP_NMRAnetCommandStation.mpas,115 :: 		begin
;dsPIC33EP_NMRAnetCommandStation.mpas,116 :: 		_25AAxxxx_Initialize;
0x55A2	0x781F8A  	PUSH	W10
0x55A4	0x781F8B  	PUSH	W11
0x55A6	0x781F8C  	PUSH	W12
0x55A8	0x781F8D  	PUSH	W13
0x55AA	0x07F67E  	RCALL	__25AAxxxx_Initialize
;dsPIC33EP_NMRAnetCommandStation.mpas,117 :: 		NMRAnetStateMachine_Initialize(MUSTANGPEAK_ID_0_HI, MUSTANGPEAK_COMMANDSTATION_ID_0_LO);
0x55AC	0x20700C  	MOV	#1792, W12
0x55AE	0x20001D  	MOV	#1, W13
0x55B0	0x20101A  	MOV	#257, W10
0x55B2	0x20005B  	MOV	#5, W11
0x55B4	0x07F5E6  	RCALL	_NMRAnetStateMachine_Initialize
;dsPIC33EP_NMRAnetCommandStation.mpas,118 :: 		MCU_Setup_Initialize;                                                         // Start the timers and perpherials last
0x55B6	0x07F768  	RCALL	_MCU_Setup_Initialize
;dsPIC33EP_NMRAnetCommandStation.mpas,119 :: 		NMRA_DCC_Initialize;
0x55B8	0x07F5F0  	RCALL	_NMRA_DCC_Initialize
;dsPIC33EP_NMRAnetCommandStation.mpas,121 :: 		H_Bridge_A_Lo := 0;                                                           // Bridge Off
0x55BA	0xA92E04  	BCLR	LATA1_bit, BitPos(LATA1_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,122 :: 		H_Bridge_A_Hi := 0;                                                           // Bridge Off
0x55BC	0xA90E14  	BCLR	LATB0_bit, BitPos(LATB0_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,123 :: 		H_Bridge_B_Lo := 0;                                                           // Bridge Off
0x55BE	0xA92E14  	BCLR	LATB1_bit, BitPos(LATB1_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,124 :: 		H_Bridge_B_Hi := 0;                                                           // Bridge Off
0x55C0	0xA98E14  	BCLR	LATB4_bit, BitPos(LATB4_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,125 :: 		H_Bridge_A_Lo_Direction := 0;                                                 // Output
0x55C2	0xA92E00  	BCLR	TRISA1_bit, BitPos(TRISA1_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,126 :: 		H_Bridge_A_Hi_Direction := 0;                                                 // Output
0x55C4	0xA90E10  	BCLR	TRISB0_bit, BitPos(TRISB0_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,127 :: 		H_Bridge_B_Lo_Direction := 0;                                                 // Output
0x55C6	0xA92E10  	BCLR	TRISB1_bit, BitPos(TRISB1_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,128 :: 		H_Bridge_B_Hi_Direction := 0;                                                 // Output
0x55C8	0xA98E10  	BCLR	TRISB4_bit, BitPos(TRISB4_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,131 :: 		TON_T1CON_bit := 1;                                                           // Start the DCC Timer
0x55CA	0xA8E105  	BSET	TON_T1CON_bit, BitPos(TON_T1CON_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,132 :: 		NMRA_DCC_Packet_Init;                                                         // Send our 20 Idle Packets per the spec, note we are not on the OLCB bus yet so this will block until done.
0x55CC	0x07F85D  	RCALL	_NMRA_DCC_Packet_Init
;dsPIC33EP_NMRAnetCommandStation.mpas,135 :: 		UART1_Write_Text('Starting'+LF);
0x55CE	0x4700E0  	ADD	W14, #0, W1
0x55D0	0xB3C530  	MOV.B	#83, W0
0x55D2	0x785880  	MOV.B	W0, [W1++]
0x55D4	0xB3C740  	MOV.B	#116, W0
0x55D6	0x785880  	MOV.B	W0, [W1++]
0x55D8	0xB3C610  	MOV.B	#97, W0
0x55DA	0x785880  	MOV.B	W0, [W1++]
0x55DC	0xB3C720  	MOV.B	#114, W0
0x55DE	0x785880  	MOV.B	W0, [W1++]
0x55E0	0xB3C740  	MOV.B	#116, W0
0x55E2	0x785880  	MOV.B	W0, [W1++]
0x55E4	0xB3C690  	MOV.B	#105, W0
0x55E6	0x785880  	MOV.B	W0, [W1++]
0x55E8	0xB3C6E0  	MOV.B	#110, W0
0x55EA	0x785880  	MOV.B	W0, [W1++]
0x55EC	0xB3C670  	MOV.B	#103, W0
0x55EE	0x785880  	MOV.B	W0, [W1++]
0x55F0	0xB3C0D0  	MOV.B	#13, W0
0x55F2	0x785880  	MOV.B	W0, [W1++]
0x55F4	0xB3C0A0  	MOV.B	#10, W0
0x55F6	0x785880  	MOV.B	W0, [W1++]
0x55F8	0xB3C000  	MOV.B	#0, W0
0x55FA	0x785880  	MOV.B	W0, [W1++]
0x55FC	0x470060  	ADD	W14, #0, W0
0x55FE	0x780500  	MOV	W0, W10
0x5600	0x07DD09  	RCALL	_UART1_Write_Text
;dsPIC33EP_NMRAnetCommandStation.mpas,137 :: 		x := 0;
0x5602	0xEF2000  	CLR	W0
0x5604	0x892E80  	MOV	W0, _x
;dsPIC33EP_NMRAnetCommandStation.mpas,138 :: 		y := 0;
0x5606	0xEF2000  	CLR	W0
0x5608	0x892E70  	MOV	W0, _y
;dsPIC33EP_NMRAnetCommandStation.mpas,139 :: 		j := 0;
0x560A	0xEF2000  	CLR	W0
0x560C	0x892E60  	MOV	W0, _j
;dsPIC33EP_NMRAnetCommandStation.mpas,140 :: 		i := 0;
0x560E	0xEF2000  	CLR	W0
0x5610	0x892E30  	MOV	W0, _i
;dsPIC33EP_NMRAnetCommandStation.mpas,141 :: 		MaxTime_RX := 0;
0x5612	0xEF2000  	CLR	W0
0x5614	0x892E20  	MOV	W0, _MaxTime_RX
;dsPIC33EP_NMRAnetCommandStation.mpas,142 :: 		LastRxTime := 0;
0x5616	0xEF2000  	CLR	W0
0x5618	0x892E50  	MOV	W0, _LastRxTime
;dsPIC33EP_NMRAnetCommandStation.mpas,143 :: 		MaxTime_StateMachine := 0;
0x561A	0xEF2000  	CLR	W0
0x561C	0x892E40  	MOV	W0, _MaxTime_StateMachine
;dsPIC33EP_NMRAnetCommandStation.mpas,144 :: 		LastStateMachineTime := 0;
0x561E	0xEF2000  	CLR	W0
0x5620	0x892E90  	MOV	W0, _LastStateMachineTime
;dsPIC33EP_NMRAnetCommandStation.mpas,145 :: 		DCCTime := 0;
0x5622	0xEF2000  	CLR	W0
0x5624	0x892EC0  	MOV	W0, _DCCTime
;dsPIC33EP_NMRAnetCommandStation.mpas,146 :: 		LastDCCTime := 0;
0x5626	0xEF2000  	CLR	W0
0x5628	0x892EB0  	MOV	W0, _LastDCCTime
;dsPIC33EP_NMRAnetCommandStation.mpas,148 :: 		TRISA4_bit := 0;
0x562A	0xA98E00  	BCLR	TRISA4_bit, BitPos(TRISA4_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,149 :: 		LATA4_bit := 0;                                                   // Output
0x562C	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,151 :: 		j := 0;
0x562E	0xEF2000  	CLR	W0
0x5630	0x892E60  	MOV	W0, _j
;dsPIC33EP_NMRAnetCommandStation.mpas,153 :: 		TON_T3CON_bit := 1;       // Turn on Timer 3 to time loops
0x5632	0xA8E113  	BSET	TON_T3CON_bit, BitPos(TON_T3CON_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,154 :: 		TON_T4CON_bit := 1;       // Turn on Timer 3 to time loops
0x5634	0xA8E11F  	BSET	TON_T4CON_bit, BitPos(TON_T4CON_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,155 :: 		TON_T5CON_bit := 1;
0x5636	0xA8E121  	BSET	TON_T5CON_bit, BitPos(TON_T5CON_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,157 :: 		while (TRUE) do
L__main15:
;dsPIC33EP_NMRAnetCommandStation.mpas,159 :: 		ActiveNode := NMRAnetNode_NextNode;
0x5638	0x07FAC4  	RCALL	_NMRAnetNode_NextNode
0x563A	0x892EA0  	MOV	W0, _ActiveNode
;dsPIC33EP_NMRAnetCommandStation.mpas,160 :: 		if ActiveNode <> PNMRAnetNode( nil) then
0x563C	0x200001  	MOV	#0, W1
0x563E	0xE10001  	CP	W0, W1
0x5640	0x32011B  	BRA Z	L__main20
L__main76:
;dsPIC33EP_NMRAnetCommandStation.mpas,163 :: 		TMR3 := 0;
0x5642	0xEF210A  	CLR	TMR3
;dsPIC33EP_NMRAnetCommandStation.mpas,164 :: 		NMRAnetStateMachine_Process(ActiveNode);
0x5644	0x812EAA  	MOV	_ActiveNode, W10
0x5646	0x07F854  	RCALL	_NMRAnetStateMachine_Process
;dsPIC33EP_NMRAnetCommandStation.mpas,165 :: 		if TMR3 > MaxTime_StateMachine then MaxTime_StateMachine := TMR3;
0x5648	0x800851  	MOV	TMR3, W1
0x564A	0x225C80  	MOV	#lo_addr(_MaxTime_StateMachine), W0
0x564C	0xE10810  	CP	W1, [W0]
0x564E	0x360002  	BRA LEU	L__main23
L__main77:
0x5650	0xBF810A  	MOV	TMR3, WREG
0x5652	0x892E40  	MOV	W0, _MaxTime_StateMachine
L__main23:
;dsPIC33EP_NMRAnetCommandStation.mpas,167 :: 		if MaxTime_StateMachine > LastStateMachineTime then
0x5654	0x812E41  	MOV	_MaxTime_StateMachine, W1
0x5656	0x225D20  	MOV	#lo_addr(_LastStateMachineTime), W0
0x5658	0xE10810  	CP	W1, [W0]
0x565A	0x360047  	BRA LEU	L__main26
L__main78:
;dsPIC33EP_NMRAnetCommandStation.mpas,169 :: 		LastStateMachineTime := MaxTime_StateMachine;
0x565C	0x812E40  	MOV	_MaxTime_StateMachine, W0
0x565E	0x892E90  	MOV	W0, _LastStateMachineTime
;dsPIC33EP_NMRAnetCommandStation.mpas,170 :: 		TickTime := real( LastStateMachineTime) * 16.6666666e-9;  // nano seconds
0x5660	0x812E40  	MOV	_MaxTime_StateMachine, W0
0x5662	0xEB0080  	CLR	W1
0x5664	0x07ED0E  	RCALL	__Long2Float
0x5666	0x22A632  	MOV	#10851, W2
0x5668	0x2328F3  	MOV	#12943, W3
0x566A	0x07E26E  	RCALL	__Mul_FP
0x566C	0x8931B0  	MOV	W0, _TickTime
0x566E	0x8931C1  	MOV	W1, _TickTime+2
;dsPIC33EP_NMRAnetCommandStation.mpas,171 :: 		TickTime := TickTime*1e6;  // micro seconds (us)
0x5670	0x224002  	MOV	#9216, W2
0x5672	0x249743  	MOV	#18804, W3
0x5674	0x07E269  	RCALL	__Mul_FP
0x5676	0x8931B0  	MOV	W0, _TickTime
0x5678	0x8931C1  	MOV	W1, _TickTime+2
;dsPIC33EP_NMRAnetCommandStation.mpas,172 :: 		FloatToStr(TickTime, s1) ;
0x567A	0x22614C  	MOV	#lo_addr(_s1), W12
0x567C	0xBE0500  	MOV.D	W0, W10
0x567E	0x07F9C4  	RCALL	_FloatToStr
;dsPIC33EP_NMRAnetCommandStation.mpas,173 :: 		UART1_Write_Text('StateMachineTime = ' + s1 + 'us'+LF);
0x5680	0x47006E  	ADD	W14, #14, W0
0x5682	0xB3C532  	MOV.B	#83, W2
0x5684	0x785802  	MOV.B	W2, [W0++]
0x5686	0xB3C742  	MOV.B	#116, W2
0x5688	0x785802  	MOV.B	W2, [W0++]
0x568A	0xB3C612  	MOV.B	#97, W2
0x568C	0x785802  	MOV.B	W2, [W0++]
0x568E	0xB3C742  	MOV.B	#116, W2
0x5690	0x785802  	MOV.B	W2, [W0++]
0x5692	0xB3C652  	MOV.B	#101, W2
0x5694	0x785802  	MOV.B	W2, [W0++]
0x5696	0xB3C4D2  	MOV.B	#77, W2
0x5698	0x785802  	MOV.B	W2, [W0++]
0x569A	0xB3C612  	MOV.B	#97, W2
0x569C	0x785802  	MOV.B	W2, [W0++]
0x569E	0xB3C632  	MOV.B	#99, W2
0x56A0	0x785802  	MOV.B	W2, [W0++]
0x56A2	0xB3C682  	MOV.B	#104, W2
0x56A4	0x785802  	MOV.B	W2, [W0++]
0x56A6	0xB3C692  	MOV.B	#105, W2
0x56A8	0x785802  	MOV.B	W2, [W0++]
0x56AA	0xB3C6E2  	MOV.B	#110, W2
0x56AC	0x785802  	MOV.B	W2, [W0++]
0x56AE	0xB3C652  	MOV.B	#101, W2
0x56B0	0x785802  	MOV.B	W2, [W0++]
0x56B2	0xB3C542  	MOV.B	#84, W2
0x56B4	0x785802  	MOV.B	W2, [W0++]
0x56B6	0xB3C692  	MOV.B	#105, W2
0x56B8	0x785802  	MOV.B	W2, [W0++]
0x56BA	0xB3C6D2  	MOV.B	#109, W2
0x56BC	0x785802  	MOV.B	W2, [W0++]
0x56BE	0xB3C652  	MOV.B	#101, W2
0x56C0	0x785802  	MOV.B	W2, [W0++]
0x56C2	0xB3C202  	MOV.B	#32, W2
0x56C4	0x785802  	MOV.B	W2, [W0++]
0x56C6	0xB3C3D2  	MOV.B	#61, W2
0x56C8	0x785802  	MOV.B	W2, [W0++]
0x56CA	0xB3C202  	MOV.B	#32, W2
0x56CC	0x785802  	MOV.B	W2, [W0++]
0x56CE	0x226141  	MOV	#lo_addr(_s1), W1
0x56D0	0x07FF4C  	RCALL	___CS2S
0x56D2	0xB3C752  	MOV.B	#117, W2
0x56D4	0x785802  	MOV.B	W2, [W0++]
0x56D6	0xB3C732  	MOV.B	#115, W2
0x56D8	0x785802  	MOV.B	W2, [W0++]
0x56DA	0x28DB81  	MOV	#lo_addr(_LF), W1
0x56DC	0x07FF46  	RCALL	___CS2S
0x56DE	0x780080  	MOV	W0, W1
0x56E0	0xEF2000  	CLR	W0
0x56E2	0x785880  	MOV.B	W0, [W1++]
0x56E4	0x47006E  	ADD	W14, #14, W0
0x56E6	0x780500  	MOV	W0, W10
0x56E8	0x07DC95  	RCALL	_UART1_Write_Text
;dsPIC33EP_NMRAnetCommandStation.mpas,174 :: 		end;
L__main26:
;dsPIC33EP_NMRAnetCommandStation.mpas,175 :: 		if MaxTime_Rx > LastRxTime then
0x56EA	0x812E21  	MOV	_MaxTime_RX, W1
0x56EC	0x225CA0  	MOV	#lo_addr(_LastRxTime), W0
0x56EE	0xE10810  	CP	W1, [W0]
0x56F0	0x36003F  	BRA LEU	L__main29
L__main79:
;dsPIC33EP_NMRAnetCommandStation.mpas,177 :: 		LastRxTime := MaxTime_Rx;
0x56F2	0x812E20  	MOV	_MaxTime_RX, W0
0x56F4	0x892E50  	MOV	W0, _LastRxTime
;dsPIC33EP_NMRAnetCommandStation.mpas,178 :: 		TickTime := real( LastRxTime) * 16.6666666e-9;  // nano seconds
0x56F6	0x812E20  	MOV	_MaxTime_RX, W0
0x56F8	0xEB0080  	CLR	W1
0x56FA	0x07ECC3  	RCALL	__Long2Float
0x56FC	0x22A632  	MOV	#10851, W2
0x56FE	0x2328F3  	MOV	#12943, W3
0x5700	0x07E223  	RCALL	__Mul_FP
0x5702	0x8931B0  	MOV	W0, _TickTime
0x5704	0x8931C1  	MOV	W1, _TickTime+2
;dsPIC33EP_NMRAnetCommandStation.mpas,179 :: 		TickTime := TickTime*1e6;  // micro seconds (us)
0x5706	0x224002  	MOV	#9216, W2
0x5708	0x249743  	MOV	#18804, W3
0x570A	0x07E21E  	RCALL	__Mul_FP
0x570C	0x8931B0  	MOV	W0, _TickTime
0x570E	0x8931C1  	MOV	W1, _TickTime+2
;dsPIC33EP_NMRAnetCommandStation.mpas,180 :: 		FloatToStr(TickTime, s1) ;
0x5710	0x22614C  	MOV	#lo_addr(_s1), W12
0x5712	0xBE0500  	MOV.D	W0, W10
0x5714	0x07F979  	RCALL	_FloatToStr
;dsPIC33EP_NMRAnetCommandStation.mpas,181 :: 		UART1_Write_Text('Rx Interrupt = ' + s1 + 'us'+LF);
0x5716	0x47006E  	ADD	W14, #14, W0
0x5718	0xB3C522  	MOV.B	#82, W2
0x571A	0x785802  	MOV.B	W2, [W0++]
0x571C	0xB3C782  	MOV.B	#120, W2
0x571E	0x785802  	MOV.B	W2, [W0++]
0x5720	0xB3C202  	MOV.B	#32, W2
0x5722	0x785802  	MOV.B	W2, [W0++]
0x5724	0xB3C492  	MOV.B	#73, W2
0x5726	0x785802  	MOV.B	W2, [W0++]
0x5728	0xB3C6E2  	MOV.B	#110, W2
0x572A	0x785802  	MOV.B	W2, [W0++]
0x572C	0xB3C742  	MOV.B	#116, W2
0x572E	0x785802  	MOV.B	W2, [W0++]
0x5730	0xB3C652  	MOV.B	#101, W2
0x5732	0x785802  	MOV.B	W2, [W0++]
0x5734	0xB3C722  	MOV.B	#114, W2
0x5736	0x785802  	MOV.B	W2, [W0++]
0x5738	0xB3C722  	MOV.B	#114, W2
0x573A	0x785802  	MOV.B	W2, [W0++]
0x573C	0xB3C752  	MOV.B	#117, W2
0x573E	0x785802  	MOV.B	W2, [W0++]
0x5740	0xB3C702  	MOV.B	#112, W2
0x5742	0x785802  	MOV.B	W2, [W0++]
0x5744	0xB3C742  	MOV.B	#116, W2
0x5746	0x785802  	MOV.B	W2, [W0++]
0x5748	0xB3C202  	MOV.B	#32, W2
0x574A	0x785802  	MOV.B	W2, [W0++]
0x574C	0xB3C3D2  	MOV.B	#61, W2
0x574E	0x785802  	MOV.B	W2, [W0++]
0x5750	0xB3C202  	MOV.B	#32, W2
0x5752	0x785802  	MOV.B	W2, [W0++]
0x5754	0x226141  	MOV	#lo_addr(_s1), W1
0x5756	0x07FF09  	RCALL	___CS2S
0x5758	0xB3C752  	MOV.B	#117, W2
0x575A	0x785802  	MOV.B	W2, [W0++]
0x575C	0xB3C732  	MOV.B	#115, W2
0x575E	0x785802  	MOV.B	W2, [W0++]
0x5760	0x28DB81  	MOV	#lo_addr(_LF), W1
0x5762	0x07FF03  	RCALL	___CS2S
0x5764	0x780080  	MOV	W0, W1
0x5766	0xEF2000  	CLR	W0
0x5768	0x785880  	MOV.B	W0, [W1++]
0x576A	0x47006E  	ADD	W14, #14, W0
0x576C	0x780500  	MOV	W0, W10
0x576E	0x07DC52  	RCALL	_UART1_Write_Text
;dsPIC33EP_NMRAnetCommandStation.mpas,182 :: 		end;
L__main29:
;dsPIC33EP_NMRAnetCommandStation.mpas,183 :: 		if DCCTime > LastDCCTime then
0x5770	0x812EC1  	MOV	_DCCTime, W1
0x5772	0x225D60  	MOV	#lo_addr(_LastDCCTime), W0
0x5774	0xE10810  	CP	W1, [W0]
0x5776	0x360041  	BRA LEU	L__main32
L__main80:
;dsPIC33EP_NMRAnetCommandStation.mpas,185 :: 		LastDCCTime:= DCCTime;
0x5778	0x812EC0  	MOV	_DCCTime, W0
0x577A	0x892EB0  	MOV	W0, _LastDCCTime
;dsPIC33EP_NMRAnetCommandStation.mpas,186 :: 		TickTime := real( LastDCCTime) * 16.6666666e-9;  // nano seconds
0x577C	0x812EC0  	MOV	_DCCTime, W0
0x577E	0xEB0080  	CLR	W1
0x5780	0x07EC80  	RCALL	__Long2Float
0x5782	0x22A632  	MOV	#10851, W2
0x5784	0x2328F3  	MOV	#12943, W3
0x5786	0x07E1E0  	RCALL	__Mul_FP
0x5788	0x8931B0  	MOV	W0, _TickTime
0x578A	0x8931C1  	MOV	W1, _TickTime+2
;dsPIC33EP_NMRAnetCommandStation.mpas,187 :: 		TickTime := TickTime*1e6;  // micro seconds (us)
0x578C	0x224002  	MOV	#9216, W2
0x578E	0x249743  	MOV	#18804, W3
0x5790	0x07E1DB  	RCALL	__Mul_FP
0x5792	0x8931B0  	MOV	W0, _TickTime
0x5794	0x8931C1  	MOV	W1, _TickTime+2
;dsPIC33EP_NMRAnetCommandStation.mpas,188 :: 		FloatToStr(TickTime, s1) ;
0x5796	0x22614C  	MOV	#lo_addr(_s1), W12
0x5798	0xBE0500  	MOV.D	W0, W10
0x579A	0x07F936  	RCALL	_FloatToStr
;dsPIC33EP_NMRAnetCommandStation.mpas,189 :: 		UART1_Write_Text('DCC Interrupt = ' + s1 + 'us'+LF);
0x579C	0x47006E  	ADD	W14, #14, W0
0x579E	0xB3C442  	MOV.B	#68, W2
0x57A0	0x785802  	MOV.B	W2, [W0++]
0x57A2	0xB3C432  	MOV.B	#67, W2
0x57A4	0x785802  	MOV.B	W2, [W0++]
0x57A6	0xB3C432  	MOV.B	#67, W2
0x57A8	0x785802  	MOV.B	W2, [W0++]
0x57AA	0xB3C202  	MOV.B	#32, W2
0x57AC	0x785802  	MOV.B	W2, [W0++]
0x57AE	0xB3C492  	MOV.B	#73, W2
0x57B0	0x785802  	MOV.B	W2, [W0++]
0x57B2	0xB3C6E2  	MOV.B	#110, W2
0x57B4	0x785802  	MOV.B	W2, [W0++]
0x57B6	0xB3C742  	MOV.B	#116, W2
0x57B8	0x785802  	MOV.B	W2, [W0++]
0x57BA	0xB3C652  	MOV.B	#101, W2
0x57BC	0x785802  	MOV.B	W2, [W0++]
0x57BE	0xB3C722  	MOV.B	#114, W2
0x57C0	0x785802  	MOV.B	W2, [W0++]
0x57C2	0xB3C722  	MOV.B	#114, W2
0x57C4	0x785802  	MOV.B	W2, [W0++]
0x57C6	0xB3C752  	MOV.B	#117, W2
0x57C8	0x785802  	MOV.B	W2, [W0++]
0x57CA	0xB3C702  	MOV.B	#112, W2
0x57CC	0x785802  	MOV.B	W2, [W0++]
0x57CE	0xB3C742  	MOV.B	#116, W2
0x57D0	0x785802  	MOV.B	W2, [W0++]
0x57D2	0xB3C202  	MOV.B	#32, W2
0x57D4	0x785802  	MOV.B	W2, [W0++]
0x57D6	0xB3C3D2  	MOV.B	#61, W2
0x57D8	0x785802  	MOV.B	W2, [W0++]
0x57DA	0xB3C202  	MOV.B	#32, W2
0x57DC	0x785802  	MOV.B	W2, [W0++]
0x57DE	0x226141  	MOV	#lo_addr(_s1), W1
0x57E0	0x07FEC4  	RCALL	___CS2S
0x57E2	0xB3C752  	MOV.B	#117, W2
0x57E4	0x785802  	MOV.B	W2, [W0++]
0x57E6	0xB3C732  	MOV.B	#115, W2
0x57E8	0x785802  	MOV.B	W2, [W0++]
0x57EA	0x28DB81  	MOV	#lo_addr(_LF), W1
0x57EC	0x07FEBE  	RCALL	___CS2S
0x57EE	0x780080  	MOV	W0, W1
0x57F0	0xEF2000  	CLR	W0
0x57F2	0x785880  	MOV.B	W0, [W1++]
0x57F4	0x47006E  	ADD	W14, #14, W0
0x57F6	0x780500  	MOV	W0, W10
0x57F8	0x07DC0D  	RCALL	_UART1_Write_Text
;dsPIC33EP_NMRAnetCommandStation.mpas,190 :: 		end;
L__main32:
;dsPIC33EP_NMRAnetCommandStation.mpas,192 :: 		if UART1_Data_Ready then
0x57FA	0x07FEBF  	RCALL	_UART1_Data_Ready
0x57FC	0xE20000  	CP0	W0
0x57FE	0x32003C  	BRA Z	L__main35
L__main81:
;dsPIC33EP_NMRAnetCommandStation.mpas,194 :: 		case UART1_Read of
0x5800	0x07FEC3  	RCALL	_UART1_Read
0x5802	0x982730  	MOV	W0, [W14+70]
;dsPIC33EP_NMRAnetCommandStation.mpas,195 :: 		'P' : begin
0x5804	0x200501  	MOV	#80, W1
0x5806	0xE10001  	CP	W0, W1
0x5808	0x3A0001  	BRA NZ	L__main40
L__main82:
;dsPIC33EP_NMRAnetCommandStation.mpas,197 :: 		end;
0x580A	0x370036  	BRA	L__main37
L__main40:
;dsPIC33EP_NMRAnetCommandStation.mpas,198 :: 		'X' : begin
0x580C	0x200581  	MOV	#88, W1
0x580E	0xE10001  	CP	W0, W1
0x5810	0x3A0004  	BRA NZ	L__main43
L__main83:
;dsPIC33EP_NMRAnetCommandStation.mpas,199 :: 		NMRAnetStateMachine_TrySendVerifyNodeID(ActiveNode, 0);
0x5812	0xEF2016  	CLR	W11
0x5814	0x812EAA  	MOV	_ActiveNode, W10
0x5816	0x07FE25  	RCALL	_NMRAnetStateMachine_TrySendVerifyNodeID
;dsPIC33EP_NMRAnetCommandStation.mpas,200 :: 		end;
0x5818	0x37002F  	BRA	L__main37
L__main43:
;dsPIC33EP_NMRAnetCommandStation.mpas,201 :: 		'A', 'a' :
0x581A	0x200410  	MOV	#65, W0
0x581C	0x9020BE  	MOV	[W14+70], W1
0x581E	0xE10800  	CP	W1, W0
0x5820	0x3A0001  	BRA NZ	L__main46
L__main84:
0x5822	0x370003  	BRA	L__main44
L__main46:
0x5824	0x200610  	MOV	#97, W0
0x5826	0xE10800  	CP	W1, W0
0x5828	0x3A0002  	BRA NZ	L__main47
L__main85:
L__main44:
;dsPIC33EP_NMRAnetCommandStation.mpas,203 :: 		NMRAnetNode_Allocate;
0x582A	0x07DE5F  	RCALL	_NMRAnetNode_Allocate
;dsPIC33EP_NMRAnetCommandStation.mpas,204 :: 		end;
0x582C	0x370025  	BRA	L__main37
L__main47:
;dsPIC33EP_NMRAnetCommandStation.mpas,205 :: 		'D', 'd' :
0x582E	0x200440  	MOV	#68, W0
0x5830	0x9020BE  	MOV	[W14+70], W1
0x5832	0xE10800  	CP	W1, W0
0x5834	0x3A0001  	BRA NZ	L__main50
L__main86:
0x5836	0x370003  	BRA	L__main48
L__main50:
0x5838	0x200640  	MOV	#100, W0
0x583A	0xE10800  	CP	W1, W0
0x583C	0x3A000A  	BRA NZ	L__main51
L__main87:
L__main48:
;dsPIC33EP_NMRAnetCommandStation.mpas,207 :: 		TempNode := NMRAnetNode_FindFirstVirtualNode;
0x583E	0x07FDF9  	RCALL	_NMRAnetNode_FindFirstVirtualNode
0x5840	0x8931E0  	MOV	W0, _TempNode
;dsPIC33EP_NMRAnetCommandStation.mpas,208 :: 		if TempNode <> nil then
0x5842	0xE10060  	CP	W0, #0
0x5844	0x320005  	BRA Z	L__main53
L__main88:
;dsPIC33EP_NMRAnetCommandStation.mpas,210 :: 		ProxyData := GetProxyData( TempNode);
0x5846	0x8131EA  	MOV	_TempNode, W10
0x5848	0x07D5EC  	RCALL	_GetProxyData
0x584A	0x8931D0  	MOV	W0, _ProxyData
;dsPIC33EP_NMRAnetCommandStation.mpas,211 :: 		ProxyData^.State := PS_ALLOCATED;
0x584C	0xB3C011  	MOV.B	#1, W1
0x584E	0x784801  	MOV.B	W1, [W0]
;dsPIC33EP_NMRAnetCommandStation.mpas,212 :: 		end;
L__main53:
;dsPIC33EP_NMRAnetCommandStation.mpas,213 :: 		end;
0x5850	0x370013  	BRA	L__main37
L__main51:
;dsPIC33EP_NMRAnetCommandStation.mpas,214 :: 		'F', 'f' :
0x5852	0x200460  	MOV	#70, W0
0x5854	0x9020BE  	MOV	[W14+70], W1
0x5856	0xE10800  	CP	W1, W0
0x5858	0x3A0001  	BRA NZ	L__main57
L__main89:
0x585A	0x370003  	BRA	L__main55
L__main57:
0x585C	0x200660  	MOV	#102, W0
0x585E	0xE10800  	CP	W1, W0
0x5860	0x3A000B  	BRA NZ	L__main58
L__main90:
L__main55:
;dsPIC33EP_NMRAnetCommandStation.mpas,216 :: 		TempNode := NMRAnetNode_FindFirstVirtualNode;
0x5862	0x07FDE7  	RCALL	_NMRAnetNode_FindFirstVirtualNode
0x5864	0x8931E0  	MOV	W0, _TempNode
;dsPIC33EP_NMRAnetCommandStation.mpas,217 :: 		if TempNode <> nil then
0x5866	0xE10060  	CP	W0, #0
0x5868	0x320006  	BRA Z	L__main60
L__main91:
;dsPIC33EP_NMRAnetCommandStation.mpas,220 :: 		while not NMRAnetStateMachine_TrySendAliasMapReset(TempNode) do;
L__main63:
0x586A	0x8131EA  	MOV	_TempNode, W10
0x586C	0x07FE24  	RCALL	_NMRAnetStateMachine_TrySendAliasMapReset
0x586E	0xEEA000  	COM	W0
0x5870	0x3AFFFC  	BRA NZ	L__main63
L__main92:
;dsPIC33EP_NMRAnetCommandStation.mpas,221 :: 		NMRAnetNode_Release(TempNode);
0x5872	0x8131EA  	MOV	_TempNode, W10
0x5874	0x07FE3C  	RCALL	_NMRAnetNode_Release
;dsPIC33EP_NMRAnetCommandStation.mpas,222 :: 		end;
L__main60:
;dsPIC33EP_NMRAnetCommandStation.mpas,223 :: 		end;
0x5876	0x370000  	BRA	L__main37
L__main58:
L__main37:
;dsPIC33EP_NMRAnetCommandStation.mpas,225 :: 		end;
L__main35:
;dsPIC33EP_NMRAnetCommandStation.mpas,226 :: 		end;
L__main20:
;dsPIC33EP_NMRAnetCommandStation.mpas,228 :: 		if C1IE_bit = 0 then
0x5878	0xAF6824  	BTSC	C1IE_bit, BitPos(C1IE_bit+0)
0x587A	0x370020  	BRA	L__main68
;dsPIC33EP_NMRAnetCommandStation.mpas,229 :: 		UART1_Write_Text('CAN Disabled!');
0x587C	0x4700E0  	ADD	W14, #0, W1
0x587E	0xB3C430  	MOV.B	#67, W0
0x5880	0x785880  	MOV.B	W0, [W1++]
0x5882	0xB3C410  	MOV.B	#65, W0
0x5884	0x785880  	MOV.B	W0, [W1++]
0x5886	0xB3C4E0  	MOV.B	#78, W0
0x5888	0x785880  	MOV.B	W0, [W1++]
0x588A	0xB3C200  	MOV.B	#32, W0
0x588C	0x785880  	MOV.B	W0, [W1++]
0x588E	0xB3C440  	MOV.B	#68, W0
0x5890	0x785880  	MOV.B	W0, [W1++]
0x5892	0xB3C690  	MOV.B	#105, W0
0x5894	0x785880  	MOV.B	W0, [W1++]
0x5896	0xB3C730  	MOV.B	#115, W0
0x5898	0x785880  	MOV.B	W0, [W1++]
0x589A	0xB3C610  	MOV.B	#97, W0
0x589C	0x785880  	MOV.B	W0, [W1++]
0x589E	0xB3C620  	MOV.B	#98, W0
0x58A0	0x785880  	MOV.B	W0, [W1++]
0x58A2	0xB3C6C0  	MOV.B	#108, W0
0x58A4	0x785880  	MOV.B	W0, [W1++]
0x58A6	0xB3C650  	MOV.B	#101, W0
0x58A8	0x785880  	MOV.B	W0, [W1++]
0x58AA	0xB3C640  	MOV.B	#100, W0
0x58AC	0x785880  	MOV.B	W0, [W1++]
0x58AE	0xB3C210  	MOV.B	#33, W0
0x58B0	0x785880  	MOV.B	W0, [W1++]
0x58B2	0xEF2000  	CLR	W0
0x58B4	0x785880  	MOV.B	W0, [W1++]
0x58B6	0x470060  	ADD	W14, #0, W0
0x58B8	0x780500  	MOV	W0, W10
0x58BA	0x07DBAC  	RCALL	_UART1_Write_Text
L__main68:
;dsPIC33EP_NMRAnetCommandStation.mpas,231 :: 		end;
0x58BC	0x37FEBD  	BRA	L__main15
;dsPIC33EP_NMRAnetCommandStation.mpas,232 :: 		end.
L_end_main:
0x58BE	0xFA8000  	ULNK
L__main_end_loop:
0x58C0	0x37FFFF  	BRA	L__main_end_loop
; end of _main
__25AAxxxx_Initialize:
;_25AAxxxx.mpas,289 :: 		begin
;_25AAxxxx.mpas,290 :: 		{$IFDEF EEPROM_ONE_BANK}CS_Bank_0 := 1; {$ENDIF}   // Output
0x42A8	0xA8CE14  	BSET	CS_Bank_0, BitPos(CS_Bank_0+0)
;_25AAxxxx.mpas,294 :: 		{$IFDEF EEPROM_ONE_BANK}CS_Bank_0_Direction := 0; {$ENDIF}   // Output
0x42AA	0xA9CE10  	BCLR	CS_Bank_0_Direction, BitPos(CS_Bank_0_Direction+0)
;_25AAxxxx.mpas,298 :: 		EE_PROM_Hold := 1; // No Hold
0x42AC	0xA8AE14  	BSET	EE_PROM_Hold, BitPos(EE_PROM_Hold+0)
;_25AAxxxx.mpas,299 :: 		EEPROM_Hold_Direction := 0 // Output
0x42AE	0xA9AE10  	BCLR	EEPROM_Hold_Direction, BitPos(EEPROM_Hold_Direction+0)
;_25AAxxxx.mpas,301 :: 		end;
L_end__25AAxxxx_Initialize:
0x42B0	0x060000  	RETURN
; end of __25AAxxxx_Initialize
_NMRAnetStateMachine_Initialize:
;NMRAnetStateMachine.mpas,328 :: 		begin
;NMRAnetStateMachine.mpas,330 :: 		dsPIC33_CAN_Initialize;
0x4182	0x07FA3B  	RCALL	_dsPIC33_CAN_Initialize
;NMRAnetStateMachine.mpas,332 :: 		CANStorage_Initialize;
0x4184	0x07FA0B  	RCALL	_CANStorage_Initialize
;NMRAnetStateMachine.mpas,333 :: 		NMRAnetDatagrams_Initialize;
0x4186	0x07FAA7  	RCALL	_NMRAnetDatagrams_Initialize
;NMRAnetStateMachine.mpas,334 :: 		NMRAnetCANReceive_Initialize;
0x4188	0x07FAA1  	RCALL	_NMRAnetCANReceive_Initialize
;NMRAnetStateMachine.mpas,335 :: 		NMRAnetBufferPools_Initialize;
0x418A	0x07F990  	RCALL	_NMRAnetBufferPools_Initialize
;NMRAnetStateMachine.mpas,336 :: 		NMRAnetAppCallbacks_Initialize;
0x418C	0xBE9F8C  	PUSH.D	W12
0x418E	0xBE9F8A  	PUSH.D	W10
0x4190	0x07F963  	RCALL	_NMRAnetAppCallbacks_Initialize
0x4192	0xBE054F  	POP.D	W10
0x4194	0xBE064F  	POP.D	W12
;NMRAnetStateMachine.mpas,337 :: 		NMRAnetNode_Initialize(PhysicalNodeID_HI, PhysicalNodeID_Lo);
0x4196	0x07F9BF  	RCALL	_NMRAnetNode_Initialize
;NMRAnetStateMachine.mpas,338 :: 		end;
L_end_NMRAnetStateMachine_Initialize:
0x4198	0x060000  	RETURN
; end of _NMRAnetStateMachine_Initialize
_dsPIC33_CAN_Initialize:
;dsPIC33_CAN.mpas,516 :: 		begin
;dsPIC33_CAN.mpas,517 :: 		for i := 0 to MAX_ECAN_TX_BUFFER - 1 do
; i start address is: 4 (W2)
0x35FA	0xEF2004  	CLR	W2
; i end address is: 4 (W2)
L__dsPIC33_CAN_Initialize65:
;dsPIC33_CAN.mpas,519 :: 		TX_Main_RawBufferArray[i].Word0 := 0;                                                        // Allow the compiler to account for this ram
; i start address is: 4 (W2)
0x35FC	0xDD10C4  	SL	W2, #4, W1
0x35FE	0x210000  	MOV	#lo_addr(_TX_Main_RawBufferArray), W0
0x3600	0x400081  	ADD	W0, W1, W1
0x3602	0xEF2000  	CLR	W0
0x3604	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,520 :: 		TX_Main_RawBufferArray[i].Word1 := 0;
0x3606	0xDD10C4  	SL	W2, #4, W1
0x3608	0x210000  	MOV	#lo_addr(_TX_Main_RawBufferArray), W0
0x360A	0x400001  	ADD	W0, W1, W0
0x360C	0x4000E2  	ADD	W0, #2, W1
0x360E	0xEF2000  	CLR	W0
0x3610	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,521 :: 		TX_Main_RawBufferArray[i].Word2 := 0;
0x3612	0xDD10C4  	SL	W2, #4, W1
0x3614	0x210000  	MOV	#lo_addr(_TX_Main_RawBufferArray), W0
0x3616	0x400001  	ADD	W0, W1, W0
0x3618	0x4000E4  	ADD	W0, #4, W1
0x361A	0xEF2000  	CLR	W0
0x361C	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,522 :: 		TX_Main_RawBufferArray[i].Word3 := 0;
0x361E	0xDD10C4  	SL	W2, #4, W1
0x3620	0x210000  	MOV	#lo_addr(_TX_Main_RawBufferArray), W0
0x3622	0x400001  	ADD	W0, W1, W0
0x3624	0x4000E6  	ADD	W0, #6, W1
0x3626	0xEF2000  	CLR	W0
0x3628	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,523 :: 		TX_Main_RawBufferArray[i].Word4 := 0;
0x362A	0xDD10C4  	SL	W2, #4, W1
0x362C	0x210000  	MOV	#lo_addr(_TX_Main_RawBufferArray), W0
0x362E	0x400001  	ADD	W0, W1, W0
0x3630	0x4000E8  	ADD	W0, #8, W1
0x3632	0xEF2000  	CLR	W0
0x3634	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,524 :: 		TX_Main_RawBufferArray[i].Word5 := 0;
0x3636	0xDD10C4  	SL	W2, #4, W1
0x3638	0x210000  	MOV	#lo_addr(_TX_Main_RawBufferArray), W0
0x363A	0x400001  	ADD	W0, W1, W0
0x363C	0x4000EA  	ADD	W0, #10, W1
0x363E	0xEF2000  	CLR	W0
0x3640	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,525 :: 		TX_Main_RawBufferArray[i].Word6 := 0;
0x3642	0xDD10C4  	SL	W2, #4, W1
0x3644	0x210000  	MOV	#lo_addr(_TX_Main_RawBufferArray), W0
0x3646	0x400001  	ADD	W0, W1, W0
0x3648	0x4000EC  	ADD	W0, #12, W1
0x364A	0xEF2000  	CLR	W0
0x364C	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,526 :: 		TX_Main_RawBufferArray[i].Word7 := 0;
0x364E	0xDD10C4  	SL	W2, #4, W1
0x3650	0x210000  	MOV	#lo_addr(_TX_Main_RawBufferArray), W0
0x3652	0x400001  	ADD	W0, W1, W0
0x3654	0x4000EE  	ADD	W0, #14, W1
0x3656	0xEF2000  	CLR	W0
0x3658	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,527 :: 		end;
0x365A	0xE11061  	CP	W2, #1
0x365C	0x320002  	BRA Z	L__dsPIC33_CAN_Initialize68
L__dsPIC33_CAN_Initialize312:
; i start address is: 4 (W2)
0x365E	0xEC2004  	INC	W2
; i end address is: 4 (W2)
; i end address is: 4 (W2)
0x3660	0x37FFCD  	BRA	L__dsPIC33_CAN_Initialize65
L__dsPIC33_CAN_Initialize68:
;dsPIC33_CAN.mpas,528 :: 		for i := 0 to MAX_ECAN_RX_BUFFER - 1 do
; i start address is: 4 (W2)
0x3662	0xEF2004  	CLR	W2
; i end address is: 4 (W2)
L__dsPIC33_CAN_Initialize70:
;dsPIC33_CAN.mpas,530 :: 		RX_Main_RawBufferArray[i].Word0 := 0;                                                        // Allow the compiler to account for this ram
; i start address is: 4 (W2)
0x3664	0xDD10C4  	SL	W2, #4, W1
0x3666	0x210200  	MOV	#lo_addr(_RX_Main_RawBufferArray), W0
0x3668	0x400081  	ADD	W0, W1, W1
0x366A	0xEF2000  	CLR	W0
0x366C	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,531 :: 		RX_Main_RawBufferArray[i].Word1 := 0;
0x366E	0xDD10C4  	SL	W2, #4, W1
0x3670	0x210200  	MOV	#lo_addr(_RX_Main_RawBufferArray), W0
0x3672	0x400001  	ADD	W0, W1, W0
0x3674	0x4000E2  	ADD	W0, #2, W1
0x3676	0xEF2000  	CLR	W0
0x3678	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,532 :: 		RX_Main_RawBufferArray[i].Word2 := 0;
0x367A	0xDD10C4  	SL	W2, #4, W1
0x367C	0x210200  	MOV	#lo_addr(_RX_Main_RawBufferArray), W0
0x367E	0x400001  	ADD	W0, W1, W0
0x3680	0x4000E4  	ADD	W0, #4, W1
0x3682	0xEF2000  	CLR	W0
0x3684	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,533 :: 		RX_Main_RawBufferArray[i].Word3 := 0;
0x3686	0xDD10C4  	SL	W2, #4, W1
0x3688	0x210200  	MOV	#lo_addr(_RX_Main_RawBufferArray), W0
0x368A	0x400001  	ADD	W0, W1, W0
0x368C	0x4000E6  	ADD	W0, #6, W1
0x368E	0xEF2000  	CLR	W0
0x3690	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,534 :: 		RX_Main_RawBufferArray[i].Word4 := 0;
0x3692	0xDD10C4  	SL	W2, #4, W1
0x3694	0x210200  	MOV	#lo_addr(_RX_Main_RawBufferArray), W0
0x3696	0x400001  	ADD	W0, W1, W0
0x3698	0x4000E8  	ADD	W0, #8, W1
0x369A	0xEF2000  	CLR	W0
0x369C	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,535 :: 		RX_Main_RawBufferArray[i].Word5 := 0;
0x369E	0xDD10C4  	SL	W2, #4, W1
0x36A0	0x210200  	MOV	#lo_addr(_RX_Main_RawBufferArray), W0
0x36A2	0x400001  	ADD	W0, W1, W0
0x36A4	0x4000EA  	ADD	W0, #10, W1
0x36A6	0xEF2000  	CLR	W0
0x36A8	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,536 :: 		RX_Main_RawBufferArray[i].Word6 := 0;
0x36AA	0xDD10C4  	SL	W2, #4, W1
0x36AC	0x210200  	MOV	#lo_addr(_RX_Main_RawBufferArray), W0
0x36AE	0x400001  	ADD	W0, W1, W0
0x36B0	0x4000EC  	ADD	W0, #12, W1
0x36B2	0xEF2000  	CLR	W0
0x36B4	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,537 :: 		RX_Main_RawBufferArray[i].Word7 := 0;
0x36B6	0xDD10C4  	SL	W2, #4, W1
0x36B8	0x210200  	MOV	#lo_addr(_RX_Main_RawBufferArray), W0
0x36BA	0x400001  	ADD	W0, W1, W0
0x36BC	0x4000EE  	ADD	W0, #14, W1
0x36BE	0xEF2000  	CLR	W0
0x36C0	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,538 :: 		end;
0x36C2	0xE11061  	CP	W2, #1
0x36C4	0x320002  	BRA Z	L__dsPIC33_CAN_Initialize73
L__dsPIC33_CAN_Initialize313:
; i start address is: 4 (W2)
0x36C6	0xEC2004  	INC	W2
; i end address is: 4 (W2)
; i end address is: 4 (W2)
0x36C8	0x37FFCD  	BRA	L__dsPIC33_CAN_Initialize70
L__dsPIC33_CAN_Initialize73:
;dsPIC33_CAN.mpas,539 :: 		end;
L_end_dsPIC33_CAN_Initialize:
0x36CA	0x060000  	RETURN
; end of _dsPIC33_CAN_Initialize
_CANStorage_Initialize:
;CANStorage.mpas,112 :: 		begin
;CANStorage.mpas,113 :: 		CAN_Engine.State := 0;
0x359C	0x225DA1  	MOV	#lo_addr(_CAN_Engine), W1
0x359E	0xEF2000  	CLR	W0
0x35A0	0x784880  	MOV.B	W0, [W1]
;CANStorage.mpas,114 :: 		CAN_Engine.InterruptLockCount := 0;
0x35A2	0x225DB1  	MOV	#lo_addr(_CAN_Engine+1), W1
0x35A4	0xEF2000  	CLR	W0
0x35A6	0x784880  	MOV.B	W0, [W1]
;CANStorage.mpas,116 :: 		CAN_Engine.TX_CANBuffer.ID := 0;
0x35A8	0xEF2000  	CLR	W0
0x35AA	0xEF2002  	CLR	W1
0x35AC	0x892EE0  	MOV	W0, _CAN_Engine+2
0x35AE	0x892EF1  	MOV	W1, _CAN_Engine+4
;CANStorage.mpas,117 :: 		CAN_Engine.TX_CANBuffer.DataCount := 0;
0x35B0	0x225E01  	MOV	#lo_addr(_CAN_Engine+6), W1
0x35B2	0xEF2000  	CLR	W0
0x35B4	0x784880  	MOV.B	W0, [W1]
;CANStorage.mpas,118 :: 		CAN_Engine.TX_CANBuffer.State := 0;
0x35B6	0x225E91  	MOV	#lo_addr(_CAN_Engine+15), W1
0x35B8	0xEF2000  	CLR	W0
0x35BA	0x784880  	MOV.B	W0, [W1]
;CANStorage.mpas,120 :: 		CAN_Engine.TX_NMRAnetBuffer.ID := 0;
0x35BC	0xEF2000  	CLR	W0
0x35BE	0xEF2002  	CLR	W1
0x35C0	0x892F50  	MOV	W0, _CAN_Engine+16
0x35C2	0x892F61  	MOV	W1, _CAN_Engine+18
;CANStorage.mpas,121 :: 		CAN_Engine.TX_NMRAnetBuffer.DataCount := 0;
0x35C4	0x225EE1  	MOV	#lo_addr(_CAN_Engine+20), W1
0x35C6	0xEF2000  	CLR	W0
0x35C8	0x784880  	MOV.B	W0, [W1]
;CANStorage.mpas,122 :: 		CAN_Engine.TX_NMRAnetBuffer.State := 0;
0x35CA	0x225F71  	MOV	#lo_addr(_CAN_Engine+29), W1
0x35CC	0xEF2000  	CLR	W0
0x35CE	0x784880  	MOV.B	W0, [W1]
;CANStorage.mpas,124 :: 		CAN_Engine.TX_AddressedErrorBuffer.ID := 0;
0x35D0	0xEF2000  	CLR	W0
0x35D2	0xEF2002  	CLR	W1
0x35D4	0x892FC0  	MOV	W0, _CAN_Engine+30
0x35D6	0x892FD1  	MOV	W1, _CAN_Engine+32
;CANStorage.mpas,125 :: 		CAN_Engine.TX_AddressedErrorBuffer.DataCount := 0;
0x35D8	0x225FC1  	MOV	#lo_addr(_CAN_Engine+34), W1
0x35DA	0xEF2000  	CLR	W0
0x35DC	0x784880  	MOV.B	W0, [W1]
;CANStorage.mpas,126 :: 		CAN_Engine.TX_AddressedErrorBuffer.State := 0;
0x35DE	0x226051  	MOV	#lo_addr(_CAN_Engine+43), W1
0x35E0	0xEF2000  	CLR	W0
0x35E2	0x784880  	MOV.B	W0, [W1]
;CANStorage.mpas,128 :: 		CAN_Engine.TX_DatagramRejected.ID := 0;
0x35E4	0xEF2000  	CLR	W0
0x35E6	0xEF2002  	CLR	W1
0x35E8	0x893030  	MOV	W0, _CAN_Engine+44
0x35EA	0x893041  	MOV	W1, _CAN_Engine+46
;CANStorage.mpas,129 :: 		CAN_Engine.TX_DatagramRejected.DataCount := 0;
0x35EC	0x2260A1  	MOV	#lo_addr(_CAN_Engine+48), W1
0x35EE	0xEF2000  	CLR	W0
0x35F0	0x784880  	MOV.B	W0, [W1]
;CANStorage.mpas,130 :: 		CAN_Engine.TX_DatagramRejected.State := 0;
0x35F2	0x226131  	MOV	#lo_addr(_CAN_Engine+57), W1
0x35F4	0xEF2000  	CLR	W0
0x35F6	0x784880  	MOV.B	W0, [W1]
;CANStorage.mpas,131 :: 		end;
L_end_CANStorage_Initialize:
0x35F8	0x060000  	RETURN
; end of _CANStorage_Initialize
_NMRAnetDatagrams_Initialize:
;NMRAnetDatagrams.mpas,66 :: 		begin
;NMRAnetDatagrams.mpas,67 :: 		DatagramTrainControlCallbackFunc := PDatagramTaskCallbackFunc(nil);
0x36D6	0x200000  	MOV	#0, W0
0x36D8	0x892AB0  	MOV	W0, _DatagramTrainControlCallbackFunc
;NMRAnetDatagrams.mpas,68 :: 		end;
L_end_NMRAnetDatagrams_Initialize:
0x36DA	0x060000  	RETURN
; end of _NMRAnetDatagrams_Initialize
_NMRAnetCANReceive_Initialize:
;NMRAnetCANReceive.mpas,75 :: 		begin
;NMRAnetCANReceive.mpas,76 :: 		CANLayerReceiveHook := PPacketHandlerFunc( nil);
0x36CC	0x200000  	MOV	#0, W0
0x36CE	0x8927A0  	MOV	W0, NMRAnetCANReceive_CANLayerReceiveHook
;NMRAnetCANReceive.mpas,77 :: 		NMRAnetLayerReceiveHook := PPacketHandlerFunc( nil);
0x36D0	0x200000  	MOV	#0, W0
0x36D2	0x88B080  	MOV	W0, NMRAnetCANReceive_NMRAnetLayerReceiveHook
;NMRAnetCANReceive.mpas,78 :: 		end;
L_end_NMRAnetCANReceive_Initialize:
0x36D4	0x060000  	RETURN
; end of _NMRAnetCANReceive_Initialize
_NMRAnetBufferPools_Initialize:
;NMRAnetBufferPools.mpas,149 :: 		begin
;NMRAnetBufferPools.mpas,150 :: 		for i := 0 to MAX_BASE_BUFFER_POOL - 1 do
0x34AC	0x781F8A  	PUSH	W10
; i start address is: 8 (W4)
0x34AE	0xEF2008  	CLR	W4
; i end address is: 8 (W4)
L__NMRAnetBufferPools_Initialize15:
;NMRAnetBufferPools.mpas,151 :: 		NMRAnetBufferPools_InitializeBaseBuffer(@BaseBufferPool.Pool[i]);
; i start address is: 8 (W4)
0x34B0	0x2000A0  	MOV	#10, W0
0x34B2	0xB80104  	MUL.UU	W0, W4, W2
0x34B4	0x210400  	MOV	#lo_addr(_BaseBufferPool), W0
0x34B6	0x400002  	ADD	W0, W2, W0
0x34B8	0x780500  	MOV	W0, W10
0x34BA	0x07F177  	RCALL	_NMRAnetBufferPools_InitializeBaseBuffer
0x34BC	0x200810  	MOV	#129, W0
0x34BE	0xE12000  	CP	W4, W0
0x34C0	0x320002  	BRA Z	L__NMRAnetBufferPools_Initialize18
L__NMRAnetBufferPools_Initialize68:
; i start address is: 8 (W4)
0x34C2	0xEC2008  	INC	W4
; i end address is: 8 (W4)
; i end address is: 8 (W4)
0x34C4	0x37FFF5  	BRA	L__NMRAnetBufferPools_Initialize15
L__NMRAnetBufferPools_Initialize18:
;NMRAnetBufferPools.mpas,152 :: 		BaseBufferPool.Count := 0;
0x34C6	0x215551  	MOV	#lo_addr(_BaseBufferPool+1301), W1
0x34C8	0xEF2000  	CLR	W0
0x34CA	0x784880  	MOV.B	W0, [W1]
;NMRAnetBufferPools.mpas,153 :: 		BaseBufferPool.MaxCount := 0;
0x34CC	0x215541  	MOV	#lo_addr(_BaseBufferPool+1300), W1
0x34CE	0xEF2000  	CLR	W0
0x34D0	0x784880  	MOV.B	W0, [W1]
;NMRAnetBufferPools.mpas,155 :: 		for i := 0 to MAX_DATAGRAM_BUFFER_POOL - 1 do
; i start address is: 2 (W1)
0x34D2	0xEF2002  	CLR	W1
; i end address is: 2 (W1)
L__NMRAnetBufferPools_Initialize20:
;NMRAnetBufferPools.mpas,156 :: 		NMRAnetDatagrams_InitializeDatagramBuffer(@DatagramPool.Pool[i]);
; i start address is: 2 (W1)
0x34D4	0x2005C0  	MOV	#92, W0
0x34D6	0xB80101  	MUL.UU	W0, W1, W2
0x34D8	0x215560  	MOV	#lo_addr(_DatagramPool), W0
0x34DA	0x400002  	ADD	W0, W2, W0
0x34DC	0x781F81  	PUSH	W1
0x34DE	0x780500  	MOV	W0, W10
0x34E0	0x07F176  	RCALL	_NMRAnetDatagrams_InitializeDatagramBuffer
0x34E2	0x7800CF  	POP	W1
0x34E4	0xE10861  	CP	W1, #1
0x34E6	0x320002  	BRA Z	L__NMRAnetBufferPools_Initialize23
L__NMRAnetBufferPools_Initialize69:
; i start address is: 2 (W1)
0x34E8	0xEC2002  	INC	W1
; i end address is: 2 (W1)
; i end address is: 2 (W1)
0x34EA	0x37FFF4  	BRA	L__NMRAnetBufferPools_Initialize20
L__NMRAnetBufferPools_Initialize23:
;NMRAnetBufferPools.mpas,157 :: 		DatagramPool.Count := 0;
0x34EC	0x2160F1  	MOV	#lo_addr(_DatagramPool+185), W1
0x34EE	0xEF2000  	CLR	W0
0x34F0	0x784880  	MOV.B	W0, [W1]
;NMRAnetBufferPools.mpas,158 :: 		DatagramPool.MaxCount := 0;
0x34F2	0x2160E1  	MOV	#lo_addr(_DatagramPool+184), W1
0x34F4	0xEF2000  	CLR	W0
0x34F6	0x784880  	MOV.B	W0, [W1]
;NMRAnetBufferPools.mpas,159 :: 		end;
L_end_NMRAnetBufferPools_Initialize:
0x34F8	0x78054F  	POP	W10
0x34FA	0x060000  	RETURN
; end of _NMRAnetBufferPools_Initialize
_NMRAnetBufferPools_InitializeBaseBuffer:
;NMRAnetBufferPools.mpas,128 :: 		begin
;NMRAnetBufferPools.mpas,129 :: 		Buffer^.State := 0;
0x17AA	0xEF2000  	CLR	W0
0x17AC	0x784D00  	MOV.B	W0, [W10]
;NMRAnetBufferPools.mpas,130 :: 		Buffer^.Alias := 0;
0x17AE	0x4500E2  	ADD	W10, #2, W1
0x17B0	0xEF2000  	CLR	W0
0x17B2	0x780880  	MOV	W0, [W1]
;NMRAnetBufferPools.mpas,131 :: 		Buffer^.Next := nil;
0x17B4	0x4500E4  	ADD	W10, #4, W1
0x17B6	0xEF2000  	CLR	W0
0x17B8	0x780880  	MOV	W0, [W1]
;NMRAnetBufferPools.mpas,132 :: 		Buffer^.mCode := 0;
0x17BA	0x4500E6  	ADD	W10, #6, W1
0x17BC	0xEF2000  	CLR	W0
0x17BE	0x784880  	MOV.B	W0, [W1]
;NMRAnetBufferPools.mpas,133 :: 		Buffer^.Tag := 0;
0x17C0	0x4500E8  	ADD	W10, #8, W1
0x17C2	0xEF2000  	CLR	W0
0x17C4	0x780880  	MOV	W0, [W1]
;NMRAnetBufferPools.mpas,134 :: 		Buffer^.StateMachine := 0;
0x17C6	0x4500E7  	ADD	W10, #7, W1
0x17C8	0xEF2000  	CLR	W0
0x17CA	0x784880  	MOV.B	W0, [W1]
;NMRAnetBufferPools.mpas,135 :: 		end;
L_end_NMRAnetBufferPools_InitializeBaseBuffer:
0x17CC	0x060000  	RETURN
; end of _NMRAnetBufferPools_InitializeBaseBuffer
_NMRAnetDatagrams_InitializeDatagramBuffer:
;NMRAnetDatagrams.mpas,34 :: 		begin
;NMRAnetDatagrams.mpas,35 :: 		if Buffer <> nil then
0x17CE	0xE15060  	CP	W10, #0
0x17D0	0x320038  	BRA Z	L__NMRAnetDatagrams_InitializeDatagramBuffer2
L__NMRAnetDatagrams_InitializeDatagramBuffer12:
;NMRAnetDatagrams.mpas,37 :: 		Buffer^.State := 0;
0x17D2	0xEF2000  	CLR	W0
0x17D4	0x784D00  	MOV.B	W0, [W10]
;NMRAnetDatagrams.mpas,38 :: 		Buffer^.Alias := 0;
0x17D6	0x4500E2  	ADD	W10, #2, W1
0x17D8	0xEF2000  	CLR	W0
0x17DA	0x780880  	MOV	W0, [W1]
;NMRAnetDatagrams.mpas,39 :: 		Buffer^.Next := 0;
0x17DC	0x4500E4  	ADD	W10, #4, W1
0x17DE	0xEF2000  	CLR	W0
0x17E0	0x780880  	MOV	W0, [W1]
;NMRAnetDatagrams.mpas,40 :: 		Buffer^.mCode := 0;
0x17E2	0x4500E6  	ADD	W10, #6, W1
0x17E4	0xEF2000  	CLR	W0
0x17E6	0x784880  	MOV.B	W0, [W1]
;NMRAnetDatagrams.mpas,41 :: 		Buffer^.StateMachine := 0;
0x17E8	0x4500E7  	ADD	W10, #7, W1
0x17EA	0xEF2000  	CLR	W0
0x17EC	0x784880  	MOV.B	W0, [W1]
;NMRAnetDatagrams.mpas,42 :: 		Buffer^.Tag := 0;
0x17EE	0x4500E8  	ADD	W10, #8, W1
0x17F0	0xEF2000  	CLR	W0
0x17F2	0x780880  	MOV	W0, [W1]
;NMRAnetDatagrams.mpas,43 :: 		Buffer^.SourceNodePtr := Generic16BitPointer( nil);
0x17F4	0x200560  	MOV	#86, W0
0x17F6	0x450080  	ADD	W10, W0, W1
0x17F8	0xEF2000  	CLR	W0
0x17FA	0x780880  	MOV	W0, [W1]
;NMRAnetDatagrams.mpas,45 :: 		Buffer^.iByteCount := 0;
0x17FC	0x4500EA  	ADD	W10, #10, W1
0x17FE	0xEF2000  	CLR	W0
0x1800	0x784880  	MOV.B	W0, [W1]
;NMRAnetDatagrams.mpas,46 :: 		Buffer^.iWatchdog := 0;
0x1802	0x200580  	MOV	#88, W0
0x1804	0x450080  	ADD	W10, W0, W1
0x1806	0xEF2000  	CLR	W0
0x1808	0x780880  	MOV	W0, [W1]
;NMRAnetDatagrams.mpas,47 :: 		Buffer^.ErrorCode.Count := 1;                                               // Assume only the MTI
0x180A	0x200530  	MOV	#83, W0
0x180C	0x450000  	ADD	W10, W0, W0
0x180E	0x4000E2  	ADD	W0, #2, W1
0x1810	0xB3C010  	MOV.B	#1, W0
0x1812	0x784880  	MOV.B	W0, [W1]
;NMRAnetDatagrams.mpas,48 :: 		Buffer^.ErrorCode.SubType[0] := 0;
0x1814	0x200530  	MOV	#83, W0
0x1816	0x450080  	ADD	W10, W0, W1
0x1818	0xEF2000  	CLR	W0
0x181A	0x784880  	MOV.B	W0, [W1]
;NMRAnetDatagrams.mpas,49 :: 		Buffer^.ErrorCode.SubType[1] := 0;
0x181C	0x200530  	MOV	#83, W0
0x181E	0x450000  	ADD	W10, W0, W0
0x1820	0x4000E1  	ADD	W0, #1, W1
0x1822	0xEF2000  	CLR	W0
0x1824	0x784880  	MOV.B	W0, [W1]
;NMRAnetDatagrams.mpas,50 :: 		Buffer^.iRetransmit := 0;
0x1826	0x2005A0  	MOV	#90, W0
0x1828	0x450080  	ADD	W10, W0, W1
0x182A	0xEF2000  	CLR	W0
0x182C	0x784880  	MOV.B	W0, [W1]
;NMRAnetDatagrams.mpas,51 :: 		for j := 0 to LEN_DATAGRAM-1 do
; j start address is: 4 (W2)
0x182E	0xEF2004  	CLR	W2
; j end address is: 4 (W2)
L__NMRAnetDatagrams_InitializeDatagramBuffer5:
;NMRAnetDatagrams.mpas,52 :: 		Buffer^.DataBytes[j] := 0;
; j start address is: 4 (W2)
0x1830	0x45006B  	ADD	W10, #11, W0
0x1832	0x400082  	ADD	W0, W2, W1
0x1834	0xEF2000  	CLR	W0
0x1836	0x784880  	MOV.B	W0, [W1]
0x1838	0x200470  	MOV	#71, W0
0x183A	0xE11000  	CP	W2, W0
0x183C	0x320002  	BRA Z	L__NMRAnetDatagrams_InitializeDatagramBuffer8
L__NMRAnetDatagrams_InitializeDatagramBuffer13:
; j start address is: 4 (W2)
0x183E	0xEC2004  	INC	W2
; j end address is: 4 (W2)
; j end address is: 4 (W2)
0x1840	0x37FFF7  	BRA	L__NMRAnetDatagrams_InitializeDatagramBuffer5
L__NMRAnetDatagrams_InitializeDatagramBuffer8:
;NMRAnetDatagrams.mpas,53 :: 		end
L__NMRAnetDatagrams_InitializeDatagramBuffer2:
;NMRAnetDatagrams.mpas,54 :: 		end;
L_end_NMRAnetDatagrams_InitializeDatagramBuffer:
0x1842	0x060000  	RETURN
; end of _NMRAnetDatagrams_InitializeDatagramBuffer
_NMRAnetAppCallbacks_Initialize:
;NMRAnetAppCallbacks.mpas,205 :: 		begin
;NMRAnetAppCallbacks.mpas,206 :: 		for i := 0 to MAX_NODE_COUNT - 1 do
; i start address is: 8 (W4)
0x3458	0xEF2008  	CLR	W4
; i end address is: 8 (W4)
L__NMRAnetAppCallbacks_Initialize25:
;NMRAnetAppCallbacks.mpas,208 :: 		VolatileData[i].State := 0;
; i start address is: 8 (W4)
0x345A	0x2000A0  	MOV	#10, W0
0x345C	0xB80104  	MUL.UU	W0, W4, W2
0x345E	0x216360  	MOV	#lo_addr(NMRAnetAppCallbacks_VolatileData), W0
0x3460	0x400082  	ADD	W0, W2, W1
0x3462	0xEF2000  	CLR	W0
0x3464	0x784880  	MOV.B	W0, [W1]
;NMRAnetAppCallbacks.mpas,209 :: 		VolatileData[i].Speed := 0;
0x3466	0x2000A0  	MOV	#10, W0
0x3468	0xB80104  	MUL.UU	W0, W4, W2
0x346A	0x216360  	MOV	#lo_addr(NMRAnetAppCallbacks_VolatileData), W0
0x346C	0x400002  	ADD	W0, W2, W0
0x346E	0x4000E2  	ADD	W0, #2, W1
0x3470	0xEF2000  	CLR	W0
0x3472	0x780880  	MOV	W0, [W1]
;NMRAnetAppCallbacks.mpas,210 :: 		VolatileData[i].Functions := 0;
0x3474	0x2000A0  	MOV	#10, W0
0x3476	0xB80104  	MUL.UU	W0, W4, W2
0x3478	0x216360  	MOV	#lo_addr(NMRAnetAppCallbacks_VolatileData), W0
0x347A	0x400002  	ADD	W0, W2, W0
0x347C	0x400164  	ADD	W0, #4, W2
0x347E	0xEF2000  	CLR	W0
0x3480	0xEF2002  	CLR	W1
0x3482	0xBE8900  	MOV.D	W0, [W2]
;NMRAnetAppCallbacks.mpas,211 :: 		VolatileData[i].MsgFlags := 0;
0x3484	0x2000A0  	MOV	#10, W0
0x3486	0xB80104  	MUL.UU	W0, W4, W2
0x3488	0x216360  	MOV	#lo_addr(NMRAnetAppCallbacks_VolatileData), W0
0x348A	0x400002  	ADD	W0, W2, W0
0x348C	0x4000E1  	ADD	W0, #1, W1
0x348E	0xEF2000  	CLR	W0
0x3490	0x784880  	MOV.B	W0, [W1]
;NMRAnetAppCallbacks.mpas,212 :: 		VolatileData[i].Address := 0;
0x3492	0x2000A0  	MOV	#10, W0
0x3494	0xB80104  	MUL.UU	W0, W4, W2
0x3496	0x216360  	MOV	#lo_addr(NMRAnetAppCallbacks_VolatileData), W0
0x3498	0x400002  	ADD	W0, W2, W0
0x349A	0x4000E8  	ADD	W0, #8, W1
0x349C	0xEF2000  	CLR	W0
0x349E	0x780880  	MOV	W0, [W1]
;NMRAnetAppCallbacks.mpas,213 :: 		end
0x34A0	0x200400  	MOV	#64, W0
0x34A2	0xE12000  	CP	W4, W0
0x34A4	0x320002  	BRA Z	L__NMRAnetAppCallbacks_Initialize28
L__NMRAnetAppCallbacks_Initialize192:
; i start address is: 8 (W4)
0x34A6	0xEC2008  	INC	W4
; i end address is: 8 (W4)
; i end address is: 8 (W4)
0x34A8	0x37FFD8  	BRA	L__NMRAnetAppCallbacks_Initialize25
L__NMRAnetAppCallbacks_Initialize28:
;NMRAnetAppCallbacks.mpas,214 :: 		end;
L_end_NMRAnetAppCallbacks_Initialize:
0x34AA	0x060000  	RETURN
; end of _NMRAnetAppCallbacks_Initialize
_NMRAnetNode_Initialize:
;NMRAnetNode.mpas,313 :: 		begin
;NMRAnetNode.mpas,314 :: 		Nodes.iActiveNode := 0;
0x3516	0xEF2000  	CLR	W0
0x3518	0x892790  	MOV	W0, _Nodes+3122
;NMRAnetNode.mpas,315 :: 		Nodes.AllocatedCount := 0;
0x351A	0xEF2000  	CLR	W0
0x351C	0x892780  	MOV	W0, _Nodes+3120
;NMRAnetNode.mpas,316 :: 		for i := 0 to MAX_NODE_COUNT - 1 do
; i start address is: 8 (W4)
0x351E	0xEF2008  	CLR	W4
; i end address is: 8 (W4)
L__NMRAnetNode_Initialize62:
;NMRAnetNode.mpas,318 :: 		NMRAnetStateMachine_InitializeNode(@Nodes.RawList[i], PhysicalNodeID_HI, PhysicalNodeID_LO + i);  // Physical Node + i MUST FIT IN THE LOWER 3 BYTES
; i start address is: 8 (W4)
0x3520	0x2002E0  	MOV	#46, W0
0x3522	0xB80104  	MUL.UU	W0, W4, W2
0x3524	0x218C00  	MOV	#lo_addr(_Nodes), W0
0x3526	0x400102  	ADD	W0, W2, W2
0x3528	0x780004  	MOV	W4, W0
0x352A	0xDE80CF  	ASR	W0, #15, W1
0x352C	0x460000  	ADD	W12, W0, W0
0x352E	0x4E8081  	ADDC	W13, W1, W1
0x3530	0x781F84  	PUSH	W4
0x3532	0xBE9F8C  	PUSH.D	W12
0x3534	0xBE9F8A  	PUSH.D	W10
0x3536	0x78060B  	MOV	W11, W12
0x3538	0x78058A  	MOV	W10, W11
0x353A	0x780502  	MOV	W2, W10
0x353C	0xBE9F80  	PUSH.D	W0
0x353E	0x07F02B  	RCALL	_NMRAnetStateMachine_InitializeNode
0x3540	0xB1004F  	SUB	#4, W15
0x3542	0xBE054F  	POP.D	W10
0x3544	0xBE064F  	POP.D	W12
0x3546	0x78024F  	POP	W4
;NMRAnetNode.mpas,319 :: 		AppCallback_AssignConfigurationAddress(@Nodes.RawList[i], i);
0x3548	0x2002E0  	MOV	#46, W0
0x354A	0xB80104  	MUL.UU	W0, W4, W2
0x354C	0x218C00  	MOV	#lo_addr(_Nodes), W0
0x354E	0x400002  	ADD	W0, W2, W0
0x3550	0x781F84  	PUSH	W4
0x3552	0xBE9F8C  	PUSH.D	W12
0x3554	0xBE9F8A  	PUSH.D	W10
0x3556	0x780584  	MOV	W4, W11
0x3558	0x780500  	MOV	W0, W10
0x355A	0x07F07E  	RCALL	_AppCallback_AssignConfigurationAddress
0x355C	0xBE054F  	POP.D	W10
0x355E	0xBE064F  	POP.D	W12
0x3560	0x78024F  	POP	W4
;NMRAnetNode.mpas,320 :: 		AppCallback_AssignRAMAddress(@Nodes.RawList[i], i);
0x3562	0x2002E0  	MOV	#46, W0
0x3564	0xB80104  	MUL.UU	W0, W4, W2
0x3566	0x218C00  	MOV	#lo_addr(_Nodes), W0
0x3568	0x400002  	ADD	W0, W2, W0
0x356A	0x781F84  	PUSH	W4
0x356C	0xBE9F8C  	PUSH.D	W12
0x356E	0xBE9F8A  	PUSH.D	W10
0x3570	0x780584  	MOV	W4, W11
0x3572	0x780500  	MOV	W0, W10
0x3574	0x07EFB1  	RCALL	_AppCallback_AssignRAMAddress
0x3576	0xBE054F  	POP.D	W10
0x3578	0xBE064F  	POP.D	W12
0x357A	0x78024F  	POP	W4
;NMRAnetNode.mpas,321 :: 		end;
0x357C	0x200400  	MOV	#64, W0
0x357E	0xE12000  	CP	W4, W0
0x3580	0x320002  	BRA Z	L__NMRAnetNode_Initialize65
L__NMRAnetNode_Initialize246:
; i start address is: 8 (W4)
0x3582	0xEC2008  	INC	W4
; i end address is: 8 (W4)
; i end address is: 8 (W4)
0x3584	0x37FFCD  	BRA	L__NMRAnetNode_Initialize62
L__NMRAnetNode_Initialize65:
;NMRAnetNode.mpas,322 :: 		Node := NMRAnetNode_Allocate;                                                 // Allocate the Physical Node
0x3586	0xBE9F8C  	PUSH.D	W12
0x3588	0xBE9F8A  	PUSH.D	W10
0x358A	0x07EFAF  	RCALL	_NMRAnetNode_Allocate
0x358C	0xBE054F  	POP.D	W10
0x358E	0xBE064F  	POP.D	W12
;NMRAnetNode.mpas,323 :: 		Node^.State := Node^.State and not NS_VIRTUAL;
0x3590	0x784090  	MOV.B	[W0], W1
0x3592	0xFB8101  	ZE	W1, W2
0x3594	0x200F71  	MOV	#247, W1
0x3596	0x610081  	AND	W2, W1, W1
0x3598	0x784801  	MOV.B	W1, [W0]
;NMRAnetNode.mpas,324 :: 		end;
L_end_NMRAnetNode_Initialize:
0x359A	0x060000  	RETURN
; end of _NMRAnetNode_Initialize
_NMRAnetStateMachine_InitializeNode:
0x1596	0xFA0000  	LNK	#0
;NMRAnetStateMachine.mpas,286 :: 		begin
;NMRAnetStateMachine.mpas,288 :: 		Node^.BaseBuffers := nil;
; NodeID_LO start address is: 4 (W2)
0x1598	0x97B93E  	MOV	[W14-10], W2
0x159A	0x97B9CE  	MOV	[W14-8], W3
0x159C	0x4500FA  	ADD	W10, #26, W1
0x159E	0xEF2000  	CLR	W0
0x15A0	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,289 :: 		Node^.DatagramBuffers := nil;
0x15A2	0x4500FC  	ADD	W10, #28, W1
0x15A4	0xEF2000  	CLR	W0
0x15A6	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,290 :: 		Node^.State := 0;
0x15A8	0xEF2000  	CLR	W0
0x15AA	0x784D00  	MOV.B	W0, [W10]
;NMRAnetStateMachine.mpas,291 :: 		Node^.MsgFlags := 0;
0x15AC	0x4500F6  	ADD	W10, #22, W1
0x15AE	0xEF2000  	CLR	W0
0x15B0	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,292 :: 		Node^.ParentAlias := 0;
0x15B2	0x200220  	MOV	#34, W0
0x15B4	0x450080  	ADD	W10, W0, W1
0x15B6	0xEF2000  	CLR	W0
0x15B8	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,293 :: 		Node^.ChildAlias := 0;
0x15BA	0x200240  	MOV	#36, W0
0x15BC	0x450080  	ADD	W10, W0, W1
0x15BE	0xEF2000  	CLR	W0
0x15C0	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,294 :: 		if (NodeID_HI <> 0) and (NodeID_LO <> 0) then
0x15C2	0xE15860  	CP	W11, #0
0x15C4	0xE1E060  	CPB	W12, #0
0x15C6	0xEF2002  	CLR	W1
0x15C8	0x320001  	BRA Z	L__NMRAnetStateMachine_InitializeNode598
0x15CA	0xEEA002  	COM	W1
L__NMRAnetStateMachine_InitializeNode598:
0x15CC	0xE11060  	CP	W2, #0
0x15CE	0xE19860  	CPB	W3, #0
0x15D0	0xEF2000  	CLR	W0
0x15D2	0x320001  	BRA Z	L__NMRAnetStateMachine_InitializeNode599
0x15D4	0xEEA000  	COM	W0
L__NMRAnetStateMachine_InitializeNode599:
0x15D6	0x608000  	AND	W1, W0, W0
0x15D8	0x320011  	BRA Z	L__NMRAnetStateMachine_InitializeNode46
L__NMRAnetStateMachine_InitializeNode600:
;NMRAnetStateMachine.mpas,297 :: 		Node^.Info.ID[0] := NodeID_LO;
0x15DA	0x450062  	ADD	W10, #2, W0
0x15DC	0xBE8802  	MOV.D	W2, [W0]
; NodeID_LO end address is: 4 (W2)
;NMRAnetStateMachine.mpas,298 :: 		Node^.Info.ID[1] := NodeID_HI;
0x15DE	0x450062  	ADD	W10, #2, W0
0x15E0	0x400064  	ADD	W0, #4, W0
0x15E2	0x78180B  	MOV	W11, [W0++]
0x15E4	0x78100C  	MOV	W12, [W0--]
;NMRAnetStateMachine.mpas,299 :: 		Node^.Info.Seed := Node^.Info.ID;
0x15E6	0x450062  	ADD	W10, #2, W0
0x15E8	0x4000E8  	ADD	W0, #8, W1
0x15EA	0x090003  	REPEAT	#3
0x15EC	0x7818B0  	MOV	[W0++], [W1++]
;NMRAnetStateMachine.mpas,300 :: 		Node^.Login.TimeCounter := 0;
0x15EE	0x4500F4  	ADD	W10, #20, W1
0x15F0	0xEF2000  	CLR	W0
0x15F2	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,301 :: 		Node^.Login.iCID := 0;
0x15F4	0x450074  	ADD	W10, #20, W0
0x15F6	0x4000E1  	ADD	W0, #1, W1
0x15F8	0xEF2000  	CLR	W0
0x15FA	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,302 :: 		end;
L__NMRAnetStateMachine_InitializeNode46:
;NMRAnetStateMachine.mpas,303 :: 		for i := 0 to MAX_EVENTS_CONSUMED_BIT_BYTES - 1 do
; i start address is: 4 (W2)
0x15FC	0xEF2004  	CLR	W2
; i end address is: 4 (W2)
L__NMRAnetStateMachine_InitializeNode49:
;NMRAnetStateMachine.mpas,304 :: 		Node^.EventsConsumedFlags[i] := 0;
; i start address is: 4 (W2)
0x15FE	0x450078  	ADD	W10, #24, W0
0x1600	0x400082  	ADD	W0, W2, W1
0x1602	0xEF2000  	CLR	W0
0x1604	0x784880  	MOV.B	W0, [W1]
0x1606	0xE11060  	CP	W2, #0
0x1608	0x320002  	BRA Z	L__NMRAnetStateMachine_InitializeNode52
L__NMRAnetStateMachine_InitializeNode601:
; i start address is: 4 (W2)
0x160A	0xEC2004  	INC	W2
; i end address is: 4 (W2)
; i end address is: 4 (W2)
0x160C	0x37FFF8  	BRA	L__NMRAnetStateMachine_InitializeNode49
L__NMRAnetStateMachine_InitializeNode52:
;NMRAnetStateMachine.mpas,305 :: 		for i := 0 to MAX_EVENTS_PRODUCED_BIT_BYTES - 1 do
; i start address is: 4 (W2)
0x160E	0xEF2004  	CLR	W2
; i end address is: 4 (W2)
L__NMRAnetStateMachine_InitializeNode54:
;NMRAnetStateMachine.mpas,306 :: 		Node^.EventsProducedFlags[i] := 0;
; i start address is: 4 (W2)
0x1610	0x450077  	ADD	W10, #23, W0
0x1612	0x400082  	ADD	W0, W2, W1
0x1614	0xEF2000  	CLR	W0
0x1616	0x784880  	MOV.B	W0, [W1]
0x1618	0xE11060  	CP	W2, #0
0x161A	0x320002  	BRA Z	L__NMRAnetStateMachine_InitializeNode57
L__NMRAnetStateMachine_InitializeNode602:
; i start address is: 4 (W2)
0x161C	0xEC2004  	INC	W2
; i end address is: 4 (W2)
; i end address is: 4 (W2)
0x161E	0x37FFF8  	BRA	L__NMRAnetStateMachine_InitializeNode54
L__NMRAnetStateMachine_InitializeNode57:
;NMRAnetStateMachine.mpas,307 :: 		Node^.iStateMachine := STATE_NMRABUS_START;
0x1620	0x4500F9  	ADD	W10, #25, W1
0x1622	0xEF2000  	CLR	W0
0x1624	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,308 :: 		Node^.ParentAlias := nil;
0x1626	0x200220  	MOV	#34, W0
0x1628	0x450080  	ADD	W10, W0, W1
0x162A	0xEF2000  	CLR	W0
0x162C	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,309 :: 		Node^.ChildAlias := nil;
0x162E	0x200240  	MOV	#36, W0
0x1630	0x450080  	ADD	W10, W0, W1
0x1632	0xEF2000  	CLR	W0
0x1634	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,310 :: 		Node^.LeftSibling := nil;
0x1636	0x200260  	MOV	#38, W0
0x1638	0x450080  	ADD	W10, W0, W1
0x163A	0xEF2000  	CLR	W0
0x163C	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,311 :: 		Node^.RightSibling := nil;
0x163E	0x200280  	MOV	#40, W0
0x1640	0x450080  	ADD	W10, W0, W1
0x1642	0xEF2000  	CLR	W0
0x1644	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,312 :: 		Node^.Login.TimeCounter := 0;
0x1646	0x4500F4  	ADD	W10, #20, W1
0x1648	0xEF2000  	CLR	W0
0x164A	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,313 :: 		Node^.Login.iCID := 0;
0x164C	0x450074  	ADD	W10, #20, W0
0x164E	0x4000E1  	ADD	W0, #1, W1
0x1650	0xEF2000  	CLR	W0
0x1652	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,317 :: 		end;
L_end_NMRAnetStateMachine_InitializeNode:
0x1654	0xFA8000  	ULNK
0x1656	0x060000  	RETURN
; end of _NMRAnetStateMachine_InitializeNode
_AppCallback_AssignConfigurationAddress:
;NMRAnetAppCallbacks.mpas,187 :: 		begin
;NMRAnetAppCallbacks.mpas,188 :: 		Node^.ConfigurationAddress := Generic32BitPointer( iNode * MAX_DCC_CFG_DATA);
0x1658	0x4502FE  	ADD	W10, #30, W5
0x165A	0x78018B  	MOV	W11, W3
0x165C	0xEB0200  	CLR	W4
0x165E	0x2000A2  	MOV	#10, W2
0x1660	0x780003  	MOV	W3, W0
0x1662	0x780084  	MOV	W4, W1
L__AppCallback_AssignConfigurationAddress188:
0x1664	0xE90102  	DEC	W2, W2
0x1666	0x350003  	BRA LT	L__AppCallback_AssignConfigurationAddress189
0x1668	0xD00000  	SL	W0, W0
0x166A	0xD28081  	RLC	W1, W1
0x166C	0x37FFFB  	BRA	L__AppCallback_AssignConfigurationAddress188
L__AppCallback_AssignConfigurationAddress189:
0x166E	0x781A80  	MOV	W0, [W5++]
0x1670	0x781281  	MOV	W1, [W5--]
;NMRAnetAppCallbacks.mpas,189 :: 		end;
L_end_AppCallback_AssignConfigurationAddress:
0x1672	0x060000  	RETURN
; end of _AppCallback_AssignConfigurationAddress
_AppCallback_AssignRAMAddress:
;NMRAnetAppCallbacks.mpas,195 :: 		begin
;NMRAnetAppCallbacks.mpas,196 :: 		Node^.RAMAddress := Generic32BitPointer( @VolatileData[iNode]);
0x14D8	0x2002A0  	MOV	#42, W0
0x14DA	0x450200  	ADD	W10, W0, W4
0x14DC	0x2000A0  	MOV	#10, W0
0x14DE	0xB8010B  	MUL.UU	W0, W11, W2
0x14E0	0x216360  	MOV	#lo_addr(NMRAnetAppCallbacks_VolatileData), W0
0x14E2	0x400002  	ADD	W0, W2, W0
0x14E4	0xEB0080  	CLR	W1
0x14E6	0xBE8A00  	MOV.D	W0, [W4]
;NMRAnetAppCallbacks.mpas,197 :: 		end;
L_end_AppCallback_AssignRAMAddress:
0x14E8	0x060000  	RETURN
; end of _AppCallback_AssignRAMAddress
_NMRAnetNode_Allocate:
0x14EA	0xFA0006  	LNK	#6
;NMRAnetNode.mpas,337 :: 		begin
;NMRAnetNode.mpas,338 :: 		Result := PNMRAnetNode( nil);
0x14EC	0x781F8A  	PUSH	W10
0x14EE	0x781F8B  	PUSH	W11
0x14F0	0x781F8C  	PUSH	W12
0x14F2	0x200000  	MOV	#0, W0
0x14F4	0x980700  	MOV	W0, [W14+0]
;NMRAnetNode.mpas,339 :: 		if Nodes.AllocatedCount < MAX_NODE_COUNT then
0x14F6	0x200411  	MOV	#65, W1
0x14F8	0x224F00  	MOV	#lo_addr(_Nodes+3120), W0
0x14FA	0xE10810  	CP	W1, [W0]
0x14FC	0x34002A  	BRA LE	L__NMRAnetNode_Allocate68
L__NMRAnetNode_Allocate248:
;NMRAnetNode.mpas,341 :: 		Result := @Nodes.RawList[Nodes.AllocatedCount];
0x14FE	0x2002E1  	MOV	#46, W1
0x1500	0x224F00  	MOV	#lo_addr(_Nodes+3120), W0
0x1502	0xB80910  	MUL.UU	W1, [W0], W2
0x1504	0x218C01  	MOV	#lo_addr(_Nodes), W1
0x1506	0x470060  	ADD	W14, #0, W0
0x1508	0x408802  	ADD	W1, W2, [W0]
;NMRAnetNode.mpas,342 :: 		NMRAnetStateMachine_InitializeNode(Result, 0, 0);                           // The NodeID was already created in the initialization
0x150A	0xEF2016  	CLR	W11
0x150C	0xEF2018  	CLR	W12
0x150E	0x90050E  	MOV	[W14+0], W10
0x1510	0xEF2000  	CLR	W0
0x1512	0xEB0080  	CLR	W1
0x1514	0xBE9F80  	PUSH.D	W0
0x1516	0x07003F  	RCALL	_NMRAnetStateMachine_InitializeNode
0x1518	0xB1004F  	SUB	#4, W15
;NMRAnetNode.mpas,343 :: 		NMRAnetNode_SetStateFlag(Result, NS_ALLOCATED or NS_VIRTUAL);
0x151A	0xB3C09B  	MOV.B	#9, W11
0x151C	0x90050E  	MOV	[W14+0], W10
0x151E	0x07F713  	RCALL	_NMRAnetNode_SetStateFlag
;NMRAnetNode.mpas,344 :: 		Nodes.AllocatedList[Nodes.AllocatedCount] := Result;
0x1520	0x812780  	MOV	_Nodes+3120, W0
0x1522	0xDD00C1  	SL	W0, #1, W1
0x1524	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x1526	0x400081  	ADD	W0, W1, W1
0x1528	0x90000E  	MOV	[W14+0], W0
0x152A	0x780880  	MOV	W0, [W1]
;NMRAnetNode.mpas,345 :: 		Result^.Info.AliasID := NMRAnetUtilities_CreateAliasID(Result^.Info.Seed, False); // Pregenerate it so it can be sorted
0x152C	0x90000E  	MOV	[W14+0], W0
0x152E	0xECA000  	INC2	W0
0x1530	0x400070  	ADD	W0, #16, W0
0x1532	0x980720  	MOV	W0, [W14+4]
0x1534	0x90000E  	MOV	[W14+0], W0
0x1536	0xECA000  	INC2	W0
0x1538	0x400068  	ADD	W0, #8, W0
0x153A	0xEF2016  	CLR	W11
0x153C	0x780500  	MOV	W0, W10
0x153E	0x07F6F6  	RCALL	_NMRAnetUtilities_CreateAliasID
0x1540	0x9000AE  	MOV	[W14+4], W1
0x1542	0x780880  	MOV	W0, [W1]
;NMRAnetNode.mpas,346 :: 		Inc(Nodes.AllocatedCount);
0x1544	0x812780  	MOV	_Nodes+3120, W0
0x1546	0xEC2000  	INC	W0
0x1548	0x892780  	MOV	W0, _Nodes+3120
;NMRAnetNode.mpas,347 :: 		NMRAnetNode_SortNodeList(Nodes);
0x154A	0x218C0A  	MOV	#lo_addr(_Nodes), W10
0x154C	0x07F722  	RCALL	_NMRAnetNode_SortNodeList
;NMRAnetNode.mpas,348 :: 		AppCallback_NodeAllocate(Result);
0x154E	0x90050E  	MOV	[W14+0], W10
0x1550	0x07F70E  	RCALL	_AppCallback_NodeAllocate
;NMRAnetNode.mpas,349 :: 		end;
L__NMRAnetNode_Allocate68:
;NMRAnetNode.mpas,350 :: 		end;
0x1552	0x90000E  	MOV	[W14+0], W0
L_end_NMRAnetNode_Allocate:
0x1554	0x78064F  	POP	W12
0x1556	0x7805CF  	POP	W11
0x1558	0x78054F  	POP	W10
0x155A	0xFA8000  	ULNK
0x155C	0x060000  	RETURN
; end of _NMRAnetNode_Allocate
_NMRAnetNode_SetStateFlag:
;NMRAnetNode.mpas,450 :: 		begin
;NMRAnetNode.mpas,451 :: 		Node^.State := Node^.State or Flag;
0x0346	0x78401A  	MOV.B	[W10], W0
0x0348	0xFB8080  	ZE	W0, W1
0x034A	0xFB800B  	ZE	W11, W0
0x034C	0x708000  	IOR	W1, W0, W0
0x034E	0x784D00  	MOV.B	W0, [W10]
;NMRAnetNode.mpas,452 :: 		end;
L_end_NMRAnetNode_SetStateFlag:
0x0350	0x060000  	RETURN
; end of _NMRAnetNode_SetStateFlag
_NMRAnetUtilities_CreateAliasID:
;NMRAnetUtilities.mpas,384 :: 		begin
;NMRAnetUtilities.mpas,385 :: 		if Regenerate then
0x032C	0xE20016  	CP0	W11
0x032E	0x320001  	BRA Z	L__NMRAnetUtilities_CreateAliasID60
L__NMRAnetUtilities_CreateAliasID317:
;NMRAnetUtilities.mpas,386 :: 		NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed(Seed);
0x0330	0x07FF96  	RCALL	_NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed
L__NMRAnetUtilities_CreateAliasID60:
;NMRAnetUtilities.mpas,387 :: 		Result := NMRAnetUtilities_GenerateID_Alias_From_Seed(Seed);
0x0332	0x07FF7A  	RCALL	NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed
; Result start address is: 2 (W1)
0x0334	0x780080  	MOV	W0, W1
;NMRAnetUtilities.mpas,388 :: 		if Result = 0 then
0x0336	0xE10860  	CP	W1, #0
0x0338	0x3A0004  	BRA NZ	L__NMRAnetUtilities_CreateAliasID239
L__NMRAnetUtilities_CreateAliasID318:
; Result end address is: 2 (W1)
;NMRAnetUtilities.mpas,390 :: 		NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed(Seed);
0x033A	0x07FF91  	RCALL	_NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed
;NMRAnetUtilities.mpas,391 :: 		Result := NMRAnetUtilities_GenerateID_Alias_From_Seed(Seed);
0x033C	0x07FF75  	RCALL	NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed
; Result start address is: 2 (W1)
0x033E	0x780080  	MOV	W0, W1
; Result end address is: 2 (W1)
;NMRAnetUtilities.mpas,392 :: 		end
0x0340	0x370000  	BRA	L__NMRAnetUtilities_CreateAliasID63
L__NMRAnetUtilities_CreateAliasID239:
;NMRAnetUtilities.mpas,388 :: 		if Result = 0 then
;NMRAnetUtilities.mpas,392 :: 		end
L__NMRAnetUtilities_CreateAliasID63:
;NMRAnetUtilities.mpas,393 :: 		end;
; Result start address is: 2 (W1)
0x0342	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_CreateAliasID:
0x0344	0x060000  	RETURN
; end of _NMRAnetUtilities_CreateAliasID
_NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed:
;NMRAnetUtilities.mpas,351 :: 		begin
;NMRAnetUtilities.mpas,352 :: 		temp1 := ((Seed[1] shl 9) or ((Seed[0] shr 15) and $000001FF)) and $00FFFFFF;   // x(i+1)(2^9 + 1)*x(i) + C  = 2^9 * x(i) + x(i) + C
0x025E	0x4500E4  	ADD	W10, #4, W1
0x0260	0x200090  	MOV	#9, W0
0x0262	0xBE0311  	MOV.D	[W1], W6
L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed303:
0x0264	0xE90000  	DEC	W0, W0
0x0266	0x350003  	BRA LT	L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed304
0x0268	0xD00306  	SL	W6, W6
0x026A	0xD28387  	RLC	W7, W7
0x026C	0x37FFFB  	BRA	L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed303
L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed304:
0x026E	0xBE021A  	MOV.D	[W10], W4
0x0270	0x2000F0  	MOV	#15, W0
0x0272	0xBE0104  	MOV.D	W4, W2
L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed305:
0x0274	0xE90000  	DEC	W0, W0
0x0276	0x350003  	BRA LT	L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed306
0x0278	0xD10183  	LSR	W3, W3
0x027A	0xD38102  	RRC	W2, W2
0x027C	0x37FFFB  	BRA	L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed305
L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed306:
0x027E	0x201FF0  	MOV	#511, W0
0x0280	0x200001  	MOV	#0, W1
0x0282	0x610000  	AND	W2, W0, W0
0x0284	0x618081  	AND	W3, W1, W1
0x0286	0x730100  	IOR	W6, W0, W2
0x0288	0x738181  	IOR	W7, W1, W3
0x028A	0x2FFFF0  	MOV	#65535, W0
0x028C	0x200FF1  	MOV	#255, W1
; temp1 start address is: 12 (W6)
0x028E	0x610300  	AND	W2, W0, W6
0x0290	0x618381  	AND	W3, W1, W7
;NMRAnetUtilities.mpas,353 :: 		temp2 := (Seed[0] shl 9) and $00FFFFFF;                                                                  // Calculate 2^9 * x
0x0292	0xBE021A  	MOV.D	[W10], W4
0x0294	0x200090  	MOV	#9, W0
0x0296	0xBE0104  	MOV.D	W4, W2
L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed307:
0x0298	0xE90000  	DEC	W0, W0
0x029A	0x350003  	BRA LT	L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed308
0x029C	0xD00102  	SL	W2, W2
0x029E	0xD28183  	RLC	W3, W3
0x02A0	0x37FFFB  	BRA	L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed307
L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed308:
0x02A2	0x2FFFF0  	MOV	#65535, W0
0x02A4	0x200FF1  	MOV	#255, W1
0x02A6	0x610100  	AND	W2, W0, W2
0x02A8	0x618181  	AND	W3, W1, W3
;NMRAnetUtilities.mpas,355 :: 		Seed[0] := Seed[0] + temp2 + $7A4BA9;   // Now y = 2^9 * x so all we have left is x(i+1) = y + x + c
0x02AA	0xBE001A  	MOV.D	[W10], W0
0x02AC	0x400102  	ADD	W0, W2, W2
0x02AE	0x488183  	ADDC	W1, W3, W3
0x02B0	0x24BA90  	MOV	#19369, W0
0x02B2	0x2007A1  	MOV	#122, W1
0x02B4	0x411D00  	ADD	W2, W0, [W10++]
0x02B6	0x499501  	ADDC	W3, W1, [W10--]
;NMRAnetUtilities.mpas,356 :: 		Seed[1] := Seed[1] + temp1 + $1B0CA3;
0x02B8	0x450264  	ADD	W10, #4, W4
0x02BA	0x450064  	ADD	W10, #4, W0
0x02BC	0x430130  	ADD	W6, [W0++], W2
0x02BE	0x4B81A0  	ADDC	W7, [W0--], W3
; temp1 end address is: 12 (W6)
0x02C0	0x20CA30  	MOV	#3235, W0
0x02C2	0x2001B1  	MOV	#27, W1
0x02C4	0x411A00  	ADD	W2, W0, [W4++]
0x02C6	0x499201  	ADDC	W3, W1, [W4--]
;NMRAnetUtilities.mpas,358 :: 		Seed[1] := (Seed[1] and $00FFFFFF) or (Seed[0] and $FF000000) shr 24;   // Handle the carries of the lower 24 bits into the upper
0x02C8	0x450464  	ADD	W10, #4, W8
0x02CA	0x450064  	ADD	W10, #4, W0
0x02CC	0xBE0110  	MOV.D	[W0], W2
0x02CE	0x2FFFF0  	MOV	#65535, W0
0x02D0	0x200FF1  	MOV	#255, W1
0x02D2	0x610300  	AND	W2, W0, W6
0x02D4	0x618381  	AND	W3, W1, W7
0x02D6	0xBE011A  	MOV.D	[W10], W2
0x02D8	0x200000  	MOV	#0, W0
0x02DA	0x2FF001  	MOV	#65280, W1
0x02DC	0x610200  	AND	W2, W0, W4
0x02DE	0x618281  	AND	W3, W1, W5
0x02E0	0x200182  	MOV	#24, W2
0x02E2	0xBE0004  	MOV.D	W4, W0
L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed309:
0x02E4	0xE90102  	DEC	W2, W2
0x02E6	0x350003  	BRA LT	L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed310
0x02E8	0xD10081  	LSR	W1, W1
0x02EA	0xD38000  	RRC	W0, W0
0x02EC	0x37FFFB  	BRA	L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed309
L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed310:
0x02EE	0x731C00  	IOR	W6, W0, [W8++]
0x02F0	0x739401  	IOR	W7, W1, [W8--]
;NMRAnetUtilities.mpas,359 :: 		Seed[0] := Seed[0] and $00FFFFFF;
0x02F2	0xBE011A  	MOV.D	[W10], W2
0x02F4	0x2FFFF0  	MOV	#65535, W0
0x02F6	0x200FF1  	MOV	#255, W1
0x02F8	0x611D00  	AND	W2, W0, [W10++]
0x02FA	0x619501  	AND	W3, W1, [W10--]
;NMRAnetUtilities.mpas,360 :: 		end;
L_end_NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed:
0x02FC	0x060000  	RETURN
; end of _NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed
NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed:
;NMRAnetUtilities.mpas,371 :: 		begin
;NMRAnetUtilities.mpas,372 :: 		Result := (Seed[0] xor Seed[1] xor (Seed[0] shr 12) xor (Seed[1] shr 12)) and $00000FFF;
0x0228	0x4500E4  	ADD	W10, #4, W1
0x022A	0x78001A  	MOV	[W10], W0
0x022C	0x680291  	XOR	W0, [W1], W5
0x022E	0x7801BA  	MOV	[W10++], W3
0x0230	0x78022A  	MOV	[W10--], W4
0x0232	0x2000C2  	MOV	#12, W2
0x0234	0x780003  	MOV	W3, W0
0x0236	0x780084  	MOV	W4, W1
L_NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed312:
0x0238	0xE90102  	DEC	W2, W2
0x023A	0x350003  	BRA LT	L_NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed313
0x023C	0xD10081  	LSR	W1, W1
0x023E	0xD38000  	RRC	W0, W0
0x0240	0x37FFFB  	BRA	L_NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed312
L_NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed313:
0x0242	0x6A8200  	XOR	W5, W0, W4
0x0244	0x4501E4  	ADD	W10, #4, W3
0x0246	0x2000C2  	MOV	#12, W2
0x0248	0xBE0013  	MOV.D	[W3], W0
L_NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed314:
0x024A	0xE90102  	DEC	W2, W2
0x024C	0x350003  	BRA LT	L_NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed315
0x024E	0xD10081  	LSR	W1, W1
0x0250	0xD38000  	RRC	W0, W0
0x0252	0x37FFFB  	BRA	L_NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed314
L_NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed315:
0x0254	0x6A0100  	XOR	W4, W0, W2
0x0256	0x20FFF0  	MOV	#4095, W0
; Result start address is: 2 (W1)
0x0258	0x610080  	AND	W2, W0, W1
;NMRAnetUtilities.mpas,373 :: 		end;
0x025A	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_GenerateID_Alias_From_Seed:
0x025C	0x060000  	RETURN
; end of NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed
_NMRAnetNode_SortNodeList:
0x0392	0xFA0004  	LNK	#4
;NMRAnetNode.mpas,107 :: 		begin
;NMRAnetNode.mpas,108 :: 		for i := 1 to LocalNodes.AllocatedCount - 1 do
; i start address is: 10 (W5)
0x0394	0x200015  	MOV	#1, W5
; i end address is: 10 (W5)
L__NMRAnetNode_SortNodeList1:
; i start address is: 10 (W5)
0x0396	0x20C300  	MOV	#3120, W0
0x0398	0x450000  	ADD	W10, W0, W0
0x039A	0x780010  	MOV	[W0], W0
0x039C	0x500261  	SUB	W0, #1, W4
0x039E	0xE12804  	CP	W5, W4
0x03A0	0x3C003E  	BRA GT	L__NMRAnetNode_SortNodeList5
L__NMRAnetNode_SortNodeList220:
;NMRAnetNode.mpas,110 :: 		LocalData := LocalNodes.AllocatedList[i];
0x03A2	0x20BAE0  	MOV	#2990, W0
0x03A4	0x450080  	ADD	W10, W0, W1
0x03A6	0xDD2841  	SL	W5, #1, W0
0x03A8	0x408000  	ADD	W1, W0, W0
0x03AA	0x780010  	MOV	[W0], W0
0x03AC	0x980710  	MOV	W0, [W14+2]
;NMRAnetNode.mpas,111 :: 		j := i;
0x03AE	0x980705  	MOV	W5, [W14+0]
; i end address is: 10 (W5)
;NMRAnetNode.mpas,112 :: 		while (j > 0) and (LocalNodes.AllocatedList[j-1]^.Info.AliasID > LocalData^.Info.AliasID) do
L__NMRAnetNode_SortNodeList7:
; i start address is: 10 (W5)
0x03B0	0x90000E  	MOV	[W14+0], W0
0x03B2	0xE10060  	CP	W0, #0
0x03B4	0xEF2006  	CLR	W3
0x03B6	0x340001  	BRA LE	L__NMRAnetNode_SortNodeList221
0x03B8	0xEEA006  	COM	W3
L__NMRAnetNode_SortNodeList221:
0x03BA	0x20BAE0  	MOV	#2990, W0
0x03BC	0x450080  	ADD	W10, W0, W1
0x03BE	0x90000E  	MOV	[W14+0], W0
0x03C0	0xED2000  	DEC	W0
0x03C2	0xDD0041  	SL	W0, #1, W0
0x03C4	0x408000  	ADD	W1, W0, W0
0x03C6	0x780010  	MOV	[W0], W0
0x03C8	0xECA000  	INC2	W0
0x03CA	0x400170  	ADD	W0, #16, W2
0x03CC	0x90001E  	MOV	[W14+2], W0
0x03CE	0xECA000  	INC2	W0
0x03D0	0x400070  	ADD	W0, #16, W0
0x03D2	0x780090  	MOV	[W0], W1
0x03D4	0x780012  	MOV	[W2], W0
0x03D6	0xE10001  	CP	W0, W1
0x03D8	0xEF2000  	CLR	W0
0x03DA	0x360001  	BRA LEU	L__NMRAnetNode_SortNodeList222
0x03DC	0xEEA000  	COM	W0
L__NMRAnetNode_SortNodeList222:
0x03DE	0x618000  	AND	W3, W0, W0
0x03E0	0x320013  	BRA Z	L__NMRAnetNode_SortNodeList8
L__NMRAnetNode_SortNodeList223:
;NMRAnetNode.mpas,114 :: 		LocalNodes.AllocatedList[j] := LocalNodes.AllocatedList[j-1];
0x03E2	0x20BAE0  	MOV	#2990, W0
0x03E4	0x450080  	ADD	W10, W0, W1
0x03E6	0x90000E  	MOV	[W14+0], W0
0x03E8	0xDD0041  	SL	W0, #1, W0
0x03EA	0x408100  	ADD	W1, W0, W2
0x03EC	0x20BAE0  	MOV	#2990, W0
0x03EE	0x450080  	ADD	W10, W0, W1
0x03F0	0x90000E  	MOV	[W14+0], W0
0x03F2	0xED2000  	DEC	W0
0x03F4	0xDD0041  	SL	W0, #1, W0
0x03F6	0x408000  	ADD	W1, W0, W0
0x03F8	0x780910  	MOV	[W0], [W2]
;NMRAnetNode.mpas,115 :: 		j := j - 1;
0x03FA	0x90000E  	MOV	[W14+0], W0
0x03FC	0xED2000  	DEC	W0
0x03FE	0x980700  	MOV	W0, [W14+0]
;NMRAnetNode.mpas,116 :: 		if j = 0 then                                                             // mPascal does not support short circuit Boolean so the [j-1] when j = 0 is bad in the while conditional define
0x0400	0xE10060  	CP	W0, #0
0x0402	0x3A0001  	BRA NZ	L__NMRAnetNode_SortNodeList12
L__NMRAnetNode_SortNodeList224:
;NMRAnetNode.mpas,117 :: 		Break;
0x0404	0x370001  	BRA	L__NMRAnetNode_SortNodeList8
L__NMRAnetNode_SortNodeList12:
;NMRAnetNode.mpas,118 :: 		end;
0x0406	0x37FFD4  	BRA	L__NMRAnetNode_SortNodeList7
L__NMRAnetNode_SortNodeList8:
;NMRAnetNode.mpas,119 :: 		LocalNodes.AllocatedList[j] := LocalData;
0x0408	0x20BAE0  	MOV	#2990, W0
0x040A	0x450080  	ADD	W10, W0, W1
0x040C	0x90000E  	MOV	[W14+0], W0
0x040E	0xDD0041  	SL	W0, #1, W0
0x0410	0x408080  	ADD	W1, W0, W1
0x0412	0x90001E  	MOV	[W14+2], W0
0x0414	0x780880  	MOV	W0, [W1]
;NMRAnetNode.mpas,121 :: 		end;
0x0416	0xE12804  	CP	W5, W4
0x0418	0x320002  	BRA Z	L__NMRAnetNode_SortNodeList5
L__NMRAnetNode_SortNodeList225:
; i start address is: 10 (W5)
0x041A	0xEC200A  	INC	W5
; i end address is: 10 (W5)
; i end address is: 10 (W5)
0x041C	0x37FFBC  	BRA	L__NMRAnetNode_SortNodeList1
L__NMRAnetNode_SortNodeList5:
;NMRAnetNode.mpas,122 :: 		end;
L_end_NMRAnetNode_SortNodeList:
0x041E	0xFA8000  	ULNK
0x0420	0x060000  	RETURN
; end of _NMRAnetNode_SortNodeList
_AppCallback_NodeAllocate:
;NMRAnetAppCallbacks.mpas,219 :: 		begin
;NMRAnetAppCallbacks.mpas,220 :: 		ProxyData := GetProxyData(Node);
0x036E	0x070059  	RCALL	_GetProxyData
; ProxyData start address is: 6 (W3)
0x0370	0x780180  	MOV	W0, W3
;NMRAnetAppCallbacks.mpas,221 :: 		ProxyData^.State := 0;
0x0372	0xEF2002  	CLR	W1
0x0374	0x784801  	MOV.B	W1, [W0]
;NMRAnetAppCallbacks.mpas,222 :: 		ProxyData^.Address := 0;
0x0376	0x4180E8  	ADD	W3, #8, W1
0x0378	0xEF2000  	CLR	W0
0x037A	0x780880  	MOV	W0, [W1]
;NMRAnetAppCallbacks.mpas,223 :: 		ProxyData^.MsgFlags := 0;
0x037C	0x4180E1  	ADD	W3, #1, W1
0x037E	0xEF2000  	CLR	W0
0x0380	0x784880  	MOV.B	W0, [W1]
;NMRAnetAppCallbacks.mpas,224 :: 		ProxyData^.Speed := 0;
0x0382	0x4180E2  	ADD	W3, #2, W1
0x0384	0xEF2000  	CLR	W0
0x0386	0x780880  	MOV	W0, [W1]
;NMRAnetAppCallbacks.mpas,225 :: 		ProxyData^.Functions := 0;
0x0388	0x418164  	ADD	W3, #4, W2
; ProxyData end address is: 6 (W3)
0x038A	0xEF2000  	CLR	W0
0x038C	0xEF2002  	CLR	W1
0x038E	0xBE8900  	MOV.D	W0, [W2]
;NMRAnetAppCallbacks.mpas,226 :: 		end;
L_end_AppCallback_NodeAllocate:
0x0390	0x060000  	RETURN
; end of _AppCallback_NodeAllocate
_GetProxyData:
;NMRAnetAppCallbacks.mpas,135 :: 		begin
;NMRAnetAppCallbacks.mpas,136 :: 		Result := nil;
; Result start address is: 2 (W1)
0x0422	0xEF2002  	CLR	W1
;NMRAnetAppCallbacks.mpas,137 :: 		if Node <> nil then
0x0424	0xE15060  	CP	W10, #0
0x0426	0x320004  	BRA Z	L__GetProxyData178
L__GetProxyData181:
; Result end address is: 2 (W1)
;NMRAnetAppCallbacks.mpas,138 :: 		Result := PDccProxyData( Node^.RAMAddress);
0x0428	0x2002A0  	MOV	#42, W0
0x042A	0x450000  	ADD	W10, W0, W0
; Result start address is: 2 (W1)
0x042C	0x780090  	MOV	[W0], W1
; Result end address is: 2 (W1)
0x042E	0x370000  	BRA	L__GetProxyData2
L__GetProxyData178:
;NMRAnetAppCallbacks.mpas,137 :: 		if Node <> nil then
;NMRAnetAppCallbacks.mpas,138 :: 		Result := PDccProxyData( Node^.RAMAddress);
L__GetProxyData2:
;NMRAnetAppCallbacks.mpas,139 :: 		end;
; Result start address is: 2 (W1)
0x0430	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_GetProxyData:
0x0432	0x060000  	RETURN
; end of _GetProxyData
_MCU_Setup_Initialize:
;MCU_Setup_dsPIC33EP64GP502.mpas,27 :: 		begin
;MCU_Setup_dsPIC33EP64GP502.mpas,28 :: 		ANSELA := 0;
0x4488	0x781F8A  	PUSH	W10
0x448A	0x781F8B  	PUSH	W11
0x448C	0x781F8C  	PUSH	W12
0x448E	0x781F8D  	PUSH	W13
0x4490	0xEF2E0E  	CLR	ANSELA
;MCU_Setup_dsPIC33EP64GP502.mpas,29 :: 		ANSELB := 0;
0x4492	0xEF2E1E  	CLR	ANSELB
;MCU_Setup_dsPIC33EP64GP502.mpas,32 :: 		OSCCON := OSCCON and $F8FF;                                                   // Clear COSC bits (set to FRC mode)
0x4494	0x2F8FF1  	MOV	#63743, W1
0x4496	0x207420  	MOV	#lo_addr(OSCCON), W0
0x4498	0x608810  	AND	W1, [W0], [W0]
;MCU_Setup_dsPIC33EP64GP502.mpas,33 :: 		OSCCON.0 := 1;                                                                // Tell it to change modes
0x449A	0xA80742  	BSET	OSCCON, #0
;MCU_Setup_dsPIC33EP64GP502.mpas,34 :: 		while OSCCON.0 = 1 do;                                                        // wait for it to take effect
L__MCU_Setup_Initialize2:
0x449C	0xAF0742  	BTSC	OSCCON, #0
0x449E	0x37FFFE  	BRA	L__MCU_Setup_Initialize2
;MCU_Setup_dsPIC33EP64GP502.mpas,36 :: 		CLKDIV := CLKDIV and 0xFFE0;                                                  // PLLPRE<4:0> = 0  ->  N1 = 2    8MHz / 2 = 4MHz
0x44A0	0x2FFE01  	MOV	#65504, W1
0x44A2	0x207440  	MOV	#lo_addr(CLKDIV), W0
0x44A4	0x608810  	AND	W1, [W0], [W0]
;MCU_Setup_dsPIC33EP64GP502.mpas,38 :: 		PLLFBD :=   30;                                                               // PLLDIV<8:0> = 30 ->  M = 32    4MHz * 32 = 128MHz
0x44A6	0x2001E0  	MOV	#30, W0
0x44A8	0xB7A746  	MOV	WREG, PLLFBD
;MCU_Setup_dsPIC33EP64GP502.mpas,40 :: 		PLLPOST_1_bit := 0;
0x44AA	0xA9E744  	BCLR	PLLPOST_1_bit, BitPos(PLLPOST_1_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,41 :: 		PLLPOST_0_bit := 0;                                                           // PLLPOST<1:0> = 0 ->  N2 = 2    128MHz / 2 = 64MHz
0x44AC	0xA9C744  	BCLR	PLLPOST_0_bit, BitPos(PLLPOST_0_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,43 :: 		OSCCON := OSCCON or $0300;                                                    // Set COSC to 011 = XT with PLL
0x44AE	0x203001  	MOV	#768, W1
0x44B0	0x207420  	MOV	#lo_addr(OSCCON), W0
0x44B2	0x708810  	IOR	W1, [W0], [W0]
;MCU_Setup_dsPIC33EP64GP502.mpas,44 :: 		OSCCON.0 := 1;                                                                // Tell it to change modes
0x44B4	0xA80742  	BSET	OSCCON, #0
;MCU_Setup_dsPIC33EP64GP502.mpas,45 :: 		while OSCCON.0 = 1 do;                                                        // wait for it to take effect
L__MCU_Setup_Initialize7:
0x44B6	0xAF0742  	BTSC	OSCCON, #0
0x44B8	0x37FFFE  	BRA	L__MCU_Setup_Initialize7
;MCU_Setup_dsPIC33EP64GP502.mpas,47 :: 		Delay_ms(10);
0x44BA	0x2FA007  	MOV	#64000, W7
L__MCU_Setup_Initialize11:
0x44BC	0xED200E  	DEC	W7
0x44BE	0x3AFFFE  	BRA NZ	L__MCU_Setup_Initialize11
0x44C0	0x000000  	NOP
0x44C2	0x000000  	NOP
;MCU_Setup_dsPIC33EP64GP502.mpas,49 :: 		dsPIC33_CAN_EnterConfigMode;                                                  // Place the module in Configuration Mode
0x44C4	0x07F81B  	RCALL	_dsPIC33_CAN_EnterConfigMode
;MCU_Setup_dsPIC33EP64GP502.mpas,51 :: 		dsPIC33_CAN_SetBaud(CAN_SWJ, CAN_BRP, CAN_PHASESEG_2, CAN_PHASESEG_1, CAN_PROP_SEG, True); // Setup the Baud Rate for 125kHz with a 64Mhz Clock
0x44C6	0x20004D  	MOV	#4, W13
0x44C8	0x20005C  	MOV	#5, W12
0x44CA	0x20007B  	MOV	#7, W11
0x44CC	0xEF2014  	CLR	W10
0x44CE	0x2FFFF0  	MOV	#65535, W0
0x44D0	0x781F80  	PUSH	W0
0x44D2	0x200030  	MOV	#3, W0
0x44D4	0x781F80  	PUSH	W0
0x44D6	0x07F946  	RCALL	_dsPIC33_CAN_SetBaud
0x44D8	0xB1004F  	SUB	#4, W15
;MCU_Setup_dsPIC33EP64GP502.mpas,54 :: 		dsPIC33_CAN_SetMask(2, $08000000, True);                                      // Mask 2 looks only at bit 27 for the Filters
0x44DA	0x2FFFFD  	MOV	#65535, W13
0x44DC	0x20000B  	MOV	#0, W11
0x44DE	0x20800C  	MOV	#2048, W12
0x44E0	0xB3C02A  	MOV.B	#2, W10
0x44E2	0x07F91F  	RCALL	_dsPIC33_CAN_SetMask
;MCU_Setup_dsPIC33EP64GP502.mpas,55 :: 		dsPIC33_CAN_SetFilter(0, $00000000, True);                                    // Look for a 0 in bit 27  (CAN Layer Messsage)
0x44E4	0x2FFFFD  	MOV	#65535, W13
0x44E6	0xEF2016  	CLR	W11
0x44E8	0xEF2018  	CLR	W12
0x44EA	0xEF2014  	CLR	W10
0x44EC	0x07F976  	RCALL	_dsPIC33_CAN_SetFilter
;MCU_Setup_dsPIC33EP64GP502.mpas,56 :: 		dsPIC33_CAN_SetFilter(1, $08000000, True);                                    // Look for a 1 in bit 27  (NMRABus Layer Message)
0x44EE	0x2FFFFD  	MOV	#65535, W13
0x44F0	0x20000B  	MOV	#0, W11
0x44F2	0x20800C  	MOV	#2048, W12
0x44F4	0xB3C01A  	MOV.B	#1, W10
0x44F6	0x07F971  	RCALL	_dsPIC33_CAN_SetFilter
;MCU_Setup_dsPIC33EP64GP502.mpas,57 :: 		dsPIC33_CAN_AssociateFilterWithMask(0, 2);                                    // Link Filter 0 and Mask 2 which looks only at bit 27 = 0
0x44F8	0x20002B  	MOV	#2, W11
0x44FA	0xEF2014  	CLR	W10
0x44FC	0x07F947  	RCALL	_dsPIC33_CAN_AssociateFilterWithMask
;MCU_Setup_dsPIC33EP64GP502.mpas,58 :: 		dsPIC33_CAN_AssociateFilterWithMask(1, 2);                                    // Link Filter 1 and Mask 2 which looks only at bit 27 = 1
0x44FE	0x20002B  	MOV	#2, W11
0x4500	0x20001A  	MOV	#1, W10
0x4502	0x07F944  	RCALL	_dsPIC33_CAN_AssociateFilterWithMask
;MCU_Setup_dsPIC33EP64GP502.mpas,59 :: 		dsPIC33_CAN_EnableDisableRXFilters($0003);                                    // Enable Filters 0 and 1
0x4504	0x20003A  	MOV	#3, W10
0x4506	0x07F8FA  	RCALL	_dsPIC33_CAN_EnableDisableRXFilters
;MCU_Setup_dsPIC33EP64GP502.mpas,60 :: 		dsPIC33_CAN_RegisterBufferWithFilter(0, CAN_RX_0_BUFFER);                     // Filter 0 to be sent to Buffer
0x4508	0x20002B  	MOV	#2, W11
0x450A	0xEF2014  	CLR	W10
0x450C	0x07F8E7  	RCALL	_dsPIC33_CAN_RegisterBufferWithFilter
;MCU_Setup_dsPIC33EP64GP502.mpas,61 :: 		dsPIC33_CAN_RegisterBufferWithFilter(1, CAN_RX_0_BUFFER);                     // Filter 1 to be sent to Buffer
0x450E	0x20002B  	MOV	#2, W11
0x4510	0x20001A  	MOV	#1, W10
0x4512	0x07F8E4  	RCALL	_dsPIC33_CAN_RegisterBufferWithFilter
;MCU_Setup_dsPIC33EP64GP502.mpas,63 :: 		dsPIC33_CAN_EnterNormalMode;                                                  // Place the module in Normal Mode
0x4514	0x07F8FD  	RCALL	_dsPIC33_CAN_EnterNormalMode
;MCU_Setup_dsPIC33EP64GP502.mpas,66 :: 		dsPIC33_CAN_SetBufferAsTransmitter(CAN_TX_0_BUFFER, True);                    // Setup Buffer 0 as a Transmit Buffer
0x4516	0x2FFFFB  	MOV	#65535, W11
0x4518	0xEF2014  	CLR	W10
0x451A	0x07F8F2  	RCALL	_dsPIC33_CAN_SetBufferAsTransmitter
;MCU_Setup_dsPIC33EP64GP502.mpas,69 :: 		dsPIC33_DMA_Enable(CAN_TX_0_DMA_CHANNEL, False);
0x451C	0xEF2016  	CLR	W11
0x451E	0x20001A  	MOV	#1, W10
0x4520	0x07F739  	RCALL	_dsPIC33_DMA_Enable
;MCU_Setup_dsPIC33EP64GP502.mpas,70 :: 		dsPIC33_DMA_DataSize(CAN_TX_0_DMA_CHANNEL, DATASIZE_WORD);                    // DMA Data Size is a Word
0x4522	0x20001B  	MOV	#1, W11
0x4524	0x20001A  	MOV	#1, W10
0x4526	0x07F72C  	RCALL	_dsPIC33_DMA_DataSize
;MCU_Setup_dsPIC33EP64GP502.mpas,71 :: 		dsPIC33_DMA_Direction(CAN_TX_0_DMA_CHANNEL, DIRECTION_RAM_TO_PERIPHERAL);     // Transmit move data from RAM to the Module
0x4528	0xEF2016  	CLR	W11
0x452A	0x20001A  	MOV	#1, W10
0x452C	0x07F748  	RCALL	_dsPIC33_DMA_Direction
;MCU_Setup_dsPIC33EP64GP502.mpas,72 :: 		dsPIC33_DMA_AddressMode(CAN_TX_0_DMA_CHANNEL, ADDRESS_MODE_PERIPHERAL_INDIRECT); // Don't use the buggy Perpherial Addressing Mode
0x452E	0x20002B  	MOV	#2, W11
0x4530	0x20001A  	MOV	#1, W10
0x4532	0x07F73A  	RCALL	_dsPIC33_DMA_AddressMode
;MCU_Setup_dsPIC33EP64GP502.mpas,73 :: 		dsPIC33_DMA_OperatingMode(CAN_TX_0_DMA_CHANNEL, OPERATING_MODE_CONTINIOUS);   // Continious Mode (as apposed to one shot)
0x4534	0xEF2016  	CLR	W11
0x4536	0x20001A  	MOV	#1, W10
0x4538	0x07F709  	RCALL	_dsPIC33_DMA_OperatingMode
;MCU_Setup_dsPIC33EP64GP502.mpas,74 :: 		dsPIC33_DMA_TransferCount(CAN_TX_0_DMA_CHANNEL, 8);                           // 0...7
0x453A	0x20008B  	MOV	#8, W11
0x453C	0x20001A  	MOV	#1, W10
0x453E	0x07F6FF  	RCALL	_dsPIC33_DMA_TransferCount
;MCU_Setup_dsPIC33EP64GP502.mpas,75 :: 		dsPIC33_DMA_ManualDMATransfer(CAN_TX_0_DMA_CHANNEL, False);                   // Automatic DMA Transfers
0x4540	0xEF2016  	CLR	W11
0x4542	0x20001A  	MOV	#1, W10
0x4544	0x07F713  	RCALL	_dsPIC33_DMA_ManualDMATransfer
;MCU_Setup_dsPIC33EP64GP502.mpas,76 :: 		dsPIC33_DMA_PeripheralAddress(CAN_TX_0_DMA_CHANNEL, @C1TXD);                  // Assign the DMA Channel to the Transmit Register of the CAN module
0x4546	0x20442B  	MOV	#lo_addr(C1TXD), W11
0x4548	0x20001A  	MOV	#1, W10
0x454A	0x07F70A  	RCALL	_dsPIC33_DMA_PeripheralAddress
;MCU_Setup_dsPIC33EP64GP502.mpas,77 :: 		dsPIC33_DMA_InterruptSelect(CAN_TX_0_DMA_CHANNEL, IRQ_ECAN1_TX_DATA_READY);   // Assign the DMA Channel to the ECAN 1 TX to Trigger the Transfer
0x454C	0x20046B  	MOV	#70, W11
0x454E	0x20001A  	MOV	#1, W10
0x4550	0x07F769  	RCALL	_dsPIC33_DMA_InterruptSelect
;MCU_Setup_dsPIC33EP64GP502.mpas,78 :: 		dsPIC33_DMA_AddressOffsetA(CAN_TX_0_DMA_CHANNEL, Word( @TX_Main_RawBufferArray[CAN_TX_0_BUFFER]));  // Enable DMA Channel
0x4552	0x210000  	MOV	#lo_addr(_TX_Main_RawBufferArray), W0
0x4554	0x780580  	MOV	W0, W11
0x4556	0x20001A  	MOV	#1, W10
0x4558	0x07F75F  	RCALL	_dsPIC33_DMA_AddressOffsetA
;MCU_Setup_dsPIC33EP64GP502.mpas,79 :: 		dsPIC33_DMA_Enable(CAN_TX_0_DMA_CHANNEL, True);
0x455A	0x2FFFFB  	MOV	#65535, W11
0x455C	0x20001A  	MOV	#1, W10
0x455E	0x07F71A  	RCALL	_dsPIC33_DMA_Enable
;MCU_Setup_dsPIC33EP64GP502.mpas,83 :: 		dsPIC33_CAN_SetBufferAsTransmitter(CAN_TX_1_BUFFER, True);                    // Setup Buffer 0 as a Transmit Buffer
0x4560	0x2FFFFB  	MOV	#65535, W11
0x4562	0x20001A  	MOV	#1, W10
0x4564	0x07F8CD  	RCALL	_dsPIC33_CAN_SetBufferAsTransmitter
;MCU_Setup_dsPIC33EP64GP502.mpas,86 :: 		dsPIC33_DMA_Enable(CAN_TX_1_DMA_CHANNEL, False);
0x4566	0xEF2016  	CLR	W11
0x4568	0xEF2014  	CLR	W10
0x456A	0x07F714  	RCALL	_dsPIC33_DMA_Enable
;MCU_Setup_dsPIC33EP64GP502.mpas,87 :: 		dsPIC33_DMA_DataSize(CAN_TX_1_DMA_CHANNEL, DATASIZE_WORD);                    // DMA Data Size is a Word
0x456C	0x20001B  	MOV	#1, W11
0x456E	0xEF2014  	CLR	W10
0x4570	0x07F707  	RCALL	_dsPIC33_DMA_DataSize
;MCU_Setup_dsPIC33EP64GP502.mpas,88 :: 		dsPIC33_DMA_Direction(CAN_TX_1_DMA_CHANNEL, DIRECTION_RAM_TO_PERIPHERAL);     // Transmit move data from RAM to the Module
0x4572	0xEF2016  	CLR	W11
0x4574	0xEF2014  	CLR	W10
0x4576	0x07F723  	RCALL	_dsPIC33_DMA_Direction
;MCU_Setup_dsPIC33EP64GP502.mpas,89 :: 		dsPIC33_DMA_AddressMode(CAN_TX_1_DMA_CHANNEL, ADDRESS_MODE_PERIPHERAL_INDIRECT); // Don't use the buggy Perpherial Addressing Mode
0x4578	0x20002B  	MOV	#2, W11
0x457A	0xEF2014  	CLR	W10
0x457C	0x07F715  	RCALL	_dsPIC33_DMA_AddressMode
;MCU_Setup_dsPIC33EP64GP502.mpas,90 :: 		dsPIC33_DMA_OperatingMode(CAN_TX_1_DMA_CHANNEL, OPERATING_MODE_CONTINIOUS);   // Continious Mode (as apposed to one shot)
0x457E	0xEF2016  	CLR	W11
0x4580	0xEF2014  	CLR	W10
0x4582	0x07F6E4  	RCALL	_dsPIC33_DMA_OperatingMode
;MCU_Setup_dsPIC33EP64GP502.mpas,91 :: 		dsPIC33_DMA_TransferCount(CAN_TX_1_DMA_CHANNEL, 8);                           // 0...7
0x4584	0x20008B  	MOV	#8, W11
0x4586	0xEF2014  	CLR	W10
0x4588	0x07F6DA  	RCALL	_dsPIC33_DMA_TransferCount
;MCU_Setup_dsPIC33EP64GP502.mpas,92 :: 		dsPIC33_DMA_ManualDMATransfer(CAN_TX_1_DMA_CHANNEL, False);                   // Automatic DMA Transfers
0x458A	0xEF2016  	CLR	W11
0x458C	0xEF2014  	CLR	W10
0x458E	0x07F6EE  	RCALL	_dsPIC33_DMA_ManualDMATransfer
;MCU_Setup_dsPIC33EP64GP502.mpas,93 :: 		dsPIC33_DMA_PeripheralAddress(CAN_TX_1_DMA_CHANNEL, @C1TXD);                  // Assign the DMA Channel to the Transmit Register of the CAN module
0x4590	0x20442B  	MOV	#lo_addr(C1TXD), W11
0x4592	0xEF2014  	CLR	W10
0x4594	0x07F6E5  	RCALL	_dsPIC33_DMA_PeripheralAddress
;MCU_Setup_dsPIC33EP64GP502.mpas,94 :: 		dsPIC33_DMA_InterruptSelect(CAN_TX_1_DMA_CHANNEL, IRQ_ECAN1_TX_DATA_READY);   // Assign the DMA Channel to the ECAN 1 TX to Trigger the Transfer
0x4596	0x20046B  	MOV	#70, W11
0x4598	0xEF2014  	CLR	W10
0x459A	0x07F744  	RCALL	_dsPIC33_DMA_InterruptSelect
;MCU_Setup_dsPIC33EP64GP502.mpas,95 :: 		dsPIC33_DMA_AddressOffsetA(CAN_TX_1_DMA_CHANNEL, Word( @TX_Main_RawBufferArray[CAN_TX_1_BUFFER]));  // Enable DMA Channel
0x459C	0x210100  	MOV	#lo_addr(_TX_Main_RawBufferArray+16), W0
0x459E	0x780580  	MOV	W0, W11
0x45A0	0xEF2014  	CLR	W10
0x45A2	0x07F73A  	RCALL	_dsPIC33_DMA_AddressOffsetA
;MCU_Setup_dsPIC33EP64GP502.mpas,96 :: 		dsPIC33_DMA_Enable(CAN_TX_1_DMA_CHANNEL, True);
0x45A4	0x2FFFFB  	MOV	#65535, W11
0x45A6	0xEF2014  	CLR	W10
0x45A8	0x07F6F5  	RCALL	_dsPIC33_DMA_Enable
;MCU_Setup_dsPIC33EP64GP502.mpas,99 :: 		dsPIC33_CAN_SetBufferAsTransmitter(CAN_RX_0_BUFFER, False);                     // Setup Buffer 0 as a Receive Buffer
0x45AA	0xEF2016  	CLR	W11
0x45AC	0x20002A  	MOV	#2, W10
0x45AE	0x07F8A8  	RCALL	_dsPIC33_CAN_SetBufferAsTransmitter
;MCU_Setup_dsPIC33EP64GP502.mpas,102 :: 		dsPIC33_DMA_DataSize(CAN_RX_0_DMA_CHANNEL, DATASIZE_WORD);                                       // DMA Data Size is a Word
0x45B0	0x20001B  	MOV	#1, W11
0x45B2	0x20002A  	MOV	#2, W10
0x45B4	0x07F6E5  	RCALL	_dsPIC33_DMA_DataSize
;MCU_Setup_dsPIC33EP64GP502.mpas,103 :: 		dsPIC33_DMA_Direction(CAN_RX_0_DMA_CHANNEL, DIRECTION_PERIPHERAL_TO_RAM);                        // Transmit move data from the Module to RAM
0x45B6	0x20001B  	MOV	#1, W11
0x45B8	0x20002A  	MOV	#2, W10
0x45BA	0x07F701  	RCALL	_dsPIC33_DMA_Direction
;MCU_Setup_dsPIC33EP64GP502.mpas,104 :: 		dsPIC33_DMA_AddressMode(CAN_RX_0_DMA_CHANNEL, ADDRESS_MODE_REG_INDIRECT_POST_INCREMENT);         // Don't use the buggy Perpherial Addressing Mode
0x45BC	0xEF2016  	CLR	W11
0x45BE	0x20002A  	MOV	#2, W10
0x45C0	0x07F6F3  	RCALL	_dsPIC33_DMA_AddressMode
;MCU_Setup_dsPIC33EP64GP502.mpas,105 :: 		dsPIC33_DMA_OperatingMode(CAN_RX_0_DMA_CHANNEL, OPERATING_MODE_CONTINIOUS);                      // Continious Mode (as apposed to one shot)
0x45C2	0xEF2016  	CLR	W11
0x45C4	0x20002A  	MOV	#2, W10
0x45C6	0x07F6C2  	RCALL	_dsPIC33_DMA_OperatingMode
;MCU_Setup_dsPIC33EP64GP502.mpas,106 :: 		dsPIC33_DMA_TransferCount(CAN_RX_0_DMA_CHANNEL, 8);                                              // Transfers 8 Words (0 counts as 1)
0x45C8	0x20008B  	MOV	#8, W11
0x45CA	0x20002A  	MOV	#2, W10
0x45CC	0x07F6B8  	RCALL	_dsPIC33_DMA_TransferCount
;MCU_Setup_dsPIC33EP64GP502.mpas,107 :: 		dsPIC33_DMA_ManualDMATransfer(CAN_RX_0_DMA_CHANNEL, False);                                      // Automatic DMA Transfers
0x45CE	0xEF2016  	CLR	W11
0x45D0	0x20002A  	MOV	#2, W10
0x45D2	0x07F6CC  	RCALL	_dsPIC33_DMA_ManualDMATransfer
;MCU_Setup_dsPIC33EP64GP502.mpas,108 :: 		dsPIC33_DMA_PeripheralAddress(CAN_RX_0_DMA_CHANNEL, @C1RXD);                                     // Assign the DMA Channel to the Receive Register of the CAN module
0x45D4	0x20440B  	MOV	#lo_addr(C1RXD), W11
0x45D6	0x20002A  	MOV	#2, W10
0x45D8	0x07F6C3  	RCALL	_dsPIC33_DMA_PeripheralAddress
;MCU_Setup_dsPIC33EP64GP502.mpas,109 :: 		dsPIC33_DMA_InterruptSelect(CAN_RX_0_DMA_CHANNEL, IRQ_ECAN1_RX_DATA_READY);                      // Assign the DMA Channel to the ECAN 1 RX to Trigger the Transfer
0x45DA	0x20022B  	MOV	#34, W11
0x45DC	0x20002A  	MOV	#2, W10
0x45DE	0x07F722  	RCALL	_dsPIC33_DMA_InterruptSelect
;MCU_Setup_dsPIC33EP64GP502.mpas,110 :: 		dsPIC33_DMA_AddressOffsetA(CAN_RX_0_DMA_CHANNEL, @RX_Main_RawBufferArray[0]);                    // Point the Receive Buffer Offset into the CAN Layer Buffer
0x45E0	0x21020B  	MOV	#lo_addr(_RX_Main_RawBufferArray), W11
0x45E2	0x20002A  	MOV	#2, W10
0x45E4	0x07F719  	RCALL	_dsPIC33_DMA_AddressOffsetA
;MCU_Setup_dsPIC33EP64GP502.mpas,111 :: 		dsPIC33_DMA_Enable(CAN_RX_0_DMA_CHANNEL, True);                                                  // Enable DMA Channel 2
0x45E6	0x2FFFFB  	MOV	#65535, W11
0x45E8	0x20002A  	MOV	#2, W10
0x45EA	0x07F6D4  	RCALL	_dsPIC33_DMA_Enable
;MCU_Setup_dsPIC33EP64GP502.mpas,129 :: 		dsPIC33_CAN_InterruptFlagRXBufferOverflow(True);                              // Clear the flag
0x45EC	0x2FFFFA  	MOV	#65535, W10
0x45EE	0x07FF3F  	RCALL	_dsPIC33_CAN_InterruptFlagRXBufferOverflow
;MCU_Setup_dsPIC33EP64GP502.mpas,130 :: 		dsPIC33_CAN_InterruptFlagRXBuffer(True);                                      // RX Interrupt Flag Reset
0x45F0	0x2FFFFA  	MOV	#65535, W10
0x45F2	0x07FF30  	RCALL	_dsPIC33_CAN_InterruptFlagRXBuffer
;MCU_Setup_dsPIC33EP64GP502.mpas,131 :: 		dsPIC33_CAN_InterruptFlagTXBuffer(True);                                      // TX Interrupt Flag Reset
0x45F4	0x2FFFFA  	MOV	#65535, W10
0x45F6	0x07006F  	RCALL	_dsPIC33_CAN_InterruptFlagTXBuffer
;MCU_Setup_dsPIC33EP64GP502.mpas,132 :: 		dsPIC33_CAN_RXBufferOverflowInterrupt(True);                                  // If we don't enable this and an interrupt occurs then it hangs the loop because you can't clear the Rx Interrupt until this is serviced
0x45F8	0x2FFFFA  	MOV	#65535, W10
0x45FA	0x07F725  	RCALL	_dsPIC33_CAN_RXBufferOverflowInterrupt
;MCU_Setup_dsPIC33EP64GP502.mpas,133 :: 		dsPIC33_CAN_TXBufferInterrupt(True);                                          // Enable the TX Done Event Interrupt
0x45FC	0x2FFFFA  	MOV	#65535, W10
0x45FE	0x07F71C  	RCALL	_dsPIC33_CAN_TXBufferInterrupt
;MCU_Setup_dsPIC33EP64GP502.mpas,134 :: 		dsPIC33_CAN_RXBufferInterrupt(True);                                          // Enable the RX Done Event Interrupt
0x4600	0x2FFFFA  	MOV	#65535, W10
0x4602	0x07F6F4  	RCALL	_dsPIC33_CAN_RXBufferInterrupt
;MCU_Setup_dsPIC33EP64GP502.mpas,136 :: 		dsPIC33_CAN_GlobalInterruptCAN_EventPriority(6);                              // CAN Event Interrupt has a priority of 6 out of 7
0x4604	0x20006A  	MOV	#6, W10
0x4606	0x07F6E5  	RCALL	_dsPIC33_CAN_GlobalInterruptCAN_EventPriority
;MCU_Setup_dsPIC33EP64GP502.mpas,137 :: 		dsPIC33_CAN_GlobalInterruptCAN_Event(True);                                   // Enable the CAN Event Interrupt
0x4608	0x2FFFFA  	MOV	#65535, W10
0x460A	0x07F700  	RCALL	_dsPIC33_CAN_GlobalInterruptCAN_Event
;MCU_Setup_dsPIC33EP64GP502.mpas,139 :: 		Unlock_IOLOCK;
0x460C	0x07F6F6  	RCALL	_Unlock_IOLOCK
;MCU_Setup_dsPIC33EP64GP502.mpas,141 :: 		PPS_Mapping_NoLock(44, _INPUT, _U1RX);                                        // Set RPI44 to the UART Receive
0x460E	0xB3C0EC  	MOV.B	#14, W12
0x4610	0xB3C01B  	MOV.B	#1, W11
0x4612	0xB3C2CA  	MOV.B	#44, W10
0x4614	0x07FB66  	RCALL	_PPS_Mapping_NoLock
;MCU_Setup_dsPIC33EP64GP502.mpas,142 :: 		PPS_Mapping_NoLock(42, _OUTPUT, _U1TX);                                       // Set RP42 to the UART Transmit
0x4616	0xB3C01C  	MOV.B	#1, W12
0x4618	0xEF2016  	CLR	W11
0x461A	0xB3C2AA  	MOV.B	#42, W10
0x461C	0x07FB62  	RCALL	_PPS_Mapping_NoLock
;MCU_Setup_dsPIC33EP64GP502.mpas,144 :: 		PPS_Mapping_NoLock(45, _INPUT, _C1RX);                                        // Set RPI45 to the CAN Receive
0x461E	0xB3C13C  	MOV.B	#19, W12
0x4620	0xB3C01B  	MOV.B	#1, W11
0x4622	0xB3C2DA  	MOV.B	#45, W10
0x4624	0x07FB5E  	RCALL	_PPS_Mapping_NoLock
;MCU_Setup_dsPIC33EP64GP502.mpas,145 :: 		PPS_Mapping_NoLock(43, _OUTPUT, _C1TX);                                       // Set RP43 to the CAN Transmit
0x4626	0xB3C0EC  	MOV.B	#14, W12
0x4628	0xEF2016  	CLR	W11
0x462A	0xB3C2BA  	MOV.B	#43, W10
0x462C	0x07FB5A  	RCALL	_PPS_Mapping_NoLock
;MCU_Setup_dsPIC33EP64GP502.mpas,146 :: 		Lock_IOLOCK;
0x462E	0x07DF02  	RCALL	_Lock_IOLOCK
;MCU_Setup_dsPIC33EP64GP502.mpas,152 :: 		UART1_Init(230400);                       // Initialize UART module a
0x4630	0x28400A  	MOV	#33792, W10
0x4632	0x20003B  	MOV	#3, W11
0x4634	0x07FB5F  	RCALL	_UART1_Init
;MCU_Setup_dsPIC33EP64GP502.mpas,153 :: 		Delay_ms(100);                            // Wait for UART module to stabilize
0x4636	0x2000A8  	MOV	#10, W8
0x4638	0x2C4057  	MOV	#50181, W7
L__MCU_Setup_Initialize13:
0x463A	0xED200E  	DEC	W7
0x463C	0x3AFFFE  	BRA NZ	L__MCU_Setup_Initialize13
0x463E	0xED2010  	DEC	W8
0x4640	0x3AFFFC  	BRA NZ	L__MCU_Setup_Initialize13
0x4642	0x000000  	NOP
;MCU_Setup_dsPIC33EP64GP502.mpas,156 :: 		SPI1_Init();       // Initialize SPI1 module
0x4644	0x07FC1D  	RCALL	_SPI1_Init
;MCU_Setup_dsPIC33EP64GP502.mpas,157 :: 		SPIEN_bit := 0;    // Disable SPI
0x4646	0xA9E241  	BCLR	SPIEN_bit, BitPos(SPIEN_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,158 :: 		SPI1CON := SPI1CON and $FFE0;  // Clear the prescaler bits
0x4648	0x2FFE01  	MOV	#65504, W1
0x464A	0x202420  	MOV	#lo_addr(SPI1CON), W0
0x464C	0x608810  	AND	W1, [W0], [W0]
;MCU_Setup_dsPIC33EP64GP502.mpas,159 :: 		SPI1CON := SPI1CON or $0003 or $0018;  // Setup for 5 Mhz (with the CAN plug in boards)     $10=5Mhz, $14=6.67Mhz, $18 = 10Mhz
0x464E	0xBF8242  	MOV	SPI1CON, WREG
0x4650	0x7000E3  	IOR	W0, #3, W1
0x4652	0x202420  	MOV	#lo_addr(SPI1CON), W0
0x4654	0x708878  	IOR	W1, #24, [W0]
;MCU_Setup_dsPIC33EP64GP502.mpas,160 :: 		SPIEN_bit := 1;    // Enable the SPI
0x4656	0xA8E241  	BSET	SPIEN_bit, BitPos(SPIEN_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,162 :: 		TCS_T2CON_bit := 0;       // internal cycle clock
0x4658	0xA92110  	BCLR	TCS_T2CON_bit, BitPos(TCS_T2CON_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,163 :: 		T2IP_0_bit := 0;          // Timer 2 Interrupt Priority = 2   (1 means off)
0x465A	0xA98843  	BCLR	T2IP_0_bit, BitPos(T2IP_0_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,164 :: 		T2IP_1_bit := 1;
0x465C	0xA8A843  	BSET	T2IP_1_bit, BitPos(T2IP_1_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,165 :: 		T2IP_2_bit := 0;
0x465E	0xA9C843  	BCLR	T2IP_2_bit, BitPos(T2IP_2_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,166 :: 		TCKPS_0_T2CON_bit := 1;   // 256 Prescaler
0x4660	0xA88110  	BSET	TCKPS_0_T2CON_bit, BitPos(TCKPS_0_T2CON_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,167 :: 		TCKPS_1_T2CON_bit := 1;
0x4662	0xA8A110  	BSET	TCKPS_1_T2CON_bit, BitPos(TCKPS_1_T2CON_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,168 :: 		PR2 := 12500;             // Clock ticks every 31.25ns * 256 * 12500 = 100ms interrupts
0x4664	0x230D40  	MOV	#12500, W0
0x4666	0xB7A10C  	MOV	WREG, PR2
;MCU_Setup_dsPIC33EP64GP502.mpas,169 :: 		T2IF_bit := 0;            // Clear T2IF
0x4668	0xA9E800  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,170 :: 		T2IE_bit := 1;            // Enable the Interrupt
0x466A	0xA8E820  	BSET	T2IE_bit, BitPos(T2IE_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,171 :: 		TON_T2CON_bit := 1;       // Turn on
0x466C	0xA8E111  	BSET	TON_T2CON_bit, BitPos(TON_T2CON_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,174 :: 		TCS_T1CON_bit := 0;       // internal cycle clock
0x466E	0xA92104  	BCLR	TCS_T1CON_bit, BitPos(TCS_T1CON_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,175 :: 		T1IP_0_bit := 1;          // Timer 1 Interrupt Priority = 7   (1 means off)
0x4670	0xA88841  	BSET	T1IP_0_bit, BitPos(T1IP_0_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,176 :: 		T1IP_1_bit := 1;
0x4672	0xA8A841  	BSET	T1IP_1_bit, BitPos(T1IP_1_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,177 :: 		T1IP_2_bit := 1;
0x4674	0xA8C841  	BSET	T1IP_2_bit, BitPos(T1IP_2_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,178 :: 		PR1 := 1792;             // Clock ticks every 31.25ns * 1792 = 56us interrupts
0x4676	0x207000  	MOV	#1792, W0
0x4678	0xB7A102  	MOV	WREG, PR1
;MCU_Setup_dsPIC33EP64GP502.mpas,179 :: 		T1IF_bit := 0;           // Clear T1IF
0x467A	0xA96800  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,180 :: 		T1IE_bit := 1;           // Enable the Interrupt
0x467C	0xA86820  	BSET	T1IE_bit, BitPos(T1IE_bit+0)
;MCU_Setup_dsPIC33EP64GP502.mpas,183 :: 		end;
L_end_MCU_Setup_Initialize:
0x467E	0x7806CF  	POP	W13
0x4680	0x78064F  	POP	W12
0x4682	0x7805CF  	POP	W11
0x4684	0x78054F  	POP	W10
0x4686	0x060000  	RETURN
; end of _MCU_Setup_Initialize
_dsPIC33_CAN_EnterConfigMode:
;dsPIC33_CAN.mpas,1799 :: 		begin
;dsPIC33_CAN.mpas,1800 :: 		C1CTRL1 := (C1CTRL1 and $F8FF) or $0400;                                      // Set REQOP to Config (100)
0x34FC	0x802001  	MOV	C1CTRL1, W1
0x34FE	0x2F8FF0  	MOV	#63743, W0
0x3500	0x608100  	AND	W1, W0, W2
0x3502	0x204001  	MOV	#1024, W1
0x3504	0x204000  	MOV	#lo_addr(C1CTRL1), W0
0x3506	0x710801  	IOR	W2, W1, [W0]
;dsPIC33_CAN.mpas,1801 :: 		while (C1CTRL1 and $00E0) <> $0080 do;                                        // Poll OPMODE until it equals (100)
L__dsPIC33_CAN_EnterConfigMode276:
0x3508	0x200E01  	MOV	#224, W1
0x350A	0x204000  	MOV	#lo_addr(C1CTRL1), W0
0x350C	0x608090  	AND	W1, [W0], W1
0x350E	0x200800  	MOV	#128, W0
0x3510	0xE10800  	CP	W1, W0
0x3512	0x3AFFFA  	BRA NZ	L__dsPIC33_CAN_EnterConfigMode276
L__dsPIC33_CAN_EnterConfigMode454:
;dsPIC33_CAN.mpas,1802 :: 		end;
L_end_dsPIC33_CAN_EnterConfigMode:
0x3514	0x060000  	RETURN
; end of _dsPIC33_CAN_EnterConfigMode
_dsPIC33_CAN_SetBaud:
0x3764	0xFA0000  	LNK	#0
;dsPIC33_CAN.mpas,1781 :: 		begin
;dsPIC33_CAN.mpas,1782 :: 		C1CFG1 := BRP or (SWJ shl 6);
; PRSEG start address is: 4 (W2)
0x3766	0x97B94E  	MOV	[W14-8], W2
; Sample3Times start address is: 6 (W3)
0x3768	0x97B9BE  	MOV	[W14-10], W3
0x376A	0xDD50C6  	SL	W10, #6, W1
0x376C	0x204100  	MOV	#lo_addr(C1CFG1), W0
0x376E	0x758801  	IOR	W11, W1, [W0]
;dsPIC33_CAN.mpas,1783 :: 		C1CFG2 := PRSEG or (SEG1PH shl 3) or (SEG2PH shl 8) or PROGRAMMABLE_SEG2PHTS;
0x3770	0xDD6843  	SL	W13, #3, W0
0x3772	0x710080  	IOR	W2, W0, W1
; PRSEG end address is: 4 (W2)
0x3774	0xDD6048  	SL	W12, #8, W0
0x3776	0x708100  	IOR	W1, W0, W2
0x3778	0x200801  	MOV	#128, W1
0x377A	0x204120  	MOV	#lo_addr(C1CFG2), W0
0x377C	0x710801  	IOR	W2, W1, [W0]
;dsPIC33_CAN.mpas,1784 :: 		if Sample3Times then
0x377E	0xE20006  	CP0	W3
0x3780	0x320003  	BRA Z	L__dsPIC33_CAN_SetBaud272
L__dsPIC33_CAN_SetBaud452:
; Sample3Times end address is: 6 (W3)
;dsPIC33_CAN.mpas,1785 :: 		C1CFG2 := C1CFG2 or SAMPLE_3_TIMES
0x3782	0x200401  	MOV	#64, W1
0x3784	0x204120  	MOV	#lo_addr(C1CFG2), W0
0x3786	0x708810  	IOR	W1, [W0], [W0]
L__dsPIC33_CAN_SetBaud272:
;dsPIC33_CAN.mpas,1786 :: 		end;
L_end_dsPIC33_CAN_SetBaud:
0x3788	0xFA8000  	ULNK
0x378A	0x060000  	RETURN
; end of _dsPIC33_CAN_SetBaud
_dsPIC33_CAN_SetMask:
0x3722	0xFA0004  	LNK	#4
;dsPIC33_CAN.mpas,1737 :: 		begin
;dsPIC33_CAN.mpas,1738 :: 		if MaskNumber < 3 then
0x3724	0x781F8A  	PUSH	W10
0x3726	0x781F8B  	PUSH	W11
0x3728	0x781F8C  	PUSH	W12
0x372A	0x781F8D  	PUSH	W13
0x372C	0x98070B  	MOV	W11, [W14+0]
0x372E	0x98071C  	MOV	W12, [W14+2]
0x3730	0xE15463  	CP.B	W10, #3
0x3732	0x310012  	BRA GEU	L__dsPIC33_CAN_SetMask267
L__dsPIC33_CAN_SetMask449:
;dsPIC33_CAN.mpas,1740 :: 		SetWindowSelectBit;
0x3734	0x07EE27  	RCALL	dsPIC33_CAN_SetWindowSelectBit
;dsPIC33_CAN.mpas,1741 :: 		SIDRegPtr := @C1RXM0SID + (MaskNumber * 2);    // Increases by Word not bytes so 2 not 4
0x3736	0xFB800A  	ZE	W10, W0
0x3738	0xDD0041  	SL	W0, #1, W0
0x373A	0xDD00C1  	SL	W0, #1, W1
0x373C	0x204300  	MOV	#lo_addr(C1RXM0SID), W0
; SIDRegPtr start address is: 8 (W4)
0x373E	0x400201  	ADD	W0, W1, W4
;dsPIC33_CAN.mpas,1742 :: 		EIDRegPtr := @C1RXM0EID + (MaskNumber * 2);   // Increases by Word not bytes so 2 not 4
0x3740	0x204320  	MOV	#lo_addr(C1RXM0EID), W0
; EIDRegPtr start address is: 10 (W5)
0x3742	0x400281  	ADD	W0, W1, W5
;dsPIC33_CAN.mpas,1744 :: 		ValidateCAN_ID(Mask);
0x3744	0x470060  	ADD	W14, #0, W0
0x3746	0x780500  	MOV	W0, W10
0x3748	0x07EEC1  	RCALL	dsPIC33_CAN_ValidateCAN_ID
;dsPIC33_CAN.mpas,1745 :: 		SetFilterMaskBits(SIDRegPtr, EIDRegPtr, Mask, ExtendedOnly);
0x374A	0x781F8D  	PUSH	W13
0x374C	0x780585  	MOV	W5, W11
0x374E	0x780504  	MOV	W4, W10
; EIDRegPtr end address is: 10 (W5)
; SIDRegPtr end address is: 8 (W4)
0x3750	0x90060E  	MOV	[W14+0], W12
0x3752	0x90069E  	MOV	[W14+2], W13
0x3754	0x07EF04  	RCALL	dsPIC33_CAN_SetFilterMaskBits
0x3756	0xB1002F  	SUB	#2, W15
;dsPIC33_CAN.mpas,1746 :: 		end
L__dsPIC33_CAN_SetMask267:
;dsPIC33_CAN.mpas,1747 :: 		end;
L_end_dsPIC33_CAN_SetMask:
0x3758	0x7806CF  	POP	W13
0x375A	0x78064F  	POP	W12
0x375C	0x7805CF  	POP	W11
0x375E	0x78054F  	POP	W10
0x3760	0xFA8000  	ULNK
0x3762	0x060000  	RETURN
; end of _dsPIC33_CAN_SetMask
dsPIC33_CAN_SetWindowSelectBit:
;dsPIC33_CAN.mpas,655 :: 		begin
;dsPIC33_CAN.mpas,656 :: 		WIN_bit := 1;
0x1384	0xA80400  	BSET	WIN_bit, BitPos(WIN_bit+0)
;dsPIC33_CAN.mpas,657 :: 		end;
L_end_SetWindowSelectBit:
0x1386	0x060000  	RETURN
; end of dsPIC33_CAN_SetWindowSelectBit
dsPIC33_CAN_ValidateCAN_ID:
;dsPIC33_CAN.mpas,709 :: 		begin
;dsPIC33_CAN.mpas,710 :: 		ID := ID and $1FFFFFFF;
0x14CC	0xBE011A  	MOV.D	[W10], W2
0x14CE	0x2FFFF0  	MOV	#65535, W0
0x14D0	0x21FFF1  	MOV	#8191, W1
0x14D2	0x611D00  	AND	W2, W0, [W10++]
0x14D4	0x619501  	AND	W3, W1, [W10--]
;dsPIC33_CAN.mpas,711 :: 		end;
L_end_ValidateCAN_ID:
0x14D6	0x060000  	RETURN
; end of dsPIC33_CAN_ValidateCAN_ID
dsPIC33_CAN_SetFilterMaskBits:
0x155E	0xFA0000  	LNK	#0
;dsPIC33_CAN.mpas,690 :: 		begin
;dsPIC33_CAN.mpas,691 :: 		RegPtrEID^ := Filter;                                               // Setup SID and EID 0..4
; ExtendedOnly start address is: 8 (W4)
0x1560	0x97BA4E  	MOV	[W14-8], W4
0x1562	0x780D8C  	MOV	W12, [W11]
;dsPIC33_CAN.mpas,692 :: 		RegPtrSID^ := DWord(Filter shr 16) and $0003;                       // Setup EID 5..6 and clear the upper 14 bits
0x1564	0xBE000C  	MOV.D	W12, W0
0x1566	0x780001  	MOV	W1, W0
0x1568	0xEB0080  	CLR	W1
0x156A	0x600063  	AND	W0, #3, W0
0x156C	0x780D00  	MOV	W0, [W10]
;dsPIC33_CAN.mpas,693 :: 		RegPtrSID^ := RegPtrSID^ or (DWord(Filter shr 13) and $FFE0);       // Set up EID 7..17
0x156E	0x2000D0  	MOV	#13, W0
0x1570	0xBE010C  	MOV.D	W12, W2
L_dsPIC33_CAN_SetFilterMaskBits332:
0x1572	0xE90000  	DEC	W0, W0
0x1574	0x350003  	BRA LT	L_dsPIC33_CAN_SetFilterMaskBits333
0x1576	0xD10183  	LSR	W3, W3
0x1578	0xD38102  	RRC	W2, W2
0x157A	0x37FFFB  	BRA	L_dsPIC33_CAN_SetFilterMaskBits332
L_dsPIC33_CAN_SetFilterMaskBits333:
0x157C	0x2FFE00  	MOV	#65504, W0
0x157E	0x200001  	MOV	#0, W1
0x1580	0x610000  	AND	W2, W0, W0
0x1582	0x618081  	AND	W3, W1, W1
0x1584	0x70001A  	IOR	W0, [W10], W0
0x1586	0x780D00  	MOV	W0, [W10]
;dsPIC33_CAN.mpas,694 :: 		if ExtendedOnly then
0x1588	0xE20008  	CP0	W4
0x158A	0x320003  	BRA Z	L_dsPIC33_CAN_SetFilterMaskBits99
L_dsPIC33_CAN_SetFilterMaskBits334:
; ExtendedOnly end address is: 8 (W4)
;dsPIC33_CAN.mpas,695 :: 		RegPtrSID^ := RegPtrSID^ or $0008;
0x158C	0x78001A  	MOV	[W10], W0
0x158E	0x700068  	IOR	W0, #8, W0
0x1590	0x780D00  	MOV	W0, [W10]
L_dsPIC33_CAN_SetFilterMaskBits99:
;dsPIC33_CAN.mpas,696 :: 		end;
L_end_SetFilterMaskBits:
0x1592	0xFA8000  	ULNK
0x1594	0x060000  	RETURN
; end of dsPIC33_CAN_SetFilterMaskBits
_dsPIC33_CAN_SetFilter:
0x37DA	0xFA0004  	LNK	#4
;dsPIC33_CAN.mpas,1711 :: 		begin
;dsPIC33_CAN.mpas,1712 :: 		if FilterNumber < 16 then
0x37DC	0x781F8A  	PUSH	W10
0x37DE	0x781F8B  	PUSH	W11
0x37E0	0x781F8C  	PUSH	W12
0x37E2	0x781F8D  	PUSH	W13
0x37E4	0x98070B  	MOV	W11, [W14+0]
0x37E6	0x98071C  	MOV	W12, [W14+2]
0x37E8	0xE15470  	CP.B	W10, #16
0x37EA	0x310012  	BRA GEU	L__dsPIC33_CAN_SetFilter263
L__dsPIC33_CAN_SetFilter447:
;dsPIC33_CAN.mpas,1714 :: 		SetWindowSelectBit;
0x37EC	0x07EDCB  	RCALL	dsPIC33_CAN_SetWindowSelectBit
;dsPIC33_CAN.mpas,1715 :: 		SIDRegPtr := @C1RXF0SID + (FilterNumber * 2);   // Increases by Word not bytes so 2 not 4
0x37EE	0xFB800A  	ZE	W10, W0
0x37F0	0xDD0041  	SL	W0, #1, W0
0x37F2	0xDD00C1  	SL	W0, #1, W1
0x37F4	0x204400  	MOV	#lo_addr(C1RXF0SID), W0
; SIDRegPtr start address is: 8 (W4)
0x37F6	0x400201  	ADD	W0, W1, W4
;dsPIC33_CAN.mpas,1716 :: 		EIDRegPtr := @C1RXF0EID + (FilterNumber * 2);   // Increases by Word not bytes so 2 not 4
0x37F8	0x204420  	MOV	#lo_addr(C1RXF0EID), W0
; EIDRegPtr start address is: 10 (W5)
0x37FA	0x400281  	ADD	W0, W1, W5
;dsPIC33_CAN.mpas,1718 :: 		ValidateCAN_ID(Filter);
0x37FC	0x470060  	ADD	W14, #0, W0
0x37FE	0x780500  	MOV	W0, W10
0x3800	0x07EE65  	RCALL	dsPIC33_CAN_ValidateCAN_ID
;dsPIC33_CAN.mpas,1719 :: 		SetFilterMaskBits(SIDRegPtr, EIDRegPtr, Filter, ExtendedOnly);
0x3802	0x781F8D  	PUSH	W13
0x3804	0x780585  	MOV	W5, W11
0x3806	0x780504  	MOV	W4, W10
; EIDRegPtr end address is: 10 (W5)
; SIDRegPtr end address is: 8 (W4)
0x3808	0x90060E  	MOV	[W14+0], W12
0x380A	0x90069E  	MOV	[W14+2], W13
0x380C	0x07EEA8  	RCALL	dsPIC33_CAN_SetFilterMaskBits
0x380E	0xB1002F  	SUB	#2, W15
;dsPIC33_CAN.mpas,1720 :: 		end
L__dsPIC33_CAN_SetFilter263:
;dsPIC33_CAN.mpas,1721 :: 		end;
L_end_dsPIC33_CAN_SetFilter:
0x3810	0x7806CF  	POP	W13
0x3812	0x78064F  	POP	W12
0x3814	0x7805CF  	POP	W11
0x3816	0x78054F  	POP	W10
0x3818	0xFA8000  	ULNK
0x381A	0x060000  	RETURN
; end of _dsPIC33_CAN_SetFilter
_dsPIC33_CAN_AssociateFilterWithMask:
;dsPIC33_CAN.mpas,1678 :: 		begin
;dsPIC33_CAN.mpas,1680 :: 		if (FilterNumber < 16) and (MaskNumber < 3) then
0x378C	0xE15070  	CP	W10, #16
0x378E	0xEF2002  	CLR	W1
0x3790	0x310001  	BRA GEU	L__dsPIC33_CAN_AssociateFilterWithMask439
0x3792	0xEEA002  	COM	W1
L__dsPIC33_CAN_AssociateFilterWithMask439:
0x3794	0xE15863  	CP	W11, #3
0x3796	0xEF2000  	CLR	W0
0x3798	0x310001  	BRA GEU	L__dsPIC33_CAN_AssociateFilterWithMask440
0x379A	0xEEA000  	COM	W0
L__dsPIC33_CAN_AssociateFilterWithMask440:
0x379C	0x608000  	AND	W1, W0, W0
0x379E	0x32001C  	BRA Z	L__dsPIC33_CAN_AssociateFilterWithMask259
L__dsPIC33_CAN_AssociateFilterWithMask441:
;dsPIC33_CAN.mpas,1682 :: 		Offset := FilterNumber * 2;
0x37A0	0xDD51C1  	SL	W10, #1, W3
;dsPIC33_CAN.mpas,1683 :: 		M := $00000003;
; M start address is: 8 (W4)
0x37A2	0x200034  	MOV	#3, W4
0x37A4	0x200005  	MOV	#0, W5
;dsPIC33_CAN.mpas,1684 :: 		M := M shl Offset;
0x37A6	0x780103  	MOV	W3, W2
0x37A8	0xBE0004  	MOV.D	W4, W0
L__dsPIC33_CAN_AssociateFilterWithMask442:
0x37AA	0xE90102  	DEC	W2, W2
0x37AC	0x350003  	BRA LT	L__dsPIC33_CAN_AssociateFilterWithMask443
0x37AE	0xD00000  	SL	W0, W0
0x37B0	0xD28081  	RLC	W1, W1
0x37B2	0x37FFFB  	BRA	L__dsPIC33_CAN_AssociateFilterWithMask442
L__dsPIC33_CAN_AssociateFilterWithMask443:
; M end address is: 8 (W4)
;dsPIC33_CAN.mpas,1685 :: 		M := not M;
; M start address is: 8 (W4)
0x37B4	0xEA8200  	COM	W0, W4
0x37B6	0xEA8281  	COM	W1, W5
;dsPIC33_CAN.mpas,1686 :: 		C1FMSKSEL1 := C1FMSKSEL1 and LoWord(M);      // Clear the bits for the Filter Association
0x37B8	0x204180  	MOV	#lo_addr(C1FMSKSEL1), W0
0x37BA	0x620810  	AND	W4, [W0], [W0]
;dsPIC33_CAN.mpas,1687 :: 		C1FMSKSEL2 := C1FMSKSEL2 and HiWord(M);
0x37BC	0x2041A0  	MOV	#lo_addr(C1FMSKSEL2), W0
0x37BE	0x628810  	AND	W5, [W0], [W0]
; M end address is: 8 (W4)
;dsPIC33_CAN.mpas,1689 :: 		M := MaskNumber;
; M start address is: 2 (W1)
0x37C0	0x78008B  	MOV	W11, W1
0x37C2	0xEB0100  	CLR	W2
;dsPIC33_CAN.mpas,1690 :: 		M := M shl Offset;
0x37C4	0x780003  	MOV	W3, W0
L__dsPIC33_CAN_AssociateFilterWithMask444:
0x37C6	0xE90000  	DEC	W0, W0
0x37C8	0x350003  	BRA LT	L__dsPIC33_CAN_AssociateFilterWithMask445
0x37CA	0xD00081  	SL	W1, W1
0x37CC	0xD28102  	RLC	W2, W2
0x37CE	0x37FFFB  	BRA	L__dsPIC33_CAN_AssociateFilterWithMask444
L__dsPIC33_CAN_AssociateFilterWithMask445:
;dsPIC33_CAN.mpas,1691 :: 		C1FMSKSEL1 := C1FMSKSEL1 or LoWord(M);
0x37D0	0x204180  	MOV	#lo_addr(C1FMSKSEL1), W0
0x37D2	0x708810  	IOR	W1, [W0], [W0]
;dsPIC33_CAN.mpas,1692 :: 		C1FMSKSEL2 := C1FMSKSEL2 or HiWord(M);
0x37D4	0x2041A0  	MOV	#lo_addr(C1FMSKSEL2), W0
0x37D6	0x710810  	IOR	W2, [W0], [W0]
; M end address is: 2 (W1)
;dsPIC33_CAN.mpas,1693 :: 		end
L__dsPIC33_CAN_AssociateFilterWithMask259:
;dsPIC33_CAN.mpas,1694 :: 		end;
L_end_dsPIC33_CAN_AssociateFilterWithMask:
0x37D8	0x060000  	RETURN
; end of _dsPIC33_CAN_AssociateFilterWithMask
_dsPIC33_CAN_EnableDisableRXFilters:
;dsPIC33_CAN.mpas,1759 :: 		begin
;dsPIC33_CAN.mpas,1760 :: 		C1FEN1 := FilterMask
0x36FC	0x8820AA  	MOV	W10, C1FEN1
;dsPIC33_CAN.mpas,1761 :: 		end;
L_end_dsPIC33_CAN_EnableDisableRXFilters:
0x36FE	0x060000  	RETURN
; end of _dsPIC33_CAN_EnableDisableRXFilters
_dsPIC33_CAN_RegisterBufferWithFilter:
;dsPIC33_CAN.mpas,1648 :: 		begin
;dsPIC33_CAN.mpas,1649 :: 		SetWindowSelectBit;
0x36DC	0x07EE53  	RCALL	dsPIC33_CAN_SetWindowSelectBit
;dsPIC33_CAN.mpas,1650 :: 		RegPtr := @C1BUFPNT1;
; RegPtr start address is: 4 (W2)
0x36DE	0x204202  	MOV	#lo_addr(C1BUFPNT1), W2
;dsPIC33_CAN.mpas,1651 :: 		Offset := (FilterNumber div 4);
0x36E0	0xDE5042  	LSR	W10, #2, W0
;dsPIC33_CAN.mpas,1652 :: 		RegPtr := RegPtr + Offset;  // Offset to the right C1BUFPNT register
0x36E2	0xDD0041  	SL	W0, #1, W0
0x36E4	0x410080  	ADD	W2, W0, W1
0x36E6	0x780101  	MOV	W1, W2
;dsPIC33_CAN.mpas,1653 :: 		Offset := (FilterNumber mod 4) * 4;                  // Find the offset into the register
0x36E8	0x650063  	AND	W10, #3, W0
0x36EA	0xDD0042  	SL	W0, #2, W0
; Offset start address is: 6 (W3)
0x36EC	0x780180  	MOV	W0, W3
;dsPIC33_CAN.mpas,1654 :: 		Mask := $000F;
; Mask start address is: 8 (W4)
0x36EE	0x2000F4  	MOV	#15, W4
;dsPIC33_CAN.mpas,1655 :: 		Mask := Mask shl Offset;
0x36F0	0xDD2000  	SL	W4, W0, W0
; Mask end address is: 8 (W4)
;dsPIC33_CAN.mpas,1656 :: 		Mask := not Mask;
0x36F2	0xEEA000  	COM	W0
;dsPIC33_CAN.mpas,1657 :: 		RegPtr^ := RegPtr^ and Mask;                    // Clear the Pointer
0x36F4	0x600891  	AND	W0, [W1], [W1]
;dsPIC33_CAN.mpas,1659 :: 		Mask := Mask shl Offset;
0x36F6	0xDD5803  	SL	W11, W3, W0
; Offset end address is: 6 (W3)
;dsPIC33_CAN.mpas,1660 :: 		RegPtr^ := RegPtr^ or Mask;
0x36F8	0x700912  	IOR	W0, [W2], [W2]
; RegPtr end address is: 4 (W2)
;dsPIC33_CAN.mpas,1661 :: 		end;
L_end_dsPIC33_CAN_RegisterBufferWithFilter:
0x36FA	0x060000  	RETURN
; end of _dsPIC33_CAN_RegisterBufferWithFilter
_dsPIC33_CAN_EnterNormalMode:
;dsPIC33_CAN.mpas,1815 :: 		begin
;dsPIC33_CAN.mpas,1816 :: 		C1CTRL1 := C1CTRL1 and $F8FF;                                                 // Set REQOP to Normal (000)
0x3710	0x2F8FF1  	MOV	#63743, W1
0x3712	0x204000  	MOV	#lo_addr(C1CTRL1), W0
0x3714	0x608810  	AND	W1, [W0], [W0]
;dsPIC33_CAN.mpas,1817 :: 		while (C1CTRL1 and $00E0) <> $0000 do;                                        // Poll OPMODE until it equals (000)
L__dsPIC33_CAN_EnterNormalMode282:
0x3716	0x200E01  	MOV	#224, W1
0x3718	0x204000  	MOV	#lo_addr(C1CTRL1), W0
0x371A	0x608010  	AND	W1, [W0], W0
0x371C	0xE10060  	CP	W0, #0
0x371E	0x3AFFFB  	BRA NZ	L__dsPIC33_CAN_EnterNormalMode282
L__dsPIC33_CAN_EnterNormalMode456:
;dsPIC33_CAN.mpas,1818 :: 		end;
L_end_dsPIC33_CAN_EnterNormalMode:
0x3720	0x060000  	RETURN
; end of _dsPIC33_CAN_EnterNormalMode
_dsPIC33_CAN_SetBufferAsTransmitter:
;dsPIC33_CAN.mpas,896 :: 		begin
;dsPIC33_CAN.mpas,897 :: 		ManipulateTXBit(BufferNumber, TX_ENABLE_BIT, DoSet);
0x3700	0x781F8B  	PUSH	W11
0x3702	0x781F8C  	PUSH	W12
0x3704	0x78060B  	MOV	W11, W12
0x3706	0xB3C07B  	MOV.B	#7, W11
0x3708	0x07EECD  	RCALL	dsPIC33_CAN_ManipulateTXBit
;dsPIC33_CAN.mpas,898 :: 		end;
L_end_dsPIC33_CAN_SetBufferAsTransmitter:
0x370A	0x78064F  	POP	W12
0x370C	0x7805CF  	POP	W11
0x370E	0x060000  	RETURN
; end of _dsPIC33_CAN_SetBufferAsTransmitter
dsPIC33_CAN_ManipulateTXBit:
;dsPIC33_CAN.mpas,732 :: 		begin
;dsPIC33_CAN.mpas,733 :: 		ClearWindowSelectBit;
0x14A4	0x070FD7  	RCALL	dsPIC33_CAN_ClearWindowSelectBit
;dsPIC33_CAN.mpas,734 :: 		RegPtr := @C1TR01CON;
; RegPtr start address is: 2 (W1)
0x14A6	0x204301  	MOV	#lo_addr(C1TR01CON), W1
;dsPIC33_CAN.mpas,735 :: 		Offset := BufferNumber div 2;       // Is it C1TRO1CON, C1TR23CON, C1TR34CON or C1TR67CON?
0x14A8	0xDE5041  	LSR	W10, #1, W0
;dsPIC33_CAN.mpas,736 :: 		RegPtr := RegPtr + Offset;          // Get to the right Register
0x14AA	0xDD0041  	SL	W0, #1, W0
; RegPtr start address is: 4 (W2)
0x14AC	0x408100  	ADD	W1, W0, W2
; RegPtr end address is: 2 (W1)
;dsPIC33_CAN.mpas,737 :: 		Offset := BufferNumber mod 2;       // Is it the first Byte (0,2,4,5) or Second (1,3,5,7) Byte?
0x14AE	0x650061  	AND	W10, #1, W0
;dsPIC33_CAN.mpas,738 :: 		Offset := (Offset * 8) + BitIndex;
0x14B0	0xDD00C3  	SL	W0, #3, W1
0x14B2	0xFB800B  	ZE	W11, W0
; Offset start address is: 2 (W1)
0x14B4	0x408080  	ADD	W1, W0, W1
;dsPIC33_CAN.mpas,739 :: 		if DoSet then
0x14B6	0xE20018  	CP0	W12
0x14B8	0x320004  	BRA Z	L_dsPIC33_CAN_ManipulateTXBit104
L_dsPIC33_CAN_ManipulateTXBit337:
;dsPIC33_CAN.mpas,740 :: 		RegPtr^.Offset := 1
0x14BA	0x200010  	MOV	#1, W0
0x14BC	0xDD0001  	SL	W0, W1, W0
; Offset end address is: 2 (W1)
0x14BE	0x700912  	IOR	W0, [W2], [W2]
; RegPtr end address is: 4 (W2)
0x14C0	0x370004  	BRA	L_dsPIC33_CAN_ManipulateTXBit105
;dsPIC33_CAN.mpas,741 :: 		else
L_dsPIC33_CAN_ManipulateTXBit104:
;dsPIC33_CAN.mpas,742 :: 		RegPtr^.Offset := 0;
; Offset start address is: 2 (W1)
; RegPtr start address is: 4 (W2)
0x14C2	0x200010  	MOV	#1, W0
0x14C4	0xDD0001  	SL	W0, W1, W0
; Offset end address is: 2 (W1)
0x14C6	0xEEA000  	COM	W0
0x14C8	0x600912  	AND	W0, [W2], [W2]
; RegPtr end address is: 4 (W2)
L_dsPIC33_CAN_ManipulateTXBit105:
;dsPIC33_CAN.mpas,743 :: 		end;
L_end_ManipulateTXBit:
0x14CA	0x060000  	RETURN
; end of dsPIC33_CAN_ManipulateTXBit
dsPIC33_CAN_ClearWindowSelectBit:
;dsPIC33_CAN.mpas,669 :: 		begin
;dsPIC33_CAN.mpas,670 :: 		WIN_bit := 0;
0x3454	0xA90400  	BCLR	WIN_bit, BitPos(WIN_bit+0)
;dsPIC33_CAN.mpas,671 :: 		end;
L_end_ClearWindowSelectBit:
0x3456	0x060000  	RETURN
; end of dsPIC33_CAN_ClearWindowSelectBit
_dsPIC33_DMA_Enable:
;dsPIC33_DMA.mpas,159 :: 		begin
;dsPIC33_DMA.mpas,160 :: 		RegPtr := MapToChannelReg(ChannelNumber, @DMA0CON);
0x3394	0x781F8B  	PUSH	W11
0x3396	0x20B00B  	MOV	#lo_addr(DMA0CON), W11
0x3398	0x07F17E  	RCALL	dsPIC33_DMA_MapToChannelReg
0x339A	0x7805CF  	POP	W11
; RegPtr start address is: 0 (W0)
;dsPIC33_DMA.mpas,161 :: 		if Enable then
0x339C	0xE20016  	CP0	W11
0x339E	0x320002  	BRA Z	L__dsPIC33_DMA_Enable3
L__dsPIC33_DMA_Enable45:
;dsPIC33_DMA.mpas,162 :: 		RegPtr^.CHEN := 1
0x33A0	0xA0F010  	BSET	[W0], #15
; RegPtr end address is: 0 (W0)
0x33A2	0x370001  	BRA	L__dsPIC33_DMA_Enable4
;dsPIC33_DMA.mpas,163 :: 		else
L__dsPIC33_DMA_Enable3:
;dsPIC33_DMA.mpas,164 :: 		RegPtr^.CHEN := 0
; RegPtr start address is: 0 (W0)
0x33A4	0xA1F010  	BCLR	[W0], #15
; RegPtr end address is: 0 (W0)
L__dsPIC33_DMA_Enable4:
;dsPIC33_DMA.mpas,165 :: 		end;
L_end_dsPIC33_DMA_Enable:
0x33A6	0x060000  	RETURN
; end of _dsPIC33_DMA_Enable
dsPIC33_DMA_MapToChannelReg:
;dsPIC33_DMA.mpas,141 :: 		begin
;dsPIC33_DMA.mpas,142 :: 		Result := Channel_0_Reg;
; Result start address is: 2 (W1)
0x1696	0x78008B  	MOV	W11, W1
;dsPIC33_DMA.mpas,143 :: 		Result := Result + (DMA_CHANNEL_STRUCTURE_SIZE * ChannelNumber);    // Compiler known the operand is a word so the Size is the number of words to increment
0x1698	0xDD5043  	SL	W10, #3, W0
0x169A	0xDD0041  	SL	W0, #1, W0
0x169C	0x408080  	ADD	W1, W0, W1
;dsPIC33_DMA.mpas,144 :: 		end;
0x169E	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_MapToChannelReg:
0x16A0	0x060000  	RETURN
; end of dsPIC33_DMA_MapToChannelReg
_dsPIC33_DMA_DataSize:
;dsPIC33_DMA.mpas,180 :: 		begin
;dsPIC33_DMA.mpas,181 :: 		RegPtr := MapToChannelReg(ChannelNumber, @DMA0CON);
0x3380	0x781F8B  	PUSH	W11
0x3382	0x20B00B  	MOV	#lo_addr(DMA0CON), W11
0x3384	0x07F188  	RCALL	dsPIC33_DMA_MapToChannelReg
0x3386	0x7805CF  	POP	W11
; RegPtr start address is: 0 (W0)
;dsPIC33_DMA.mpas,182 :: 		if _Size = DATASIZE_BYTE then
0x3388	0xE15860  	CP	W11, #0
0x338A	0x3A0002  	BRA NZ	L__dsPIC33_DMA_DataSize7
L__dsPIC33_DMA_DataSize47:
;dsPIC33_DMA.mpas,183 :: 		RegPtr^.SIZE := 1
0x338C	0xA0E010  	BSET	[W0], #14
; RegPtr end address is: 0 (W0)
0x338E	0x370001  	BRA	L__dsPIC33_DMA_DataSize8
;dsPIC33_DMA.mpas,184 :: 		else
L__dsPIC33_DMA_DataSize7:
;dsPIC33_DMA.mpas,185 :: 		RegPtr^.SIZE := 0
; RegPtr start address is: 0 (W0)
0x3390	0xA1E010  	BCLR	[W0], #14
; RegPtr end address is: 0 (W0)
L__dsPIC33_DMA_DataSize8:
;dsPIC33_DMA.mpas,186 :: 		end;
L_end_dsPIC33_DMA_DataSize:
0x3392	0x060000  	RETURN
; end of _dsPIC33_DMA_DataSize
_dsPIC33_DMA_Direction:
;dsPIC33_DMA.mpas,202 :: 		begin
;dsPIC33_DMA.mpas,203 :: 		RegPtr := MapToChannelReg(ChannelNumber, @DMA0CON);
0x33BE	0x781F8B  	PUSH	W11
0x33C0	0x20B00B  	MOV	#lo_addr(DMA0CON), W11
0x33C2	0x07F169  	RCALL	dsPIC33_DMA_MapToChannelReg
0x33C4	0x7805CF  	POP	W11
; RegPtr start address is: 0 (W0)
;dsPIC33_DMA.mpas,204 :: 		if Direction = DIRECTION_RAM_TO_PERIPHERAL then
0x33C6	0xE15860  	CP	W11, #0
0x33C8	0x3A0002  	BRA NZ	L__dsPIC33_DMA_Direction11
L__dsPIC33_DMA_Direction49:
;dsPIC33_DMA.mpas,205 :: 		RegPtr^.DIR_ := 1
0x33CA	0xA0D010  	BSET	[W0], #13
; RegPtr end address is: 0 (W0)
0x33CC	0x370001  	BRA	L__dsPIC33_DMA_Direction12
;dsPIC33_DMA.mpas,206 :: 		else
L__dsPIC33_DMA_Direction11:
;dsPIC33_DMA.mpas,207 :: 		RegPtr^.DIR_ := 0
; RegPtr start address is: 0 (W0)
0x33CE	0xA1D010  	BCLR	[W0], #13
; RegPtr end address is: 0 (W0)
L__dsPIC33_DMA_Direction12:
;dsPIC33_DMA.mpas,208 :: 		end;
L_end_dsPIC33_DMA_Direction:
0x33D0	0x060000  	RETURN
; end of _dsPIC33_DMA_Direction
_dsPIC33_DMA_AddressMode:
;dsPIC33_DMA.mpas,269 :: 		begin
;dsPIC33_DMA.mpas,270 :: 		RegPtr := MapToChannelReg(ChannelNumber, @DMA0CON);
0x33A8	0x781F8B  	PUSH	W11
0x33AA	0x20B00B  	MOV	#lo_addr(DMA0CON), W11
0x33AC	0x07F174  	RCALL	dsPIC33_DMA_MapToChannelReg
0x33AE	0x7805CF  	POP	W11
; RegPtr start address is: 6 (W3)
0x33B0	0x780180  	MOV	W0, W3
;dsPIC33_DMA.mpas,271 :: 		RegPtr^ := RegPtr^ and $FFCF;                                                 // Clear the Address Mode Bits
0x33B2	0x780110  	MOV	[W0], W2
0x33B4	0x2FFCF1  	MOV	#65487, W1
0x33B6	0x610801  	AND	W2, W1, [W0]
;dsPIC33_DMA.mpas,272 :: 		RegPtr^ := RegPtr^ or (Mode shl 4);
0x33B8	0xDD5844  	SL	W11, #4, W0
0x33BA	0x700993  	IOR	W0, [W3], [W3]
; RegPtr end address is: 6 (W3)
;dsPIC33_DMA.mpas,273 :: 		end;
L_end_dsPIC33_DMA_AddressMode:
0x33BC	0x060000  	RETURN
; end of _dsPIC33_DMA_AddressMode
_dsPIC33_DMA_OperatingMode:
;dsPIC33_DMA.mpas,288 :: 		begin
;dsPIC33_DMA.mpas,289 :: 		RegPtr := MapToChannelReg(ChannelNumber, @DMA0CON);
0x334C	0x781F8B  	PUSH	W11
0x334E	0x20B00B  	MOV	#lo_addr(DMA0CON), W11
0x3350	0x07F1A2  	RCALL	dsPIC33_DMA_MapToChannelReg
0x3352	0x7805CF  	POP	W11
; RegPtr start address is: 6 (W3)
0x3354	0x780180  	MOV	W0, W3
;dsPIC33_DMA.mpas,290 :: 		RegPtr^ := RegPtr^ and $FFFC;                                                 // Clear the Operating Mode Bits
0x3356	0x780110  	MOV	[W0], W2
0x3358	0x2FFFC1  	MOV	#65532, W1
0x335A	0x610801  	AND	W2, W1, [W0]
;dsPIC33_DMA.mpas,291 :: 		RegPtr^ := RegPtr^ or Mode;
0x335C	0x758993  	IOR	W11, [W3], [W3]
; RegPtr end address is: 6 (W3)
;dsPIC33_DMA.mpas,292 :: 		end;
L_end_dsPIC33_DMA_OperatingMode:
0x335E	0x060000  	RETURN
; end of _dsPIC33_DMA_OperatingMode
_dsPIC33_DMA_TransferCount:
;dsPIC33_DMA.mpas,446 :: 		begin
;dsPIC33_DMA.mpas,447 :: 		RegPtr := MapToChannelReg(ChannelNumber, @DMA0CNT);
0x333E	0x781F8B  	PUSH	W11
0x3340	0x20B0EB  	MOV	#lo_addr(DMA0CNT), W11
0x3342	0x07F1A9  	RCALL	dsPIC33_DMA_MapToChannelReg
0x3344	0x7805CF  	POP	W11
;dsPIC33_DMA.mpas,448 :: 		RegPtr^ := Count - 1                                                          // 0 Counts!  An 8 Bit transfer = 7 in this register
0x3346	0x5580E1  	SUB	W11, #1, W1
0x3348	0x780801  	MOV	W1, [W0]
;dsPIC33_DMA.mpas,449 :: 		end;
L_end_dsPIC33_DMA_TransferCount:
0x334A	0x060000  	RETURN
; end of _dsPIC33_DMA_TransferCount
_dsPIC33_DMA_ManualDMATransfer:
;dsPIC33_DMA.mpas,327 :: 		begin
;dsPIC33_DMA.mpas,328 :: 		RegPtr := MapToChannelReg(ChannelNumber, @DMA0REQ);
0x336C	0x781F8B  	PUSH	W11
0x336E	0x20B02B  	MOV	#lo_addr(DMA0REQ), W11
0x3370	0x07F192  	RCALL	dsPIC33_DMA_MapToChannelReg
0x3372	0x7805CF  	POP	W11
; RegPtr start address is: 0 (W0)
;dsPIC33_DMA.mpas,329 :: 		if Manual then
0x3374	0xE20016  	CP0	W11
0x3376	0x320002  	BRA Z	L__dsPIC33_DMA_ManualDMATransfer26
L__dsPIC33_DMA_ManualDMATransfer58:
;dsPIC33_DMA.mpas,330 :: 		RegPtr^.FORCE := 1
0x3378	0xA0F010  	BSET	[W0], #15
; RegPtr end address is: 0 (W0)
0x337A	0x370001  	BRA	L__dsPIC33_DMA_ManualDMATransfer27
;dsPIC33_DMA.mpas,331 :: 		else
L__dsPIC33_DMA_ManualDMATransfer26:
;dsPIC33_DMA.mpas,332 :: 		RegPtr^.FORCE := 0
; RegPtr start address is: 0 (W0)
0x337C	0xA1F010  	BCLR	[W0], #15
; RegPtr end address is: 0 (W0)
L__dsPIC33_DMA_ManualDMATransfer27:
;dsPIC33_DMA.mpas,333 :: 		end;
L_end_dsPIC33_DMA_ManualDMATransfer:
0x337E	0x060000  	RETURN
; end of _dsPIC33_DMA_ManualDMATransfer
_dsPIC33_DMA_PeripheralAddress:
;dsPIC33_DMA.mpas,399 :: 		begin
;dsPIC33_DMA.mpas,400 :: 		RegPtr := MapToChannelReg(ChannelNumber, @DMA0PAD);
0x3360	0x781F8B  	PUSH	W11
0x3362	0x20B0CB  	MOV	#lo_addr(DMA0PAD), W11
0x3364	0x07F198  	RCALL	dsPIC33_DMA_MapToChannelReg
0x3366	0x7805CF  	POP	W11
;dsPIC33_DMA.mpas,401 :: 		RegPtr^ := Address
0x3368	0x78080B  	MOV	W11, [W0]
;dsPIC33_DMA.mpas,402 :: 		end;
L_end_dsPIC33_DMA_PeripheralAddress:
0x336A	0x060000  	RETURN
; end of _dsPIC33_DMA_PeripheralAddress
_dsPIC33_DMA_InterruptSelect:
;dsPIC33_DMA.mpas,308 :: 		begin
;dsPIC33_DMA.mpas,309 :: 		RegPtr := MapToChannelReg(ChannelNumber, @DMA0REQ);
0x3424	0x781F8B  	PUSH	W11
0x3426	0x20B02B  	MOV	#lo_addr(DMA0REQ), W11
0x3428	0x07F136  	RCALL	dsPIC33_DMA_MapToChannelReg
0x342A	0x7805CF  	POP	W11
; RegPtr start address is: 6 (W3)
0x342C	0x780180  	MOV	W0, W3
;dsPIC33_DMA.mpas,310 :: 		RegPtr^ := RegPtr^ and $FF80;                                                 // Clear the bottom 6 bits
0x342E	0x780110  	MOV	[W0], W2
0x3430	0x2FF801  	MOV	#65408, W1
0x3432	0x610801  	AND	W2, W1, [W0]
;dsPIC33_DMA.mpas,311 :: 		RegPtr^ := RegPtr^ or IRQ_Select
0x3434	0x758993  	IOR	W11, [W3], [W3]
; RegPtr end address is: 6 (W3)
;dsPIC33_DMA.mpas,312 :: 		end;
L_end_dsPIC33_DMA_InterruptSelect:
0x3436	0x060000  	RETURN
; end of _dsPIC33_DMA_InterruptSelect
_dsPIC33_DMA_AddressOffsetA:
;dsPIC33_DMA.mpas,348 :: 		begin
;dsPIC33_DMA.mpas,350 :: 		RegPtr := MapToChannelReg(ChannelNumber, @DMA0STAL);
0x3418	0x781F8B  	PUSH	W11
0x341A	0x20B04B  	MOV	#lo_addr(DMA0STAL), W11
0x341C	0x07F13C  	RCALL	dsPIC33_DMA_MapToChannelReg
0x341E	0x7805CF  	POP	W11
;dsPIC33_DMA.mpas,351 :: 		RegPtr^ := Address
0x3420	0x78080B  	MOV	W11, [W0]
;dsPIC33_DMA.mpas,357 :: 		end;
L_end_dsPIC33_DMA_AddressOffsetA:
0x3422	0x060000  	RETURN
; end of _dsPIC33_DMA_AddressOffsetA
_dsPIC33_CAN_InterruptFlagRXBufferOverflow:
;dsPIC33_CAN.mpas,1345 :: 		begin
;dsPIC33_CAN.mpas,1346 :: 		ClearWindowSelectBit;
0x446E	0x07F7F2  	RCALL	dsPIC33_CAN_ClearWindowSelectBit
;dsPIC33_CAN.mpas,1347 :: 		Result := RBOVIF_bit = 1;
0x4470	0xEF6000  	CLR.B	W0
0x4472	0xAF440A  	BTSC	RBOVIF_bit, BitPos(RBOVIF_bit+0)
0x4474	0xEC6000  	INC.B	W0
; Result start address is: 2 (W1)
0x4476	0xE10461  	CP.B	W0, #1
0x4478	0xEF2002  	CLR	W1
0x447A	0x3A0001  	BRA NZ	L__dsPIC33_CAN_InterruptFlagRXBufferOverflow399
0x447C	0xEEA002  	COM	W1
L__dsPIC33_CAN_InterruptFlagRXBufferOverflow399:
;dsPIC33_CAN.mpas,1348 :: 		if DoReset then RBOVIF_bit := 0;
0x447E	0xE20014  	CP0	W10
0x4480	0x320001  	BRA Z	L__dsPIC33_CAN_InterruptFlagRXBufferOverflow181
L__dsPIC33_CAN_InterruptFlagRXBufferOverflow400:
0x4482	0xA9440A  	BCLR	RBOVIF_bit, BitPos(RBOVIF_bit+0)
L__dsPIC33_CAN_InterruptFlagRXBufferOverflow181:
;dsPIC33_CAN.mpas,1349 :: 		end;
0x4484	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_dsPIC33_CAN_InterruptFlagRXBufferOverflow:
0x4486	0x060000  	RETURN
; end of _dsPIC33_CAN_InterruptFlagRXBufferOverflow
_dsPIC33_CAN_InterruptFlagRXBuffer:
;dsPIC33_CAN.mpas,1361 :: 		begin
;dsPIC33_CAN.mpas,1362 :: 		ClearWindowSelectBit;
0x4454	0x07F7FF  	RCALL	dsPIC33_CAN_ClearWindowSelectBit
;dsPIC33_CAN.mpas,1363 :: 		Result := RBIF_bit = 1;
0x4456	0xEF6000  	CLR.B	W0
0x4458	0xAF240A  	BTSC	RBIF_bit, BitPos(RBIF_bit+0)
0x445A	0xEC6000  	INC.B	W0
; Result start address is: 2 (W1)
0x445C	0xE10461  	CP.B	W0, #1
0x445E	0xEF2002  	CLR	W1
0x4460	0x3A0001  	BRA NZ	L__dsPIC33_CAN_InterruptFlagRXBuffer402
0x4462	0xEEA002  	COM	W1
L__dsPIC33_CAN_InterruptFlagRXBuffer402:
;dsPIC33_CAN.mpas,1364 :: 		if DoReset then
0x4464	0xE20014  	CP0	W10
0x4466	0x320001  	BRA Z	L__dsPIC33_CAN_InterruptFlagRXBuffer185
L__dsPIC33_CAN_InterruptFlagRXBuffer403:
;dsPIC33_CAN.mpas,1365 :: 		RBIF_bit := 0;
0x4468	0xA9240A  	BCLR	RBIF_bit, BitPos(RBIF_bit+0)
L__dsPIC33_CAN_InterruptFlagRXBuffer185:
;dsPIC33_CAN.mpas,1366 :: 		end;
0x446A	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_dsPIC33_CAN_InterruptFlagRXBuffer:
0x446C	0x060000  	RETURN
; end of _dsPIC33_CAN_InterruptFlagRXBuffer
_dsPIC33_CAN_InterruptFlagTXBuffer:
;dsPIC33_CAN.mpas,1378 :: 		begin
;dsPIC33_CAN.mpas,1379 :: 		ClearWindowSelectBit;
0x46D6	0x07F6BE  	RCALL	dsPIC33_CAN_ClearWindowSelectBit
;dsPIC33_CAN.mpas,1380 :: 		Result := TBIF_bit = 1;
0x46D8	0xEF6000  	CLR.B	W0
0x46DA	0xAF040A  	BTSC	TBIF_bit, BitPos(TBIF_bit+0)
0x46DC	0xEC6000  	INC.B	W0
; Result start address is: 2 (W1)
0x46DE	0xE10461  	CP.B	W0, #1
0x46E0	0xEF2002  	CLR	W1
0x46E2	0x3A0001  	BRA NZ	L__dsPIC33_CAN_InterruptFlagTXBuffer405
0x46E4	0xEEA002  	COM	W1
L__dsPIC33_CAN_InterruptFlagTXBuffer405:
;dsPIC33_CAN.mpas,1381 :: 		if DoReset then
0x46E6	0xE20014  	CP0	W10
0x46E8	0x320001  	BRA Z	L__dsPIC33_CAN_InterruptFlagTXBuffer189
L__dsPIC33_CAN_InterruptFlagTXBuffer406:
;dsPIC33_CAN.mpas,1382 :: 		TBIF_bit := 0;
0x46EA	0xA9040A  	BCLR	TBIF_bit, BitPos(TBIF_bit+0)
L__dsPIC33_CAN_InterruptFlagTXBuffer189:
;dsPIC33_CAN.mpas,1383 :: 		end;
0x46EC	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_dsPIC33_CAN_InterruptFlagTXBuffer:
0x46EE	0x060000  	RETURN
; end of _dsPIC33_CAN_InterruptFlagTXBuffer
_dsPIC33_CAN_RXBufferOverflowInterrupt:
;dsPIC33_CAN.mpas,1456 :: 		begin
;dsPIC33_CAN.mpas,1457 :: 		ClearWindowSelectBit;
0x3446	0x070006  	RCALL	dsPIC33_CAN_ClearWindowSelectBit
;dsPIC33_CAN.mpas,1458 :: 		if Enable then
0x3448	0xE20014  	CP0	W10
0x344A	0x320002  	BRA Z	L__dsPIC33_CAN_RXBufferOverflowInterrupt209
L__dsPIC33_CAN_RXBufferOverflowInterrupt416:
;dsPIC33_CAN.mpas,1459 :: 		RBOVIE_bit := 1
0x344C	0xA8440C  	BSET	RBOVIE_bit, BitPos(RBOVIE_bit+0)
0x344E	0x370001  	BRA	L__dsPIC33_CAN_RXBufferOverflowInterrupt210
;dsPIC33_CAN.mpas,1460 :: 		else
L__dsPIC33_CAN_RXBufferOverflowInterrupt209:
;dsPIC33_CAN.mpas,1461 :: 		RBOVIE_bit := 0
0x3450	0xA9440C  	BCLR	RBOVIE_bit, BitPos(RBOVIE_bit+0)
L__dsPIC33_CAN_RXBufferOverflowInterrupt210:
;dsPIC33_CAN.mpas,1462 :: 		end;
L_end_dsPIC33_CAN_RXBufferOverflowInterrupt:
0x3452	0x060000  	RETURN
; end of _dsPIC33_CAN_RXBufferOverflowInterrupt
_dsPIC33_CAN_TXBufferInterrupt:
;dsPIC33_CAN.mpas,1489 :: 		begin
;dsPIC33_CAN.mpas,1490 :: 		ClearWindowSelectBit;
0x3438	0x07000D  	RCALL	dsPIC33_CAN_ClearWindowSelectBit
;dsPIC33_CAN.mpas,1491 :: 		if Enable then TBIE_bit := 1 else TBIE_bit := 0
0x343A	0xE20014  	CP0	W10
0x343C	0x320002  	BRA Z	L__dsPIC33_CAN_TXBufferInterrupt217
L__dsPIC33_CAN_TXBufferInterrupt420:
0x343E	0xA8040C  	BSET	TBIE_bit, BitPos(TBIE_bit+0)
0x3440	0x370001  	BRA	L__dsPIC33_CAN_TXBufferInterrupt218
L__dsPIC33_CAN_TXBufferInterrupt217:
0x3442	0xA9040C  	BCLR	TBIE_bit, BitPos(TBIE_bit+0)
L__dsPIC33_CAN_TXBufferInterrupt218:
;dsPIC33_CAN.mpas,1492 :: 		end;
L_end_dsPIC33_CAN_TXBufferInterrupt:
0x3444	0x060000  	RETURN
; end of _dsPIC33_CAN_TXBufferInterrupt
_dsPIC33_CAN_RXBufferInterrupt:
;dsPIC33_CAN.mpas,1474 :: 		begin
;dsPIC33_CAN.mpas,1475 :: 		ClearWindowSelectBit;
0x33EC	0x070033  	RCALL	dsPIC33_CAN_ClearWindowSelectBit
;dsPIC33_CAN.mpas,1476 :: 		if Enable then RBIE_bit := 1 else RBIE_bit := 0
0x33EE	0xE20014  	CP0	W10
0x33F0	0x320002  	BRA Z	L__dsPIC33_CAN_RXBufferInterrupt213
L__dsPIC33_CAN_RXBufferInterrupt418:
0x33F2	0xA8240C  	BSET	RBIE_bit, BitPos(RBIE_bit+0)
0x33F4	0x370001  	BRA	L__dsPIC33_CAN_RXBufferInterrupt214
L__dsPIC33_CAN_RXBufferInterrupt213:
0x33F6	0xA9240C  	BCLR	RBIE_bit, BitPos(RBIE_bit+0)
L__dsPIC33_CAN_RXBufferInterrupt214:
;dsPIC33_CAN.mpas,1477 :: 		end;
L_end_dsPIC33_CAN_RXBufferInterrupt:
0x33F8	0x060000  	RETURN
; end of _dsPIC33_CAN_RXBufferInterrupt
_dsPIC33_CAN_GlobalInterruptCAN_EventPriority:
;dsPIC33_CAN.mpas,1117 :: 		begin
;dsPIC33_CAN.mpas,1118 :: 		C1IP_0_bit := Priority.0;
0x33D2	0xAE0014  	BTSS	W10, #0
0x33D4	0xA98851  	BCLR	C1IP_0_bit, BitPos(C1IP_0_bit+0)
0x33D6	0xAF0014  	BTSC	W10, #0
0x33D8	0xA88851  	BSET	C1IP_0_bit, BitPos(C1IP_0_bit+0)
;dsPIC33_CAN.mpas,1119 :: 		C1IP_1_bit := Priority.1;
0x33DA	0xAE2014  	BTSS	W10, #1
0x33DC	0xA9A851  	BCLR	C1IP_1_bit, BitPos(C1IP_1_bit+0)
0x33DE	0xAF2014  	BTSC	W10, #1
0x33E0	0xA8A851  	BSET	C1IP_1_bit, BitPos(C1IP_1_bit+0)
;dsPIC33_CAN.mpas,1120 :: 		C1IP_2_bit := Priority.2;
0x33E2	0xAE4014  	BTSS	W10, #2
0x33E4	0xA9C851  	BCLR	C1IP_2_bit, BitPos(C1IP_2_bit+0)
0x33E6	0xAF4014  	BTSC	W10, #2
0x33E8	0xA8C851  	BSET	C1IP_2_bit, BitPos(C1IP_2_bit+0)
;dsPIC33_CAN.mpas,1121 :: 		end;
L_end_dsPIC33_CAN_GlobalInterruptCAN_EventPriority:
0x33EA	0x060000  	RETURN
; end of _dsPIC33_CAN_GlobalInterruptCAN_EventPriority
_dsPIC33_CAN_GlobalInterruptCAN_Event:
;dsPIC33_CAN.mpas,432 :: 		begin
;dsPIC33_CAN.mpas,433 :: 		if Enable then
0x340C	0xE20014  	CP0	W10
0x340E	0x320002  	BRA Z	L__dsPIC33_CAN_GlobalInterruptCAN_Event14
L__dsPIC33_CAN_GlobalInterruptCAN_Event296:
;dsPIC33_CAN.mpas,434 :: 		C1IE_bit := 1
0x3410	0xA86824  	BSET	C1IE_bit, BitPos(C1IE_bit+0)
0x3412	0x370001  	BRA	L__dsPIC33_CAN_GlobalInterruptCAN_Event15
;dsPIC33_CAN.mpas,435 :: 		else
L__dsPIC33_CAN_GlobalInterruptCAN_Event14:
;dsPIC33_CAN.mpas,436 :: 		C1IE_bit := 0;
0x3414	0xA96824  	BCLR	C1IE_bit, BitPos(C1IE_bit+0)
L__dsPIC33_CAN_GlobalInterruptCAN_Event15:
;dsPIC33_CAN.mpas,437 :: 		end;
L_end_dsPIC33_CAN_GlobalInterruptCAN_Event:
0x3416	0x060000  	RETURN
; end of _dsPIC33_CAN_GlobalInterruptCAN_Event
_Unlock_IOLOCK:
0x33FA	0xFA0000  	LNK	#0
;__Lib_PPS_33EP64GP502.mpas,79 :: 		
;__Lib_PPS_33EP64GP502.mpas,80 :: 		
0x33FC	0x207421  	MOV	#lo_addr(OSCCON), W1
;__Lib_PPS_33EP64GP502.mpas,81 :: 		
0x33FE	0x200462  	MOV	#70, W2
;__Lib_PPS_33EP64GP502.mpas,82 :: 		
0x3400	0x200573  	MOV	#87, W3
;__Lib_PPS_33EP64GP502.mpas,84 :: 		
0x3402	0x784882  	MOV.B	W2, [W1]
;__Lib_PPS_33EP64GP502.mpas,85 :: 		
0x3404	0x784883  	MOV.B	W3, [W1]
;__Lib_PPS_33EP64GP502.mpas,87 :: 		
0x3406	0xA9C742  	BCLR	IOLOCK_bit, BitPos(IOLOCK_bit+0)
;__Lib_PPS_33EP64GP502.mpas,88 :: 		
L_end_Unlock_IOLOCK:
0x3408	0xFA8000  	ULNK
0x340A	0x060000  	RETURN
; end of _Unlock_IOLOCK
_PPS_Mapping_NoLock:
0x3CE2	0xFA0000  	LNK	#0
;__Lib_PPS_33EP64GP502.mpas,245 :: 		
;__Lib_PPS_33EP64GP502.mpas,246 :: 		
0x3CE4	0x781F8D  	PUSH	W13
0x3CE6	0xEF201A  	CLR	W13
0x3CE8	0x07E56A  	RCALL	__Lib_PPS_33EP64GP502__PPS_Mapping
; Result start address is: 2 (W1)
0x3CEA	0x780080  	MOV	W0, W1
;__Lib_PPS_33EP64GP502.mpas,247 :: 		
0x3CEC	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_PPS_Mapping_NoLock:
0x3CEE	0x7806CF  	POP	W13
0x3CF0	0xFA8000  	ULNK
0x3CF2	0x060000  	RETURN
; end of _PPS_Mapping_NoLock
__Lib_PPS_33EP64GP502__PPS_Mapping:
0x07BE	0xFA0002  	LNK	#2
;__Lib_PPS_33EP64GP502.mpas,135 :: 		
;__Lib_PPS_33EP64GP502.mpas,136 :: 		
0x07C0	0x200FF0  	MOV	#255, W0
0x07C2	0x980700  	MOV	W0, [W14+0]
;__Lib_PPS_33EP64GP502.mpas,137 :: 		
0x07C4	0xE15C60  	CP.B	W11, #0
0x07C6	0x3A0043  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping4
L___Lib_PPS_33EP64GP502__PPS_Mapping131:
;__Lib_PPS_33EP64GP502.mpas,139 :: 		
0x07C8	0xE16861  	CP	W13, #1
0x07CA	0x3A0001  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping7
L___Lib_PPS_33EP64GP502__PPS_Mapping132:
;__Lib_PPS_33EP64GP502.mpas,140 :: 		
0x07CC	0x071616  	RCALL	_Unlock_IOLOCK
L___Lib_PPS_33EP64GP502__PPS_Mapping7:
;__Lib_PPS_33EP64GP502.mpas,142 :: 		
0x07CE	0xE15474  	CP.B	W10, #20
0x07D0	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping12
L___Lib_PPS_33EP64GP502__PPS_Mapping133:
0x07D2	0x206800  	MOV	#lo_addr(RPOR0), W0
0x07D4	0x78480C  	MOV.B	W12, [W0]
0x07D6	0x370038  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping9
L___Lib_PPS_33EP64GP502__PPS_Mapping12:
;__Lib_PPS_33EP64GP502.mpas,143 :: 		
0x07D8	0xB3C230  	MOV.B	#35, W0
0x07DA	0xE15400  	CP.B	W10, W0
0x07DC	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping15
L___Lib_PPS_33EP64GP502__PPS_Mapping134:
0x07DE	0x206810  	MOV	#lo_addr(RPOR0+1), W0
0x07E0	0x78480C  	MOV.B	W12, [W0]
0x07E2	0x370032  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping9
L___Lib_PPS_33EP64GP502__PPS_Mapping15:
;__Lib_PPS_33EP64GP502.mpas,144 :: 		
0x07E4	0xB3C240  	MOV.B	#36, W0
0x07E6	0xE15400  	CP.B	W10, W0
0x07E8	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping18
L___Lib_PPS_33EP64GP502__PPS_Mapping135:
0x07EA	0x206820  	MOV	#lo_addr(RPOR1), W0
0x07EC	0x78480C  	MOV.B	W12, [W0]
0x07EE	0x37002C  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping9
L___Lib_PPS_33EP64GP502__PPS_Mapping18:
;__Lib_PPS_33EP64GP502.mpas,145 :: 		
0x07F0	0xB3C250  	MOV.B	#37, W0
0x07F2	0xE15400  	CP.B	W10, W0
0x07F4	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping21
L___Lib_PPS_33EP64GP502__PPS_Mapping136:
0x07F6	0x206830  	MOV	#lo_addr(RPOR1+1), W0
0x07F8	0x78480C  	MOV.B	W12, [W0]
0x07FA	0x370026  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping9
L___Lib_PPS_33EP64GP502__PPS_Mapping21:
;__Lib_PPS_33EP64GP502.mpas,146 :: 		
0x07FC	0xB3C260  	MOV.B	#38, W0
0x07FE	0xE15400  	CP.B	W10, W0
0x0800	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping24
L___Lib_PPS_33EP64GP502__PPS_Mapping137:
0x0802	0x206840  	MOV	#lo_addr(RPOR2), W0
0x0804	0x78480C  	MOV.B	W12, [W0]
0x0806	0x370020  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping9
L___Lib_PPS_33EP64GP502__PPS_Mapping24:
;__Lib_PPS_33EP64GP502.mpas,147 :: 		
0x0808	0xB3C270  	MOV.B	#39, W0
0x080A	0xE15400  	CP.B	W10, W0
0x080C	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping27
L___Lib_PPS_33EP64GP502__PPS_Mapping138:
0x080E	0x206850  	MOV	#lo_addr(RPOR2+1), W0
0x0810	0x78480C  	MOV.B	W12, [W0]
0x0812	0x37001A  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping9
L___Lib_PPS_33EP64GP502__PPS_Mapping27:
;__Lib_PPS_33EP64GP502.mpas,148 :: 		
0x0814	0xB3C280  	MOV.B	#40, W0
0x0816	0xE15400  	CP.B	W10, W0
0x0818	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping30
L___Lib_PPS_33EP64GP502__PPS_Mapping139:
0x081A	0x206860  	MOV	#lo_addr(RPOR3), W0
0x081C	0x78480C  	MOV.B	W12, [W0]
0x081E	0x370014  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping9
L___Lib_PPS_33EP64GP502__PPS_Mapping30:
;__Lib_PPS_33EP64GP502.mpas,149 :: 		
0x0820	0xB3C290  	MOV.B	#41, W0
0x0822	0xE15400  	CP.B	W10, W0
0x0824	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping33
L___Lib_PPS_33EP64GP502__PPS_Mapping140:
0x0826	0x206870  	MOV	#lo_addr(RPOR3+1), W0
0x0828	0x78480C  	MOV.B	W12, [W0]
0x082A	0x37000E  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping9
L___Lib_PPS_33EP64GP502__PPS_Mapping33:
;__Lib_PPS_33EP64GP502.mpas,150 :: 		
0x082C	0xB3C2A0  	MOV.B	#42, W0
0x082E	0xE15400  	CP.B	W10, W0
0x0830	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping36
L___Lib_PPS_33EP64GP502__PPS_Mapping141:
0x0832	0x206880  	MOV	#lo_addr(RPOR4), W0
0x0834	0x78480C  	MOV.B	W12, [W0]
0x0836	0x370008  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping9
L___Lib_PPS_33EP64GP502__PPS_Mapping36:
;__Lib_PPS_33EP64GP502.mpas,151 :: 		
0x0838	0xB3C2B0  	MOV.B	#43, W0
0x083A	0xE15400  	CP.B	W10, W0
0x083C	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping39
L___Lib_PPS_33EP64GP502__PPS_Mapping142:
0x083E	0x206890  	MOV	#lo_addr(RPOR4+1), W0
0x0840	0x78480C  	MOV.B	W12, [W0]
;__Lib_PPS_33EP64GP502.mpas,159 :: 		
0x0842	0x370002  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping9
L___Lib_PPS_33EP64GP502__PPS_Mapping39:
0x0844	0xEF2000  	CLR	W0
0x0846	0x980700  	MOV	W0, [W14+0]
L___Lib_PPS_33EP64GP502__PPS_Mapping9:
;__Lib_PPS_33EP64GP502.mpas,161 :: 		
0x0848	0xE16861  	CP	W13, #1
0x084A	0x3A0001  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping41
L___Lib_PPS_33EP64GP502__PPS_Mapping143:
;__Lib_PPS_33EP64GP502.mpas,162 :: 		
0x084C	0x07FDF3  	RCALL	_Lock_IOLOCK
L___Lib_PPS_33EP64GP502__PPS_Mapping41:
;__Lib_PPS_33EP64GP502.mpas,163 :: 		
L___Lib_PPS_33EP64GP502__PPS_Mapping4:
;__Lib_PPS_33EP64GP502.mpas,165 :: 		
0x084E	0xE15C61  	CP.B	W11, #1
0x0850	0x3A004E  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping44
L___Lib_PPS_33EP64GP502__PPS_Mapping144:
;__Lib_PPS_33EP64GP502.mpas,167 :: 		
0x0852	0xE16861  	CP	W13, #1
0x0854	0x3A0001  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping47
L___Lib_PPS_33EP64GP502__PPS_Mapping145:
;__Lib_PPS_33EP64GP502.mpas,168 :: 		
0x0856	0x0715D1  	RCALL	_Unlock_IOLOCK
L___Lib_PPS_33EP64GP502__PPS_Mapping47:
;__Lib_PPS_33EP64GP502.mpas,171 :: 		
0x0858	0xE16460  	CP.B	W12, #0
0x085A	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping52
L___Lib_PPS_33EP64GP502__PPS_Mapping146:
0x085C	0x206A10  	MOV	#lo_addr(RPINR0+1), W0
0x085E	0x78480A  	MOV.B	W10, [W0]
0x0860	0x370043  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping49
L___Lib_PPS_33EP64GP502__PPS_Mapping52:
;__Lib_PPS_33EP64GP502.mpas,172 :: 		
0x0862	0xE16461  	CP.B	W12, #1
0x0864	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping55
L___Lib_PPS_33EP64GP502__PPS_Mapping147:
0x0866	0x206A20  	MOV	#lo_addr(RPINR1), W0
0x0868	0x78480A  	MOV.B	W10, [W0]
0x086A	0x37003E  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping49
L___Lib_PPS_33EP64GP502__PPS_Mapping55:
;__Lib_PPS_33EP64GP502.mpas,173 :: 		
0x086C	0xE16462  	CP.B	W12, #2
0x086E	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping58
L___Lib_PPS_33EP64GP502__PPS_Mapping148:
0x0870	0x206A60  	MOV	#lo_addr(RPINR3), W0
0x0872	0x78480A  	MOV.B	W10, [W0]
0x0874	0x370039  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping49
L___Lib_PPS_33EP64GP502__PPS_Mapping58:
;__Lib_PPS_33EP64GP502.mpas,174 :: 		
0x0876	0xE16463  	CP.B	W12, #3
0x0878	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping61
L___Lib_PPS_33EP64GP502__PPS_Mapping149:
0x087A	0x206AE0  	MOV	#lo_addr(RPINR7), W0
0x087C	0x78480A  	MOV.B	W10, [W0]
0x087E	0x370034  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping49
L___Lib_PPS_33EP64GP502__PPS_Mapping61:
;__Lib_PPS_33EP64GP502.mpas,175 :: 		
0x0880	0xE16464  	CP.B	W12, #4
0x0882	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping64
L___Lib_PPS_33EP64GP502__PPS_Mapping150:
0x0884	0x206AE0  	MOV	#lo_addr(RPINR7), W0
0x0886	0x78480A  	MOV.B	W10, [W0]
0x0888	0x37002F  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping49
L___Lib_PPS_33EP64GP502__PPS_Mapping64:
;__Lib_PPS_33EP64GP502.mpas,176 :: 		
0x088A	0xE16465  	CP.B	W12, #5
0x088C	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping67
L___Lib_PPS_33EP64GP502__PPS_Mapping151:
0x088E	0x206B10  	MOV	#lo_addr(RPINR8+1), W0
0x0890	0x78480A  	MOV.B	W10, [W0]
0x0892	0x37002A  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping49
L___Lib_PPS_33EP64GP502__PPS_Mapping67:
;__Lib_PPS_33EP64GP502.mpas,177 :: 		
0x0894	0xE16466  	CP.B	W12, #6
0x0896	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping70
L___Lib_PPS_33EP64GP502__PPS_Mapping152:
0x0898	0x206B00  	MOV	#lo_addr(RPINR8), W0
0x089A	0x78480A  	MOV.B	W10, [W0]
0x089C	0x370025  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping49
L___Lib_PPS_33EP64GP502__PPS_Mapping70:
;__Lib_PPS_33EP64GP502.mpas,178 :: 		
0x089E	0xE16467  	CP.B	W12, #7
0x08A0	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping73
L___Lib_PPS_33EP64GP502__PPS_Mapping153:
0x08A2	0x206B60  	MOV	#lo_addr(RPINR11), W0
0x08A4	0x78480A  	MOV.B	W10, [W0]
0x08A6	0x370020  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping49
L___Lib_PPS_33EP64GP502__PPS_Mapping73:
;__Lib_PPS_33EP64GP502.mpas,185 :: 		
0x08A8	0xE1646E  	CP.B	W12, #14
0x08AA	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping76
L___Lib_PPS_33EP64GP502__PPS_Mapping154:
0x08AC	0x206C40  	MOV	#lo_addr(RPINR18), W0
0x08AE	0x78480A  	MOV.B	W10, [W0]
0x08B0	0x37001B  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping49
L___Lib_PPS_33EP64GP502__PPS_Mapping76:
;__Lib_PPS_33EP64GP502.mpas,186 :: 		
0x08B2	0xE1646F  	CP.B	W12, #15
0x08B4	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping79
L___Lib_PPS_33EP64GP502__PPS_Mapping155:
0x08B6	0x206C60  	MOV	#lo_addr(RPINR19), W0
0x08B8	0x78480A  	MOV.B	W10, [W0]
0x08BA	0x370016  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping49
L___Lib_PPS_33EP64GP502__PPS_Mapping79:
;__Lib_PPS_33EP64GP502.mpas,187 :: 		
0x08BC	0xE16470  	CP.B	W12, #16
0x08BE	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping82
L___Lib_PPS_33EP64GP502__PPS_Mapping156:
0x08C0	0x206CC0  	MOV	#lo_addr(RPINR22), W0
0x08C2	0x78480A  	MOV.B	W10, [W0]
0x08C4	0x370011  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping49
L___Lib_PPS_33EP64GP502__PPS_Mapping82:
;__Lib_PPS_33EP64GP502.mpas,188 :: 		
0x08C6	0xE16471  	CP.B	W12, #17
0x08C8	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping85
L___Lib_PPS_33EP64GP502__PPS_Mapping157:
0x08CA	0x206CD0  	MOV	#lo_addr(RPINR22+1), W0
0x08CC	0x78480A  	MOV.B	W10, [W0]
0x08CE	0x37000C  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping49
L___Lib_PPS_33EP64GP502__PPS_Mapping85:
;__Lib_PPS_33EP64GP502.mpas,189 :: 		
0x08D0	0xE16472  	CP.B	W12, #18
0x08D2	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping88
L___Lib_PPS_33EP64GP502__PPS_Mapping158:
0x08D4	0x206CE0  	MOV	#lo_addr(RPINR23), W0
0x08D6	0x78480A  	MOV.B	W10, [W0]
0x08D8	0x370007  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping49
L___Lib_PPS_33EP64GP502__PPS_Mapping88:
;__Lib_PPS_33EP64GP502.mpas,190 :: 		
0x08DA	0xE16473  	CP.B	W12, #19
0x08DC	0x3A0003  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping91
L___Lib_PPS_33EP64GP502__PPS_Mapping159:
0x08DE	0x206D40  	MOV	#lo_addr(RPINR26), W0
0x08E0	0x78480A  	MOV.B	W10, [W0]
;__Lib_PPS_33EP64GP502.mpas,196 :: 		
0x08E2	0x370002  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping49
L___Lib_PPS_33EP64GP502__PPS_Mapping91:
0x08E4	0xEF2000  	CLR	W0
0x08E6	0x980700  	MOV	W0, [W14+0]
L___Lib_PPS_33EP64GP502__PPS_Mapping49:
;__Lib_PPS_33EP64GP502.mpas,198 :: 		
0x08E8	0xE16861  	CP	W13, #1
0x08EA	0x3A0001  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping93
L___Lib_PPS_33EP64GP502__PPS_Mapping160:
;__Lib_PPS_33EP64GP502.mpas,199 :: 		
0x08EC	0x07FDA3  	RCALL	_Lock_IOLOCK
L___Lib_PPS_33EP64GP502__PPS_Mapping93:
;__Lib_PPS_33EP64GP502.mpas,200 :: 		
L___Lib_PPS_33EP64GP502__PPS_Mapping44:
;__Lib_PPS_33EP64GP502.mpas,215 :: 		
0x08EE	0xE15474  	CP.B	W10, #20
0x08F0	0x3A0005  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping98
L___Lib_PPS_33EP64GP502__PPS_Mapping161:
0x08F2	0xAE0016  	BTSS	W11, #0
0x08F4	0xA98E00  	BCLR	TRISA4_bit, BitPos(TRISA4_bit+0)
0x08F6	0xAF0016  	BTSC	W11, #0
0x08F8	0xA88E00  	BSET	TRISA4_bit, BitPos(TRISA4_bit+0)
0x08FA	0x37004A  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping95
L___Lib_PPS_33EP64GP502__PPS_Mapping98:
;__Lib_PPS_33EP64GP502.mpas,216 :: 		
0x08FC	0xB3C230  	MOV.B	#35, W0
0x08FE	0xE15400  	CP.B	W10, W0
0x0900	0x3A0005  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping101
L___Lib_PPS_33EP64GP502__PPS_Mapping162:
0x0902	0xAE0016  	BTSS	W11, #0
0x0904	0xA96E10  	BCLR	TRISB3_bit, BitPos(TRISB3_bit+0)
0x0906	0xAF0016  	BTSC	W11, #0
0x0908	0xA86E10  	BSET	TRISB3_bit, BitPos(TRISB3_bit+0)
0x090A	0x370042  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping95
L___Lib_PPS_33EP64GP502__PPS_Mapping101:
;__Lib_PPS_33EP64GP502.mpas,217 :: 		
0x090C	0xB3C240  	MOV.B	#36, W0
0x090E	0xE15400  	CP.B	W10, W0
0x0910	0x3A0005  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping104
L___Lib_PPS_33EP64GP502__PPS_Mapping163:
0x0912	0xAE0016  	BTSS	W11, #0
0x0914	0xA98E10  	BCLR	TRISB4_bit, BitPos(TRISB4_bit+0)
0x0916	0xAF0016  	BTSC	W11, #0
0x0918	0xA88E10  	BSET	TRISB4_bit, BitPos(TRISB4_bit+0)
0x091A	0x37003A  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping95
L___Lib_PPS_33EP64GP502__PPS_Mapping104:
;__Lib_PPS_33EP64GP502.mpas,218 :: 		
0x091C	0xB3C250  	MOV.B	#37, W0
0x091E	0xE15400  	CP.B	W10, W0
0x0920	0x3A0005  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping107
L___Lib_PPS_33EP64GP502__PPS_Mapping164:
0x0922	0xAE0016  	BTSS	W11, #0
0x0924	0xA9AE10  	BCLR	TRISB5_bit, BitPos(TRISB5_bit+0)
0x0926	0xAF0016  	BTSC	W11, #0
0x0928	0xA8AE10  	BSET	TRISB5_bit, BitPos(TRISB5_bit+0)
0x092A	0x370032  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping95
L___Lib_PPS_33EP64GP502__PPS_Mapping107:
;__Lib_PPS_33EP64GP502.mpas,219 :: 		
0x092C	0xB3C260  	MOV.B	#38, W0
0x092E	0xE15400  	CP.B	W10, W0
0x0930	0x3A0005  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping110
L___Lib_PPS_33EP64GP502__PPS_Mapping165:
0x0932	0xAE0016  	BTSS	W11, #0
0x0934	0xA9CE10  	BCLR	TRISB6_bit, BitPos(TRISB6_bit+0)
0x0936	0xAF0016  	BTSC	W11, #0
0x0938	0xA8CE10  	BSET	TRISB6_bit, BitPos(TRISB6_bit+0)
0x093A	0x37002A  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping95
L___Lib_PPS_33EP64GP502__PPS_Mapping110:
;__Lib_PPS_33EP64GP502.mpas,220 :: 		
0x093C	0xB3C270  	MOV.B	#39, W0
0x093E	0xE15400  	CP.B	W10, W0
0x0940	0x3A0005  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping113
L___Lib_PPS_33EP64GP502__PPS_Mapping166:
0x0942	0xAE0016  	BTSS	W11, #0
0x0944	0xA9EE10  	BCLR	TRISB7_bit, BitPos(TRISB7_bit+0)
0x0946	0xAF0016  	BTSC	W11, #0
0x0948	0xA8EE10  	BSET	TRISB7_bit, BitPos(TRISB7_bit+0)
0x094A	0x370022  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping95
L___Lib_PPS_33EP64GP502__PPS_Mapping113:
;__Lib_PPS_33EP64GP502.mpas,221 :: 		
0x094C	0xB3C280  	MOV.B	#40, W0
0x094E	0xE15400  	CP.B	W10, W0
0x0950	0x3A0005  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping116
L___Lib_PPS_33EP64GP502__PPS_Mapping167:
0x0952	0xAE0016  	BTSS	W11, #0
0x0954	0xA90E11  	BCLR	TRISB8_bit, BitPos(TRISB8_bit+0)
0x0956	0xAF0016  	BTSC	W11, #0
0x0958	0xA80E11  	BSET	TRISB8_bit, BitPos(TRISB8_bit+0)
0x095A	0x37001A  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping95
L___Lib_PPS_33EP64GP502__PPS_Mapping116:
;__Lib_PPS_33EP64GP502.mpas,222 :: 		
0x095C	0xB3C290  	MOV.B	#41, W0
0x095E	0xE15400  	CP.B	W10, W0
0x0960	0x3A0005  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping119
L___Lib_PPS_33EP64GP502__PPS_Mapping168:
0x0962	0xAE0016  	BTSS	W11, #0
0x0964	0xA92E11  	BCLR	TRISB9_bit, BitPos(TRISB9_bit+0)
0x0966	0xAF0016  	BTSC	W11, #0
0x0968	0xA82E11  	BSET	TRISB9_bit, BitPos(TRISB9_bit+0)
0x096A	0x370012  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping95
L___Lib_PPS_33EP64GP502__PPS_Mapping119:
;__Lib_PPS_33EP64GP502.mpas,223 :: 		
0x096C	0xB3C2A0  	MOV.B	#42, W0
0x096E	0xE15400  	CP.B	W10, W0
0x0970	0x3A0005  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping122
L___Lib_PPS_33EP64GP502__PPS_Mapping169:
0x0972	0xAE0016  	BTSS	W11, #0
0x0974	0xA94E11  	BCLR	TRISB10_bit, BitPos(TRISB10_bit+0)
0x0976	0xAF0016  	BTSC	W11, #0
0x0978	0xA84E11  	BSET	TRISB10_bit, BitPos(TRISB10_bit+0)
0x097A	0x37000A  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping95
L___Lib_PPS_33EP64GP502__PPS_Mapping122:
;__Lib_PPS_33EP64GP502.mpas,224 :: 		
0x097C	0xB3C2B0  	MOV.B	#43, W0
0x097E	0xE15400  	CP.B	W10, W0
0x0980	0x3A0005  	BRA NZ	L___Lib_PPS_33EP64GP502__PPS_Mapping125
L___Lib_PPS_33EP64GP502__PPS_Mapping170:
0x0982	0xAE0016  	BTSS	W11, #0
0x0984	0xA96E11  	BCLR	TRISB11_bit, BitPos(TRISB11_bit+0)
0x0986	0xAF0016  	BTSC	W11, #0
0x0988	0xA86E11  	BSET	TRISB11_bit, BitPos(TRISB11_bit+0)
;__Lib_PPS_33EP64GP502.mpas,233 :: 		
0x098A	0x370002  	BRA	L___Lib_PPS_33EP64GP502__PPS_Mapping95
L___Lib_PPS_33EP64GP502__PPS_Mapping125:
0x098C	0xEF2000  	CLR	W0
0x098E	0x980700  	MOV	W0, [W14+0]
L___Lib_PPS_33EP64GP502__PPS_Mapping95:
;__Lib_PPS_33EP64GP502.mpas,237 :: 		
0x0990	0x90000E  	MOV	[W14+0], W0
L_end__PPS_Mapping:
0x0992	0xFA8000  	ULNK
0x0994	0x060000  	RETURN
; end of __Lib_PPS_33EP64GP502__PPS_Mapping
_Lock_IOLOCK:
0x0434	0xFA0000  	LNK	#0
;__Lib_PPS_33EP64GP502.mpas,91 :: 		
;__Lib_PPS_33EP64GP502.mpas,92 :: 		
0x0436	0x207421  	MOV	#lo_addr(OSCCON), W1
;__Lib_PPS_33EP64GP502.mpas,93 :: 		
0x0438	0x200462  	MOV	#70, W2
;__Lib_PPS_33EP64GP502.mpas,94 :: 		
0x043A	0x200573  	MOV	#87, W3
;__Lib_PPS_33EP64GP502.mpas,96 :: 		
0x043C	0x784882  	MOV.B	W2, [W1]
;__Lib_PPS_33EP64GP502.mpas,97 :: 		
0x043E	0x784883  	MOV.B	W3, [W1]
;__Lib_PPS_33EP64GP502.mpas,99 :: 		
0x0440	0xA8C742  	BSET	IOLOCK_bit, BitPos(IOLOCK_bit+0)
;__Lib_PPS_33EP64GP502.mpas,100 :: 		
L_end_Lock_IOLOCK:
0x0442	0xFA8000  	ULNK
0x0444	0x060000  	RETURN
; end of _Lock_IOLOCK
_UART1_Init:
0x3CF4	0xFA000C  	LNK	#12
;__Lib_UART_12_p24_p33.mpas,109 :: 		
;__Lib_UART_12_p24_p33.mpas,112 :: 		
0x3CF6	0x203520  	MOV	#lo_addr(_UART1_Write), W0
0x3CF8	0x892DC0  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_12_p24_p33.mpas,113 :: 		
0x3CFA	0x255880  	MOV	#lo_addr(_UART1_Read), W0
0x3CFC	0x892DE0  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_12_p24_p33.mpas,114 :: 		
0x3CFE	0x2557A0  	MOV	#lo_addr(_UART1_Data_Ready), W0
0x3D00	0x892DD0  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_12_p24_p33.mpas,115 :: 		
0x3D02	0x2FFFF0  	MOV	#lo_addr(_UART1_TX_Idle), W0
0x3D04	0x892E10  	MOV	W0, _UART_TX_Idle_Ptr
;__Lib_UART_12_p24_p33.mpas,117 :: 		
0x3D06	0xEF2220  	CLR	U1MODE
;__Lib_UART_12_p24_p33.mpas,118 :: 		
0x3D08	0x280000  	MOV	#32768, W0
0x3D0A	0xB7A222  	MOV	WREG, U1STA
;__Lib_UART_12_p24_p33.mpas,121 :: 		
0x3D0C	0xA96220  	BCLR	U1MODE, #3
;__Lib_UART_12_p24_p33.mpas,122 :: 		
0x3D0E	0x07E6C8  	RCALL	_Get_Fosc_kHz
;__Lib_UART_12_p24_p33.mpas,124 :: 		
0x3D10	0x203E82  	MOV	#1000, W2
0x3D12	0x200003  	MOV	#0, W3
0x3D14	0x07E690  	RCALL	__Multiply_32x32
0x3D16	0x980700  	MOV	W0, [W14+0]
0x3D18	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.mpas,127 :: 		
0x3D1A	0x200054  	MOV	#5, W4
0x3D1C	0xBE010A  	MOV.D	W10, W2
L__UART1_Init177:
0x3D1E	0xE90204  	DEC	W4, W4
0x3D20	0x350003  	BRA LT	L__UART1_Init178
0x3D22	0xD00102  	SL	W2, W2
0x3D24	0xD28183  	RLC	W3, W3
0x3D26	0x37FFFB  	BRA	L__UART1_Init177
L__UART1_Init178:
0x3D28	0x980722  	MOV	W2, [W14+4]
0x3D2A	0x980733  	MOV	W3, [W14+6]
;__Lib_UART_12_p24_p33.mpas,129 :: 		
0x3D2C	0xBE9F8A  	PUSH.D	W10
0x3D2E	0xEB8200  	SETM	W4
0x3D30	0x07E68B  	RCALL	__Modulus_32x32
0x3D32	0x980740  	MOV	W0, [W14+8]
0x3D34	0x980751  	MOV	W1, [W14+10]
;__Lib_UART_12_p24_p33.mpas,130 :: 		
0x3D36	0x90012E  	MOV	[W14+4], W2
0x3D38	0x9001BE  	MOV	[W14+6], W3
0x3D3A	0x90000E  	MOV	[W14+0], W0
0x3D3C	0x90009E  	MOV	[W14+2], W1
0x3D3E	0xEB8200  	SETM	W4
0x3D40	0x07E49D  	RCALL	__Divide_32x32
0x3D42	0xBE054F  	POP.D	W10
0x3D44	0x980700  	MOV	W0, [W14+0]
0x3D46	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.mpas,132 :: 		
0x3D48	0x470064  	ADD	W14, #4, W0
0x3D4A	0x7800B0  	MOV	[W0++], W1
0x3D4C	0x780120  	MOV	[W0--], W2
0x3D4E	0xD10102  	LSR	W2, W2
0x3D50	0xD38081  	RRC	W1, W1
0x3D52	0x470068  	ADD	W14, #8, W0
0x3D54	0xE10830  	CP	W1, [W0++]
0x3D56	0xE19020  	CPB	W2, [W0--]
0x3D58	0x3D0005  	BRA GE	L__UART1_Init2
L__UART1_Init179:
;__Lib_UART_12_p24_p33.mpas,133 :: 		
0x3D5A	0x90008E  	MOV	[W14+0], W1
0x3D5C	0x90011E  	MOV	[W14+2], W2
0x3D5E	0x470060  	ADD	W14, #0, W0
0x3D60	0x409861  	ADD	W1, #1, [W0++]
0x3D62	0x491060  	ADDC	W2, #0, [W0--]
L__UART1_Init2:
;__Lib_UART_12_p24_p33.mpas,136 :: 		
0x3D64	0x90000E  	MOV	[W14+0], W0
0x3D66	0x90009E  	MOV	[W14+2], W1
0x3D68	0xE10060  	CP	W0, #0
0x3D6A	0xE18860  	CPB	W1, #0
0x3D6C	0x3A002A  	BRA NZ	L__UART1_Init5
L__UART1_Init180:
;__Lib_UART_12_p24_p33.mpas,139 :: 		
0x3D6E	0x07E698  	RCALL	_Get_Fosc_kHz
;__Lib_UART_12_p24_p33.mpas,141 :: 		
0x3D70	0x203E82  	MOV	#1000, W2
0x3D72	0x200003  	MOV	#0, W3
0x3D74	0x07E660  	RCALL	__Multiply_32x32
0x3D76	0x980700  	MOV	W0, [W14+0]
0x3D78	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.mpas,144 :: 		
0x3D7A	0x200034  	MOV	#3, W4
0x3D7C	0xBE010A  	MOV.D	W10, W2
L__UART1_Init181:
0x3D7E	0xE90204  	DEC	W4, W4
0x3D80	0x350003  	BRA LT	L__UART1_Init182
0x3D82	0xD00102  	SL	W2, W2
0x3D84	0xD28183  	RLC	W3, W3
0x3D86	0x37FFFB  	BRA	L__UART1_Init181
L__UART1_Init182:
0x3D88	0x980722  	MOV	W2, [W14+4]
0x3D8A	0x980733  	MOV	W3, [W14+6]
;__Lib_UART_12_p24_p33.mpas,146 :: 		
0x3D8C	0xEB8200  	SETM	W4
0x3D8E	0x07E65C  	RCALL	__Modulus_32x32
0x3D90	0x980740  	MOV	W0, [W14+8]
0x3D92	0x980751  	MOV	W1, [W14+10]
;__Lib_UART_12_p24_p33.mpas,147 :: 		
0x3D94	0x90012E  	MOV	[W14+4], W2
0x3D96	0x9001BE  	MOV	[W14+6], W3
0x3D98	0x90000E  	MOV	[W14+0], W0
0x3D9A	0x90009E  	MOV	[W14+2], W1
0x3D9C	0xEB8200  	SETM	W4
0x3D9E	0x07E46E  	RCALL	__Divide_32x32
0x3DA0	0x980700  	MOV	W0, [W14+0]
0x3DA2	0x980711  	MOV	W1, [W14+2]
;__Lib_UART_12_p24_p33.mpas,149 :: 		
0x3DA4	0x470064  	ADD	W14, #4, W0
0x3DA6	0x7800B0  	MOV	[W0++], W1
0x3DA8	0x780120  	MOV	[W0--], W2
0x3DAA	0xD10102  	LSR	W2, W2
0x3DAC	0xD38081  	RRC	W1, W1
0x3DAE	0x470068  	ADD	W14, #8, W0
0x3DB0	0xE10830  	CP	W1, [W0++]
0x3DB2	0xE19020  	CPB	W2, [W0--]
0x3DB4	0x3D0005  	BRA GE	L__UART1_Init8
L__UART1_Init183:
;__Lib_UART_12_p24_p33.mpas,150 :: 		
0x3DB6	0x90008E  	MOV	[W14+0], W1
0x3DB8	0x90011E  	MOV	[W14+2], W2
0x3DBA	0x470060  	ADD	W14, #0, W0
0x3DBC	0x409861  	ADD	W1, #1, [W0++]
0x3DBE	0x491060  	ADDC	W2, #0, [W0--]
L__UART1_Init8:
;__Lib_UART_12_p24_p33.mpas,152 :: 		
0x3DC0	0xA86220  	BSET	U1MODE, #3
;__Lib_UART_12_p24_p33.mpas,153 :: 		
L__UART1_Init5:
;__Lib_UART_12_p24_p33.mpas,155 :: 		
0x3DC2	0x90008E  	MOV	[W14+0], W1
0x3DC4	0x202280  	MOV	#lo_addr(U1BRG), W0
0x3DC6	0x508861  	SUB	W1, #1, [W0]
;__Lib_UART_12_p24_p33.mpas,157 :: 		
0x3DC8	0xA92222  	BCLR	U1STA, #1
;__Lib_UART_12_p24_p33.mpas,159 :: 		
0x3DCA	0xA8E221  	BSET	U1MODE, #15
;__Lib_UART_12_p24_p33.mpas,160 :: 		
0x3DCC	0xA84223  	BSET	U1STA, #10
;__Lib_UART_12_p24_p33.mpas,161 :: 		
0x3DCE	0x07E66C  	RCALL	_Delay_10ms
;__Lib_UART_12_p24_p33.mpas,162 :: 		
L_end_UART1_Init:
0x3DD0	0xFA8000  	ULNK
0x3DD2	0x060000  	RETURN
; end of _UART1_Init
_Get_Fosc_kHz:
;__Lib_Delays.mpas,64 :: 		begin
;__Lib_Delays.mpas,65 :: 		result := Clock_kHz();
; Result start address is: 4 (W2)
0x0AA0	0x2FA002  	MOV	#64000, W2
0x0AA2	0x200003  	MOV	#0, W3
;__Lib_Delays.mpas,66 :: 		end;
0x0AA4	0xBE0002  	MOV.D	W2, W0
; Result end address is: 4 (W2)
L_end_Get_Fosc_kHz:
0x0AA6	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Delay_10ms:
;__Lib_Delays.mpas,669 :: 		begin
;__Lib_Delays.mpas,670 :: 		Delay_ms(10);
0x0AA8	0x2FA007  	MOV	#64000, W7
L__Delay_10ms51:
0x0AAA	0xED200E  	DEC	W7
0x0AAC	0x3AFFFE  	BRA NZ	L__Delay_10ms51
0x0AAE	0x000000  	NOP
0x0AB0	0x000000  	NOP
;__Lib_Delays.mpas,671 :: 		end;
L_end_Delay_10ms:
0x0AB2	0x060000  	RETURN
; end of _Delay_10ms
__Multiply_32x32:
0x0A36	0xFA0000  	LNK	#0
;__Lib_Math.mpas,50 :: 		
;__Lib_Math.mpas,53 :: 		
0x0A38	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.mpas,54 :: 		
0x0A3A	0x880050  	MOV	W0, W5
;__Lib_Math.mpas,55 :: 		
0x0A3C	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.mpas,56 :: 		
0x0A3E	0x420081  	ADD	W4, W1, W1
;__Lib_Math.mpas,57 :: 		
0x0A40	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.mpas,58 :: 		
0x0A42	0x420081  	ADD	W4, W1, W1
;__Lib_Math.mpas,61 :: 		
L_end__Multiply_32x32:
0x0A44	0xFA8000  	ULNK
0x0A46	0x060000  	RETURN
; end of __Multiply_32x32
__Modulus_32x32:
0x0A48	0xFA0000  	LNK	#0
;__Lib_Math.mpas,165 :: 		
;__Lib_Math.mpas,167 :: 		
0x0A4A	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.mpas,168 :: 		
0x0A4C	0x000000040A9C  	GOTO	the_end_Modulus_32x32
;__Lib_Math.mpas,170 :: 		
Modulus_32x32___testsus:
;__Lib_Math.mpas,171 :: 		
0x0A50	0xE20008  	CP0	W4
;__Lib_Math.mpas,172 :: 		
0x0A52	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.mpas,174 :: 		
0x0A54	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.mpas,175 :: 		
0x0A56	0x060000  	RETURN
;__Lib_Math.mpas,177 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.mpas,178 :: 		
0x0A58	0x781F81  	MOV	W1, [W15++]
;__Lib_Math.mpas,179 :: 		
0x0A5A	0xE20002  	CP0	W1
;__Lib_Math.mpas,180 :: 		
0x0A5C	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.mpas,181 :: 		
0x0A5E	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.mpas,182 :: 		
0x0A60	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.mpas,183 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.mpas,184 :: 		
0x0A62	0xE20006  	CP0	W3
;__Lib_Math.mpas,185 :: 		
0x0A64	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.mpas,186 :: 		
0x0A66	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.mpas,187 :: 		
0x0A68	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.mpas,188 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.mpas,189 :: 		
0x0A6A	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.mpas,190 :: 		
0x0A6C	0xE0004F  	CP0	[--W15]
;__Lib_Math.mpas,191 :: 		
0x0A6E	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.mpas,192 :: 		
0x0A70	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.mpas,193 :: 		
0x0A72	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.mpas,194 :: 		
Modulus_32x32_exitr:
;__Lib_Math.mpas,195 :: 		
0x0A74	0x060000  	RETURN
;__Lib_Math.mpas,196 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.mpas,197 :: 		
0x0A76	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.mpas,198 :: 		
0x0A78	0xBE8004  	MOV.D	W4, W0
;__Lib_Math.mpas,199 :: 		
0x0A7A	0x060000  	RETURN
;__Lib_Math.mpas,200 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.mpas,201 :: 		
0x0A7C	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.mpas,202 :: 		
0x0A7E	0x200206  	MOV	#32, W6
;__Lib_Math.mpas,203 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.mpas,204 :: 		
0x0A80	0xD00000  	SL	W0, W0
;__Lib_Math.mpas,205 :: 		
0x0A82	0xD28081  	RLC	W1, W1
;__Lib_Math.mpas,206 :: 		
0x0A84	0xD28204  	RLC	W4, W4
;__Lib_Math.mpas,207 :: 		
0x0A86	0xD28285  	RLC	W5, W5
;__Lib_Math.mpas,208 :: 		
0x0A88	0xA80000  	BSET	W0, #0
;__Lib_Math.mpas,209 :: 		
0x0A8A	0x520202  	SUB	W4, W2, W4
;__Lib_Math.mpas,210 :: 		
0x0A8C	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.mpas,211 :: 		
0x0A8E	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.mpas,212 :: 		
0x0A90	0x420202  	ADD	W4, W2, W4
;__Lib_Math.mpas,213 :: 		
0x0A92	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.mpas,214 :: 		
0x0A94	0xA10000  	BCLR	W0, #0
;__Lib_Math.mpas,215 :: 		
Modulus_32x32_iterate:
;__Lib_Math.mpas,216 :: 		
0x0A96	0xE90306  	DEC	W6, W6
;__Lib_Math.mpas,217 :: 		
0x0A98	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.mpas,218 :: 		
0x0A9A	0x060000  	RETURN
;__Lib_Math.mpas,220 :: 		
the_end_Modulus_32x32:
;__Lib_Math.mpas,223 :: 		
L_end__Modulus_32x32:
0x0A9C	0xFA8000  	ULNK
0x0A9E	0x060000  	RETURN
; end of __Modulus_32x32
__Divide_32x32:
0x067C	0xFA0000  	LNK	#0
;__Lib_Math.mpas,86 :: 		
;__Lib_Math.mpas,88 :: 		
0x067E	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.mpas,89 :: 		
0x0680	0x0000000406CA  	GOTO	the_end_Divide_32x32
;__Lib_Math.mpas,91 :: 		
Divide_32x32___testsus:
;__Lib_Math.mpas,92 :: 		
0x0684	0xE20008  	CP0	W4
;__Lib_Math.mpas,93 :: 		
0x0686	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.mpas,95 :: 		
0x0688	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.mpas,96 :: 		
0x068A	0x060000  	RETURN
;__Lib_Math.mpas,98 :: 		
Divide_32x32___divsi3:
;__Lib_Math.mpas,99 :: 		
0x068C	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.mpas,100 :: 		
0x068E	0xE20002  	CP0	W1
;__Lib_Math.mpas,101 :: 		
0x0690	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.mpas,102 :: 		
0x0692	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.mpas,103 :: 		
0x0694	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.mpas,104 :: 		
Divide_32x32_divtestb:
;__Lib_Math.mpas,105 :: 		
0x0696	0xE20006  	CP0	W3
;__Lib_Math.mpas,106 :: 		
0x0698	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.mpas,107 :: 		
0x069A	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.mpas,108 :: 		
0x069C	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.mpas,109 :: 		
Divide_32x32_calcquot:
;__Lib_Math.mpas,110 :: 		
0x069E	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.mpas,111 :: 		
0x06A0	0xE0004F  	CP0	[--W15]
;__Lib_Math.mpas,112 :: 		
0x06A2	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.mpas,113 :: 		
0x06A4	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.mpas,114 :: 		
0x06A6	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.mpas,115 :: 		
Divide_32x32_returnq:
;__Lib_Math.mpas,116 :: 		
0x06A8	0x060000  	RETURN
;__Lib_Math.mpas,117 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.mpas,118 :: 		
0x06AA	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.mpas,119 :: 		
0x06AC	0x200206  	MOV	#32, W6
;__Lib_Math.mpas,120 :: 		
Divide_32x32_nextbit:
;__Lib_Math.mpas,121 :: 		
0x06AE	0xD00000  	SL	W0, W0
;__Lib_Math.mpas,122 :: 		
0x06B0	0xD28081  	RLC	W1, W1
;__Lib_Math.mpas,123 :: 		
0x06B2	0xD28204  	RLC	W4, W4
;__Lib_Math.mpas,124 :: 		
0x06B4	0xD28285  	RLC	W5, W5
;__Lib_Math.mpas,125 :: 		
0x06B6	0xA80000  	BSET	W0, #0
;__Lib_Math.mpas,126 :: 		
0x06B8	0x520202  	SUB	W4, W2, W4
;__Lib_Math.mpas,127 :: 		
0x06BA	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.mpas,128 :: 		
0x06BC	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.mpas,129 :: 		
0x06BE	0x420202  	ADD	W4, W2, W4
;__Lib_Math.mpas,130 :: 		
0x06C0	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.mpas,131 :: 		
0x06C2	0xA10000  	BCLR	W0, #0
;__Lib_Math.mpas,132 :: 		
Divide_32x32_iterate:
;__Lib_Math.mpas,133 :: 		
0x06C4	0xE90306  	DEC	W6, W6
;__Lib_Math.mpas,134 :: 		
0x06C6	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.mpas,135 :: 		
0x06C8	0x060000  	RETURN
;__Lib_Math.mpas,137 :: 		
the_end_Divide_32x32:
;__Lib_Math.mpas,140 :: 		
L_end__Divide_32x32:
0x06CA	0xFA8000  	ULNK
0x06CC	0x060000  	RETURN
; end of __Divide_32x32
_SPI1_Init:
0x3E80	0xFA0000  	LNK	#0
;__Lib_SPI_12.mpas,133 :: 		
;__Lib_SPI_12.mpas,134 :: 		
0x3E82	0x2FFFF0  	MOV	#lo_addr(_SPI1_Read), W0
0x3E84	0x892E00  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.mpas,135 :: 		
0x3E86	0x2FFFF0  	MOV	#lo_addr(_SPI1_Write), W0
0x3E88	0x892DF0  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.mpas,137 :: 		
0x3E8A	0xEF2240  	CLR	SPI1STAT
;__Lib_SPI_12.mpas,138 :: 		
0x3E8C	0xEF2242  	CLR	SPI1CON
;__Lib_SPI_12.mpas,140 :: 		
0x3E8E	0xA8A242  	BSET	SPI1CON, #5
;__Lib_SPI_12.mpas,141 :: 		
0x3E90	0xA9C242  	BCLR	SPI1CON, #6
;__Lib_SPI_12.mpas,143 :: 		
0x3E92	0x2001C1  	MOV	#28, W1
0x3E94	0x202420  	MOV	#lo_addr(SPI1CON), W0
0x3E96	0x708810  	IOR	W1, [W0], [W0]
;__Lib_SPI_12.mpas,145 :: 		
0x3E98	0x2FFFC1  	MOV	#65532, W1
0x3E9A	0x202420  	MOV	#lo_addr(SPI1CON), W0
0x3E9C	0x608810  	AND	W1, [W0], [W0]
;__Lib_SPI_12.mpas,146 :: 		
0x3E9E	0xA80243  	BSET	SPI1CON, #8
;__Lib_SPI_12.mpas,148 :: 		
0x3EA0	0xA9C240  	BCLR	SPI1STAT, #6
;__Lib_SPI_12.mpas,149 :: 		
0x3EA2	0xA8E241  	BSET	SPI1STAT, #15
;__Lib_SPI_12.mpas,150 :: 		
L_end_SPI1_Init:
0x3EA4	0xFA8000  	ULNK
0x3EA6	0x060000  	RETURN
; end of _SPI1_Init
_NMRA_DCC_Initialize:
;NMRAnetDCC.mpas,215 :: 		begin
;NMRAnetDCC.mpas,216 :: 		InitializeBuffer(@Track, @TrackQueue, @TrackQueuePriority, MAX_TRACK_BUFFER_DEPTH, MAX_TRACK_PRIORITY_BUFFER_DEPTH);
0x419A	0x781F8A  	PUSH	W10
0x419C	0x781F8B  	PUSH	W11
0x419E	0x781F8C  	PUSH	W12
0x41A0	0x781F8D  	PUSH	W13
0x41A2	0xB3C10D  	MOV.B	#16, W13
0x41A4	0x22558C  	MOV	#lo_addr(NMRAnetDCC_TrackQueuePriority), W12
0x41A6	0x224F6B  	MOV	#lo_addr(NMRAnetDCC_TrackQueue), W11
0x41A8	0x21612A  	MOV	#lo_addr(_Track), W10
0x41AA	0x200100  	MOV	#16, W0
0x41AC	0x781F80  	PUSH	W0
0x41AE	0x07FE12  	RCALL	NMRAnetDCC_InitializeBuffer
0x41B0	0xB1002F  	SUB	#2, W15
;NMRAnetDCC.mpas,217 :: 		end;
L_end_NMRA_DCC_Initialize:
0x41B2	0x7806CF  	POP	W13
0x41B4	0x78064F  	POP	W12
0x41B6	0x7805CF  	POP	W11
0x41B8	0x78054F  	POP	W10
0x41BA	0x060000  	RETURN
; end of _NMRA_DCC_Initialize
NMRAnetDCC_InitializeBuffer:
0x3DD4	0xFA0000  	LNK	#0
;NMRAnetDCC.mpas,240 :: 		begin
;NMRAnetDCC.mpas,241 :: 		NMRA_DCC_ResetTransmitter(ABuffer);
; QueuePrioritySize start address is: 8 (W4)
0x3DD6	0x97FA0E  	MOV.B	[W14-8], W4
0x3DD8	0x07E4BE  	RCALL	NMRAnetDCC_NMRA_DCC_ResetTransmitter
;NMRAnetDCC.mpas,243 :: 		ABuffer^.Main.Slots := SlotQueue;
0x3DDA	0x780D0B  	MOV	W11, [W10]
;NMRAnetDCC.mpas,244 :: 		ABuffer^.Main.Count := 0;
0x3DDC	0x4500E2  	ADD	W10, #2, W1
0x3DDE	0xEF2000  	CLR	W0
0x3DE0	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,245 :: 		ABuffer^.Main.MaxCount := QueueSize;
0x3DE2	0x450063  	ADD	W10, #3, W0
0x3DE4	0x78480D  	MOV.B	W13, [W0]
;NMRAnetDCC.mpas,246 :: 		ABuffer^.Main.Head := 0;
0x3DE6	0x4500E4  	ADD	W10, #4, W1
0x3DE8	0xEF2000  	CLR	W0
0x3DEA	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,247 :: 		ABuffer^.Main.Tail := 0;
0x3DEC	0x4500E5  	ADD	W10, #5, W1
0x3DEE	0xEF2000  	CLR	W0
0x3DF0	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,248 :: 		ABuffer^.Main.Peak := 0;
0x3DF2	0x4500E6  	ADD	W10, #6, W1
0x3DF4	0xEF2000  	CLR	W0
0x3DF6	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,249 :: 		ABuffer^.Main.TotalSent := 0;
0x3DF8	0x4500E8  	ADD	W10, #8, W1
0x3DFA	0xEF2000  	CLR	W0
0x3DFC	0x780880  	MOV	W0, [W1]
;NMRAnetDCC.mpas,250 :: 		for i := 0 to ABuffer^.Main.MaxCount - 1 do
; i start address is: 10 (W5)
0x3DFE	0xEF200A  	CLR	W5
; QueuePrioritySize end address is: 8 (W4)
; i end address is: 10 (W5)
L_NMRAnetDCC_InitializeBuffer2:
; i start address is: 10 (W5)
; QueuePrioritySize start address is: 8 (W4)
0x3E00	0x450063  	ADD	W10, #3, W0
0x3E02	0xFB8010  	ZE	[W0], W0
0x3E04	0x5001E1  	SUB	W0, #1, W3
0x3E06	0xE12803  	CP	W5, W3
0x3E08	0x3C000C  	BRA GT	L_NMRAnetDCC_InitializeBuffer6
L_NMRAnetDCC_InitializeBuffer224:
;NMRAnetDCC.mpas,252 :: 		ABuffer^.Main.Slots^[i].Flags := MASK_DCC_PACKET_INITIALIZE_FLAGS;
0x3E0A	0x78001A  	MOV	[W10], W0
0x3E0C	0x780100  	MOV	W0, W2
0x3E0E	0x200060  	MOV	#6, W0
0x3E10	0xB80005  	MUL.UU	W0, W5, W0
0x3E12	0x410000  	ADD	W2, W0, W0
0x3E14	0x4000E5  	ADD	W0, #5, W1
0x3E16	0xEF2000  	CLR	W0
0x3E18	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,253 :: 		end;
0x3E1A	0xE12803  	CP	W5, W3
0x3E1C	0x320002  	BRA Z	L_NMRAnetDCC_InitializeBuffer6
L_NMRAnetDCC_InitializeBuffer225:
; i start address is: 10 (W5)
0x3E1E	0xEC200A  	INC	W5
; i end address is: 10 (W5)
; i end address is: 10 (W5)
0x3E20	0x37FFEF  	BRA	L_NMRAnetDCC_InitializeBuffer2
L_NMRAnetDCC_InitializeBuffer6:
;NMRAnetDCC.mpas,256 :: 		ABuffer^.Priority.Slots := PrioritySlotQueue;
0x3E22	0x45006A  	ADD	W10, #10, W0
0x3E24	0x78080C  	MOV	W12, [W0]
;NMRAnetDCC.mpas,257 :: 		ABuffer^.Priority.Count := 0;
0x3E26	0x45006A  	ADD	W10, #10, W0
0x3E28	0x4000E2  	ADD	W0, #2, W1
0x3E2A	0xEF2000  	CLR	W0
0x3E2C	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,258 :: 		ABuffer^.Priority.MaxCount := QueuePrioritySize;
0x3E2E	0x45006A  	ADD	W10, #10, W0
0x3E30	0x400063  	ADD	W0, #3, W0
0x3E32	0x784804  	MOV.B	W4, [W0]
; QueuePrioritySize end address is: 8 (W4)
;NMRAnetDCC.mpas,259 :: 		ABuffer^.Priority.Head := 0;
0x3E34	0x45006A  	ADD	W10, #10, W0
0x3E36	0x4000E4  	ADD	W0, #4, W1
0x3E38	0xEF2000  	CLR	W0
0x3E3A	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,260 :: 		ABuffer^.Priority.Tail := 0;
0x3E3C	0x45006A  	ADD	W10, #10, W0
0x3E3E	0x4000E5  	ADD	W0, #5, W1
0x3E40	0xEF2000  	CLR	W0
0x3E42	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,261 :: 		ABuffer^.Priority.Peak := 0;
0x3E44	0x45006A  	ADD	W10, #10, W0
0x3E46	0x4000E6  	ADD	W0, #6, W1
0x3E48	0xEF2000  	CLR	W0
0x3E4A	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,262 :: 		ABuffer^.Priority.TotalSent := 0;
0x3E4C	0x45006A  	ADD	W10, #10, W0
0x3E4E	0x4000E8  	ADD	W0, #8, W1
0x3E50	0xEF2000  	CLR	W0
0x3E52	0x780880  	MOV	W0, [W1]
;NMRAnetDCC.mpas,263 :: 		for i := 0 to ABuffer^.Priority.MaxCount - 1 do
; i start address is: 8 (W4)
0x3E54	0xEF2008  	CLR	W4
; i end address is: 8 (W4)
L_NMRAnetDCC_InitializeBuffer7:
; i start address is: 8 (W4)
0x3E56	0x45006A  	ADD	W10, #10, W0
0x3E58	0x400063  	ADD	W0, #3, W0
0x3E5A	0xFB8010  	ZE	[W0], W0
0x3E5C	0x5001E1  	SUB	W0, #1, W3
0x3E5E	0xE12003  	CP	W4, W3
0x3E60	0x3C000D  	BRA GT	L_NMRAnetDCC_InitializeBuffer11
L_NMRAnetDCC_InitializeBuffer226:
;NMRAnetDCC.mpas,264 :: 		ABuffer^.Priority.Slots^[i].Flags := MASK_DCC_PACKET_INITIALIZE_FLAGS;
0x3E62	0x45006A  	ADD	W10, #10, W0
0x3E64	0x780010  	MOV	[W0], W0
0x3E66	0x780100  	MOV	W0, W2
0x3E68	0x200060  	MOV	#6, W0
0x3E6A	0xB80004  	MUL.UU	W0, W4, W0
0x3E6C	0x410000  	ADD	W2, W0, W0
0x3E6E	0x4000E5  	ADD	W0, #5, W1
0x3E70	0xEF2000  	CLR	W0
0x3E72	0x784880  	MOV.B	W0, [W1]
0x3E74	0xE12003  	CP	W4, W3
0x3E76	0x320002  	BRA Z	L_NMRAnetDCC_InitializeBuffer11
L_NMRAnetDCC_InitializeBuffer227:
; i start address is: 8 (W4)
0x3E78	0xEC2008  	INC	W4
; i end address is: 8 (W4)
; i end address is: 8 (W4)
0x3E7A	0x37FFED  	BRA	L_NMRAnetDCC_InitializeBuffer7
L_NMRAnetDCC_InitializeBuffer11:
;NMRAnetDCC.mpas,265 :: 		end;
L_end_InitializeBuffer:
0x3E7C	0xFA8000  	ULNK
0x3E7E	0x060000  	RETURN
; end of NMRAnetDCC_InitializeBuffer
NMRAnetDCC_NMRA_DCC_ResetTransmitter:
;NMRAnetDCC.mpas,319 :: 		begin
;NMRAnetDCC.mpas,321 :: 		ABuffer^.TX_iStateMachine := STATE_NMRA_DCC_PREAMBLE;
0x0756	0x4500FB  	ADD	W10, #27, W1
0x0758	0xEF2000  	CLR	W0
0x075A	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,322 :: 		ABuffer^.TX_iBit := STATE_NMRA_DCC_BIT_7;
0x075C	0x4500FC  	ADD	W10, #28, W1
0x075E	0xB3C070  	MOV.B	#7, W0
0x0760	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,323 :: 		ABuffer^.TX_iDCC_Pin_StateMachine := STATE_NMRA_DCC_PIN_0;
0x0762	0x4500FD  	ADD	W10, #29, W1
0x0764	0xEF2000  	CLR	W0
0x0766	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,325 :: 		ABuffer^.TX_PreambleBitCount := $0;
0x0768	0x4500FA  	ADD	W10, #26, W1
0x076A	0xEF2000  	CLR	W0
0x076C	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,326 :: 		ABuffer^.TX_Flags := 0;
0x076E	0x200230  	MOV	#35, W0
0x0770	0x450080  	ADD	W10, W0, W1
0x0772	0xEF2000  	CLR	W0
0x0774	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,327 :: 		ABuffer^.TX_LastAddress := MESSAGE_IDLE_0;
0x0776	0x200220  	MOV	#34, W0
0x0778	0x450080  	ADD	W10, W0, W1
0x077A	0xB3CFF0  	MOV.B	#255, W0
0x077C	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,328 :: 		end;
L_end_NMRA_DCC_ResetTransmitter:
0x077E	0x060000  	RETURN
; end of NMRAnetDCC_NMRA_DCC_ResetTransmitter
_NMRA_DCC_Packet_Init:
0x4688	0xFA0006  	LNK	#6
;NMRAnetDCC.mpas,275 :: 		begin
;NMRAnetDCC.mpas,276 :: 		NMRA_DCC_LoadPacket(@NewDCCMessage, MESSAGE_IDLE_0, MESSAGE_IDLE_1, 0, 0, 0, 2);
0x468A	0x781F8A  	PUSH	W10
0x468C	0x781F8B  	PUSH	W11
0x468E	0x781F8C  	PUSH	W12
0x4690	0x781F8D  	PUSH	W13
0x4692	0x470060  	ADD	W14, #0, W0
0x4694	0xEF201A  	CLR	W13
0x4696	0xEF2018  	CLR	W12
0x4698	0xB3CFFB  	MOV.B	#255, W11
0x469A	0x780500  	MOV	W0, W10
0x469C	0x200020  	MOV	#2, W0
0x469E	0x781F80  	PUSH	W0
0x46A0	0xEF2000  	CLR	W0
0x46A2	0x781F80  	PUSH	W0
0x46A4	0xEF2000  	CLR	W0
0x46A6	0x781F80  	PUSH	W0
0x46A8	0x07E205  	RCALL	_NMRA_DCC_LoadPacket
0x46AA	0xB1006F  	SUB	#6, W15
;NMRAnetDCC.mpas,278 :: 		for i := 0 to MAX_NMRA_DCC_STARTUP_IDLE - 1 do
; i start address is: 0 (W0)
0x46AC	0xEF2000  	CLR	W0
; i end address is: 0 (W0)
0x46AE	0x780400  	MOV	W0, W8
L__NMRA_DCC_Packet_Init14:
;NMRAnetDCC.mpas,279 :: 		while not NMRA_DCC_QueuePacket(@Track, @NewDCCMessage, True) do;
; i start address is: 16 (W8)
; i start address is: 16 (W8)
; i end address is: 16 (W8)
0x46B0	0x370000  	BRA	L__NMRA_DCC_Packet_Init19
L__NMRA_DCC_Packet_Init216:
L__NMRA_DCC_Packet_Init19:
; i start address is: 16 (W8)
; i end address is: 16 (W8)
0x46B2	0x470060  	ADD	W14, #0, W0
0x46B4	0x2FFFFC  	MOV	#65535, W12
0x46B6	0x780580  	MOV	W0, W11
0x46B8	0x21612A  	MOV	#lo_addr(_Track), W10
0x46BA	0x07E412  	RCALL	_NMRA_DCC_QueuePacket
0x46BC	0xEEA000  	COM	W0
0x46BE	0xE20000  	CP0	W0
0x46C0	0x3AFFF8  	BRA NZ	L__NMRA_DCC_Packet_Init216
L__NMRA_DCC_Packet_Init229:
; i end address is: 16 (W8)
; i start address is: 16 (W8)
0x46C2	0xE14073  	CP	W8, #19
0x46C4	0x320002  	BRA Z	L__NMRA_DCC_Packet_Init17
L__NMRA_DCC_Packet_Init230:
; i start address is: 16 (W8)
0x46C6	0xEC2010  	INC	W8
; i end address is: 16 (W8)
; i end address is: 16 (W8)
0x46C8	0x37FFF3  	BRA	L__NMRA_DCC_Packet_Init14
L__NMRA_DCC_Packet_Init17:
;NMRAnetDCC.mpas,280 :: 		end;
L_end_NMRA_DCC_Packet_Init:
0x46CA	0x7806CF  	POP	W13
0x46CC	0x78064F  	POP	W12
0x46CE	0x7805CF  	POP	W11
0x46D0	0x78054F  	POP	W10
0x46D2	0xFA8000  	ULNK
0x46D4	0x060000  	RETURN
; end of _NMRA_DCC_Packet_Init
_NMRA_DCC_LoadPacket:
0x0AB4	0xFA0000  	LNK	#0
;NMRAnetDCC.mpas,380 :: 		begin
;NMRAnetDCC.mpas,381 :: 		NewMessage^.PacketBytes[0] := Data1;
; Data4 start address is: 2 (W1)
0x0AB6	0x97F88E  	MOV.B	[W14-8], W1
; Data5 start address is: 4 (W2)
0x0AB8	0x97F16E  	MOV.B	[W14-10], W2
; ValidDataByes start address is: 6 (W3)
0x0ABA	0x97F1CE  	MOV.B	[W14-12], W3
0x0ABC	0x784D0B  	MOV.B	W11, [W10]
;NMRAnetDCC.mpas,382 :: 		NewMessage^.PacketBytes[1] := Data2;
0x0ABE	0x450061  	ADD	W10, #1, W0
0x0AC0	0x78480C  	MOV.B	W12, [W0]
;NMRAnetDCC.mpas,383 :: 		NewMessage^.PacketBytes[2] := Data3;
0x0AC2	0x450062  	ADD	W10, #2, W0
0x0AC4	0x78480D  	MOV.B	W13, [W0]
;NMRAnetDCC.mpas,384 :: 		NewMessage^.PacketBytes[3] := Data4;
0x0AC6	0x450063  	ADD	W10, #3, W0
0x0AC8	0x784801  	MOV.B	W1, [W0]
; Data4 end address is: 2 (W1)
;NMRAnetDCC.mpas,385 :: 		NewMessage^.PacketBytes[4] := Data5;
0x0ACA	0x450064  	ADD	W10, #4, W0
0x0ACC	0x784802  	MOV.B	W2, [W0]
; Data5 end address is: 4 (W2)
;NMRAnetDCC.mpas,386 :: 		NewMessage^.Flags := ValidDataByes;
0x0ACE	0x450065  	ADD	W10, #5, W0
0x0AD0	0x784803  	MOV.B	W3, [W0]
; ValidDataByes end address is: 6 (W3)
;NMRAnetDCC.mpas,387 :: 		end;
L_end_NMRA_DCC_LoadPacket:
0x0AD2	0xFA8000  	ULNK
0x0AD4	0x060000  	RETURN
; end of _NMRA_DCC_LoadPacket
_NMRA_DCC_QueuePacket:
;NMRAnetDCC.mpas,419 :: 		begin
;NMRAnetDCC.mpas,420 :: 		Result := False;
0x0EE0	0x781F8B  	PUSH	W11
0x0EE2	0x781F8C  	PUSH	W12
0x0EE4	0x781F8D  	PUSH	W13
; Result start address is: 4 (W2)
0x0EE6	0xEF2004  	CLR	W2
;NMRAnetDCC.mpas,422 :: 		if HighPriority then
0x0EE8	0xE20018  	CP0	W12
0x0EEA	0x32004B  	BRA Z	L__NMRA_DCC_QueuePacket44
L__NMRA_DCC_QueuePacket244:
;NMRAnetDCC.mpas,424 :: 		if ABuffer^.Priority.Count < ABuffer^.Priority.MaxCount then
0x0EEC	0x4500EA  	ADD	W10, #10, W1
0x0EEE	0x408062  	ADD	W1, #2, W0
0x0EF0	0x4080E3  	ADD	W1, #3, W1
0x0EF2	0x784010  	MOV.B	[W0], W0
0x0EF4	0xE10411  	CP.B	W0, [W1]
0x0EF6	0x310043  	BRA GEU	L__NMRA_DCC_QueuePacket213
L__NMRA_DCC_QueuePacket245:
; Result end address is: 4 (W2)
;NMRAnetDCC.mpas,426 :: 		iNextHead := ABuffer^.Priority.Head;
0x0EF8	0x4501EA  	ADD	W10, #10, W3
0x0EFA	0x418064  	ADD	W3, #4, W0
; iNextHead start address is: 8 (W4)
0x0EFC	0xFB8210  	ZE	[W0], W4
;NMRAnetDCC.mpas,427 :: 		QueueTarget := @ABuffer^.Priority.Slots^[iNextHead];
0x0EFE	0x780013  	MOV	[W3], W0
0x0F00	0x780100  	MOV	W0, W2
0x0F02	0x200060  	MOV	#6, W0
0x0F04	0xB80004  	MUL.UU	W0, W4, W0
; QueueTarget start address is: 12 (W6)
0x0F06	0x410300  	ADD	W2, W0, W6
;NMRAnetDCC.mpas,428 :: 		Inc(iNextHead);
0x0F08	0x4200E1  	ADD	W4, #1, W1
; iNextHead end address is: 8 (W4)
; iNextHead start address is: 14 (W7)
0x0F0A	0x780381  	MOV	W1, W7
;NMRAnetDCC.mpas,429 :: 		if iNextHead >= ABuffer^.Priority.MaxCount then
0x0F0C	0x418063  	ADD	W3, #3, W0
0x0F0E	0x784010  	MOV.B	[W0], W0
0x0F10	0xFB8000  	ZE	W0, W0
0x0F12	0xE10800  	CP	W1, W0
0x0F14	0x350002  	BRA LT	L__NMRA_DCC_QueuePacket212
L__NMRA_DCC_QueuePacket246:
;NMRAnetDCC.mpas,430 :: 		iNextHead := 0;
0x0F16	0xEF200E  	CLR	W7
; iNextHead end address is: 14 (W7)
0x0F18	0x370000  	BRA	L__NMRA_DCC_QueuePacket50
L__NMRA_DCC_QueuePacket212:
;NMRAnetDCC.mpas,429 :: 		if iNextHead >= ABuffer^.Priority.MaxCount then
;NMRAnetDCC.mpas,430 :: 		iNextHead := 0;
L__NMRA_DCC_QueuePacket50:
;NMRAnetDCC.mpas,432 :: 		NMRA_DCC_LoadPacket(QueueTarget, PacketBytes[0], PacketBytes[1], PacketBytes[2], PacketBytes[3], PacketBytes[4], NewMessage^.Flags and MASK_DCC_PACKET_COUNT);
; iNextHead start address is: 14 (W7)
0x0F1A	0x4582E1  	ADD	W11, #1, W5
0x0F1C	0x458262  	ADD	W11, #2, W4
0x0F1E	0x4581E3  	ADD	W11, #3, W3
0x0F20	0x4580E4  	ADD	W11, #4, W1
0x0F22	0x458065  	ADD	W11, #5, W0
0x0F24	0xFB8010  	ZE	[W0], W0
0x0F26	0x600167  	AND	W0, #7, W2
0x0F28	0x784011  	MOV.B	[W1], W0
0x0F2A	0x784093  	MOV.B	[W3], W1
0x0F2C	0x781F8A  	PUSH	W10
0x0F2E	0x784694  	MOV.B	[W4], W13
0x0F30	0x784615  	MOV.B	[W5], W12
0x0F32	0x78459B  	MOV.B	[W11], W11
0x0F34	0x780506  	MOV	W6, W10
0x0F36	0x781F82  	PUSH	W2
0x0F38	0xFB8000  	ZE	W0, W0
0x0F3A	0x781F80  	PUSH	W0
0x0F3C	0xFB8001  	ZE	W1, W0
0x0F3E	0x781F80  	PUSH	W0
0x0F40	0x07FDB9  	RCALL	_NMRA_DCC_LoadPacket
0x0F42	0xB1006F  	SUB	#6, W15
;NMRAnetDCC.mpas,433 :: 		NMRA_DCCClassifyAddress(QueueTarget);
; QueueTarget end address is: 12 (W6)
0x0F44	0x780506  	MOV	W6, W10
0x0F46	0x07FB26  	RCALL	NMRAnetDCC_NMRA_DCCClassifyAddress
0x0F48	0x78054F  	POP	W10
;NMRAnetDCC.mpas,434 :: 		ABuffer^.Priority.Head := iNextHead;
0x0F4A	0x45006A  	ADD	W10, #10, W0
0x0F4C	0x400064  	ADD	W0, #4, W0
0x0F4E	0x784807  	MOV.B	W7, [W0]
; iNextHead end address is: 14 (W7)
;NMRAnetDCC.mpas,435 :: 		if ABuffer^.Priority.Count + 1 > ABuffer^.Priority.Peak then   // Need to do this before actually increasing the count, see the next comment
0x0F50	0x45016A  	ADD	W10, #10, W2
0x0F52	0x410062  	ADD	W2, #2, W0
0x0F54	0xFB8010  	ZE	[W0], W0
0x0F56	0x4000E1  	ADD	W0, #1, W1
0x0F58	0x410066  	ADD	W2, #6, W0
0x0F5A	0x784010  	MOV.B	[W0], W0
0x0F5C	0xFB8000  	ZE	W0, W0
0x0F5E	0xE10800  	CP	W1, W0
0x0F60	0x360006  	BRA LEU	L__NMRA_DCC_QueuePacket53
L__NMRA_DCC_QueuePacket247:
;NMRAnetDCC.mpas,436 :: 		ABuffer^.Priority.Peak := ABuffer^.Priority.Count + 1;
0x0F62	0x45006A  	ADD	W10, #10, W0
0x0F64	0x4000E6  	ADD	W0, #6, W1
0x0F66	0xECA000  	INC2	W0
0x0F68	0xFB8010  	ZE	[W0], W0
0x0F6A	0xEC2000  	INC	W0
0x0F6C	0x784880  	MOV.B	W0, [W1]
L__NMRA_DCC_QueuePacket53:
;NMRAnetDCC.mpas,437 :: 		Inc(ABuffer^.Priority.Count);                                   // Everything must be valid by this point as the interrupt can cut in after this and transfer this immediately to the transmitter
0x0F6E	0x45006A  	ADD	W10, #10, W0
0x0F70	0x4000E2  	ADD	W0, #2, W1
0x0F72	0xFB8011  	ZE	[W1], W0
0x0F74	0xEC2000  	INC	W0
0x0F76	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,438 :: 		Result := True;
; Result start address is: 0 (W0)
0x0F78	0x2FFFF0  	MOV	#65535, W0
; Result end address is: 0 (W0)
0x0F7A	0x780080  	MOV	W0, W1
;NMRAnetDCC.mpas,439 :: 		end
0x0F7C	0x370001  	BRA	L__NMRA_DCC_QueuePacket47
L__NMRA_DCC_QueuePacket213:
;NMRAnetDCC.mpas,424 :: 		if ABuffer^.Priority.Count < ABuffer^.Priority.MaxCount then
0x0F7E	0x780082  	MOV	W2, W1
;NMRAnetDCC.mpas,439 :: 		end
L__NMRA_DCC_QueuePacket47:
;NMRAnetDCC.mpas,440 :: 		end else
; Result start address is: 2 (W1)
; Result end address is: 2 (W1)
0x0F80	0x370044  	BRA	L__NMRA_DCC_QueuePacket45
L__NMRA_DCC_QueuePacket44:
;NMRAnetDCC.mpas,442 :: 		if ABuffer^.Main.Count < ABuffer^.Main.MaxCount then
; Result start address is: 4 (W2)
0x0F82	0x450062  	ADD	W10, #2, W0
0x0F84	0x4500E3  	ADD	W10, #3, W1
0x0F86	0x784010  	MOV.B	[W0], W0
0x0F88	0xE10411  	CP.B	W0, [W1]
0x0F8A	0x31003E  	BRA GEU	L__NMRA_DCC_QueuePacket215
L__NMRA_DCC_QueuePacket248:
; Result end address is: 4 (W2)
;NMRAnetDCC.mpas,444 :: 		iNextHead := ABuffer^.Main.Head;
0x0F8C	0x450064  	ADD	W10, #4, W0
; iNextHead start address is: 6 (W3)
0x0F8E	0xFB8190  	ZE	[W0], W3
;NMRAnetDCC.mpas,445 :: 		QueueTarget := @ABuffer^.Main.Slots^[iNextHead];
0x0F90	0x78001A  	MOV	[W10], W0
0x0F92	0x780100  	MOV	W0, W2
0x0F94	0x200060  	MOV	#6, W0
0x0F96	0xB80003  	MUL.UU	W0, W3, W0
; QueueTarget start address is: 12 (W6)
0x0F98	0x410300  	ADD	W2, W0, W6
;NMRAnetDCC.mpas,446 :: 		Inc(iNextHead);
0x0F9A	0x4180E1  	ADD	W3, #1, W1
; iNextHead end address is: 6 (W3)
; iNextHead start address is: 14 (W7)
0x0F9C	0x780381  	MOV	W1, W7
;NMRAnetDCC.mpas,447 :: 		if iNextHead >= ABuffer^.Main.MaxCount then
0x0F9E	0x450063  	ADD	W10, #3, W0
0x0FA0	0x784010  	MOV.B	[W0], W0
0x0FA2	0xFB8000  	ZE	W0, W0
0x0FA4	0xE10800  	CP	W1, W0
0x0FA6	0x350002  	BRA LT	L__NMRA_DCC_QueuePacket214
L__NMRA_DCC_QueuePacket249:
;NMRAnetDCC.mpas,448 :: 		iNextHead := 0;
0x0FA8	0xEF200E  	CLR	W7
; iNextHead end address is: 14 (W7)
0x0FAA	0x370000  	BRA	L__NMRA_DCC_QueuePacket59
L__NMRA_DCC_QueuePacket214:
;NMRAnetDCC.mpas,447 :: 		if iNextHead >= ABuffer^.Main.MaxCount then
;NMRAnetDCC.mpas,448 :: 		iNextHead := 0;
L__NMRA_DCC_QueuePacket59:
;NMRAnetDCC.mpas,450 :: 		NMRA_DCC_LoadPacket(QueueTarget, PacketBytes[0], PacketBytes[1], PacketBytes[2], PacketBytes[3], PacketBytes[4], NewMessage^.Flags and MASK_DCC_PACKET_COUNT);
; iNextHead start address is: 14 (W7)
0x0FAC	0x4582E1  	ADD	W11, #1, W5
0x0FAE	0x458262  	ADD	W11, #2, W4
0x0FB0	0x4581E3  	ADD	W11, #3, W3
0x0FB2	0x4580E4  	ADD	W11, #4, W1
0x0FB4	0x458065  	ADD	W11, #5, W0
0x0FB6	0xFB8010  	ZE	[W0], W0
0x0FB8	0x600167  	AND	W0, #7, W2
0x0FBA	0x784011  	MOV.B	[W1], W0
0x0FBC	0x784093  	MOV.B	[W3], W1
0x0FBE	0x781F8A  	PUSH	W10
0x0FC0	0x784694  	MOV.B	[W4], W13
0x0FC2	0x784615  	MOV.B	[W5], W12
0x0FC4	0x78459B  	MOV.B	[W11], W11
0x0FC6	0x780506  	MOV	W6, W10
0x0FC8	0x781F82  	PUSH	W2
0x0FCA	0xFB8000  	ZE	W0, W0
0x0FCC	0x781F80  	PUSH	W0
0x0FCE	0xFB8001  	ZE	W1, W0
0x0FD0	0x781F80  	PUSH	W0
0x0FD2	0x07FD70  	RCALL	_NMRA_DCC_LoadPacket
0x0FD4	0xB1006F  	SUB	#6, W15
;NMRAnetDCC.mpas,451 :: 		NMRA_DCCClassifyAddress(QueueTarget);
; QueueTarget end address is: 12 (W6)
0x0FD6	0x780506  	MOV	W6, W10
0x0FD8	0x07FADD  	RCALL	NMRAnetDCC_NMRA_DCCClassifyAddress
0x0FDA	0x78054F  	POP	W10
;NMRAnetDCC.mpas,452 :: 		ABuffer^.Main.Head := iNextHead;
0x0FDC	0x450064  	ADD	W10, #4, W0
0x0FDE	0x784807  	MOV.B	W7, [W0]
; iNextHead end address is: 14 (W7)
;NMRAnetDCC.mpas,453 :: 		if ABuffer^.Main.Count + 1 > ABuffer^.Main.Peak then  // Need to do this before actually increasing the count, see the next comment
0x0FE0	0x450062  	ADD	W10, #2, W0
0x0FE2	0xFB8010  	ZE	[W0], W0
0x0FE4	0x4000E1  	ADD	W0, #1, W1
0x0FE6	0x450066  	ADD	W10, #6, W0
0x0FE8	0x784010  	MOV.B	[W0], W0
0x0FEA	0xFB8000  	ZE	W0, W0
0x0FEC	0xE10800  	CP	W1, W0
0x0FEE	0x360005  	BRA LEU	L__NMRA_DCC_QueuePacket62
L__NMRA_DCC_QueuePacket250:
;NMRAnetDCC.mpas,454 :: 		ABuffer^.Main.Peak := ABuffer^.Main.Count + 1;
0x0FF0	0x4500E6  	ADD	W10, #6, W1
0x0FF2	0x450062  	ADD	W10, #2, W0
0x0FF4	0xFB8010  	ZE	[W0], W0
0x0FF6	0xEC2000  	INC	W0
0x0FF8	0x784880  	MOV.B	W0, [W1]
L__NMRA_DCC_QueuePacket62:
;NMRAnetDCC.mpas,455 :: 		Inc(ABuffer^.Main.Count);                              // Everything must be valid by this point as the interrupt can cut in after this and transfer this immediately to the transmitter
0x0FFA	0x4500E2  	ADD	W10, #2, W1
0x0FFC	0xFB8011  	ZE	[W1], W0
0x0FFE	0xEC2000  	INC	W0
0x1000	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,456 :: 		Result := True;
; Result start address is: 0 (W0)
0x1002	0x2FFFF0  	MOV	#65535, W0
; Result end address is: 0 (W0)
0x1004	0x780080  	MOV	W0, W1
;NMRAnetDCC.mpas,457 :: 		end;
0x1006	0x370001  	BRA	L__NMRA_DCC_QueuePacket56
L__NMRA_DCC_QueuePacket215:
;NMRAnetDCC.mpas,442 :: 		if ABuffer^.Main.Count < ABuffer^.Main.MaxCount then
0x1008	0x780082  	MOV	W2, W1
;NMRAnetDCC.mpas,457 :: 		end;
L__NMRA_DCC_QueuePacket56:
;NMRAnetDCC.mpas,458 :: 		end
; Result start address is: 2 (W1)
; Result end address is: 2 (W1)
L__NMRA_DCC_QueuePacket45:
;NMRAnetDCC.mpas,459 :: 		end;
; Result start address is: 2 (W1)
0x100A	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRA_DCC_QueuePacket:
0x100C	0x7806CF  	POP	W13
0x100E	0x78064F  	POP	W12
0x1010	0x7805CF  	POP	W11
0x1012	0x060000  	RETURN
; end of _NMRA_DCC_QueuePacket
NMRAnetDCC_NMRA_DCCClassifyAddress:
;NMRAnetDCC.mpas,342 :: 		begin
;NMRAnetDCC.mpas,344 :: 		AMessage^.Flags := AMessage^.Flags and not MASK_DCC_PACKET_ADDRESS_BITS;
0x0594	0x4500E5  	ADD	W10, #5, W1
0x0596	0xFB8011  	ZE	[W1], W0
0x0598	0x600067  	AND	W0, #7, W0
0x059A	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,346 :: 		if (AMessage^.PacketBytes[0] = MESSAGE_RESET_0) or (AMessage^.PacketBytes[0] = MESSAGE_IDLE_0) or (AMessage^.PacketBytes[0] = $FE) then
0x059C	0x78411A  	MOV.B	[W10], W2
0x059E	0xE11460  	CP.B	W2, #0
0x05A0	0xEF2002  	CLR	W1
0x05A2	0x3A0001  	BRA NZ	L_NMRAnetDCC_NMRA_DCCClassifyAddress235
0x05A4	0xEEA002  	COM	W1
L_NMRAnetDCC_NMRA_DCCClassifyAddress235:
0x05A6	0xB3CFF0  	MOV.B	#255, W0
0x05A8	0xE11400  	CP.B	W2, W0
0x05AA	0xEF2000  	CLR	W0
0x05AC	0x3A0001  	BRA NZ	L_NMRAnetDCC_NMRA_DCCClassifyAddress236
0x05AE	0xEEA000  	COM	W0
L_NMRAnetDCC_NMRA_DCCClassifyAddress236:
0x05B0	0x708080  	IOR	W1, W0, W1
0x05B2	0xB3CFE0  	MOV.B	#254, W0
0x05B4	0xE11400  	CP.B	W2, W0
0x05B6	0xEF2000  	CLR	W0
0x05B8	0x3A0001  	BRA NZ	L_NMRAnetDCC_NMRA_DCCClassifyAddress237
0x05BA	0xEEA000  	COM	W0
L_NMRAnetDCC_NMRA_DCCClassifyAddress237:
0x05BC	0x708000  	IOR	W1, W0, W0
0x05BE	0x320006  	BRA Z	L_NMRAnetDCC_NMRA_DCCClassifyAddress30
L_NMRAnetDCC_NMRA_DCCClassifyAddress238:
;NMRAnetDCC.mpas,347 :: 		AMessage^.Flags := AMessage^.Flags or MASK_DCC_PACKET_SPECIAL
0x05C0	0x450165  	ADD	W10, #5, W2
0x05C2	0xFB8092  	ZE	[W2], W1
0x05C4	0x200800  	MOV	#128, W0
0x05C6	0x708000  	IOR	W1, W0, W0
0x05C8	0x784900  	MOV.B	W0, [W2]
0x05CA	0x370021  	BRA	L_NMRAnetDCC_NMRA_DCCClassifyAddress31
;NMRAnetDCC.mpas,348 :: 		else
L_NMRAnetDCC_NMRA_DCCClassifyAddress30:
;NMRAnetDCC.mpas,349 :: 		if AMessage^.PacketBytes[0] < 128 then
0x05CC	0x78409A  	MOV.B	[W10], W1
0x05CE	0xB3C800  	MOV.B	#128, W0
0x05D0	0xE10C00  	CP.B	W1, W0
0x05D2	0x310005  	BRA GEU	L_NMRAnetDCC_NMRA_DCCClassifyAddress33
L_NMRAnetDCC_NMRA_DCCClassifyAddress239:
;NMRAnetDCC.mpas,350 :: 		AMessage^.Flags := AMessage^.Flags or MASK_DCC_PACKET_SHORT_MULTI_FUNCTION_ADDRESS
0x05D4	0x4500E5  	ADD	W10, #5, W1
0x05D6	0xFB8011  	ZE	[W1], W0
0x05D8	0x700068  	IOR	W0, #8, W0
0x05DA	0x784880  	MOV.B	W0, [W1]
0x05DC	0x370018  	BRA	L_NMRAnetDCC_NMRA_DCCClassifyAddress34
;NMRAnetDCC.mpas,351 :: 		else
L_NMRAnetDCC_NMRA_DCCClassifyAddress33:
;NMRAnetDCC.mpas,352 :: 		if AMessage^.PacketBytes[0] < 192 then
0x05DE	0x78409A  	MOV.B	[W10], W1
0x05E0	0xB3CC00  	MOV.B	#192, W0
0x05E2	0xE10C00  	CP.B	W1, W0
0x05E4	0x310005  	BRA GEU	L_NMRAnetDCC_NMRA_DCCClassifyAddress36
L_NMRAnetDCC_NMRA_DCCClassifyAddress240:
;NMRAnetDCC.mpas,353 :: 		AMessage^.Flags := AMessage^.Flags or MASK_DCC_PACKET_ACCESSORY_ADDRESS
0x05E6	0x4500E5  	ADD	W10, #5, W1
0x05E8	0xFB8011  	ZE	[W1], W0
0x05EA	0x700070  	IOR	W0, #16, W0
0x05EC	0x784880  	MOV.B	W0, [W1]
0x05EE	0x37000F  	BRA	L_NMRAnetDCC_NMRA_DCCClassifyAddress37
;NMRAnetDCC.mpas,354 :: 		else
L_NMRAnetDCC_NMRA_DCCClassifyAddress36:
;NMRAnetDCC.mpas,355 :: 		if AMessage^.PacketBytes[0] < 232 then
0x05F0	0x78409A  	MOV.B	[W10], W1
0x05F2	0xB3CE80  	MOV.B	#232, W0
0x05F4	0xE10C00  	CP.B	W1, W0
0x05F6	0x310006  	BRA GEU	L_NMRAnetDCC_NMRA_DCCClassifyAddress39
L_NMRAnetDCC_NMRA_DCCClassifyAddress241:
;NMRAnetDCC.mpas,356 :: 		AMessage^.Flags := AMessage^.Flags or MASK_DCC_PACKET_LONG_MULTI_FUNCTION_ADDRESS
0x05F8	0x450165  	ADD	W10, #5, W2
0x05FA	0xFB8092  	ZE	[W2], W1
0x05FC	0x200200  	MOV	#32, W0
0x05FE	0x708000  	IOR	W1, W0, W0
0x0600	0x784900  	MOV.B	W0, [W2]
0x0602	0x370005  	BRA	L_NMRAnetDCC_NMRA_DCCClassifyAddress40
;NMRAnetDCC.mpas,357 :: 		else
L_NMRAnetDCC_NMRA_DCCClassifyAddress39:
;NMRAnetDCC.mpas,358 :: 		AMessage^.Flags := AMessage^.Flags or MASK_DCC_PACKET_RESERVED
0x0604	0x450165  	ADD	W10, #5, W2
0x0606	0xFB8092  	ZE	[W2], W1
0x0608	0x200400  	MOV	#64, W0
0x060A	0x708000  	IOR	W1, W0, W0
0x060C	0x784900  	MOV.B	W0, [W2]
L_NMRAnetDCC_NMRA_DCCClassifyAddress40:
L_NMRAnetDCC_NMRA_DCCClassifyAddress37:
L_NMRAnetDCC_NMRA_DCCClassifyAddress34:
L_NMRAnetDCC_NMRA_DCCClassifyAddress31:
;NMRAnetDCC.mpas,359 :: 		end;
L_end_NMRA_DCCClassifyAddress:
0x060E	0x060000  	RETURN
; end of NMRAnetDCC_NMRA_DCCClassifyAddress
_UART1_Write_Text:
0x1014	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.mpas,289 :: 		
;__Lib_UART_12_p24_p33.mpas,290 :: 		
; counter start address is: 2 (W1)
0x1016	0xEF2002  	CLR	W1
;__Lib_UART_12_p24_p33.mpas,291 :: 		
0x1018	0x78401A  	MOV.B	[W10], W0
; data_ start address is: 4 (W2)
0x101A	0x784100  	MOV.B	W0, W2
; data_ end address is: 4 (W2)
; counter end address is: 2 (W1)
0x101C	0x784002  	MOV.B	W2, W0
0x101E	0x784101  	MOV.B	W1, W2
;__Lib_UART_12_p24_p33.mpas,292 :: 		
L__UART1_Write_Text43:
; data_ start address is: 0 (W0)
; counter start address is: 4 (W2)
0x1020	0xE10460  	CP.B	W0, #0
0x1022	0x32000A  	BRA Z	L__UART1_Write_Text44
L__UART1_Write_Text206:
;__Lib_UART_12_p24_p33.mpas,294 :: 		
0x1024	0x781F8A  	PUSH	W10
; data_ end address is: 0 (W0)
0x1026	0xFB8500  	ZE	W0, W10
0x1028	0x07F994  	RCALL	_UART1_Write
0x102A	0x78054F  	POP	W10
;__Lib_UART_12_p24_p33.mpas,295 :: 		
; counter start address is: 2 (W1)
0x102C	0x4140E1  	ADD.B	W2, #1, W1
; counter end address is: 4 (W2)
;__Lib_UART_12_p24_p33.mpas,296 :: 		
0x102E	0xFB8001  	ZE	W1, W0
0x1030	0x450000  	ADD	W10, W0, W0
; data_ start address is: 0 (W0)
0x1032	0x784010  	MOV.B	[W0], W0
;__Lib_UART_12_p24_p33.mpas,297 :: 		
0x1034	0x784101  	MOV.B	W1, W2
; counter end address is: 2 (W1)
; data_ end address is: 0 (W0)
0x1036	0x37FFF4  	BRA	L__UART1_Write_Text43
L__UART1_Write_Text44:
;__Lib_UART_12_p24_p33.mpas,298 :: 		
L_end_UART1_Write_Text:
0x1038	0xFA8000  	ULNK
0x103A	0x060000  	RETURN
; end of _UART1_Write_Text
_UART1_Write:
0x0352	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.mpas,264 :: 		
;__Lib_UART_12_p24_p33.mpas,265 :: 		
L__UART1_Write34:
0x0354	0x801111  	MOV	U1STA, W1
0x0356	0x201000  	MOV	#256, W0
0x0358	0x608000  	AND	W1, W0, W0
0x035A	0xE10060  	CP	W0, #0
0x035C	0x3A0002  	BRA NZ	L__UART1_Write35
L__UART1_Write201:
;__Lib_UART_12_p24_p33.mpas,266 :: 		
0x035E	0x000000  	NOP
0x0360	0x37FFF9  	BRA	L__UART1_Write34
L__UART1_Write35:
;__Lib_UART_12_p24_p33.mpas,267 :: 		
0x0362	0x88112A  	MOV	W10, U1TXREG
;__Lib_UART_12_p24_p33.mpas,268 :: 		
L_end_UART1_Write:
0x0364	0xFA8000  	ULNK
0x0366	0x060000  	RETURN
; end of _UART1_Write
_NMRAnetNode_NextNode:
;NMRAnetNode.mpas,427 :: 		begin
;NMRAnetNode.mpas,428 :: 		LockCANInterrupt;
0x4BC2	0x07F884  	RCALL	_LockCANInterrupt
;NMRAnetNode.mpas,429 :: 		Result := PNMRAnetNode( nil);
; Result start address is: 2 (W1)
0x4BC4	0x200001  	MOV	#0, W1
;NMRAnetNode.mpas,430 :: 		if Nodes.AllocatedCount > 0 then
0x4BC6	0x812780  	MOV	_Nodes+3120, W0
0x4BC8	0xE10060  	CP	W0, #0
0x4BCA	0x340010  	BRA LE	L__NMRAnetNode_NextNode216
L__NMRAnetNode_NextNode260:
; Result end address is: 2 (W1)
;NMRAnetNode.mpas,432 :: 		if Nodes.iActiveNode > Nodes.AllocatedCount - 1 then
0x4BCC	0x812780  	MOV	_Nodes+3120, W0
0x4BCE	0x5000E1  	SUB	W0, #1, W1
0x4BD0	0x224F20  	MOV	#lo_addr(_Nodes+3122), W0
0x4BD2	0xE10810  	CP	W1, [W0]
0x4BD4	0x3D0002  	BRA GE	L__NMRAnetNode_NextNode104
L__NMRAnetNode_NextNode261:
;NMRAnetNode.mpas,433 :: 		Nodes.iActiveNode := 0;
0x4BD6	0xEF2000  	CLR	W0
0x4BD8	0x892790  	MOV	W0, _Nodes+3122
L__NMRAnetNode_NextNode104:
;NMRAnetNode.mpas,434 :: 		Result := Nodes.AllocatedList[Nodes.iActiveNode];
0x4BDA	0x812790  	MOV	_Nodes+3122, W0
0x4BDC	0xDD00C1  	SL	W0, #1, W1
0x4BDE	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x4BE0	0x400001  	ADD	W0, W1, W0
; Result start address is: 2 (W1)
0x4BE2	0x780090  	MOV	[W0], W1
;NMRAnetNode.mpas,435 :: 		Inc(Nodes.iActiveNode);
0x4BE4	0x812790  	MOV	_Nodes+3122, W0
0x4BE6	0xEC2000  	INC	W0
0x4BE8	0x892790  	MOV	W0, _Nodes+3122
; Result end address is: 2 (W1)
;NMRAnetNode.mpas,436 :: 		end;
0x4BEA	0x370000  	BRA	L__NMRAnetNode_NextNode101
L__NMRAnetNode_NextNode216:
;NMRAnetNode.mpas,430 :: 		if Nodes.AllocatedCount > 0 then
;NMRAnetNode.mpas,436 :: 		end;
L__NMRAnetNode_NextNode101:
;NMRAnetNode.mpas,437 :: 		UnLockCANInterrupt;
; Result start address is: 2 (W1)
0x4BEC	0x781F81  	PUSH	W1
0x4BEE	0x07F95C  	RCALL	_UnLockCANInterrupt
0x4BF0	0x7800CF  	POP	W1
;NMRAnetNode.mpas,438 :: 		end;
0x4BF2	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetNode_NextNode:
0x4BF4	0x060000  	RETURN
; end of _NMRAnetNode_NextNode
_LockCANInterrupt:
;dsPIC33_CAN.mpas,632 :: 		begin
;dsPIC33_CAN.mpas,633 :: 		if CAN_Engine.InterruptLockCount = 0 then
0x3CCC	0x225DB0  	MOV	#lo_addr(_CAN_Engine+1), W0
0x3CCE	0x784010  	MOV.B	[W0], W0
0x3CD0	0xE10460  	CP.B	W0, #0
0x3CD2	0x3A0001  	BRA NZ	L__LockCANInterrupt89
L__LockCANInterrupt326:
;dsPIC33_CAN.mpas,634 :: 		C1IE_bit := 0;
0x3CD4	0xA96824  	BCLR	C1IE_bit, BitPos(C1IE_bit+0)
L__LockCANInterrupt89:
;dsPIC33_CAN.mpas,635 :: 		Inc(CAN_Engine.InterruptLockCount);
0x3CD6	0x225DB0  	MOV	#lo_addr(_CAN_Engine+1), W0
0x3CD8	0xFB8010  	ZE	[W0], W0
0x3CDA	0x4000E1  	ADD	W0, #1, W1
0x3CDC	0x225DB0  	MOV	#lo_addr(_CAN_Engine+1), W0
0x3CDE	0x784801  	MOV.B	W1, [W0]
;dsPIC33_CAN.mpas,636 :: 		end;
L_end_LockCANInterrupt:
0x3CE0	0x060000  	RETURN
; end of _LockCANInterrupt
_UnLockCANInterrupt:
;dsPIC33_CAN.mpas,639 :: 		begin
;dsPIC33_CAN.mpas,640 :: 		Dec(CAN_Engine.InterruptLockCount);
0x3EA8	0x225DB0  	MOV	#lo_addr(_CAN_Engine+1), W0
0x3EAA	0xFB8010  	ZE	[W0], W0
0x3EAC	0x5000E1  	SUB	W0, #1, W1
0x3EAE	0x225DB0  	MOV	#lo_addr(_CAN_Engine+1), W0
0x3EB0	0x784801  	MOV.B	W1, [W0]
;dsPIC33_CAN.mpas,641 :: 		if CAN_Engine.InterruptLockCount = 0 then
0x3EB2	0x225DB0  	MOV	#lo_addr(_CAN_Engine+1), W0
0x3EB4	0x784010  	MOV.B	[W0], W0
0x3EB6	0xE10460  	CP.B	W0, #0
0x3EB8	0x3A0001  	BRA NZ	L__UnLockCANInterrupt93
L__UnLockCANInterrupt328:
;dsPIC33_CAN.mpas,642 :: 		C1IE_bit := 1;
0x3EBA	0xA86824  	BSET	C1IE_bit, BitPos(C1IE_bit+0)
L__UnLockCANInterrupt93:
;dsPIC33_CAN.mpas,643 :: 		end;
L_end_UnLockCANInterrupt:
0x3EBC	0x060000  	RETURN
; end of _UnLockCANInterrupt
_NMRAnetStateMachine_Process:
0x46F0	0xFA0016  	LNK	#22
;NMRAnetStateMachine.mpas,1035 :: 		begin
;NMRAnetStateMachine.mpas,1039 :: 		LockCANInterrupt;
0x46F2	0x781F8B  	PUSH	W11
0x46F4	0x781F8C  	PUSH	W12
0x46F6	0x781F8D  	PUSH	W13
0x46F8	0x07FAE9  	RCALL	_LockCANInterrupt
;NMRAnetStateMachine.mpas,1040 :: 		case Node^.iStateMachine of
0x46FA	0x450079  	ADD	W10, #25, W0
0x46FC	0x784010  	MOV.B	[W0], W0
0x46FE	0x985740  	MOV.B	W0, [W14+20]
;NMRAnetStateMachine.mpas,1041 :: 		STATE_NMRABUS_START :
0x4700	0xE10460  	CP.B	W0, #0
0x4702	0x3A000F  	BRA NZ	L__NMRAnetStateMachine_Process470
L__NMRAnetStateMachine_Process758:
;NMRAnetStateMachine.mpas,1043 :: 		CANStorage_FlushBuffers(Node^.Info.AliasID);
0x4704	0x450062  	ADD	W10, #2, W0
0x4706	0x400070  	ADD	W0, #16, W0
0x4708	0x781F8A  	PUSH	W10
0x470A	0x780510  	MOV	[W0], W10
0x470C	0x07FBF5  	RCALL	_CANStorage_FlushBuffers
0x470E	0x78054F  	POP	W10
;NMRAnetStateMachine.mpas,1044 :: 		while CAN_Engine.State and CES_TRANSMITTING <> 0 do;                             // Wait for the last transmited CANBuffer
L__NMRAnetStateMachine_Process472:
0x4710	0x225DA0  	MOV	#lo_addr(_CAN_Engine), W0
0x4712	0xFB8010  	ZE	[W0], W0
0x4714	0x600061  	AND	W0, #1, W0
0x4716	0xE10060  	CP	W0, #0
0x4718	0x3AFFFB  	BRA NZ	L__NMRAnetStateMachine_Process472
L__NMRAnetStateMachine_Process759:
;NMRAnetStateMachine.mpas,1045 :: 		Node^.iStateMachine := STATE_NMRABUS_GENERATE_NODE_ALIAS;
0x471A	0x4500F9  	ADD	W10, #25, W1
0x471C	0xB3C010  	MOV.B	#1, W0
0x471E	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1046 :: 		end;
0x4720	0x37014E  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process470:
;NMRAnetStateMachine.mpas,1047 :: 		STATE_NMRABUS_GENERATE_NODE_ALIAS :
0x4722	0x90504E  	MOV.B	[W14+20], W0
0x4724	0xE10461  	CP.B	W0, #1
0x4726	0x3A0015  	BRA NZ	L__NMRAnetStateMachine_Process478
L__NMRAnetStateMachine_Process760:
;NMRAnetStateMachine.mpas,1049 :: 		Node^.Info.AliasID := NMRAnetUtilities_CreateAliasID(Node^.Info.Seed, False);
0x4728	0x4500E2  	ADD	W10, #2, W1
0x472A	0x408070  	ADD	W1, #16, W0
0x472C	0x980F10  	MOV	W0, [W14+18]
0x472E	0x408068  	ADD	W1, #8, W0
0x4730	0x781F8A  	PUSH	W10
0x4732	0xEF2016  	CLR	W11
0x4734	0x780500  	MOV	W0, W10
0x4736	0x07DDFA  	RCALL	_NMRAnetUtilities_CreateAliasID
0x4738	0x90089E  	MOV	[W14+18], W1
0x473A	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,1050 :: 		NMRAnetNode_SortNodeList(Nodes);
0x473C	0x218C0A  	MOV	#lo_addr(_Nodes), W10
0x473E	0x07DE29  	RCALL	_NMRAnetNode_SortNodeList
0x4740	0x78054F  	POP	W10
;NMRAnetStateMachine.mpas,1051 :: 		Node^.Login.iCID := 0;
0x4742	0x450074  	ADD	W10, #20, W0
0x4744	0x4000E1  	ADD	W0, #1, W1
0x4746	0xEF2000  	CLR	W0
0x4748	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1052 :: 		Node^.iStateMachine := STATE_NMRABUS_TRANSMIT_CID;
0x474A	0x4500F9  	ADD	W10, #25, W1
0x474C	0xB3C030  	MOV.B	#3, W0
0x474E	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1053 :: 		end;
0x4750	0x370136  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process478:
;NMRAnetStateMachine.mpas,1054 :: 		STATE_RANDOM_NUMBER_GENERATOR :
0x4752	0x90504E  	MOV.B	[W14+20], W0
0x4754	0xE10462  	CP.B	W0, #2
0x4756	0x3A000A  	BRA NZ	L__NMRAnetStateMachine_Process481
L__NMRAnetStateMachine_Process761:
;NMRAnetStateMachine.mpas,1056 :: 		NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed(Node^.Info.Seed);
0x4758	0x450062  	ADD	W10, #2, W0
0x475A	0x400068  	ADD	W0, #8, W0
0x475C	0x781F8A  	PUSH	W10
0x475E	0x780500  	MOV	W0, W10
0x4760	0x07DD7E  	RCALL	_NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed
0x4762	0x78054F  	POP	W10
;NMRAnetStateMachine.mpas,1057 :: 		Node^.iStateMachine := STATE_NMRABUS_GENERATE_NODE_ALIAS;
0x4764	0x4500F9  	ADD	W10, #25, W1
0x4766	0xB3C010  	MOV.B	#1, W0
0x4768	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1058 :: 		end;
0x476A	0x370129  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process481:
;NMRAnetStateMachine.mpas,1059 :: 		STATE_NMRABUS_TRANSMIT_CID :
0x476C	0x90504E  	MOV.B	[W14+20], W0
0x476E	0xE10463  	CP.B	W0, #3
0x4770	0x3A002E  	BRA NZ	L__NMRAnetStateMachine_Process484
L__NMRAnetStateMachine_Process762:
;NMRAnetStateMachine.mpas,1061 :: 		case Node^.Login.iCID of
0x4772	0x450074  	ADD	W10, #20, W0
0x4774	0x400161  	ADD	W0, #1, W2
;NMRAnetStateMachine.mpas,1062 :: 		0 : VariableField := MTI_CID0;                                         // Queue up
0x4776	0x784012  	MOV.B	[W2], W0
0x4778	0xE10460  	CP.B	W0, #0
0x477A	0x3A0005  	BRA NZ	L__NMRAnetStateMachine_Process488
L__NMRAnetStateMachine_Process763:
0x477C	0x200000  	MOV	#0, W0
0x477E	0x207001  	MOV	#1792, W1
0x4780	0x980770  	MOV	W0, [W14+14]
0x4782	0x980F01  	MOV	W1, [W14+16]
0x4784	0x370018  	BRA	L__NMRAnetStateMachine_Process485
L__NMRAnetStateMachine_Process488:
;NMRAnetStateMachine.mpas,1063 :: 		1 : VariableField := MTI_CID1;
0x4786	0x784012  	MOV.B	[W2], W0
0x4788	0xE10461  	CP.B	W0, #1
0x478A	0x3A0005  	BRA NZ	L__NMRAnetStateMachine_Process491
L__NMRAnetStateMachine_Process764:
0x478C	0x200000  	MOV	#0, W0
0x478E	0x206001  	MOV	#1536, W1
0x4790	0x980770  	MOV	W0, [W14+14]
0x4792	0x980F01  	MOV	W1, [W14+16]
0x4794	0x370010  	BRA	L__NMRAnetStateMachine_Process485
L__NMRAnetStateMachine_Process491:
;NMRAnetStateMachine.mpas,1064 :: 		2 : VariableField := MTI_CID2;
0x4796	0x784012  	MOV.B	[W2], W0
0x4798	0xE10462  	CP.B	W0, #2
0x479A	0x3A0005  	BRA NZ	L__NMRAnetStateMachine_Process494
L__NMRAnetStateMachine_Process765:
0x479C	0x200000  	MOV	#0, W0
0x479E	0x205001  	MOV	#1280, W1
0x47A0	0x980770  	MOV	W0, [W14+14]
0x47A2	0x980F01  	MOV	W1, [W14+16]
0x47A4	0x370008  	BRA	L__NMRAnetStateMachine_Process485
L__NMRAnetStateMachine_Process494:
;NMRAnetStateMachine.mpas,1065 :: 		3 : VariableField := MTI_CID3;
0x47A6	0x784012  	MOV.B	[W2], W0
0x47A8	0xE10463  	CP.B	W0, #3
0x47AA	0x3A0005  	BRA NZ	L__NMRAnetStateMachine_Process497
L__NMRAnetStateMachine_Process766:
0x47AC	0x200000  	MOV	#0, W0
0x47AE	0x204001  	MOV	#1024, W1
0x47B0	0x980770  	MOV	W0, [W14+14]
0x47B2	0x980F01  	MOV	W1, [W14+16]
0x47B4	0x370000  	BRA	L__NMRAnetStateMachine_Process485
L__NMRAnetStateMachine_Process497:
L__NMRAnetStateMachine_Process485:
;NMRAnetStateMachine.mpas,1067 :: 		if CANBusBufferAvailable then
0x47B6	0x07FB83  	RCALL	NMRAnetStateMachine_CANBusBufferAvailable
0x47B8	0xE20000  	CP0	W0
0x47BA	0x320008  	BRA Z	L__NMRAnetStateMachine_Process499
L__NMRAnetStateMachine_Process767:
;NMRAnetStateMachine.mpas,1069 :: 		TransmitCANLayerMsg(Node, @CANBuffer, VariableField);
0x47BC	0x470060  	ADD	W14, #0, W0
0x47BE	0x90067E  	MOV	[W14+14], W12
0x47C0	0x900E8E  	MOV	[W14+16], W13
0x47C2	0x780580  	MOV	W0, W11
0x47C4	0x07FB85  	RCALL	_TransmitCANLayerMsg
;NMRAnetStateMachine.mpas,1070 :: 		Node^.iStateMachine := STATE_NMRABUS_NEXT_CDI;
0x47C6	0x4500F9  	ADD	W10, #25, W1
0x47C8	0xB3C040  	MOV.B	#4, W0
0x47CA	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1071 :: 		end
L__NMRAnetStateMachine_Process499:
;NMRAnetStateMachine.mpas,1072 :: 		end;
0x47CC	0x3700F8  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process484:
;NMRAnetStateMachine.mpas,1073 :: 		STATE_NMRABUS_NEXT_CDI :
0x47CE	0x90514E  	MOV.B	[W14+20], W2
0x47D0	0xE11464  	CP.B	W2, #4
0x47D2	0x3A001A  	BRA NZ	L__NMRAnetStateMachine_Process503
L__NMRAnetStateMachine_Process768:
;NMRAnetStateMachine.mpas,1075 :: 		if Node^.Login.iCID < 3 then
0x47D4	0x450074  	ADD	W10, #20, W0
0x47D6	0xEC2000  	INC	W0
0x47D8	0x784010  	MOV.B	[W0], W0
0x47DA	0xE10463  	CP.B	W0, #3
0x47DC	0x310009  	BRA GEU	L__NMRAnetStateMachine_Process505
L__NMRAnetStateMachine_Process769:
;NMRAnetStateMachine.mpas,1077 :: 		Inc(Node^.Login.iCID);
0x47DE	0x450074  	ADD	W10, #20, W0
0x47E0	0x4000E1  	ADD	W0, #1, W1
0x47E2	0xFB8011  	ZE	[W1], W0
0x47E4	0xEC2000  	INC	W0
0x47E6	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1078 :: 		Node^.iStateMachine := STATE_NMRABUS_TRANSMIT_CID
0x47E8	0x4500F9  	ADD	W10, #25, W1
0x47EA	0xB3C030  	MOV.B	#3, W0
0x47EC	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1079 :: 		end else
0x47EE	0x37000B  	BRA	L__NMRAnetStateMachine_Process506
L__NMRAnetStateMachine_Process505:
;NMRAnetStateMachine.mpas,1081 :: 		if CAN_Engine.State and CES_TRANSMITTING = 0 then                     // Wait until the transmission is complete before waiting the 200ms
0x47F0	0x225DA0  	MOV	#lo_addr(_CAN_Engine), W0
0x47F2	0xFB8010  	ZE	[W0], W0
0x47F4	0x600061  	AND	W0, #1, W0
0x47F6	0xE10060  	CP	W0, #0
0x47F8	0x3A0006  	BRA NZ	L__NMRAnetStateMachine_Process508
L__NMRAnetStateMachine_Process770:
;NMRAnetStateMachine.mpas,1083 :: 		Node^.iStateMachine := STATE_NMRABUS_WAITSTATE;
0x47FA	0x4500F9  	ADD	W10, #25, W1
0x47FC	0xB3C050  	MOV.B	#5, W0
0x47FE	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1084 :: 		Node^.Login.TimeCounter := 0;
0x4800	0x4500F4  	ADD	W10, #20, W1
0x4802	0xEF2000  	CLR	W0
0x4804	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1085 :: 		end
L__NMRAnetStateMachine_Process508:
;NMRAnetStateMachine.mpas,1086 :: 		end
L__NMRAnetStateMachine_Process506:
;NMRAnetStateMachine.mpas,1087 :: 		end;
0x4806	0x3700DB  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process503:
;NMRAnetStateMachine.mpas,1088 :: 		STATE_NMRABUS_WAITSTATE :
0x4808	0xE11465  	CP.B	W2, #5
0x480A	0x3A0008  	BRA NZ	L__NMRAnetStateMachine_Process512
L__NMRAnetStateMachine_Process771:
;NMRAnetStateMachine.mpas,1090 :: 		if Node^.Login.TimeCounter > MAX_BUS_LOGIN_TIMEOUT then
0x480C	0x450074  	ADD	W10, #20, W0
0x480E	0x784010  	MOV.B	[W0], W0
0x4810	0xE10463  	CP.B	W0, #3
0x4812	0x360003  	BRA LEU	L__NMRAnetStateMachine_Process514
L__NMRAnetStateMachine_Process772:
;NMRAnetStateMachine.mpas,1091 :: 		Node^.iStateMachine := STATE_NMRABUS_SEND_LOGIN_RID;
0x4814	0x4500F9  	ADD	W10, #25, W1
0x4816	0xB3C060  	MOV.B	#6, W0
0x4818	0x784880  	MOV.B	W0, [W1]
L__NMRAnetStateMachine_Process514:
;NMRAnetStateMachine.mpas,1092 :: 		end;
0x481A	0x3700D1  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process512:
;NMRAnetStateMachine.mpas,1093 :: 		STATE_NMRABUS_SEND_LOGIN_RID :
0x481C	0xE11466  	CP.B	W2, #6
0x481E	0x3A0015  	BRA NZ	L__NMRAnetStateMachine_Process518
L__NMRAnetStateMachine_Process773:
;NMRAnetStateMachine.mpas,1095 :: 		if NMRAnetNode_TestMsgFlags(Node, MF_DUPLICATE_ALIAS, True) then
0x4820	0x2FFFFC  	MOV	#65535, W12
0x4822	0x20002B  	MOV	#2, W11
0x4824	0x07F97A  	RCALL	_NMRAnetNode_TestMsgFlags
0x4826	0xE20000  	CP0	W0
0x4828	0x320004  	BRA Z	L__NMRAnetStateMachine_Process520
L__NMRAnetStateMachine_Process774:
;NMRAnetStateMachine.mpas,1096 :: 		Node^.iStateMachine := STATE_RANDOM_NUMBER_GENERATOR
0x482A	0x4500F9  	ADD	W10, #25, W1
0x482C	0xB3C020  	MOV.B	#2, W0
0x482E	0x784880  	MOV.B	W0, [W1]
0x4830	0x37000B  	BRA	L__NMRAnetStateMachine_Process521
;NMRAnetStateMachine.mpas,1097 :: 		else begin
L__NMRAnetStateMachine_Process520:
;NMRAnetStateMachine.mpas,1098 :: 		if CANBusBufferAvailable then
0x4832	0x07FB45  	RCALL	NMRAnetStateMachine_CANBusBufferAvailable
0x4834	0xE20000  	CP0	W0
0x4836	0x320008  	BRA Z	L__NMRAnetStateMachine_Process523
L__NMRAnetStateMachine_Process775:
;NMRAnetStateMachine.mpas,1100 :: 		TransmitCANLayerMsg(Node, @CANBuffer, MTI_RID);
0x4838	0x470060  	ADD	W14, #0, W0
0x483A	0x20000C  	MOV	#0, W12
0x483C	0x20070D  	MOV	#112, W13
0x483E	0x780580  	MOV	W0, W11
0x4840	0x07FB47  	RCALL	_TransmitCANLayerMsg
;NMRAnetStateMachine.mpas,1101 :: 		Node^.iStateMachine := STATE_NMRABUS_SEND_LOGIN_AMD;
0x4842	0x4500F9  	ADD	W10, #25, W1
0x4844	0xB3C080  	MOV.B	#8, W0
0x4846	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1102 :: 		end
L__NMRAnetStateMachine_Process523:
;NMRAnetStateMachine.mpas,1103 :: 		end
L__NMRAnetStateMachine_Process521:
;NMRAnetStateMachine.mpas,1104 :: 		end;
0x4848	0x3700BA  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process518:
;NMRAnetStateMachine.mpas,1105 :: 		STATE_NMRABUS_SEND_LOGIN_AMD :
0x484A	0x90504E  	MOV.B	[W14+20], W0
0x484C	0xE10468  	CP.B	W0, #8
0x484E	0x3A0017  	BRA NZ	L__NMRAnetStateMachine_Process527
L__NMRAnetStateMachine_Process776:
;NMRAnetStateMachine.mpas,1107 :: 		if NMRAnetNode_TestMsgFlags(Node, MF_DUPLICATE_ALIAS, True) then
0x4850	0x2FFFFC  	MOV	#65535, W12
0x4852	0x20002B  	MOV	#2, W11
0x4854	0x07F962  	RCALL	_NMRAnetNode_TestMsgFlags
0x4856	0xE20000  	CP0	W0
0x4858	0x320004  	BRA Z	L__NMRAnetStateMachine_Process529
L__NMRAnetStateMachine_Process777:
;NMRAnetStateMachine.mpas,1108 :: 		Node^.iStateMachine := STATE_RANDOM_NUMBER_GENERATOR
0x485A	0x4500F9  	ADD	W10, #25, W1
0x485C	0xB3C020  	MOV.B	#2, W0
0x485E	0x784880  	MOV.B	W0, [W1]
0x4860	0x37000D  	BRA	L__NMRAnetStateMachine_Process530
;NMRAnetStateMachine.mpas,1109 :: 		else begin
L__NMRAnetStateMachine_Process529:
;NMRAnetStateMachine.mpas,1110 :: 		if CANBusBufferAvailable then
0x4862	0x07FB2D  	RCALL	NMRAnetStateMachine_CANBusBufferAvailable
0x4864	0xE20000  	CP0	W0
0x4866	0x32000A  	BRA Z	L__NMRAnetStateMachine_Process532
L__NMRAnetStateMachine_Process778:
;NMRAnetStateMachine.mpas,1112 :: 		TransmitCANLayerMsg(Node, @CANBuffer, MTI_AMD);
0x4868	0x470060  	ADD	W14, #0, W0
0x486A	0x21000C  	MOV	#4096, W12
0x486C	0x20070D  	MOV	#112, W13
0x486E	0x780580  	MOV	W0, W11
0x4870	0x07FB2F  	RCALL	_TransmitCANLayerMsg
;NMRAnetStateMachine.mpas,1113 :: 		NMRAnetNode_SetStateFlag(Node, NS_PERMITTED);
0x4872	0xB3C02B  	MOV.B	#2, W11
0x4874	0x07DD68  	RCALL	_NMRAnetNode_SetStateFlag
;NMRAnetStateMachine.mpas,1114 :: 		Node^.iStateMachine := STATE_NMRABUS_INITIALIZED
0x4876	0x4500F9  	ADD	W10, #25, W1
0x4878	0xB3C090  	MOV.B	#9, W0
0x487A	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1115 :: 		end
L__NMRAnetStateMachine_Process532:
;NMRAnetStateMachine.mpas,1116 :: 		end
L__NMRAnetStateMachine_Process530:
;NMRAnetStateMachine.mpas,1117 :: 		end;
0x487C	0x3700A0  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process527:
;NMRAnetStateMachine.mpas,1118 :: 		STATE_NMRABUS_INITIALIZED :
0x487E	0x90504E  	MOV.B	[W14+20], W0
0x4880	0xE10469  	CP.B	W0, #9
0x4882	0x3A0023  	BRA NZ	L__NMRAnetStateMachine_Process536
L__NMRAnetStateMachine_Process779:
;NMRAnetStateMachine.mpas,1120 :: 		if NMRAnetNode_TestMsgFlags(Node, MF_DUPLICATE_ALIAS, True) then
0x4884	0x2FFFFC  	MOV	#65535, W12
0x4886	0x20002B  	MOV	#2, W11
0x4888	0x07F948  	RCALL	_NMRAnetNode_TestMsgFlags
0x488A	0xE20000  	CP0	W0
0x488C	0x320004  	BRA Z	L__NMRAnetStateMachine_Process538
L__NMRAnetStateMachine_Process780:
;NMRAnetStateMachine.mpas,1121 :: 		Node^.iStateMachine := STATE_RANDOM_NUMBER_GENERATOR
0x488E	0x4500F9  	ADD	W10, #25, W1
0x4890	0xB3C020  	MOV.B	#2, W0
0x4892	0x784880  	MOV.B	W0, [W1]
0x4894	0x370019  	BRA	L__NMRAnetStateMachine_Process539
;NMRAnetStateMachine.mpas,1122 :: 		else begin
L__NMRAnetStateMachine_Process538:
;NMRAnetStateMachine.mpas,1123 :: 		if NMRABusBufferAvailable then
0x4896	0x07F938  	RCALL	_NMRABusBufferAvailable
0x4898	0xE20000  	CP0	W0
0x489A	0x320016  	BRA Z	L__NMRAnetStateMachine_Process541
L__NMRAnetStateMachine_Process781:
;NMRAnetStateMachine.mpas,1125 :: 		NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID(Node, @CANBuffer);
0x489C	0x470060  	ADD	W14, #0, W0
0x489E	0x780580  	MOV	W0, W11
0x48A0	0x07DEB7  	RCALL	_NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID
;NMRAnetStateMachine.mpas,1126 :: 		TransmitNMRABusLayerMsg(Node, @CANBuffer, MTI_INITIALIZATION_COMPLETE, 0, 6, @CANBuffer.DataBytes, False);
0x48A2	0x470060  	ADD	W14, #0, W0
0x48A4	0x4700E5  	ADD	W14, #5, W1
0x48A6	0x20000C  	MOV	#0, W12
0x48A8	0x20910D  	MOV	#2320, W13
0x48AA	0x780580  	MOV	W0, W11
0x48AC	0xEF2000  	CLR	W0
0x48AE	0x781F80  	PUSH	W0
0x48B0	0x781F81  	PUSH	W1
0x48B2	0x200060  	MOV	#6, W0
0x48B4	0x781F80  	PUSH	W0
0x48B6	0xEF2000  	CLR	W0
0x48B8	0x781F80  	PUSH	W0
0x48BA	0x07F7EB  	RCALL	_TransmitNMRABusLayerMsg
0x48BC	0xB1008F  	SUB	#8, W15
;NMRAnetStateMachine.mpas,1127 :: 		Node^.iStateMachine := STATE_NMRABUS_LOGIN_IDENTIFY_EVENTS;
0x48BE	0x4500F9  	ADD	W10, #25, W1
0x48C0	0xB3C0A0  	MOV.B	#10, W0
0x48C2	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1128 :: 		NMRAnetNode_SetStateFlag(Node, NS_INITIALIZED);
0x48C4	0xB3C04B  	MOV.B	#4, W11
0x48C6	0x07DD3F  	RCALL	_NMRAnetNode_SetStateFlag
;NMRAnetStateMachine.mpas,1129 :: 		end
L__NMRAnetStateMachine_Process541:
;NMRAnetStateMachine.mpas,1130 :: 		end
L__NMRAnetStateMachine_Process539:
;NMRAnetStateMachine.mpas,1131 :: 		end;
0x48C8	0x37007A  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process536:
;NMRAnetStateMachine.mpas,1132 :: 		STATE_NMRABUS_LOGIN_IDENTIFY_EVENTS :
0x48CA	0x90504E  	MOV.B	[W14+20], W0
0x48CC	0xE1046A  	CP.B	W0, #10
0x48CE	0x3A0019  	BRA NZ	L__NMRAnetStateMachine_Process545
L__NMRAnetStateMachine_Process782:
;NMRAnetStateMachine.mpas,1136 :: 		CANBuffer.State := CANBuffer.State or BS_EXTENDED;
0x48D0	0x9048DE  	MOV.B	[W14+13], W1
0x48D2	0x47006D  	ADD	W14, #13, W0
0x48D4	0x70C861  	IOR.B	W1, #1, [W0]
;NMRAnetStateMachine.mpas,1137 :: 		CANBuffer.ID := $10000000 or MTI_EVENTS_IDENTIFY_DEST;                  // Make Alias ID $000 so we don't trigger a duplicate Alias ID loop!
0x48D6	0x280000  	MOV	#32768, W0
0x48D8	0x219961  	MOV	#6550, W1
0x48DA	0x980700  	MOV	W0, [W14+0]
0x48DC	0x980711  	MOV	W1, [W14+2]
;NMRAnetStateMachine.mpas,1138 :: 		CANBuffer.DataCount := 2;
0x48DE	0xB3C020  	MOV.B	#2, W0
0x48E0	0x984740  	MOV.B	W0, [W14+4]
;NMRAnetStateMachine.mpas,1139 :: 		CANBuffer.DataBytes[0] := Hi( Node^.Info.AliasID);                      // Addressed to this node
0x48E2	0x450062  	ADD	W10, #2, W0
0x48E4	0x4000F0  	ADD	W0, #16, W1
0x48E6	0x408061  	ADD	W1, #1, W0
0x48E8	0x784010  	MOV.B	[W0], W0
0x48EA	0x984750  	MOV.B	W0, [W14+5]
;NMRAnetStateMachine.mpas,1140 :: 		CANBuffer.DataBytes[1] := Lo( Node^.Info.AliasID);
0x48EC	0x784011  	MOV.B	[W1], W0
0x48EE	0x984760  	MOV.B	W0, [W14+6]
;NMRAnetStateMachine.mpas,1141 :: 		ReceivedOnFilter1(@CANBuffer);
0x48F0	0x470060  	ADD	W14, #0, W0
0x48F2	0x781F8A  	PUSH	W10
0x48F4	0x780500  	MOV	W0, W10
0x48F6	0x07017F  	RCALL	_ReceivedOnFilter1
0x48F8	0x78054F  	POP	W10
;NMRAnetStateMachine.mpas,1143 :: 		Node^.iStateMachine := STATE_NMRABUS_PERMITTED;
0x48FA	0x4500F9  	ADD	W10, #25, W1
0x48FC	0xB3C0B0  	MOV.B	#11, W0
0x48FE	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1144 :: 		end;
0x4900	0x37005E  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process545:
;NMRAnetStateMachine.mpas,1145 :: 		STATE_NMRABUS_PERMITTED :
0x4902	0x90504E  	MOV.B	[W14+20], W0
0x4904	0xE1046B  	CP.B	W0, #11
0x4906	0x3A000A  	BRA NZ	L__NMRAnetStateMachine_Process548
L__NMRAnetStateMachine_Process783:
;NMRAnetStateMachine.mpas,1148 :: 		ProcessNode(Node, @CANBuffer);                                             // Handle auto Actions to CAN/NMRAnet messages coming in
0x4908	0x470060  	ADD	W14, #0, W0
0x490A	0x781F8A  	PUSH	W10
0x490C	0x780580  	MOV	W0, W11
0x490E	0x07EBF6  	RCALL	NMRAnetStateMachine_ProcessNode
0x4910	0x78054F  	POP	W10
;NMRAnetStateMachine.mpas,1149 :: 		ProcessOutgoingNode(Node, @CANBuffer);
0x4912	0x470060  	ADD	W14, #0, W0
0x4914	0x780580  	MOV	W0, W11
0x4916	0x07F2B4  	RCALL	NMRAnetStateMachine_ProcessOutgoingNode
;NMRAnetStateMachine.mpas,1151 :: 		ProcessAbandonBuffers(Node);
0x4918	0x07F208  	RCALL	NMRAnetStateMachine_ProcessAbandonBuffers
;NMRAnetStateMachine.mpas,1154 :: 		end;
0x491A	0x370051  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process548:
;NMRAnetStateMachine.mpas,1155 :: 		STATE_NMRABUS_INHIBITED :
0x491C	0x90504E  	MOV.B	[W14+20], W0
0x491E	0xE1046C  	CP.B	W0, #12
0x4920	0x3A0016  	BRA NZ	L__NMRAnetStateMachine_Process551
L__NMRAnetStateMachine_Process784:
;NMRAnetStateMachine.mpas,1157 :: 		CANStorage_FlushBuffers(Node^.Info.AliasID);
0x4922	0x450062  	ADD	W10, #2, W0
0x4924	0x400070  	ADD	W0, #16, W0
0x4926	0x781F8A  	PUSH	W10
0x4928	0x780510  	MOV	[W0], W10
0x492A	0x07FAE6  	RCALL	_CANStorage_FlushBuffers
0x492C	0x78054F  	POP	W10
;NMRAnetStateMachine.mpas,1158 :: 		if CANBusBufferAvailable then
0x492E	0x07FAC7  	RCALL	NMRAnetStateMachine_CANBusBufferAvailable
0x4930	0xE20000  	CP0	W0
0x4932	0x32000C  	BRA Z	L__NMRAnetStateMachine_Process553
L__NMRAnetStateMachine_Process785:
;NMRAnetStateMachine.mpas,1160 :: 		TransmitCANLayerMsg(Node, @CANBuffer, MTI_AMR);
0x4934	0x470060  	ADD	W14, #0, W0
0x4936	0x23000C  	MOV	#12288, W12
0x4938	0x20070D  	MOV	#112, W13
0x493A	0x780580  	MOV	W0, W11
0x493C	0x07FAC9  	RCALL	_TransmitCANLayerMsg
;NMRAnetStateMachine.mpas,1161 :: 		ReleaseBuffers(Node);
0x493E	0x07F208  	RCALL	NMRAnetStateMachine_ReleaseBuffers
;NMRAnetStateMachine.mpas,1162 :: 		NMRAnetNode_ClearStateFlag(Node, NS_PERMITTED);
0x4940	0xB3C02B  	MOV.B	#2, W11
0x4942	0x07F227  	RCALL	_NMRAnetNode_ClearStateFlag
;NMRAnetStateMachine.mpas,1163 :: 		NMRAnetNode_ClearMsgFlags(Node);
0x4944	0x07F222  	RCALL	_NMRAnetNode_ClearMsgFlags
;NMRAnetStateMachine.mpas,1164 :: 		Node^.iStateMachine := STATE_RANDOM_NUMBER_GENERATOR;
0x4946	0x4500F9  	ADD	W10, #25, W1
0x4948	0xB3C020  	MOV.B	#2, W0
0x494A	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1165 :: 		end
L__NMRAnetStateMachine_Process553:
;NMRAnetStateMachine.mpas,1166 :: 		end;
0x494C	0x370038  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process551:
;NMRAnetStateMachine.mpas,1167 :: 		STATE_NMRABUS_DUPLICATE_FULL_ID :
0x494E	0x90504E  	MOV.B	[W14+20], W0
0x4950	0xE1046D  	CP.B	W0, #13
0x4952	0x3A0016  	BRA NZ	L__NMRAnetStateMachine_Process557
L__NMRAnetStateMachine_Process786:
;NMRAnetStateMachine.mpas,1169 :: 		CANStorage_FlushBuffers(Node^.Info.AliasID);
0x4954	0x450062  	ADD	W10, #2, W0
0x4956	0x400070  	ADD	W0, #16, W0
0x4958	0x781F8A  	PUSH	W10
0x495A	0x780510  	MOV	[W0], W10
0x495C	0x07FACD  	RCALL	_CANStorage_FlushBuffers
0x495E	0x78054F  	POP	W10
;NMRAnetStateMachine.mpas,1170 :: 		if CANBusBufferAvailable then
0x4960	0x07FAAE  	RCALL	NMRAnetStateMachine_CANBusBufferAvailable
0x4962	0xE20000  	CP0	W0
0x4964	0x32000C  	BRA Z	L__NMRAnetStateMachine_Process559
L__NMRAnetStateMachine_Process787:
;NMRAnetStateMachine.mpas,1172 :: 		TransmitCANLayerMsg(Node, @CANBuffer, MTI_AMR);
0x4966	0x470060  	ADD	W14, #0, W0
0x4968	0x23000C  	MOV	#12288, W12
0x496A	0x20070D  	MOV	#112, W13
0x496C	0x780580  	MOV	W0, W11
0x496E	0x07FAB0  	RCALL	_TransmitCANLayerMsg
;NMRAnetStateMachine.mpas,1173 :: 		ReleaseBuffers(Node);
0x4970	0x07F1EF  	RCALL	NMRAnetStateMachine_ReleaseBuffers
;NMRAnetStateMachine.mpas,1174 :: 		NMRAnetNode_ClearStateFlag(Node, NS_PERMITTED);
0x4972	0xB3C02B  	MOV.B	#2, W11
0x4974	0x07F20E  	RCALL	_NMRAnetNode_ClearStateFlag
;NMRAnetStateMachine.mpas,1175 :: 		NMRAnetNode_ClearMsgFlags(Node);
0x4976	0x07F209  	RCALL	_NMRAnetNode_ClearMsgFlags
;NMRAnetStateMachine.mpas,1176 :: 		Node^.iStateMachine := STATE_NMRABUS_TAKE_OFFLINE
0x4978	0x4500F9  	ADD	W10, #25, W1
0x497A	0xB3C0E0  	MOV.B	#14, W0
0x497C	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1177 :: 		end
L__NMRAnetStateMachine_Process559:
;NMRAnetStateMachine.mpas,1178 :: 		end;
0x497E	0x37001F  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process557:
;NMRAnetStateMachine.mpas,1179 :: 		STATE_NMRABUS_TAKE_OFFLINE :
0x4980	0x90504E  	MOV.B	[W14+20], W0
0x4982	0xE1046E  	CP.B	W0, #14
0x4984	0x3A0015  	BRA NZ	L__NMRAnetStateMachine_Process563
L__NMRAnetStateMachine_Process788:
;NMRAnetStateMachine.mpas,1181 :: 		if NMRABusBufferAvailable then
0x4986	0x07F8C0  	RCALL	_NMRABusBufferAvailable
0x4988	0xE20000  	CP0	W0
0x498A	0x320011  	BRA Z	L__NMRAnetStateMachine_Process565
L__NMRAnetStateMachine_Process789:
;NMRAnetStateMachine.mpas,1183 :: 		TransmitNMRABusLayerMsg(Node, @CANBuffer, MTI_PC_EVENT_REPORT, 0, 8, @EVENT_DUPLICATE_ID_DETECTED, False);
0x498C	0x470060  	ADD	W14, #0, W0
0x498E	0x24000C  	MOV	#16384, W12
0x4990	0x2095BD  	MOV	#2395, W13
0x4992	0x780580  	MOV	W0, W11
0x4994	0xEF2000  	CLR	W0
0x4996	0x781F80  	PUSH	W0
0x4998	0x28D950  	MOV	#lo_addr(_EVENT_DUPLICATE_ID_DETECTED), W0
0x499A	0x781F80  	PUSH	W0
0x499C	0x200080  	MOV	#8, W0
0x499E	0x781F80  	PUSH	W0
0x49A0	0xEF2000  	CLR	W0
0x49A2	0x781F80  	PUSH	W0
0x49A4	0x07F776  	RCALL	_TransmitNMRABusLayerMsg
0x49A6	0xB1008F  	SUB	#8, W15
;NMRAnetStateMachine.mpas,1184 :: 		Node^.iStateMachine := STATE_NMRABUS_OFFLINE
0x49A8	0x4500F9  	ADD	W10, #25, W1
0x49AA	0xB3C0F0  	MOV.B	#15, W0
0x49AC	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,1185 :: 		end
L__NMRAnetStateMachine_Process565:
;NMRAnetStateMachine.mpas,1186 :: 		end;
0x49AE	0x370007  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process563:
;NMRAnetStateMachine.mpas,1187 :: 		STATE_NMRABUS_OFFLINE :
0x49B0	0x90504E  	MOV.B	[W14+20], W0
0x49B2	0xE1046F  	CP.B	W0, #15
0x49B4	0x3A0001  	BRA NZ	L__NMRAnetStateMachine_Process569
L__NMRAnetStateMachine_Process790:
;NMRAnetStateMachine.mpas,1191 :: 		else
0x49B6	0x370003  	BRA	L__NMRAnetStateMachine_Process467
L__NMRAnetStateMachine_Process569:
;NMRAnetStateMachine.mpas,1192 :: 		Node^.iStateMachine := STATE_NMRABUS_START;
0x49B8	0x4500F9  	ADD	W10, #25, W1
0x49BA	0xEF2000  	CLR	W0
0x49BC	0x784880  	MOV.B	W0, [W1]
L__NMRAnetStateMachine_Process467:
;NMRAnetStateMachine.mpas,1194 :: 		UnLockCANInterrupt;
0x49BE	0x07FA74  	RCALL	_UnLockCANInterrupt
;NMRAnetStateMachine.mpas,1195 :: 		end;
L_end_NMRAnetStateMachine_Process:
0x49C0	0x7806CF  	POP	W13
0x49C2	0x78064F  	POP	W12
0x49C4	0x7805CF  	POP	W11
0x49C6	0xFA8000  	ULNK
0x49C8	0x060000  	RETURN
; end of _NMRAnetStateMachine_Process
_CANStorage_FlushBuffers:
;CANStorage.mpas,134 :: 		begin
;CANStorage.mpas,135 :: 		if AliasID = 0 then
0x3EF8	0xE15060  	CP	W10, #0
0x3EFA	0x3A000D  	BRA NZ	L__CANStorage_FlushBuffers3
L__CANStorage_FlushBuffers33:
;CANStorage.mpas,137 :: 		CAN_Engine.TX_CANBuffer.State := 0;
0x3EFC	0x225E91  	MOV	#lo_addr(_CAN_Engine+15), W1
0x3EFE	0xEF2000  	CLR	W0
0x3F00	0x784880  	MOV.B	W0, [W1]
;CANStorage.mpas,138 :: 		CAN_Engine.TX_NMRAnetBuffer.State := 0;
0x3F02	0x225F71  	MOV	#lo_addr(_CAN_Engine+29), W1
0x3F04	0xEF2000  	CLR	W0
0x3F06	0x784880  	MOV.B	W0, [W1]
;CANStorage.mpas,139 :: 		CAN_Engine.TX_AddressedErrorBuffer.State := 0;
0x3F08	0x226051  	MOV	#lo_addr(_CAN_Engine+43), W1
0x3F0A	0xEF2000  	CLR	W0
0x3F0C	0x784880  	MOV.B	W0, [W1]
;CANStorage.mpas,140 :: 		CAN_Engine.TX_DatagramRejected.State := 0;
0x3F0E	0x226131  	MOV	#lo_addr(_CAN_Engine+57), W1
0x3F10	0xEF2000  	CLR	W0
0x3F12	0x784880  	MOV.B	W0, [W1]
;CANStorage.mpas,141 :: 		end else
0x3F14	0x370034  	BRA	L__CANStorage_FlushBuffers4
L__CANStorage_FlushBuffers3:
;CANStorage.mpas,143 :: 		if CAN_Engine.TX_CANBuffer.ID and MASK_SOURCE_ALIAS = AliasID then
0x3F16	0x20FFF4  	MOV	#4095, W4
0x3F18	0x200005  	MOV	#0, W5
0x3F1A	0x225DC0  	MOV	#lo_addr(_CAN_Engine+2), W0
0x3F1C	0x620130  	AND	W4, [W0++], W2
0x3F1E	0x6281A0  	AND	W5, [W0--], W3
0x3F20	0x78000A  	MOV	W10, W0
0x3F22	0xEB0080  	CLR	W1
0x3F24	0xE11000  	CP	W2, W0
0x3F26	0xE19801  	CPB	W3, W1
0x3F28	0x3A0003  	BRA NZ	L__CANStorage_FlushBuffers6
L__CANStorage_FlushBuffers34:
;CANStorage.mpas,144 :: 		CAN_Engine.TX_CANBuffer.State := 0;
0x3F2A	0x225E91  	MOV	#lo_addr(_CAN_Engine+15), W1
0x3F2C	0xEF2000  	CLR	W0
0x3F2E	0x784880  	MOV.B	W0, [W1]
L__CANStorage_FlushBuffers6:
;CANStorage.mpas,145 :: 		if CAN_Engine.TX_NMRAnetBuffer.ID and MASK_SOURCE_ALIAS = AliasID then
0x3F30	0x20FFF4  	MOV	#4095, W4
0x3F32	0x200005  	MOV	#0, W5
0x3F34	0x225EA0  	MOV	#lo_addr(_CAN_Engine+16), W0
0x3F36	0x620130  	AND	W4, [W0++], W2
0x3F38	0x6281A0  	AND	W5, [W0--], W3
0x3F3A	0x78000A  	MOV	W10, W0
0x3F3C	0xEB0080  	CLR	W1
0x3F3E	0xE11000  	CP	W2, W0
0x3F40	0xE19801  	CPB	W3, W1
0x3F42	0x3A0003  	BRA NZ	L__CANStorage_FlushBuffers9
L__CANStorage_FlushBuffers35:
;CANStorage.mpas,146 :: 		CAN_Engine.TX_NMRAnetBuffer.State := 0;
0x3F44	0x225F71  	MOV	#lo_addr(_CAN_Engine+29), W1
0x3F46	0xEF2000  	CLR	W0
0x3F48	0x784880  	MOV.B	W0, [W1]
L__CANStorage_FlushBuffers9:
;CANStorage.mpas,147 :: 		if CAN_Engine.TX_AddressedErrorBuffer.ID and MASK_SOURCE_ALIAS = AliasID then
0x3F4A	0x20FFF4  	MOV	#4095, W4
0x3F4C	0x200005  	MOV	#0, W5
0x3F4E	0x225F80  	MOV	#lo_addr(_CAN_Engine+30), W0
0x3F50	0x620130  	AND	W4, [W0++], W2
0x3F52	0x6281A0  	AND	W5, [W0--], W3
0x3F54	0x78000A  	MOV	W10, W0
0x3F56	0xEB0080  	CLR	W1
0x3F58	0xE11000  	CP	W2, W0
0x3F5A	0xE19801  	CPB	W3, W1
0x3F5C	0x3A0003  	BRA NZ	L__CANStorage_FlushBuffers12
L__CANStorage_FlushBuffers36:
;CANStorage.mpas,148 :: 		CAN_Engine.TX_AddressedErrorBuffer.State := 0;
0x3F5E	0x226051  	MOV	#lo_addr(_CAN_Engine+43), W1
0x3F60	0xEF2000  	CLR	W0
0x3F62	0x784880  	MOV.B	W0, [W1]
L__CANStorage_FlushBuffers12:
;CANStorage.mpas,149 :: 		if CAN_Engine.TX_DatagramRejected.ID and MASK_SOURCE_ALIAS = AliasID then
0x3F64	0x20FFF4  	MOV	#4095, W4
0x3F66	0x200005  	MOV	#0, W5
0x3F68	0x226060  	MOV	#lo_addr(_CAN_Engine+44), W0
0x3F6A	0x620130  	AND	W4, [W0++], W2
0x3F6C	0x6281A0  	AND	W5, [W0--], W3
0x3F6E	0x78000A  	MOV	W10, W0
0x3F70	0xEB0080  	CLR	W1
0x3F72	0xE11000  	CP	W2, W0
0x3F74	0xE19801  	CPB	W3, W1
0x3F76	0x3A0003  	BRA NZ	L__CANStorage_FlushBuffers15
L__CANStorage_FlushBuffers37:
;CANStorage.mpas,150 :: 		CAN_Engine.TX_DatagramRejected.State := 0;
0x3F78	0x226131  	MOV	#lo_addr(_CAN_Engine+57), W1
0x3F7A	0xEF2000  	CLR	W0
0x3F7C	0x784880  	MOV.B	W0, [W1]
L__CANStorage_FlushBuffers15:
;CANStorage.mpas,151 :: 		end
L__CANStorage_FlushBuffers4:
;CANStorage.mpas,152 :: 		end;
L_end_CANStorage_FlushBuffers:
0x3F7E	0x060000  	RETURN
; end of _CANStorage_FlushBuffers
NMRAnetStateMachine_CANBusBufferAvailable:
;NMRAnetStateMachine.mpas,383 :: 		begin
;NMRAnetStateMachine.mpas,384 :: 		Result := CAN_Engine.TX_CANBuffer.State and BS_ALLOCATED = 0
0x3EBE	0x225E90  	MOV	#lo_addr(_CAN_Engine+15), W0
0x3EC0	0xFB8010  	ZE	[W0], W0
0x3EC2	0x600062  	AND	W0, #2, W0
; Result start address is: 2 (W1)
0x3EC4	0xE10060  	CP	W0, #0
0x3EC6	0xEF2002  	CLR	W1
0x3EC8	0x3A0001  	BRA NZ	L_NMRAnetStateMachine_CANBusBufferAvailable608
0x3ECA	0xEEA002  	COM	W1
L_NMRAnetStateMachine_CANBusBufferAvailable608:
;NMRAnetStateMachine.mpas,385 :: 		end;
0x3ECC	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_CANBusBufferAvailable:
0x3ECE	0x060000  	RETURN
; end of NMRAnetStateMachine_CANBusBufferAvailable
_TransmitCANLayerMsg:
;NMRAnetStateMachine.mpas,362 :: 		begin
;NMRAnetStateMachine.mpas,363 :: 		Result := False;
; Result start address is: 2 (W1)
0x3ED0	0xEF2002  	CLR	W1
;NMRAnetStateMachine.mpas,364 :: 		if CAN_Engine.TX_CANBuffer.State and BS_ALLOCATED = 0 then
0x3ED2	0x225E90  	MOV	#lo_addr(_CAN_Engine+15), W0
0x3ED4	0xFB8010  	ZE	[W0], W0
0x3ED6	0x600062  	AND	W0, #2, W0
0x3ED8	0xE10060  	CP	W0, #0
0x3EDA	0x3A000C  	BRA NZ	L__TransmitCANLayerMsg572
L__TransmitCANLayerMsg606:
; Result end address is: 2 (W1)
;NMRAnetStateMachine.mpas,366 :: 		NMRAnetUtilities_CreateCANControlFrameCANBuffer(Node, Buffer, VariableField);
0x3EDC	0x07E8AF  	RCALL	_NMRAnetUtilities_CreateCANControlFrameCANBuffer
;NMRAnetStateMachine.mpas,367 :: 		CAN_Engine.TX_CANBuffer := Buffer^;
0x3EDE	0x225DC1  	MOV	#lo_addr(_CAN_Engine+2), W1
0x3EE0	0x78000B  	MOV	W11, W0
0x3EE2	0x090006  	REPEAT	#6
0x3EE4	0x7818B0  	MOV	[W0++], [W1++]
;NMRAnetStateMachine.mpas,368 :: 		CAN_Engine.TX_CANBuffer.State := CAN_Engine.TX_CANBuffer.State or BS_ALLOCATED;
0x3EE6	0x225E90  	MOV	#lo_addr(_CAN_Engine+15), W0
0x3EE8	0x784090  	MOV.B	[W0], W1
0x3EEA	0x225E90  	MOV	#lo_addr(_CAN_Engine+15), W0
0x3EEC	0x70C862  	IOR.B	W1, #2, [W0]
;NMRAnetStateMachine.mpas,369 :: 		StartCANMessageEngine();
0x3EEE	0x07E938  	RCALL	_StartCANMessageEngine
;NMRAnetStateMachine.mpas,370 :: 		Result := True
; Result start address is: 2 (W1)
0x3EF0	0x2FFFF1  	MOV	#65535, W1
; Result end address is: 2 (W1)
;NMRAnetStateMachine.mpas,371 :: 		end;
0x3EF2	0x370000  	BRA	L__TransmitCANLayerMsg62
L__TransmitCANLayerMsg572:
;NMRAnetStateMachine.mpas,364 :: 		if CAN_Engine.TX_CANBuffer.State and BS_ALLOCATED = 0 then
;NMRAnetStateMachine.mpas,371 :: 		end;
L__TransmitCANLayerMsg62:
;NMRAnetStateMachine.mpas,372 :: 		end;
; Result start address is: 2 (W1)
0x3EF4	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_TransmitCANLayerMsg:
0x3EF6	0x060000  	RETURN
; end of _TransmitCANLayerMsg
_NMRAnetUtilities_CreateCANControlFrameCANBuffer:
;NMRAnetUtilities.mpas,106 :: 		begin
;NMRAnetUtilities.mpas,107 :: 		CANBuffer^.DataCount := 0;
0x103C	0x4580E4  	ADD	W11, #4, W1
0x103E	0xEF2000  	CLR	W0
0x1040	0x784880  	MOV.B	W0, [W1]
;NMRAnetUtilities.mpas,108 :: 		CANBuffer^.State := CANBuffer^.State or BS_EXTENDED;
0x1042	0x4580ED  	ADD	W11, #13, W1
0x1044	0xFB8011  	ZE	[W1], W0
0x1046	0x700061  	IOR	W0, #1, W0
0x1048	0x784880  	MOV.B	W0, [W1]
;NMRAnetUtilities.mpas,109 :: 		CANBuffer^.ID := $10000000 or MTI or NodeBuffer^.Info.AliasID;  // RID, AMD, AME, AMR are all covered with the Reserved bit, Variable Field value and Source Node Alias
0x104A	0x200000  	MOV	#0, W0
0x104C	0x210001  	MOV	#4096, W1
0x104E	0x70010C  	IOR	W0, W12, W2
0x1050	0x70818D  	IOR	W1, W13, W3
0x1052	0x450062  	ADD	W10, #2, W0
0x1054	0x400070  	ADD	W0, #16, W0
0x1056	0x780010  	MOV	[W0], W0
0x1058	0xEB0080  	CLR	W1
0x105A	0x710000  	IOR	W2, W0, W0
0x105C	0x718081  	IOR	W3, W1, W1
0x105E	0xBE8D80  	MOV.D	W0, [W11]
;NMRAnetUtilities.mpas,110 :: 		if MTI = MTI_CID0 then CANBuffer^.ID := CANBuffer^.ID or (NodeBuffer^.Info.ID[1] and $00FFF000) else
0x1060	0x200000  	MOV	#0, W0
0x1062	0x207001  	MOV	#1792, W1
0x1064	0xE16000  	CP	W12, W0
0x1066	0xE1E801  	CPB	W13, W1
0x1068	0x3A000B  	BRA NZ	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer3
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer254:
0x106A	0x450062  	ADD	W10, #2, W0
0x106C	0x400064  	ADD	W0, #4, W0
0x106E	0xBE0110  	MOV.D	[W0], W2
0x1070	0x2F0000  	MOV	#61440, W0
0x1072	0x200FF1  	MOV	#255, W1
0x1074	0x610100  	AND	W2, W0, W2
0x1076	0x618181  	AND	W3, W1, W3
0x1078	0xBE001B  	MOV.D	[W11], W0
0x107A	0x701D82  	IOR	W0, W2, [W11++]
0x107C	0x709583  	IOR	W1, W3, [W11--]
0x107E	0x37003A  	BRA	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer4
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer3:
;NMRAnetUtilities.mpas,111 :: 		if MTI = MTI_CID1 then CANBuffer^.ID := CANBuffer^.ID or ((NodeBuffer^.Info.ID[1] shl 12) and $00FFF000) else
0x1080	0x200000  	MOV	#0, W0
0x1082	0x206001  	MOV	#1536, W1
0x1084	0xE16000  	CP	W12, W0
0x1086	0xE1E801  	CPB	W13, W1
0x1088	0x3A0011  	BRA NZ	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer6
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer255:
0x108A	0x450062  	ADD	W10, #2, W0
0x108C	0x4000E4  	ADD	W0, #4, W1
0x108E	0x2000C0  	MOV	#12, W0
0x1090	0xBE0111  	MOV.D	[W1], W2
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer256:
0x1092	0xE90000  	DEC	W0, W0
0x1094	0x350003  	BRA LT	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer257
0x1096	0xD00102  	SL	W2, W2
0x1098	0xD28183  	RLC	W3, W3
0x109A	0x37FFFB  	BRA	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer256
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer257:
0x109C	0x2F0000  	MOV	#61440, W0
0x109E	0x200FF1  	MOV	#255, W1
0x10A0	0x610100  	AND	W2, W0, W2
0x10A2	0x618181  	AND	W3, W1, W3
0x10A4	0xBE001B  	MOV.D	[W11], W0
0x10A6	0x701D82  	IOR	W0, W2, [W11++]
0x10A8	0x709583  	IOR	W1, W3, [W11--]
0x10AA	0x370024  	BRA	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer7
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer6:
;NMRAnetUtilities.mpas,112 :: 		if MTI = MTI_CID2 then CANBuffer^.ID := CANBuffer^.ID or (NodeBuffer^.Info.ID[0] and $00FFF000) else
0x10AC	0x200000  	MOV	#0, W0
0x10AE	0x205001  	MOV	#1280, W1
0x10B0	0xE16000  	CP	W12, W0
0x10B2	0xE1E801  	CPB	W13, W1
0x10B4	0x3A000A  	BRA NZ	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer9
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer258:
0x10B6	0x450062  	ADD	W10, #2, W0
0x10B8	0xBE0110  	MOV.D	[W0], W2
0x10BA	0x2F0000  	MOV	#61440, W0
0x10BC	0x200FF1  	MOV	#255, W1
0x10BE	0x610100  	AND	W2, W0, W2
0x10C0	0x618181  	AND	W3, W1, W3
0x10C2	0xBE001B  	MOV.D	[W11], W0
0x10C4	0x701D82  	IOR	W0, W2, [W11++]
0x10C6	0x709583  	IOR	W1, W3, [W11--]
0x10C8	0x370015  	BRA	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer10
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer9:
;NMRAnetUtilities.mpas,113 :: 		if MTI = MTI_CID3 then CANBuffer^.ID := CANBuffer^.ID or ((NodeBuffer^.Info.ID[0] shl 12) and $00FFF000);
0x10CA	0x200000  	MOV	#0, W0
0x10CC	0x204001  	MOV	#1024, W1
0x10CE	0xE16000  	CP	W12, W0
0x10D0	0xE1E801  	CPB	W13, W1
0x10D2	0x3A0010  	BRA NZ	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer12
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer259:
0x10D4	0x450062  	ADD	W10, #2, W0
0x10D6	0xBE0210  	MOV.D	[W0], W4
0x10D8	0x2000C0  	MOV	#12, W0
0x10DA	0xBE0104  	MOV.D	W4, W2
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer260:
0x10DC	0xE90000  	DEC	W0, W0
0x10DE	0x350003  	BRA LT	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer261
0x10E0	0xD00102  	SL	W2, W2
0x10E2	0xD28183  	RLC	W3, W3
0x10E4	0x37FFFB  	BRA	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer260
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer261:
0x10E6	0x2F0000  	MOV	#61440, W0
0x10E8	0x200FF1  	MOV	#255, W1
0x10EA	0x610100  	AND	W2, W0, W2
0x10EC	0x618181  	AND	W3, W1, W3
0x10EE	0xBE001B  	MOV.D	[W11], W0
0x10F0	0x701D82  	IOR	W0, W2, [W11++]
0x10F2	0x709583  	IOR	W1, W3, [W11--]
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer12:
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer10:
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer7:
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer4:
;NMRAnetUtilities.mpas,114 :: 		if (MTI = MTI_AMD) or (MTI = MTI_AME) or (MTI = MTI_AMR) then
0x10F4	0x210000  	MOV	#4096, W0
0x10F6	0x200701  	MOV	#112, W1
0x10F8	0xE16000  	CP	W12, W0
0x10FA	0xE1E801  	CPB	W13, W1
0x10FC	0xEF2004  	CLR	W2
0x10FE	0x3A0001  	BRA NZ	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer262
0x1100	0xEEA004  	COM	W2
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer262:
0x1102	0x220000  	MOV	#8192, W0
0x1104	0x200701  	MOV	#112, W1
0x1106	0xE16000  	CP	W12, W0
0x1108	0xE1E801  	CPB	W13, W1
0x110A	0xEF2000  	CLR	W0
0x110C	0x3A0001  	BRA NZ	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer263
0x110E	0xEEA000  	COM	W0
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer263:
0x1110	0x710100  	IOR	W2, W0, W2
0x1112	0x230000  	MOV	#12288, W0
0x1114	0x200701  	MOV	#112, W1
0x1116	0xE16000  	CP	W12, W0
0x1118	0xE1E801  	CPB	W13, W1
0x111A	0xEF2000  	CLR	W0
0x111C	0x3A0001  	BRA NZ	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer264
0x111E	0xEEA000  	COM	W0
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer264:
0x1120	0x710000  	IOR	W2, W0, W0
0x1122	0x320001  	BRA Z	L__NMRAnetUtilities_CreateCANControlFrameCANBuffer15
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer265:
;NMRAnetUtilities.mpas,115 :: 		NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID(NodeBuffer, CANBuffer);
0x1124	0x07FA75  	RCALL	_NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID
L__NMRAnetUtilities_CreateCANControlFrameCANBuffer15:
;NMRAnetUtilities.mpas,116 :: 		end;
L_end_NMRAnetUtilities_CreateCANControlFrameCANBuffer:
0x1126	0x060000  	RETURN
; end of _NMRAnetUtilities_CreateCANControlFrameCANBuffer
_NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID:
;NMRAnetUtilities.mpas,87 :: 		begin
;NMRAnetUtilities.mpas,88 :: 		CANBuffer^.DataCount := 6;
0x0610	0x4580E4  	ADD	W11, #4, W1
0x0612	0xB3C060  	MOV.B	#6, W0
0x0614	0x784880  	MOV.B	W0, [W1]
;NMRAnetUtilities.mpas,89 :: 		CANBuffer^.DataBytes[0] := NodeBuffer^.Info.ID[1] shr 16;  // But these all need the 48 Bit Full ID in the Byte Fields
0x0616	0x4581E5  	ADD	W11, #5, W3
0x0618	0x450062  	ADD	W10, #2, W0
0x061A	0x400164  	ADD	W0, #4, W2
0x061C	0xBE0012  	MOV.D	[W2], W0
0x061E	0x780001  	MOV	W1, W0
0x0620	0xEB0080  	CLR	W1
0x0622	0x784980  	MOV.B	W0, [W3]
;NMRAnetUtilities.mpas,90 :: 		CANBuffer^.DataBytes[1] := NodeBuffer^.Info.ID[1] shr 8;
0x0624	0x458065  	ADD	W11, #5, W0
0x0626	0x400261  	ADD	W0, #1, W4
0x0628	0x450062  	ADD	W10, #2, W0
0x062A	0x4001E4  	ADD	W0, #4, W3
0x062C	0x200082  	MOV	#8, W2
0x062E	0xBE0013  	MOV.D	[W3], W0
L__NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID249:
0x0630	0xE90102  	DEC	W2, W2
0x0632	0x350003  	BRA LT	L__NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID250
0x0634	0xD10081  	LSR	W1, W1
0x0636	0xD38000  	RRC	W0, W0
0x0638	0x37FFFB  	BRA	L__NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID249
L__NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID250:
0x063A	0x784A00  	MOV.B	W0, [W4]
;NMRAnetUtilities.mpas,91 :: 		CANBuffer^.DataBytes[2] := NodeBuffer^.Info.ID[1];
0x063C	0x458065  	ADD	W11, #5, W0
0x063E	0x4000E2  	ADD	W0, #2, W1
0x0640	0x450062  	ADD	W10, #2, W0
0x0642	0x400064  	ADD	W0, #4, W0
0x0644	0x784890  	MOV.B	[W0], [W1]
;NMRAnetUtilities.mpas,92 :: 		CANBuffer^.DataBytes[3] := NodeBuffer^.Info.ID[0] shr 16;
0x0646	0x458065  	ADD	W11, #5, W0
0x0648	0x4001E3  	ADD	W0, #3, W3
0x064A	0x450162  	ADD	W10, #2, W2
0x064C	0xBE0012  	MOV.D	[W2], W0
0x064E	0x780001  	MOV	W1, W0
0x0650	0xEB0080  	CLR	W1
0x0652	0x784980  	MOV.B	W0, [W3]
;NMRAnetUtilities.mpas,93 :: 		CANBuffer^.DataBytes[4] := NodeBuffer^.Info.ID[0] shr 8;
0x0654	0x458065  	ADD	W11, #5, W0
0x0656	0x4002E4  	ADD	W0, #4, W5
0x0658	0x450062  	ADD	W10, #2, W0
0x065A	0x7801B0  	MOV	[W0++], W3
0x065C	0x780220  	MOV	[W0--], W4
0x065E	0x200082  	MOV	#8, W2
0x0660	0x780003  	MOV	W3, W0
0x0662	0x780084  	MOV	W4, W1
L__NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID251:
0x0664	0xE90102  	DEC	W2, W2
0x0666	0x350003  	BRA LT	L__NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID252
0x0668	0xD10081  	LSR	W1, W1
0x066A	0xD38000  	RRC	W0, W0
0x066C	0x37FFFB  	BRA	L__NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID251
L__NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID252:
0x066E	0x784A80  	MOV.B	W0, [W5]
;NMRAnetUtilities.mpas,94 :: 		CANBuffer^.DataBytes[5] := NodeBuffer^.Info.ID[0];
0x0670	0x458065  	ADD	W11, #5, W0
0x0672	0x4001E5  	ADD	W0, #5, W3
0x0674	0x450162  	ADD	W10, #2, W2
0x0676	0xBE0012  	MOV.D	[W2], W0
0x0678	0x784980  	MOV.B	W0, [W3]
;NMRAnetUtilities.mpas,95 :: 		end;
L_end_NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID:
0x067A	0x060000  	RETURN
; end of _NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID
_StartCANMessageEngine:
;dsPIC33_CAN.mpas,412 :: 		begin
;dsPIC33_CAN.mpas,417 :: 		LockCANInterrupt;
0x1160	0x0715B5  	RCALL	_LockCANInterrupt
;dsPIC33_CAN.mpas,422 :: 		if CAN_Engine.State and CES_TRANSMITTING = 0 then
0x1162	0x225DA0  	MOV	#lo_addr(_CAN_Engine), W0
0x1164	0xFB8010  	ZE	[W0], W0
0x1166	0x600061  	AND	W0, #1, W0
0x1168	0xE10060  	CP	W0, #0
0x116A	0x3A0001  	BRA NZ	L__StartCANMessageEngine10
L__StartCANMessageEngine294:
;dsPIC33_CAN.mpas,424 :: 		StartTransmission;
0x116C	0x071C2E  	RCALL	dsPIC33_CAN_StartTransmission
;dsPIC33_CAN.mpas,425 :: 		end;
L__StartCANMessageEngine10:
;dsPIC33_CAN.mpas,428 :: 		UnLockCANInterrupt
0x116E	0x07169C  	RCALL	_UnLockCANInterrupt
;dsPIC33_CAN.mpas,429 :: 		end;
L_end_StartCANMessageEngine:
0x1170	0x060000  	RETURN
; end of _StartCANMessageEngine
dsPIC33_CAN_StartTransmission:
;dsPIC33_CAN.mpas,221 :: 		begin
;dsPIC33_CAN.mpas,222 :: 		Result := False;
0x49CA	0x781F8A  	PUSH	W10
0x49CC	0x781F8B  	PUSH	W11
0x49CE	0x781F8C  	PUSH	W12
; Result start address is: 4 (W2)
0x49D0	0xEF2004  	CLR	W2
;dsPIC33_CAN.mpas,223 :: 		Buffer := CANStorage_NextToSend;                                              // Get a pointer to the Buffer to transmit
0x49D2	0x07F969  	RCALL	_CANStorage_NextToSend
; Buffer start address is: 14 (W7)
0x49D4	0x780380  	MOV	W0, W7
;dsPIC33_CAN.mpas,224 :: 		if Buffer <> nil then                                                         // If there is something to send then send it
0x49D6	0xE10060  	CP	W0, #0
0x49D8	0x320011  	BRA Z	L_dsPIC33_CAN_StartTransmission287
L_dsPIC33_CAN_StartTransmission290:
; Result end address is: 4 (W2)
;dsPIC33_CAN.mpas,264 :: 		dsPIC33_DMA_Style_Buffer(CAN_DIRECTION_WRITE, @TX_Main_RawBufferArray[CAN_TX_0_BUFFER].Word0, Buffer^);      // Convert it into a version that matches the registers
0x49DA	0x780607  	MOV	W7, W12
0x49DC	0x21000B  	MOV	#lo_addr(_TX_Main_RawBufferArray), W11
0x49DE	0xEF2014  	CLR	W10
0x49E0	0x07F7AD  	RCALL	dsPIC33_CAN_dsPIC33_DMA_Style_Buffer
;dsPIC33_CAN.mpas,302 :: 		dsPIC33_CAN_RequestTransmit(CAN_TX_0_BUFFER);                               // Set the Flag to start the transmission
0x49E2	0xEF2014  	CLR	W10
0x49E4	0x07F7A2  	RCALL	_dsPIC33_CAN_RequestTransmit
;dsPIC33_CAN.mpas,303 :: 		Buffer^.State := Buffer^.State and not BS_ALLOCATED;                        // Release the Buffer from the List
0x49E6	0x43816D  	ADD	W7, #13, W2
; Buffer end address is: 14 (W7)
0x49E8	0xFB8092  	ZE	[W2], W1
0x49EA	0x200FD0  	MOV	#253, W0
0x49EC	0x608000  	AND	W1, W0, W0
0x49EE	0x784900  	MOV.B	W0, [W2]
;dsPIC33_CAN.mpas,304 :: 		CAN_Engine.State := CAN_Engine.State or CES_TRANSMITTING;
0x49F0	0x225DA0  	MOV	#lo_addr(_CAN_Engine), W0
0x49F2	0x784090  	MOV.B	[W0], W1
0x49F4	0x225DA0  	MOV	#lo_addr(_CAN_Engine), W0
0x49F6	0x70C861  	IOR.B	W1, #1, [W0]
;dsPIC33_CAN.mpas,305 :: 		Result := True;
; Result start address is: 2 (W1)
0x49F8	0x2FFFF1  	MOV	#65535, W1
; Result end address is: 2 (W1)
;dsPIC33_CAN.mpas,306 :: 		end
0x49FA	0x370001  	BRA	L_dsPIC33_CAN_StartTransmission2
L_dsPIC33_CAN_StartTransmission287:
;dsPIC33_CAN.mpas,224 :: 		if Buffer <> nil then                                                         // If there is something to send then send it
0x49FC	0x780082  	MOV	W2, W1
;dsPIC33_CAN.mpas,306 :: 		end
L_dsPIC33_CAN_StartTransmission2:
;dsPIC33_CAN.mpas,307 :: 		end;
; Result start address is: 2 (W1)
0x49FE	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_StartTransmission:
0x4A00	0x78064F  	POP	W12
0x4A02	0x7805CF  	POP	W11
0x4A04	0x78054F  	POP	W10
0x4A06	0x060000  	RETURN
; end of dsPIC33_CAN_StartTransmission
_CANStorage_NextToSend:
;CANStorage.mpas,155 :: 		begin
;CANStorage.mpas,157 :: 		if CAN_Engine.TX_CANBuffer.State and BS_ALLOCATED = BS_ALLOCATED then
0x3CA6	0x225E90  	MOV	#lo_addr(_CAN_Engine+15), W0
0x3CA8	0xFB8010  	ZE	[W0], W0
0x3CAA	0x600062  	AND	W0, #2, W0
0x3CAC	0xE10062  	CP	W0, #2
0x3CAE	0x3A0002  	BRA NZ	L__CANStorage_NextToSend19
L__CANStorage_NextToSend39:
;CANStorage.mpas,158 :: 		Result := @CAN_Engine.TX_CANBuffer
; Result start address is: 2 (W1)
0x3CB0	0x225DC1  	MOV	#lo_addr(_CAN_Engine+2), W1
; Result end address is: 2 (W1)
0x3CB2	0x37000A  	BRA	L__CANStorage_NextToSend20
;CANStorage.mpas,159 :: 		else
L__CANStorage_NextToSend19:
;CANStorage.mpas,160 :: 		if CAN_Engine.TX_NMRAnetBuffer.State and BS_ALLOCATED = BS_ALLOCATED then
0x3CB4	0x225F70  	MOV	#lo_addr(_CAN_Engine+29), W0
0x3CB6	0xFB8010  	ZE	[W0], W0
0x3CB8	0x600062  	AND	W0, #2, W0
0x3CBA	0xE10062  	CP	W0, #2
0x3CBC	0x3A0003  	BRA NZ	L__CANStorage_NextToSend22
L__CANStorage_NextToSend40:
;CANStorage.mpas,161 :: 		Result := @CAN_Engine.TX_NMRAnetBuffer
; Result start address is: 0 (W0)
0x3CBE	0x225EA0  	MOV	#lo_addr(_CAN_Engine+16), W0
0x3CC0	0x780080  	MOV	W0, W1
; Result end address is: 0 (W0)
0x3CC2	0x370002  	BRA	L__CANStorage_NextToSend23
;CANStorage.mpas,162 :: 		else
L__CANStorage_NextToSend22:
;CANStorage.mpas,163 :: 		Result := PCANBuffer( nil);
; Result start address is: 0 (W0)
0x3CC4	0x200000  	MOV	#0, W0
; Result end address is: 0 (W0)
0x3CC6	0x780080  	MOV	W0, W1
L__CANStorage_NextToSend23:
; Result start address is: 2 (W1)
; Result end address is: 2 (W1)
L__CANStorage_NextToSend20:
;CANStorage.mpas,164 :: 		end;
; Result start address is: 2 (W1)
0x3CC8	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_CANStorage_NextToSend:
0x3CCA	0x060000  	RETURN
; end of _CANStorage_NextToSend
dsPIC33_CAN_dsPIC33_DMA_Style_Buffer:
;dsPIC33_CAN.mpas,564 :: 		begin
;dsPIC33_CAN.mpas,565 :: 		if Direction = CAN_DIRECTION_WRITE then
0x393C	0xE15460  	CP.B	W10, #0
0x393E	0x3A0073  	BRA NZ	L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer76
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer315:
;dsPIC33_CAN.mpas,568 :: 		if Buffer.State and BS_EXTENDED <> 0 then
0x3940	0x46006D  	ADD	W12, #13, W0
0x3942	0xFB8010  	ZE	[W0], W0
0x3944	0x600061  	AND	W0, #1, W0
0x3946	0xE10060  	CP	W0, #0
0x3948	0x32002D  	BRA Z	L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer79
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer316:
;dsPIC33_CAN.mpas,570 :: 		CANPtr^ := DWORD(Buffer.ID shr 16) and $1FFC;                             // Setup the Extended iD 7..17
0x394A	0xBE001C  	MOV.D	[W12], W0
0x394C	0xBE0100  	MOV.D	W0, W2
0x394E	0x780103  	MOV	W3, W2
0x3950	0xEB0180  	CLR	W3
0x3952	0x21FFC0  	MOV	#8188, W0
0x3954	0x610000  	AND	W2, W0, W0
0x3956	0x780D80  	MOV	W0, [W11]
;dsPIC33_CAN.mpas,571 :: 		CANPtr^ := CANPtr^ or $0001;                                              // Setup if it is an extended ID
0x3958	0x78001B  	MOV	[W11], W0
0x395A	0x700061  	IOR	W0, #1, W0
0x395C	0x780D80  	MOV	W0, [W11]
;dsPIC33_CAN.mpas,572 :: 		Inc(CANPtr);                                                              // Move to the Extended ID
0x395E	0x4582E2  	ADD	W11, #2, W5
0x3960	0x780585  	MOV	W5, W11
;dsPIC33_CAN.mpas,573 :: 		CANPtr^ := DWORD(Buffer.ID shr 6) and $0FFF;                              // put SID 0..6 into bits 5..11 and SID 6..10 in bits 0..4
0x3962	0x7801BC  	MOV	[W12++], W3
0x3964	0x78022C  	MOV	[W12--], W4
0x3966	0x200060  	MOV	#6, W0
0x3968	0x780083  	MOV	W3, W1
0x396A	0x780104  	MOV	W4, W2
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer317:
0x396C	0xE90000  	DEC	W0, W0
0x396E	0x350003  	BRA LT	L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer318
0x3970	0xD10102  	LSR	W2, W2
0x3972	0xD38081  	RRC	W1, W1
0x3974	0x37FFFB  	BRA	L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer317
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer318:
0x3976	0x20FFF0  	MOV	#4095, W0
0x3978	0x608000  	AND	W1, W0, W0
0x397A	0x780A80  	MOV	W0, [W5]
;dsPIC33_CAN.mpas,574 :: 		Inc(CANPtr);                                                              // Move to the DLC and the rest of the EID
0x397C	0x458362  	ADD	W11, #2, W6
0x397E	0x780586  	MOV	W6, W11
;dsPIC33_CAN.mpas,575 :: 		CANPtr^ := DWORD((Buffer.ID shl 10) and $FC00);                           // Put SID 0..5 into bits 10..15
0x3980	0xBE021C  	MOV.D	[W12], W4
0x3982	0x2000A0  	MOV	#10, W0
0x3984	0xBE0104  	MOV.D	W4, W2
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer319:
0x3986	0xE90000  	DEC	W0, W0
0x3988	0x350003  	BRA LT	L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer320
0x398A	0xD00102  	SL	W2, W2
0x398C	0xD28183  	RLC	W3, W3
0x398E	0x37FFFB  	BRA	L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer319
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer320:
0x3990	0x2FC000  	MOV	#64512, W0
0x3992	0x200001  	MOV	#0, W1
0x3994	0x610000  	AND	W2, W0, W0
0x3996	0x618081  	AND	W3, W1, W1
0x3998	0x780B00  	MOV	W0, [W6]
;dsPIC33_CAN.mpas,576 :: 		CANPtr^ := CANPtr^ or (Word( Buffer.DataCount) and $000F);                // Put Data Length in the last 4 bits
0x399A	0x460064  	ADD	W12, #4, W0
0x399C	0xFB8010  	ZE	[W0], W0
0x399E	0x60006F  	AND	W0, #15, W0
0x39A0	0x700D9B  	IOR	W0, [W11], [W11]
;dsPIC33_CAN.mpas,577 :: 		end else
0x39A2	0x37000E  	BRA	L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer80
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer79:
;dsPIC33_CAN.mpas,579 :: 		CANPtr^ := DWORD(Buffer.ID shl 2) and $007FF;                             // SID
0x39A4	0xBE001C  	MOV.D	[W12], W0
0x39A6	0xBE0100  	MOV.D	W0, W2
0x39A8	0xD00102  	SL	W2, W2
0x39AA	0xD28183  	RLC	W3, W3
0x39AC	0xD00102  	SL	W2, W2
0x39AE	0xD28183  	RLC	W3, W3
0x39B0	0x207FF0  	MOV	#2047, W0
0x39B2	0x610000  	AND	W2, W0, W0
0x39B4	0x780D80  	MOV	W0, [W11]
;dsPIC33_CAN.mpas,580 :: 		Inc(CANPtr);                                                              // EID is not used
0x39B6	0x4580E2  	ADD	W11, #2, W1
0x39B8	0x780581  	MOV	W1, W11
;dsPIC33_CAN.mpas,581 :: 		CANPtr^ := Buffer.DataCount;                                              // EID/DLC does not use the EID bits
0x39BA	0x460064  	ADD	W12, #4, W0
0x39BC	0xFB8010  	ZE	[W0], W0
0x39BE	0x780880  	MOV	W0, [W1]
;dsPIC33_CAN.mpas,582 :: 		end;
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer80:
;dsPIC33_CAN.mpas,583 :: 		Inc(CANPtr);                                                                // Move to Byte 1 and Byte 2
0x39C0	0x4581E2  	ADD	W11, #2, W3
0x39C2	0x780583  	MOV	W3, W11
;dsPIC33_CAN.mpas,584 :: 		CANPtr^ := Buffer.DataBytes[0] or (Buffer.DataBytes[1] shl 8);
0x39C4	0x460165  	ADD	W12, #5, W2
0x39C6	0x460065  	ADD	W12, #5, W0
0x39C8	0xEC2000  	INC	W0
0x39CA	0x784010  	MOV.B	[W0], W0
0x39CC	0xFB8000  	ZE	W0, W0
0x39CE	0xDD00C8  	SL	W0, #8, W1
0x39D0	0x784012  	MOV.B	[W2], W0
0x39D2	0xFB8000  	ZE	W0, W0
0x39D4	0x700001  	IOR	W0, W1, W0
0x39D6	0x780980  	MOV	W0, [W3]
;dsPIC33_CAN.mpas,585 :: 		Inc(CANPtr);                                                                // Move to Byte 3 and Byte 4
0x39D8	0x4581E2  	ADD	W11, #2, W3
0x39DA	0x780583  	MOV	W3, W11
;dsPIC33_CAN.mpas,586 :: 		CANPtr^ := Buffer.DataBytes[2] or (Buffer.DataBytes[3] shl 8);
0x39DC	0x460065  	ADD	W12, #5, W0
0x39DE	0x400162  	ADD	W0, #2, W2
0x39E0	0x460065  	ADD	W12, #5, W0
0x39E2	0x400063  	ADD	W0, #3, W0
0x39E4	0x784010  	MOV.B	[W0], W0
0x39E6	0xFB8000  	ZE	W0, W0
0x39E8	0xDD00C8  	SL	W0, #8, W1
0x39EA	0xFB8012  	ZE	[W2], W0
0x39EC	0x700001  	IOR	W0, W1, W0
0x39EE	0x780980  	MOV	W0, [W3]
;dsPIC33_CAN.mpas,587 :: 		Inc(CANPtr);                                                                // Move to Byte 5 and Byte 6
0x39F0	0x4581E2  	ADD	W11, #2, W3
0x39F2	0x780583  	MOV	W3, W11
;dsPIC33_CAN.mpas,588 :: 		CANPtr^ := Buffer.DataBytes[4] or (Buffer.DataBytes[5] shl 8);
0x39F4	0x460065  	ADD	W12, #5, W0
0x39F6	0x400164  	ADD	W0, #4, W2
0x39F8	0x460065  	ADD	W12, #5, W0
0x39FA	0x400065  	ADD	W0, #5, W0
0x39FC	0x784010  	MOV.B	[W0], W0
0x39FE	0xFB8000  	ZE	W0, W0
0x3A00	0xDD00C8  	SL	W0, #8, W1
0x3A02	0xFB8012  	ZE	[W2], W0
0x3A04	0x700001  	IOR	W0, W1, W0
0x3A06	0x780980  	MOV	W0, [W3]
;dsPIC33_CAN.mpas,589 :: 		Inc(CANPtr);                                                                // Move to Byte 7 and Byte 8
0x3A08	0x4581E2  	ADD	W11, #2, W3
0x3A0A	0x780583  	MOV	W3, W11
;dsPIC33_CAN.mpas,590 :: 		CANPtr^ := Buffer.DataBytes[6] or (Buffer.DataBytes[7] shl 8);
0x3A0C	0x460065  	ADD	W12, #5, W0
0x3A0E	0x400166  	ADD	W0, #6, W2
0x3A10	0x460065  	ADD	W12, #5, W0
0x3A12	0x400067  	ADD	W0, #7, W0
0x3A14	0x784010  	MOV.B	[W0], W0
0x3A16	0xFB8000  	ZE	W0, W0
0x3A18	0xDD00C8  	SL	W0, #8, W1
0x3A1A	0xFB8012  	ZE	[W2], W0
0x3A1C	0x700001  	IOR	W0, W1, W0
0x3A1E	0x780980  	MOV	W0, [W3]
;dsPIC33_CAN.mpas,591 :: 		Inc(CANPtr);
0x3A20	0x458062  	ADD	W11, #2, W0
0x3A22	0x780580  	MOV	W0, W11
;dsPIC33_CAN.mpas,592 :: 		end else
0x3A24	0x370070  	BRA	L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer77
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer76:
;dsPIC33_CAN.mpas,596 :: 		if CANPtr^ and $0001 <> 0 then                                              // Word 0
0x3A26	0x78001B  	MOV	[W11], W0
0x3A28	0x600061  	AND	W0, #1, W0
0x3A2A	0xE10060  	CP	W0, #0
0x3A2C	0x320006  	BRA Z	L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer82
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer321:
;dsPIC33_CAN.mpas,597 :: 		Buffer.State := Buffer.State or BS_EXTENDED
0x3A2E	0x4600ED  	ADD	W12, #13, W1
0x3A30	0x46006D  	ADD	W12, #13, W0
0x3A32	0xFB8010  	ZE	[W0], W0
0x3A34	0x700061  	IOR	W0, #1, W0
0x3A36	0x784880  	MOV.B	W0, [W1]
0x3A38	0x370006  	BRA	L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer83
;dsPIC33_CAN.mpas,598 :: 		else
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer82:
;dsPIC33_CAN.mpas,599 :: 		Buffer.State := Buffer.State and not BS_EXTENDED;
0x3A3A	0x46016D  	ADD	W12, #13, W2
0x3A3C	0x46006D  	ADD	W12, #13, W0
0x3A3E	0xFB8090  	ZE	[W0], W1
0x3A40	0x200FE0  	MOV	#254, W0
0x3A42	0x608000  	AND	W1, W0, W0
0x3A44	0x784900  	MOV.B	W0, [W2]
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer83:
;dsPIC33_CAN.mpas,600 :: 		if Buffer.State and BS_EXTENDED <> 0 then
0x3A46	0x46006D  	ADD	W12, #13, W0
0x3A48	0xFB8010  	ZE	[W0], W0
0x3A4A	0x600061  	AND	W0, #1, W0
0x3A4C	0xE10060  	CP	W0, #0
0x3A4E	0x320026  	BRA Z	L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer85
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer322:
;dsPIC33_CAN.mpas,602 :: 		Buffer.ID := CANPtr^ and $1FFC;
0x3A50	0x78009B  	MOV	[W11], W1
0x3A52	0x21FFC0  	MOV	#8188, W0
0x3A54	0x608000  	AND	W1, W0, W0
0x3A56	0xEB0080  	CLR	W1
0x3A58	0xBE8E00  	MOV.D	W0, [W12]
;dsPIC33_CAN.mpas,603 :: 		Buffer.ID := Buffer.ID shl 16;
0x3A5A	0xBE001C  	MOV.D	[W12], W0
0x3A5C	0x780080  	MOV	W0, W1
0x3A5E	0xEB0000  	CLR	W0
0x3A60	0xBE8E00  	MOV.D	W0, [W12]
;dsPIC33_CAN.mpas,604 :: 		Inc(CANPtr);                                                              // Word 1
0x3A62	0x458062  	ADD	W11, #2, W0
0x3A64	0x780580  	MOV	W0, W11
;dsPIC33_CAN.mpas,605 :: 		Buffer.ID := Buffer.ID or DWORD((CANPtr^ and $0FFF) shl 6);
0x3A66	0x780090  	MOV	[W0], W1
0x3A68	0x20FFF0  	MOV	#4095, W0
0x3A6A	0x608000  	AND	W1, W0, W0
0x3A6C	0x780200  	MOV	W0, W4
0x3A6E	0xEB0280  	CLR	W5
0x3A70	0x200060  	MOV	#6, W0
0x3A72	0xBE0104  	MOV.D	W4, W2
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer323:
0x3A74	0xE90000  	DEC	W0, W0
0x3A76	0x350003  	BRA LT	L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer324
0x3A78	0xD00102  	SL	W2, W2
0x3A7A	0xD28183  	RLC	W3, W3
0x3A7C	0x37FFFB  	BRA	L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer323
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer324:
0x3A7E	0xBE001C  	MOV.D	[W12], W0
0x3A80	0x701E02  	IOR	W0, W2, [W12++]
0x3A82	0x709603  	IOR	W1, W3, [W12--]
;dsPIC33_CAN.mpas,606 :: 		Inc(CANPtr);
0x3A84	0x458062  	ADD	W11, #2, W0
0x3A86	0x780580  	MOV	W0, W11
;dsPIC33_CAN.mpas,607 :: 		Buffer.ID := Buffer.ID or DWORD((CANPtr^ and $FC00) shr 10);               // Word 2
0x3A88	0x780090  	MOV	[W0], W1
0x3A8A	0x2FC000  	MOV	#64512, W0
0x3A8C	0x608000  	AND	W1, W0, W0
0x3A8E	0xDE004A  	LSR	W0, #10, W0
0x3A90	0x780100  	MOV	W0, W2
0x3A92	0xEB0180  	CLR	W3
0x3A94	0xBE001C  	MOV.D	[W12], W0
0x3A96	0x701E02  	IOR	W0, W2, [W12++]
0x3A98	0x709603  	IOR	W1, W3, [W12--]
;dsPIC33_CAN.mpas,608 :: 		end else
0x3A9A	0x370008  	BRA	L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer86
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer85:
;dsPIC33_CAN.mpas,610 :: 		Buffer.ID := (CANPtr^ and $1FFC) shr 2;                                   // Word 0
0x3A9C	0x78009B  	MOV	[W11], W1
0x3A9E	0x21FFC0  	MOV	#8188, W0
0x3AA0	0x608000  	AND	W1, W0, W0
0x3AA2	0xDE0042  	LSR	W0, #2, W0
0x3AA4	0xEB0080  	CLR	W1
0x3AA6	0xBE8E00  	MOV.D	W0, [W12]
;dsPIC33_CAN.mpas,611 :: 		Inc(CANPtr);                                                              // Word 1
0x3AA8	0x458062  	ADD	W11, #2, W0
0x3AAA	0x780580  	MOV	W0, W11
;dsPIC33_CAN.mpas,612 :: 		end;
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer86:
;dsPIC33_CAN.mpas,613 :: 		Buffer.DataCount := CANPtr^ and $000F;                                      // Word 2
0x3AAC	0x4600E4  	ADD	W12, #4, W1
0x3AAE	0x78001B  	MOV	[W11], W0
0x3AB0	0x60006F  	AND	W0, #15, W0
0x3AB2	0x784880  	MOV.B	W0, [W1]
;dsPIC33_CAN.mpas,614 :: 		Inc(CANPtr);                                                                // Move to C1RXnB1
0x3AB4	0x4580E2  	ADD	W11, #2, W1
0x3AB6	0x780581  	MOV	W1, W11
;dsPIC33_CAN.mpas,615 :: 		Buffer.DataBytes[0] := CANPtr^;
0x3AB8	0x460065  	ADD	W12, #5, W0
0x3ABA	0x784811  	MOV.B	[W1], [W0]
;dsPIC33_CAN.mpas,616 :: 		Buffer.DataBytes[1] := CANPtr^ shr 8;
0x3ABC	0x460065  	ADD	W12, #5, W0
0x3ABE	0x4000E1  	ADD	W0, #1, W1
0x3AC0	0x78001B  	MOV	[W11], W0
0x3AC2	0xDE0048  	LSR	W0, #8, W0
0x3AC4	0x784880  	MOV.B	W0, [W1]
;dsPIC33_CAN.mpas,617 :: 		Inc(CANPtr);                                                                // Move to C1RXnB2
0x3AC6	0x4580E2  	ADD	W11, #2, W1
0x3AC8	0x780581  	MOV	W1, W11
;dsPIC33_CAN.mpas,618 :: 		Buffer.DataBytes[2] := CANPtr^;
0x3ACA	0x460065  	ADD	W12, #5, W0
0x3ACC	0xECA000  	INC2	W0
0x3ACE	0x784811  	MOV.B	[W1], [W0]
;dsPIC33_CAN.mpas,619 :: 		Buffer.DataBytes[3] := CANPtr^ shr 8;
0x3AD0	0x460065  	ADD	W12, #5, W0
0x3AD2	0x4000E3  	ADD	W0, #3, W1
0x3AD4	0x78001B  	MOV	[W11], W0
0x3AD6	0xDE0048  	LSR	W0, #8, W0
0x3AD8	0x784880  	MOV.B	W0, [W1]
;dsPIC33_CAN.mpas,620 :: 		Inc(CANPtr);                                                                // Move to C1RXnB3
0x3ADA	0x4580E2  	ADD	W11, #2, W1
0x3ADC	0x780581  	MOV	W1, W11
;dsPIC33_CAN.mpas,621 :: 		Buffer.DataBytes[4] := CANPtr^;
0x3ADE	0x460065  	ADD	W12, #5, W0
0x3AE0	0x400064  	ADD	W0, #4, W0
0x3AE2	0x784811  	MOV.B	[W1], [W0]
;dsPIC33_CAN.mpas,622 :: 		Buffer.DataBytes[5] := CANPtr^ shr 8;
0x3AE4	0x460065  	ADD	W12, #5, W0
0x3AE6	0x4000E5  	ADD	W0, #5, W1
0x3AE8	0x78001B  	MOV	[W11], W0
0x3AEA	0xDE0048  	LSR	W0, #8, W0
0x3AEC	0x784880  	MOV.B	W0, [W1]
;dsPIC33_CAN.mpas,623 :: 		Inc(CANPtr);                                                                // Move to C1RXnB4
0x3AEE	0x4580E2  	ADD	W11, #2, W1
0x3AF0	0x780581  	MOV	W1, W11
;dsPIC33_CAN.mpas,624 :: 		Buffer.DataBytes[6] := CANPtr^;
0x3AF2	0x460065  	ADD	W12, #5, W0
0x3AF4	0x400066  	ADD	W0, #6, W0
0x3AF6	0x784811  	MOV.B	[W1], [W0]
;dsPIC33_CAN.mpas,625 :: 		Buffer.DataBytes[7] := CANPtr^ shr 8;
0x3AF8	0x460065  	ADD	W12, #5, W0
0x3AFA	0x4000E7  	ADD	W0, #7, W1
0x3AFC	0x78001B  	MOV	[W11], W0
0x3AFE	0xDE0048  	LSR	W0, #8, W0
0x3B00	0x784880  	MOV.B	W0, [W1]
;dsPIC33_CAN.mpas,626 :: 		Inc(CANPtr);                                                                // Move to C1RXnCON
0x3B02	0x458062  	ADD	W11, #2, W0
0x3B04	0x780580  	MOV	W0, W11
;dsPIC33_CAN.mpas,627 :: 		end
L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer77:
;dsPIC33_CAN.mpas,628 :: 		end;
L_end_dsPIC33_DMA_Style_Buffer:
0x3B06	0x060000  	RETURN
; end of dsPIC33_CAN_dsPIC33_DMA_Style_Buffer
_dsPIC33_CAN_RequestTransmit:
;dsPIC33_CAN.mpas,938 :: 		begin
;dsPIC33_CAN.mpas,939 :: 		ClearWindowSelectBit;
0x392A	0x781F8B  	PUSH	W11
0x392C	0x781F8C  	PUSH	W12
0x392E	0x07FD92  	RCALL	dsPIC33_CAN_ClearWindowSelectBit
;dsPIC33_CAN.mpas,940 :: 		ManipulateTXBit(BufferNumber, TX_REQUEST_BIT, True);
0x3930	0x2FFFFC  	MOV	#65535, W12
0x3932	0xB3C03B  	MOV.B	#3, W11
0x3934	0x07EDB7  	RCALL	dsPIC33_CAN_ManipulateTXBit
;dsPIC33_CAN.mpas,942 :: 		end;
L_end_dsPIC33_CAN_RequestTransmit:
0x3936	0x78064F  	POP	W12
0x3938	0x7805CF  	POP	W11
0x393A	0x060000  	RETURN
; end of _dsPIC33_CAN_RequestTransmit
_NMRAnetNode_TestMsgFlags:
;NMRAnetNode.mpas,533 :: 		begin
;NMRAnetNode.mpas,534 :: 		Result := Node^.MsgFlags and Flag = Flag;
0x3B1A	0x450076  	ADD	W10, #22, W0
0x3B1C	0xFB8010  	ZE	[W0], W0
0x3B1E	0x60000B  	AND	W0, W11, W0
; Result start address is: 6 (W3)
0x3B20	0xE1000B  	CP	W0, W11
0x3B22	0xEF2006  	CLR	W3
0x3B24	0x3A0001  	BRA NZ	L__NMRAnetNode_TestMsgFlags270
0x3B26	0xEEA006  	COM	W3
L__NMRAnetNode_TestMsgFlags270:
;NMRAnetNode.mpas,535 :: 		if DoClear then
0x3B28	0xE20018  	CP0	W12
0x3B2A	0x320001  	BRA Z	L__NMRAnetNode_TestMsgFlags114
L__NMRAnetNode_TestMsgFlags271:
;NMRAnetNode.mpas,536 :: 		NMRAnetNode_ClearMsgFlag(Node, Flag);
0x3B2C	0x07EB11  	RCALL	_NMRAnetNode_ClearMsgFlag
L__NMRAnetNode_TestMsgFlags114:
;NMRAnetNode.mpas,537 :: 		end;
0x3B2E	0x780003  	MOV	W3, W0
; Result end address is: 6 (W3)
L_end_NMRAnetNode_TestMsgFlags:
0x3B30	0x060000  	RETURN
; end of _NMRAnetNode_TestMsgFlags
_NMRAnetNode_ClearMsgFlag:
;NMRAnetNode.mpas,506 :: 		begin
;NMRAnetNode.mpas,507 :: 		Node^.MsgFlags := Node^.MsgFlags and not Flag;
0x1150	0x450176  	ADD	W10, #22, W2
0x1152	0x78400B  	MOV.B	W11, W0
0x1154	0xEEE000  	COM.B	W0
0x1156	0xFB8092  	ZE	[W2], W1
0x1158	0xFB8000  	ZE	W0, W0
0x115A	0x608000  	AND	W1, W0, W0
0x115C	0x784900  	MOV.B	W0, [W2]
;NMRAnetNode.mpas,508 :: 		end;
L_end_NMRAnetNode_ClearMsgFlag:
0x115E	0x060000  	RETURN
; end of _NMRAnetNode_ClearMsgFlag
_NMRABusBufferAvailable:
;NMRAnetStateMachine.mpas,425 :: 		begin
;NMRAnetStateMachine.mpas,426 :: 		Result := CAN_Engine.TX_NMRAnetBuffer.State and BS_ALLOCATED = 0
0x3B08	0x225F70  	MOV	#lo_addr(_CAN_Engine+29), W0
0x3B0A	0xFB8010  	ZE	[W0], W0
0x3B0C	0x600062  	AND	W0, #2, W0
; Result start address is: 2 (W1)
0x3B0E	0xE10060  	CP	W0, #0
0x3B10	0xEF2002  	CLR	W1
0x3B12	0x3A0001  	BRA NZ	L__NMRABusBufferAvailable613
0x3B14	0xEEA002  	COM	W1
L__NMRABusBufferAvailable613:
;NMRAnetStateMachine.mpas,427 :: 		end;
0x3B16	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRABusBufferAvailable:
0x3B18	0x060000  	RETURN
; end of _NMRABusBufferAvailable
_TransmitNMRABusLayerMsg:
0x3892	0xFA0000  	LNK	#0
;NMRAnetStateMachine.mpas,396 :: 		begin
;NMRAnetStateMachine.mpas,400 :: 		Result := False;
; DestinationAlias start address is: 12 (W6)
0x3894	0x97BB4E  	MOV	[W14-8], W6
; DataCount start address is: 14 (W7)
0x3896	0x97F3EE  	MOV.B	[W14-10], W7
; DataBytes start address is: 16 (W8)
0x3898	0x97BC2E  	MOV	[W14-12], W8
; AliasInHeader start address is: 2 (W1)
0x389A	0x97B89E  	MOV	[W14-14], W1
; Result start address is: 4 (W2)
0x389C	0xEF2004  	CLR	W2
;NMRAnetStateMachine.mpas,402 :: 		if CAN_Engine.TX_NMRAnetBuffer.State and BS_ALLOCATED = 0 then
0x389E	0x225F70  	MOV	#lo_addr(_CAN_Engine+29), W0
0x38A0	0xFB8010  	ZE	[W0], W0
0x38A2	0x600062  	AND	W0, #2, W0
0x38A4	0xE10060  	CP	W0, #0
0x38A6	0x3A001A  	BRA NZ	L__TransmitNMRABusLayerMsg571
L__TransmitNMRABusLayerMsg610:
; Result end address is: 4 (W2)
;NMRAnetStateMachine.mpas,404 :: 		if AliasInHeader then
0x38A8	0xE20002  	CP0	W1
0x38AA	0x320007  	BRA Z	L__TransmitNMRABusLayerMsg70
L__TransmitNMRABusLayerMsg611:
; AliasInHeader end address is: 2 (W1)
;NMRAnetStateMachine.mpas,405 :: 		NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI(Node, Buffer, MTI, DestinationAlias, DataCount, DataBytes)
0x38AC	0x781F88  	PUSH	W8
; DataBytes end address is: 16 (W8)
0x38AE	0xFB8007  	ZE	W7, W0
; DataCount end address is: 14 (W7)
0x38B0	0x781F80  	PUSH	W0
0x38B2	0x781F86  	PUSH	W6
; DestinationAlias end address is: 12 (W6)
0x38B4	0x07E9FA  	RCALL	_NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI
0x38B6	0xB1006F  	SUB	#6, W15
0x38B8	0x370006  	BRA	L__TransmitNMRABusLayerMsg71
;NMRAnetStateMachine.mpas,406 :: 		else
L__TransmitNMRABusLayerMsg70:
;NMRAnetStateMachine.mpas,407 :: 		NMRAnetUtilities_CreateNMRABusMessageCANBuffer(Node, Buffer, MTI, DestinationAlias, DataCount, DataBytes);
; DataBytes start address is: 16 (W8)
; DataCount start address is: 14 (W7)
; DestinationAlias start address is: 12 (W6)
0x38BA	0x781F88  	PUSH	W8
; DataBytes end address is: 16 (W8)
0x38BC	0xFB8007  	ZE	W7, W0
; DataCount end address is: 14 (W7)
0x38BE	0x781F80  	PUSH	W0
0x38C0	0x781F86  	PUSH	W6
; DestinationAlias end address is: 12 (W6)
0x38C2	0x07FFAC  	RCALL	_NMRAnetUtilities_CreateNMRABusMessageCANBuffer
0x38C4	0xB1006F  	SUB	#6, W15
L__TransmitNMRABusLayerMsg71:
;NMRAnetStateMachine.mpas,409 :: 		CAN_Engine.TX_NMRAnetBuffer := Buffer^;
0x38C6	0x225EA1  	MOV	#lo_addr(_CAN_Engine+16), W1
0x38C8	0x78000B  	MOV	W11, W0
0x38CA	0x090006  	REPEAT	#6
0x38CC	0x7818B0  	MOV	[W0++], [W1++]
;NMRAnetStateMachine.mpas,410 :: 		CAN_Engine.TX_NMRAnetBuffer.State := CAN_Engine.TX_NMRAnetBuffer.State or BS_ALLOCATED;
0x38CE	0x225F70  	MOV	#lo_addr(_CAN_Engine+29), W0
0x38D0	0x784090  	MOV.B	[W0], W1
0x38D2	0x225F70  	MOV	#lo_addr(_CAN_Engine+29), W0
0x38D4	0x70C862  	IOR.B	W1, #2, [W0]
;NMRAnetStateMachine.mpas,411 :: 		StartCANMessageEngine();
0x38D6	0x07EC44  	RCALL	_StartCANMessageEngine
;NMRAnetStateMachine.mpas,412 :: 		Result := True
; Result start address is: 2 (W1)
0x38D8	0x2FFFF1  	MOV	#65535, W1
; Result end address is: 2 (W1)
;NMRAnetStateMachine.mpas,413 :: 		end;
0x38DA	0x370001  	BRA	L__TransmitNMRABusLayerMsg67
L__TransmitNMRABusLayerMsg571:
;NMRAnetStateMachine.mpas,402 :: 		if CAN_Engine.TX_NMRAnetBuffer.State and BS_ALLOCATED = 0 then
0x38DC	0x780082  	MOV	W2, W1
;NMRAnetStateMachine.mpas,413 :: 		end;
L__TransmitNMRABusLayerMsg67:
;NMRAnetStateMachine.mpas,414 :: 		end;
; Result start address is: 2 (W1)
0x38DE	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_TransmitNMRABusLayerMsg:
0x38E0	0xFA8000  	ULNK
0x38E2	0x060000  	RETURN
; end of _TransmitNMRABusLayerMsg
_NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI:
0x0CAA	0xFA0000  	LNK	#0
;NMRAnetUtilities.mpas,159 :: 		begin
;NMRAnetUtilities.mpas,160 :: 		Buffer^.DataCount := ByteCount;
; DestinationAlias start address is: 12 (W6)
0x0CAC	0x97BB4E  	MOV	[W14-8], W6
; ByteCount start address is: 2 (W1)
0x0CAE	0x97F0EE  	MOV.B	[W14-10], W1
; DataBytes start address is: 4 (W2)
0x0CB0	0x97B92E  	MOV	[W14-12], W2
0x0CB2	0x458064  	ADD	W11, #4, W0
0x0CB4	0x784801  	MOV.B	W1, [W0]
;NMRAnetUtilities.mpas,161 :: 		if DataBytes <> nil then
0x0CB6	0xE11060  	CP	W2, #0
0x0CB8	0x320006  	BRA Z	L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI31
L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI272:
;NMRAnetUtilities.mpas,163 :: 		Buffer^.DataCount := ByteCount;
0x0CBA	0x458064  	ADD	W11, #4, W0
0x0CBC	0x784801  	MOV.B	W1, [W0]
; ByteCount end address is: 2 (W1)
;NMRAnetUtilities.mpas,164 :: 		Buffer^.DataBytes := DataBytes^;
0x0CBE	0x4580E5  	ADD	W11, #5, W1
0x0CC0	0x780002  	MOV	W2, W0
; DataBytes end address is: 4 (W2)
0x0CC2	0x090007  	REPEAT	#7
0x0CC4	0x7858B0  	MOV.B	[W0++], [W1++]
;NMRAnetUtilities.mpas,165 :: 		end;
L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI31:
;NMRAnetUtilities.mpas,166 :: 		Buffer^.State := Buffer^.State or BS_EXTENDED;
0x0CC6	0x4580ED  	ADD	W11, #13, W1
0x0CC8	0xFB8011  	ZE	[W1], W0
0x0CCA	0x700061  	IOR	W0, #1, W0
0x0CCC	0x784880  	MOV.B	W0, [W1]
;NMRAnetUtilities.mpas,167 :: 		Buffer^.ID := $10000000 or MTI or NodeBuffer^.Info.AliasID;
0x0CCE	0x200000  	MOV	#0, W0
0x0CD0	0x210001  	MOV	#4096, W1
0x0CD2	0x70010C  	IOR	W0, W12, W2
0x0CD4	0x70818D  	IOR	W1, W13, W3
0x0CD6	0x450062  	ADD	W10, #2, W0
0x0CD8	0x400070  	ADD	W0, #16, W0
0x0CDA	0x780010  	MOV	[W0], W0
0x0CDC	0xEB0080  	CLR	W1
0x0CDE	0x710000  	IOR	W2, W0, W0
0x0CE0	0x718081  	IOR	W3, W1, W1
0x0CE2	0xBE8D80  	MOV.D	W0, [W11]
;NMRAnetUtilities.mpas,168 :: 		if DestinationAlias <> 0 then
0x0CE4	0xE13060  	CP	W6, #0
0x0CE6	0x32000C  	BRA Z	L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI34
L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI273:
;NMRAnetUtilities.mpas,169 :: 		Buffer^.ID := Buffer^.ID or DWORD(DestinationAlias shl 12);
0x0CE8	0x780206  	MOV	W6, W4
0x0CEA	0xEB0280  	CLR	W5
; DestinationAlias end address is: 12 (W6)
0x0CEC	0x2000C0  	MOV	#12, W0
0x0CEE	0xBE0104  	MOV.D	W4, W2
L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI274:
0x0CF0	0xE90000  	DEC	W0, W0
0x0CF2	0x350003  	BRA LT	L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI275
0x0CF4	0xD00102  	SL	W2, W2
0x0CF6	0xD28183  	RLC	W3, W3
0x0CF8	0x37FFFB  	BRA	L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI274
L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI275:
0x0CFA	0xBE001B  	MOV.D	[W11], W0
0x0CFC	0x701D82  	IOR	W0, W2, [W11++]
0x0CFE	0x709583  	IOR	W1, W3, [W11--]
L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI34:
;NMRAnetUtilities.mpas,170 :: 		end;
L_end_NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI:
0x0D00	0xFA8000  	ULNK
0x0D02	0x060000  	RETURN
; end of _NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI
_NMRAnetUtilities_CreateNMRABusMessageCANBuffer:
0x381C	0xFA0000  	LNK	#0
;NMRAnetUtilities.mpas,130 :: 		begin
;NMRAnetUtilities.mpas,131 :: 		Offset := 0;
; DestinationAlias start address is: 2 (W1)
0x381E	0x97B8CE  	MOV	[W14-8], W1
; ByteCount start address is: 6 (W3)
0x3820	0x97F1EE  	MOV.B	[W14-10], W3
; DataBytes start address is: 4 (W2)
0x3822	0x97B92E  	MOV	[W14-12], W2
; Offset start address is: 0 (W0)
0x3824	0xEF2000  	CLR	W0
;NMRAnetUtilities.mpas,132 :: 		if DataBytes <> nil then
0x3826	0xE11060  	CP	W2, #0
0x3828	0x320020  	BRA Z	L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer19
L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer267:
;NMRAnetUtilities.mpas,134 :: 		if DestinationAlias <> 0 then
0x382A	0xE10860  	CP	W1, #0
0x382C	0x320009  	BRA Z	L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer236
L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer268:
; Offset end address is: 0 (W0)
;NMRAnetUtilities.mpas,136 :: 		NMRAnetUtilities_LoadDestinationAlias(DestinationAlias, @Buffer^.DataBytes);
0x382E	0x458065  	ADD	W11, #5, W0
0x3830	0xBE9F8A  	PUSH.D	W10
0x3832	0x780580  	MOV	W0, W11
0x3834	0x780501  	MOV	W1, W10
; DestinationAlias end address is: 2 (W1)
0x3836	0x07EA66  	RCALL	_NMRAnetUtilities_LoadDestinationAlias
0x3838	0xBE054F  	POP.D	W10
;NMRAnetUtilities.mpas,137 :: 		ByteCount := ByteCount + 2;
; ByteCount start address is: 2 (W1)
0x383A	0x41C0E2  	ADD.B	W3, #2, W1
; ByteCount end address is: 6 (W3)
;NMRAnetUtilities.mpas,138 :: 		Offset := 2;
; Offset start address is: 6 (W3)
0x383C	0x200023  	MOV	#2, W3
; ByteCount end address is: 2 (W1)
; Offset end address is: 6 (W3)
;NMRAnetUtilities.mpas,139 :: 		end;
0x383E	0x370002  	BRA	L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer22
L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer236:
;NMRAnetUtilities.mpas,134 :: 		if DestinationAlias <> 0 then
0x3840	0x784083  	MOV.B	W3, W1
0x3842	0x780180  	MOV	W0, W3
;NMRAnetUtilities.mpas,139 :: 		end;
L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer22:
;NMRAnetUtilities.mpas,140 :: 		Buffer^.DataCount := ByteCount;
; Offset start address is: 6 (W3)
; ByteCount start address is: 2 (W1)
0x3844	0x458064  	ADD	W11, #4, W0
0x3846	0x784801  	MOV.B	W1, [W0]
;NMRAnetUtilities.mpas,141 :: 		for i := 0 to ByteCount do
; i start address is: 10 (W5)
0x3848	0xEF200A  	CLR	W5
; DataBytes end address is: 4 (W2)
; ByteCount end address is: 2 (W1)
; i end address is: 10 (W5)
0x384A	0x780202  	MOV	W2, W4
0x384C	0x784101  	MOV.B	W1, W2
L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer24:
; i start address is: 10 (W5)
; DataBytes start address is: 8 (W4)
; ByteCount start address is: 4 (W2)
; Offset start address is: 6 (W3)
; Offset end address is: 6 (W3)
; DataBytes start address is: 8 (W4)
; DataBytes end address is: 8 (W4)
0x384E	0xFB8002  	ZE	W2, W0
0x3850	0xE12800  	CP	W5, W0
0x3852	0x3C000A  	BRA GT	L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer28
L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer269:
; Offset end address is: 6 (W3)
; DataBytes end address is: 8 (W4)
;NMRAnetUtilities.mpas,142 :: 		Buffer^.DataBytes[i+Offset] := DataBytes^[i];
; DataBytes start address is: 8 (W4)
; Offset start address is: 6 (W3)
0x3854	0x4580E5  	ADD	W11, #5, W1
0x3856	0x428003  	ADD	W5, W3, W0
0x3858	0x408080  	ADD	W1, W0, W1
0x385A	0x420005  	ADD	W4, W5, W0
0x385C	0x784890  	MOV.B	[W0], [W1]
0x385E	0xFB8002  	ZE	W2, W0
0x3860	0xE12800  	CP	W5, W0
0x3862	0x320002  	BRA Z	L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer28
L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer270:
; i start address is: 10 (W5)
0x3864	0xEC200A  	INC	W5
; i end address is: 10 (W5)
; ByteCount end address is: 4 (W2)
; Offset end address is: 6 (W3)
; DataBytes end address is: 8 (W4)
; i end address is: 10 (W5)
0x3866	0x37FFF3  	BRA	L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer24
L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer28:
;NMRAnetUtilities.mpas,143 :: 		end else
0x3868	0x370003  	BRA	L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer20
L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer19:
;NMRAnetUtilities.mpas,144 :: 		Buffer^.DataCount := 0;
0x386A	0x4580E4  	ADD	W11, #4, W1
0x386C	0xEF2000  	CLR	W0
0x386E	0x784880  	MOV.B	W0, [W1]
L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer20:
;NMRAnetUtilities.mpas,146 :: 		Buffer^.State := Buffer^.State or BS_EXTENDED;
0x3870	0x4580ED  	ADD	W11, #13, W1
0x3872	0xFB8011  	ZE	[W1], W0
0x3874	0x700061  	IOR	W0, #1, W0
0x3876	0x784880  	MOV.B	W0, [W1]
;NMRAnetUtilities.mpas,147 :: 		Buffer^.ID := $10000000 or MTI or NodeBuffer^.Info.AliasID;
0x3878	0x200000  	MOV	#0, W0
0x387A	0x210001  	MOV	#4096, W1
0x387C	0x70010C  	IOR	W0, W12, W2
0x387E	0x70818D  	IOR	W1, W13, W3
0x3880	0x450062  	ADD	W10, #2, W0
0x3882	0x400070  	ADD	W0, #16, W0
0x3884	0x780010  	MOV	[W0], W0
0x3886	0xEB0080  	CLR	W1
0x3888	0x710000  	IOR	W2, W0, W0
0x388A	0x718081  	IOR	W3, W1, W1
0x388C	0xBE8D80  	MOV.D	W0, [W11]
;NMRAnetUtilities.mpas,148 :: 		end;
L_end_NMRAnetUtilities_CreateNMRABusMessageCANBuffer:
0x388E	0xFA8000  	ULNK
0x3890	0x060000  	RETURN
; end of _NMRAnetUtilities_CreateNMRABusMessageCANBuffer
_NMRAnetUtilities_LoadDestinationAlias:
;NMRAnetUtilities.mpas,492 :: 		begin
;NMRAnetUtilities.mpas,493 :: 		DataBytes^[0] := (DestinationAlias shr 8) and $000F;
0x0D04	0xDE5048  	LSR	W10, #8, W0
0x0D06	0x60006F  	AND	W0, #15, W0
0x0D08	0x784D80  	MOV.B	W0, [W11]
;NMRAnetUtilities.mpas,494 :: 		DataBytes^[1] := DestinationAlias and $00FF;
0x0D0A	0x4580E1  	ADD	W11, #1, W1
0x0D0C	0x200FF0  	MOV	#255, W0
0x0D0E	0x650000  	AND	W10, W0, W0
0x0D10	0x784880  	MOV.B	W0, [W1]
;NMRAnetUtilities.mpas,495 :: 		end;
L_end_NMRAnetUtilities_LoadDestinationAlias:
0x0D12	0x060000  	RETURN
; end of _NMRAnetUtilities_LoadDestinationAlias
_ReceivedOnFilter1:
0x4BF6	0xFA0026  	LNK	#38
;NMRAnetCANReceive.mpas,217 :: 		begin
;NMRAnetCANReceive.mpas,221 :: 		TMR4 := 0;
0x4BF8	0x781F8A  	PUSH	W10
0x4BFA	0x781F8B  	PUSH	W11
0x4BFC	0x781F8C  	PUSH	W12
0x4BFE	0x781F8D  	PUSH	W13
0x4C00	0xEF2114  	CLR	TMR4
;NMRAnetCANReceive.mpas,223 :: 		DoDefault := True;
0x4C02	0x2FFFF0  	MOV	#65535, W0
0x4C04	0x980700  	MOV	W0, [W14+0]
;NMRAnetCANReceive.mpas,224 :: 		if NMRAnetLayerReceiveHook <> nil then
0x4C06	0x80B080  	MOV	NMRAnetCANReceive_NMRAnetLayerReceiveHook, W0
0x4C08	0xE10060  	CP	W0, #0
0x4C0A	0x320006  	BRA Z	L__ReceivedOnFilter162
L__ReceivedOnFilter1318:
;NMRAnetCANReceive.mpas,225 :: 		NMRAnetLayerReceiveHook(CANBuffer, DoDefault);                              // Allow the program to have a crack at the message handler
0x4C0C	0x470060  	ADD	W14, #0, W0
0x4C0E	0x781F8A  	PUSH	W10
0x4C10	0x780580  	MOV	W0, W11
0x4C12	0x80B080  	MOV	NMRAnetCANReceive_NMRAnetLayerReceiveHook, W0
0x4C14	0x010000  	CALL	W0
0x4C16	0x78054F  	POP	W10
L__ReceivedOnFilter162:
;NMRAnetCANReceive.mpas,227 :: 		if DoDefault then
0x4C18	0x470060  	ADD	W14, #0, W0
0x4C1A	0xE00010  	CP0	[W0]
0x4C1C	0x3203FE  	BRA Z	L__ReceivedOnFilter165
L__ReceivedOnFilter1319:
;NMRAnetCANReceive.mpas,229 :: 		BaseBuffer := nil;
0x4C1E	0xEF2000  	CLR	W0
0x4C20	0x980750  	MOV	W0, [W14+10]
;NMRAnetCANReceive.mpas,230 :: 		DatagramBuffer := nil;
0x4C22	0xEF2000  	CLR	W0
0x4C24	0x980760  	MOV	W0, [W14+12]
;NMRAnetCANReceive.mpas,231 :: 		SourceAlias := NMRAnetUtilities_ExtractSourceAlias(CANBuffer);
0x4C26	0x07F67C  	RCALL	_NMRAnetUtilities_ExtractSourceAlias
; SourceAlias start address is: 10 (W5)
0x4C28	0x780280  	MOV	W0, W5
;NMRAnetCANReceive.mpas,232 :: 		Node := NMRAnetNode_FindByAlias(SourceAlias);                               // The Source Alias that we receive should NEVER contain our alias
0x4C2A	0x781F85  	PUSH	W5
0x4C2C	0x781F8A  	PUSH	W10
0x4C2E	0x780500  	MOV	W0, W10
0x4C30	0x07F659  	RCALL	_NMRAnetNode_FindByAlias
0x4C32	0x78054F  	POP	W10
0x4C34	0x7802CF  	POP	W5
; Node start address is: 8 (W4)
0x4C36	0x780200  	MOV	W0, W4
;NMRAnetCANReceive.mpas,233 :: 		if Node <> nil then
0x4C38	0xE10060  	CP	W0, #0
0x4C3A	0x320003  	BRA Z	L__ReceivedOnFilter168
L__ReceivedOnFilter1320:
; Node end address is: 8 (W4)
; SourceAlias end address is: 10 (W5)
;NMRAnetCANReceive.mpas,234 :: 		NMRAnetNode_SetMsgFlags(MF_DUPLICATE_ALIAS)                               // A "bad" duplicate Alias
0x4C3C	0x20002A  	MOV	#2, W10
0x4C3E	0x07F779  	RCALL	_NMRAnetNode_SetMsgFlags
0x4C40	0x3703EC  	BRA	L__ReceivedOnFilter169
;NMRAnetCANReceive.mpas,235 :: 		else begin
L__ReceivedOnFilter168:
;NMRAnetCANReceive.mpas,236 :: 		case CANBuffer^.ID and MTI_FRAME_TYPE_MASK of
; SourceAlias start address is: 10 (W5)
; Node start address is: 8 (W4)
0x4C42	0xBE011A  	MOV.D	[W10], W2
0x4C44	0x200000  	MOV	#0, W0
0x4C46	0x20F001  	MOV	#3840, W1
0x4C48	0x610100  	AND	W2, W0, W2
0x4C4A	0x618181  	AND	W3, W1, W3
0x4C4C	0x981712  	MOV	W2, [W14+34]
0x4C4E	0x981723  	MOV	W3, [W14+36]
;NMRAnetCANReceive.mpas,237 :: 		MTI_FRAME_TYPE_GENERAL               : begin
0x4C50	0x200000  	MOV	#0, W0
0x4C52	0x209001  	MOV	#2304, W1
0x4C54	0xE11000  	CP	W2, W0
0x4C56	0xE19801  	CPB	W3, W1
0x4C58	0x3A0249  	BRA NZ	L__ReceivedOnFilter173
L__ReceivedOnFilter1321:
;NMRAnetCANReceive.mpas,238 :: 		if NMRAnetUtilities_IsAddressedMessage(CANBuffer) then                      // Is this an Addressed Message?
0x4C5A	0x07F808  	RCALL	_NMRAnetUtilities_IsAddressedMessage
0x4C5C	0xE20000  	CP0	W0
0x4C5E	0x320156  	BRA Z	L__ReceivedOnFilter175
L__ReceivedOnFilter1322:
; Node end address is: 8 (W4)
;NMRAnetCANReceive.mpas,240 :: 		Node := NMRAnetNode_FindByAlias(NMRAnetUtilities_ExtractDestinationAlias(CANBuffer));   // Extract the Node that the message is addressed to
0x4C60	0x07F7F3  	RCALL	_NMRAnetUtilities_ExtractDestinationAlias
0x4C62	0x781F85  	PUSH	W5
0x4C64	0x781F8A  	PUSH	W10
0x4C66	0x780500  	MOV	W0, W10
0x4C68	0x07F63D  	RCALL	_NMRAnetNode_FindByAlias
0x4C6A	0x78054F  	POP	W10
0x4C6C	0x7802CF  	POP	W5
; Node start address is: 12 (W6)
0x4C6E	0x780300  	MOV	W0, W6
;NMRAnetCANReceive.mpas,241 :: 		if Node <> nil then
0x4C70	0xE10060  	CP	W0, #0
0x4C72	0x32014B  	BRA Z	L__ReceivedOnFilter178
L__ReceivedOnFilter1323:
;NMRAnetCANReceive.mpas,243 :: 		if NMRAnetNode_TestStateFlag(Node, NS_PERMITTED) then
0x4C74	0x781F8A  	PUSH	W10
0x4C76	0xB3C02B  	MOV.B	#2, W11
0x4C78	0x780506  	MOV	W6, W10
0x4C7A	0x07F80A  	RCALL	_NMRAnetNode_TestStateFlag
0x4C7C	0x78054F  	POP	W10
0x4C7E	0xE20000  	CP0	W0
0x4C80	0x320144  	BRA Z	L__ReceivedOnFilter181
L__ReceivedOnFilter1324:
;NMRAnetCANReceive.mpas,245 :: 		BaseBufferAllocFailed := False;                // Optomistic
; BaseBufferAllocFailed start address is: 14 (W7)
0x4C82	0xEF200E  	CLR	W7
;NMRAnetCANReceive.mpas,246 :: 		case CANBuffer^.ID and MTI_MASK of             // If we get here then the message is for our Node or VNode
0x4C84	0xBE011A  	MOV.D	[W10], W2
0x4C86	0x2F0000  	MOV	#61440, W0
0x4C88	0x20FFF1  	MOV	#4095, W1
0x4C8A	0x610100  	AND	W2, W0, W2
0x4C8C	0x618181  	AND	W3, W1, W3
0x4C8E	0x980F52  	MOV	W2, [W14+26]
0x4C90	0x980F63  	MOV	W3, [W14+28]
;NMRAnetCANReceive.mpas,247 :: 		MTI_VERIFY_NODE_ID_NUMBER_DEST  :   begin
0x4C92	0x280000  	MOV	#32768, W0
0x4C94	0x209481  	MOV	#2376, W1
0x4C96	0xE11000  	CP	W2, W0
0x4C98	0xE19801  	CPB	W3, W1
0x4C9A	0x3A0007  	BRA NZ	L__ReceivedOnFilter186
L__ReceivedOnFilter1325:
;NMRAnetCANReceive.mpas,248 :: 		NMRAnetNode_SetMsgFlag(Node, MF_VERIFY_NODE_ID) // All messages addressed to node get replies even if the payload is wrong!
0x4C9C	0x781F8A  	PUSH	W10
0x4C9E	0xB3C10B  	MOV.B	#16, W11
0x4CA0	0x780506  	MOV	W6, W10
0x4CA2	0x07F7F0  	RCALL	_NMRAnetNode_SetMsgFlag
0x4CA4	0x78054F  	POP	W10
;NMRAnetCANReceive.mpas,249 :: 		end;
0x4CA6	0x780007  	MOV	W7, W0
0x4CA8	0x370107  	BRA	L__ReceivedOnFilter183
L__ReceivedOnFilter186:
;NMRAnetCANReceive.mpas,250 :: 		MTI_OPTIONAL_INTERACTION_REJECTED : begin
0x4CAA	0x280000  	MOV	#32768, W0
0x4CAC	0x209061  	MOV	#2310, W1
0x4CAE	0x90095E  	MOV	[W14+26], W2
0x4CB0	0x9009EE  	MOV	[W14+28], W3
0x4CB2	0xE11000  	CP	W2, W0
0x4CB4	0xE19801  	CPB	W3, W1
0x4CB6	0x3A0002  	BRA NZ	L__ReceivedOnFilter189
L__ReceivedOnFilter1326:
;NMRAnetCANReceive.mpas,251 :: 		end;
0x4CB8	0x780007  	MOV	W7, W0
0x4CBA	0x3700FE  	BRA	L__ReceivedOnFilter183
L__ReceivedOnFilter189:
;NMRAnetCANReceive.mpas,252 :: 		MTI_PROTOCOL_SUPPORT_INQUIRY      : begin
0x4CBC	0x280000  	MOV	#32768, W0
0x4CBE	0x209821  	MOV	#2434, W1
0x4CC0	0xE11000  	CP	W2, W0
0x4CC2	0xE19801  	CPB	W3, W1
0x4CC4	0x3A001E  	BRA NZ	L__ReceivedOnFilter192
L__ReceivedOnFilter1327:
;NMRAnetCANReceive.mpas,255 :: 		if NMRAnetUtilities_ExtractDestinationAliasFlags(CANBuffer) and PIP_EXTENSION_START_BIT_MASK = 0 then
0x4CC6	0x07F77F  	RCALL	_NMRAnetUtilities_ExtractDestinationAliasFlags
0x4CC8	0x220001  	MOV	#8192, W1
0x4CCA	0x600001  	AND	W0, W1, W0
0x4CCC	0xE10060  	CP	W0, #0
0x4CCE	0x3A0017  	BRA NZ	L__ReceivedOnFilter1289
L__ReceivedOnFilter1328:
;NMRAnetCANReceive.mpas,257 :: 		if NMRAnetBufferPools_AllocateBaseBuffer(BaseBuffer) then
0x4CD0	0x47006A  	ADD	W14, #10, W0
0x4CD2	0x781F8A  	PUSH	W10
0x4CD4	0x780500  	MOV	W0, W10
0x4CD6	0x07F74D  	RCALL	_NMRAnetBufferPools_AllocateBaseBuffer
0x4CD8	0x78054F  	POP	W10
0x4CDA	0xE20000  	CP0	W0
0x4CDC	0x32000E  	BRA Z	L__ReceivedOnFilter197
L__ReceivedOnFilter1329:
;NMRAnetCANReceive.mpas,259 :: 		NMRAnetUtilities_BaseBufferLink(Node, BaseBuffer);
0x4CDE	0x781F8A  	PUSH	W10
0x4CE0	0x9005DE  	MOV	[W14+10], W11
0x4CE2	0x780506  	MOV	W6, W10
0x4CE4	0x07F79E  	RCALL	_NMRAnetUtilities_BaseBufferLink
0x4CE6	0x78054F  	POP	W10
;NMRAnetCANReceive.mpas,260 :: 		BaseBuffer^.mCode := BMC_PROTOCOL_SUPPORT_QUERY;
0x4CE8	0x90005E  	MOV	[W14+10], W0
0x4CEA	0x4000E6  	ADD	W0, #6, W1
0x4CEC	0xB3C010  	MOV.B	#1, W0
0x4CEE	0x784880  	MOV.B	W0, [W1]
;NMRAnetCANReceive.mpas,261 :: 		BaseBuffer^.Alias := SourceAlias
0x4CF0	0x90005E  	MOV	[W14+10], W0
0x4CF2	0xECA000  	INC2	W0
0x4CF4	0x780805  	MOV	W5, [W0]
;NMRAnetCANReceive.mpas,262 :: 		end else
0x4CF6	0x780007  	MOV	W7, W0
; BaseBufferAllocFailed end address is: 14 (W7)
0x4CF8	0x370001  	BRA	L__ReceivedOnFilter198
L__ReceivedOnFilter197:
;NMRAnetCANReceive.mpas,263 :: 		BaseBufferAllocFailed := True
; BaseBufferAllocFailed start address is: 0 (W0)
0x4CFA	0x2FFFF0  	MOV	#65535, W0
; BaseBufferAllocFailed end address is: 0 (W0)
L__ReceivedOnFilter198:
;NMRAnetCANReceive.mpas,264 :: 		end
; BaseBufferAllocFailed start address is: 0 (W0)
; BaseBufferAllocFailed end address is: 0 (W0)
0x4CFC	0x370001  	BRA	L__ReceivedOnFilter194
L__ReceivedOnFilter1289:
;NMRAnetCANReceive.mpas,255 :: 		if NMRAnetUtilities_ExtractDestinationAliasFlags(CANBuffer) and PIP_EXTENSION_START_BIT_MASK = 0 then
0x4CFE	0x780007  	MOV	W7, W0
;NMRAnetCANReceive.mpas,264 :: 		end
L__ReceivedOnFilter194:
;NMRAnetCANReceive.mpas,265 :: 		end;
; BaseBufferAllocFailed start address is: 0 (W0)
; BaseBufferAllocFailed end address is: 0 (W0)
0x4D00	0x3700DB  	BRA	L__ReceivedOnFilter183
L__ReceivedOnFilter192:
;NMRAnetCANReceive.mpas,267 :: 		MTI_EVENTS_IDENTIFY_DEST          : begin
; BaseBufferAllocFailed start address is: 14 (W7)
0x4D02	0x280002  	MOV	#32768, W2
0x4D04	0x209963  	MOV	#2454, W3
0x4D06	0x90085E  	MOV	[W14+26], W0
0x4D08	0x9008EE  	MOV	[W14+28], W1
0x4D0A	0xE10002  	CP	W0, W2
0x4D0C	0xE18803  	CPB	W1, W3
0x4D0E	0x3A001E  	BRA NZ	L__ReceivedOnFilter1101
L__ReceivedOnFilter1330:
;NMRAnetCANReceive.mpas,268 :: 		if not AppCallback_EventsIdentifyByDest(Node) then
0x4D10	0xBE9F86  	PUSH.D	W6
0x4D12	0x781F85  	PUSH	W5
0x4D14	0x781F8A  	PUSH	W10
0x4D16	0x780506  	MOV	W6, W10
0x4D18	0x07F768  	RCALL	_AppCallback_EventsIdentifyByDest
0x4D1A	0x78054F  	POP	W10
0x4D1C	0x7802CF  	POP	W5
0x4D1E	0xBE034F  	POP.D	W6
0x4D20	0xEEA000  	COM	W0
0x4D22	0x320012  	BRA Z	L__ReceivedOnFilter1103
L__ReceivedOnFilter1331:
;NMRAnetCANReceive.mpas,270 :: 		NMRAnetNode_SetProducerEventFlags(Node, EVENT_STATE_UNKOWN);
0x4D24	0x781F86  	PUSH	W6
0x4D26	0x781F85  	PUSH	W5
0x4D28	0x781F8A  	PUSH	W10
0x4D2A	0xB3C03B  	MOV.B	#3, W11
0x4D2C	0x780506  	MOV	W6, W10
0x4D2E	0x07E05F  	RCALL	_NMRAnetNode_SetProducerEventFlags
0x4D30	0x78054F  	POP	W10
0x4D32	0x7802CF  	POP	W5
0x4D34	0x78034F  	POP	W6
;NMRAnetCANReceive.mpas,271 :: 		NMRAnetNode_SetConsumerEventFlags(Node, EVENT_STATE_UNKOWN);
0x4D36	0x781F86  	PUSH	W6
0x4D38	0x781F85  	PUSH	W5
0x4D3A	0x781F8A  	PUSH	W10
0x4D3C	0xB3C03B  	MOV.B	#3, W11
0x4D3E	0x780506  	MOV	W6, W10
0x4D40	0x07E036  	RCALL	_NMRAnetNode_SetConsumerEventFlags
0x4D42	0x78054F  	POP	W10
0x4D44	0x7802CF  	POP	W5
0x4D46	0x78034F  	POP	W6
;NMRAnetCANReceive.mpas,272 :: 		end
L__ReceivedOnFilter1103:
;NMRAnetCANReceive.mpas,273 :: 		end;
0x4D48	0x780007  	MOV	W7, W0
0x4D4A	0x3700B6  	BRA	L__ReceivedOnFilter183
L__ReceivedOnFilter1101:
;NMRAnetCANReceive.mpas,275 :: 		MTI_DATAGRAM_OK_REPLY             : begin
0x4D4C	0x280002  	MOV	#32768, W2
0x4D4E	0x209A23  	MOV	#2466, W3
0x4D50	0x90085E  	MOV	[W14+26], W0
0x4D52	0x9008EE  	MOV	[W14+28], W1
0x4D54	0xE10002  	CP	W0, W2
0x4D56	0xE18803  	CPB	W1, W3
0x4D58	0x3A0016  	BRA NZ	L__ReceivedOnFilter1107
L__ReceivedOnFilter1332:
;NMRAnetCANReceive.mpas,276 :: 		if NMRAnetUtilities_FindInDatagramByState(Node, SourceAlias, DatagramBuffer, CBS_OUTGOING or CBS_TRANSFER_COMPLETE, False) then
0x4D5A	0x47006C  	ADD	W14, #12, W0
0x4D5C	0x781F8A  	PUSH	W10
0x4D5E	0xB3C0CD  	MOV.B	#12, W13
0x4D60	0x780600  	MOV	W0, W12
0x4D62	0x780585  	MOV	W5, W11
0x4D64	0x780506  	MOV	W6, W10
0x4D66	0xEF2000  	CLR	W0
0x4D68	0x781F80  	PUSH	W0
0x4D6A	0x07E77B  	RCALL	_NMRAnetUtilities_FindInDatagramByState
0x4D6C	0xB1002F  	SUB	#2, W15
0x4D6E	0x78054F  	POP	W10
0x4D70	0xE20000  	CP0	W0
0x4D72	0x320007  	BRA Z	L__ReceivedOnFilter1109
L__ReceivedOnFilter1333:
;NMRAnetCANReceive.mpas,278 :: 		NMRAnetUtilities_DatagramBufferUnLink(Node, DatagramBuffer);
0x4D74	0x781F8A  	PUSH	W10
0x4D76	0x9005EE  	MOV	[W14+12], W11
0x4D78	0x780506  	MOV	W6, W10
0x4D7A	0x07E98B  	RCALL	_NMRAnetUtilities_DatagramBufferUnLink
;NMRAnetCANReceive.mpas,279 :: 		NMRAnetBufferPools_ReleaseDatagramBuffer(DatagramBuffer);
0x4D7C	0x90056E  	MOV	[W14+12], W10
0x4D7E	0x07E9AF  	RCALL	_NMRAnetBufferPools_ReleaseDatagramBuffer
0x4D80	0x78054F  	POP	W10
;NMRAnetCANReceive.mpas,281 :: 		end
L__ReceivedOnFilter1109:
;NMRAnetCANReceive.mpas,282 :: 		end;
0x4D82	0x780007  	MOV	W7, W0
0x4D84	0x370099  	BRA	L__ReceivedOnFilter183
L__ReceivedOnFilter1107:
;NMRAnetCANReceive.mpas,283 :: 		MTI_DATAGRAM_REJECTED_REPLY       : begin
0x4D86	0x280002  	MOV	#32768, W2
0x4D88	0x209A43  	MOV	#2468, W3
0x4D8A	0x90085E  	MOV	[W14+26], W0
0x4D8C	0x9008EE  	MOV	[W14+28], W1
0x4D8E	0xE10002  	CP	W0, W2
0x4D90	0xE18803  	CPB	W1, W3
0x4D92	0x3A0030  	BRA NZ	L__ReceivedOnFilter1113
L__ReceivedOnFilter1334:
;NMRAnetCANReceive.mpas,284 :: 		if NMRAnetUtilities_FindInDatagramByState(Node, SourceAlias, DatagramBuffer, CBS_OUTGOING or CBS_TRANSFER_COMPLETE, False) then
0x4D94	0x47006C  	ADD	W14, #12, W0
0x4D96	0x781F8A  	PUSH	W10
0x4D98	0xB3C0CD  	MOV.B	#12, W13
0x4D9A	0x780600  	MOV	W0, W12
0x4D9C	0x780585  	MOV	W5, W11
0x4D9E	0x780506  	MOV	W6, W10
0x4DA0	0xEF2000  	CLR	W0
0x4DA2	0x781F80  	PUSH	W0
0x4DA4	0x07E75E  	RCALL	_NMRAnetUtilities_FindInDatagramByState
0x4DA6	0xB1002F  	SUB	#2, W15
0x4DA8	0x78054F  	POP	W10
0x4DAA	0xE20000  	CP0	W0
0x4DAC	0x320021  	BRA Z	L__ReceivedOnFilter1115
L__ReceivedOnFilter1335:
;NMRAnetCANReceive.mpas,286 :: 		ErrorCode := (CANBuffer^.DataBytes[2] shl 8) or CANBuffer^.DataBytes[3];
0x4DAE	0x450165  	ADD	W10, #5, W2
0x4DB0	0x410062  	ADD	W2, #2, W0
0x4DB2	0x784010  	MOV.B	[W0], W0
0x4DB4	0xFB8000  	ZE	W0, W0
0x4DB6	0xDD00C8  	SL	W0, #8, W1
0x4DB8	0x410063  	ADD	W2, #3, W0
0x4DBA	0xFB8010  	ZE	[W0], W0
0x4DBC	0x708080  	IOR	W1, W0, W1
;NMRAnetCANReceive.mpas,287 :: 		if ErrorCode and DATAGRAM_RESULT_REJECTED_RESEND_MASK <> 0 then
0x4DBE	0x220000  	MOV	#8192, W0
0x4DC0	0x608000  	AND	W1, W0, W0
0x4DC2	0xE10060  	CP	W0, #0
0x4DC4	0x32000E  	BRA Z	L__ReceivedOnFilter1118
L__ReceivedOnFilter1336:
;NMRAnetCANReceive.mpas,290 :: 		DatagramBuffer^.State := (DatagramBuffer^.State or CBS_OUTGOING or CBS_PROCESSING) and not CBS_TRANSFER_COMPLETE;  // Turn it into an outgoing Datagram
0x4DC6	0x90006E  	MOV	[W14+12], W0
0x4DC8	0x784010  	MOV.B	[W0], W0
0x4DCA	0xFB8000  	ZE	W0, W0
0x4DCC	0x700064  	IOR	W0, #4, W0
0x4DCE	0x7000E2  	IOR	W0, #2, W1
0x4DD0	0x200F70  	MOV	#247, W0
0x4DD2	0x608080  	AND	W1, W0, W1
0x4DD4	0x90006E  	MOV	[W14+12], W0
0x4DD6	0x784801  	MOV.B	W1, [W0]
;NMRAnetCANReceive.mpas,291 :: 		DatagramBuffer^.Tag := 0;
0x4DD8	0x90006E  	MOV	[W14+12], W0
0x4DDA	0x4000E8  	ADD	W0, #8, W1
0x4DDC	0xEF2000  	CLR	W0
0x4DDE	0x780880  	MOV	W0, [W1]
;NMRAnetCANReceive.mpas,292 :: 		end else   // Done
0x4DE0	0x370007  	BRA	L__ReceivedOnFilter1119
L__ReceivedOnFilter1118:
;NMRAnetCANReceive.mpas,294 :: 		NMRAnetUtilities_DatagramBufferUnLink(Node, DatagramBuffer);
0x4DE2	0x781F8A  	PUSH	W10
0x4DE4	0x9005EE  	MOV	[W14+12], W11
0x4DE6	0x780506  	MOV	W6, W10
0x4DE8	0x07E954  	RCALL	_NMRAnetUtilities_DatagramBufferUnLink
;NMRAnetCANReceive.mpas,295 :: 		NMRAnetBufferPools_ReleaseDatagramBuffer(DatagramBuffer);
0x4DEA	0x90056E  	MOV	[W14+12], W10
0x4DEC	0x07E978  	RCALL	_NMRAnetBufferPools_ReleaseDatagramBuffer
0x4DEE	0x78054F  	POP	W10
;NMRAnetCANReceive.mpas,297 :: 		end
L__ReceivedOnFilter1119:
;NMRAnetCANReceive.mpas,298 :: 		end
L__ReceivedOnFilter1115:
;NMRAnetCANReceive.mpas,300 :: 		{$IFNDEF BOOTLOADER};
0x4DF0	0x780007  	MOV	W7, W0
0x4DF2	0x370062  	BRA	L__ReceivedOnFilter183
L__ReceivedOnFilter1113:
;NMRAnetCANReceive.mpas,301 :: 		MTI_SIMPLE_NODE_INFO_REQUEST      : begin
0x4DF4	0x280002  	MOV	#32768, W2
0x4DF6	0x209DE3  	MOV	#2526, W3
0x4DF8	0x90085E  	MOV	[W14+26], W0
0x4DFA	0x9008EE  	MOV	[W14+28], W1
0x4DFC	0xE10002  	CP	W0, W2
0x4DFE	0xE18803  	CPB	W1, W3
0x4E00	0x3A0017  	BRA NZ	L__ReceivedOnFilter1122
L__ReceivedOnFilter1337:
;NMRAnetCANReceive.mpas,302 :: 		if NMRAnetBufferPools_AllocateBaseBuffer(BaseBuffer) then
0x4E02	0x47006A  	ADD	W14, #10, W0
0x4E04	0x781F8A  	PUSH	W10
0x4E06	0x780500  	MOV	W0, W10
0x4E08	0x07F6B4  	RCALL	_NMRAnetBufferPools_AllocateBaseBuffer
0x4E0A	0x78054F  	POP	W10
0x4E0C	0xE20000  	CP0	W0
0x4E0E	0x32000E  	BRA Z	L__ReceivedOnFilter1124
L__ReceivedOnFilter1338:
;NMRAnetCANReceive.mpas,304 :: 		NMRAnetUtilities_BaseBufferLink(Node, BaseBuffer);
0x4E10	0x781F8A  	PUSH	W10
0x4E12	0x9005DE  	MOV	[W14+10], W11
0x4E14	0x780506  	MOV	W6, W10
0x4E16	0x07F705  	RCALL	_NMRAnetUtilities_BaseBufferLink
0x4E18	0x78054F  	POP	W10
;NMRAnetCANReceive.mpas,305 :: 		BaseBuffer^.mCode := BMC_SIMPLE_NODE_INFO_REQEUST;
0x4E1A	0x90005E  	MOV	[W14+10], W0
0x4E1C	0x4000E6  	ADD	W0, #6, W1
0x4E1E	0xB3C050  	MOV.B	#5, W0
0x4E20	0x784880  	MOV.B	W0, [W1]
;NMRAnetCANReceive.mpas,306 :: 		BaseBuffer^.Alias := SourceAlias
0x4E22	0x90005E  	MOV	[W14+10], W0
0x4E24	0xECA000  	INC2	W0
0x4E26	0x780805  	MOV	W5, [W0]
;NMRAnetCANReceive.mpas,307 :: 		end else
0x4E28	0x780007  	MOV	W7, W0
; BaseBufferAllocFailed end address is: 14 (W7)
0x4E2A	0x370001  	BRA	L__ReceivedOnFilter1125
L__ReceivedOnFilter1124:
;NMRAnetCANReceive.mpas,308 :: 		BaseBufferAllocFailed := True
; BaseBufferAllocFailed start address is: 0 (W0)
0x4E2C	0x2FFFF0  	MOV	#65535, W0
; BaseBufferAllocFailed end address is: 0 (W0)
L__ReceivedOnFilter1125:
;NMRAnetCANReceive.mpas,309 :: 		end;
; BaseBufferAllocFailed start address is: 0 (W0)
; BaseBufferAllocFailed end address is: 0 (W0)
0x4E2E	0x370044  	BRA	L__ReceivedOnFilter183
L__ReceivedOnFilter1122:
;NMRAnetCANReceive.mpas,310 :: 		MTI_TRACTION_PROTOCOL             : begin
; BaseBufferAllocFailed start address is: 14 (W7)
0x4E30	0x280002  	MOV	#32768, W2
0x4E32	0x2095E3  	MOV	#2398, W3
0x4E34	0x90085E  	MOV	[W14+26], W0
0x4E36	0x9008EE  	MOV	[W14+28], W1
0x4E38	0xE10002  	CP	W0, W2
0x4E3A	0xE18803  	CPB	W1, W3
0x4E3C	0x3A000B  	BRA NZ	L__ReceivedOnFilter1128
L__ReceivedOnFilter1339:
;NMRAnetCANReceive.mpas,311 :: 		AppCallback_TractionControl(Node, CANBuffer);
0x4E3E	0xBE9F86  	PUSH.D	W6
0x4E40	0x781F85  	PUSH	W5
0x4E42	0x781F8A  	PUSH	W10
0x4E44	0x78058A  	MOV	W10, W11
0x4E46	0x780506  	MOV	W6, W10
0x4E48	0x07E76F  	RCALL	_AppCallback_TractionControl
0x4E4A	0x78054F  	POP	W10
0x4E4C	0x7802CF  	POP	W5
0x4E4E	0xBE034F  	POP.D	W6
;NMRAnetCANReceive.mpas,314 :: 		else begin
0x4E50	0x780007  	MOV	W7, W0
0x4E52	0x370032  	BRA	L__ReceivedOnFilter183
L__ReceivedOnFilter1128:
;NMRAnetCANReceive.mpas,315 :: 		DataBytes[0] := $20;
0x4E54	0xB3C200  	MOV.B	#32, W0
0x4E56	0x985720  	MOV.B	W0, [W14+18]
;NMRAnetCANReceive.mpas,316 :: 		DataBytes[1] := $00;
0x4E58	0xEF2000  	CLR	W0
0x4E5A	0x985730  	MOV.B	W0, [W14+19]
;NMRAnetCANReceive.mpas,317 :: 		MTI_Code := (CANBuffer^.ID shr 12) and $0FFF;
0x4E5C	0x7801BA  	MOV	[W10++], W3
0x4E5E	0x78022A  	MOV	[W10--], W4
0x4E60	0x2000C0  	MOV	#12, W0
0x4E62	0x780083  	MOV	W3, W1
0x4E64	0x780104  	MOV	W4, W2
L__ReceivedOnFilter1340:
0x4E66	0xE90000  	DEC	W0, W0
0x4E68	0x350003  	BRA LT	L__ReceivedOnFilter1341
0x4E6A	0xD10102  	LSR	W2, W2
0x4E6C	0xD38081  	RRC	W1, W1
0x4E6E	0x37FFFB  	BRA	L__ReceivedOnFilter1340
L__ReceivedOnFilter1341:
0x4E70	0x20FFF0  	MOV	#4095, W0
0x4E72	0x608180  	AND	W1, W0, W3
;NMRAnetCANReceive.mpas,318 :: 		DataBytes[2] := (MTI_Code shr 8) and $00FF;
0x4E74	0xDE1948  	LSR	W3, #8, W2
0x4E76	0xB3CFF1  	MOV.B	#255, W1
0x4E78	0x470074  	ADD	W14, #20, W0
0x4E7A	0x614801  	AND.B	W2, W1, [W0]
;NMRAnetCANReceive.mpas,319 :: 		DataBytes[3] := MTI_Code and $00FF;
0x4E7C	0xB3CFF1  	MOV.B	#255, W1
0x4E7E	0x470075  	ADD	W14, #21, W0
0x4E80	0x61C801  	AND.B	W3, W1, [W0]
;NMRAnetCANReceive.mpas,320 :: 		NMRAnetUtilities_CreateNMRABusMessageCANBuffer(Node, @CAN_Engine.TX_AddressedErrorBuffer, MTI_OPTIONAL_INTERACTION_REJECTED, SourceAlias, 4, @DataBytes);
0x4E82	0x470072  	ADD	W14, #18, W0
0x4E84	0x781F85  	PUSH	W5
0x4E86	0x781F8A  	PUSH	W10
0x4E88	0x28000C  	MOV	#32768, W12
0x4E8A	0x20906D  	MOV	#2310, W13
0x4E8C	0x225F8B  	MOV	#lo_addr(_CAN_Engine+30), W11
0x4E8E	0x780506  	MOV	W6, W10
0x4E90	0x781F80  	PUSH	W0
0x4E92	0x200040  	MOV	#4, W0
0x4E94	0x781F80  	PUSH	W0
0x4E96	0x781F85  	PUSH	W5
0x4E98	0x07F4C1  	RCALL	_NMRAnetUtilities_CreateNMRABusMessageCANBuffer
0x4E9A	0xB1006F  	SUB	#6, W15
0x4E9C	0x78054F  	POP	W10
0x4E9E	0x7802CF  	POP	W5
;NMRAnetCANReceive.mpas,321 :: 		CAN_Engine.TX_AddressedErrorBuffer.State := CAN_Engine.TX_AddressedErrorBuffer.State or BS_ALLOCATED;
0x4EA0	0x226050  	MOV	#lo_addr(_CAN_Engine+43), W0
0x4EA2	0x784090  	MOV.B	[W0], W1
0x4EA4	0x226050  	MOV	#lo_addr(_CAN_Engine+43), W0
0x4EA6	0x70C862  	IOR.B	W1, #2, [W0]
;NMRAnetCANReceive.mpas,322 :: 		StartCANHighPriorityMessageEngine;
0x4EA8	0xBE9F86  	PUSH.D	W6
; BaseBufferAllocFailed end address is: 14 (W7)
0x4EAA	0x781F85  	PUSH	W5
0x4EAC	0x781F8A  	PUSH	W10
0x4EAE	0x07E8DB  	RCALL	_StartCANHighPriorityMessageEngine
0x4EB0	0x78054F  	POP	W10
0x4EB2	0x7802CF  	POP	W5
0x4EB4	0xBE034F  	POP.D	W6
0x4EB6	0x780007  	MOV	W7, W0
;NMRAnetCANReceive.mpas,323 :: 		end;
L__ReceivedOnFilter183:
;NMRAnetCANReceive.mpas,327 :: 		if BaseBufferAllocFailed then
; BaseBufferAllocFailed start address is: 0 (W0)
0x4EB8	0xE20000  	CP0	W0
0x4EBA	0x320027  	BRA Z	L__ReceivedOnFilter1130
L__ReceivedOnFilter1342:
; BaseBufferAllocFailed end address is: 0 (W0)
;NMRAnetCANReceive.mpas,329 :: 		DataBytes[0] := Hi( TERMINATE_DUE_TO_ERROR_TEMPORARY);
0x4EBC	0xB3C100  	MOV.B	#16, W0
0x4EBE	0x985720  	MOV.B	W0, [W14+18]
;NMRAnetCANReceive.mpas,330 :: 		DataBytes[1] := Lo( TERMINATE_DUE_TO_ERROR_TEMPORARY);
0x4EC0	0xEF2000  	CLR	W0
0x4EC2	0x985730  	MOV.B	W0, [W14+19]
;NMRAnetCANReceive.mpas,331 :: 		MTI_Code := (CANBuffer^.ID shr 12) and $0FFF;
0x4EC4	0x7801BA  	MOV	[W10++], W3
0x4EC6	0x78022A  	MOV	[W10--], W4
0x4EC8	0x2000C0  	MOV	#12, W0
0x4ECA	0x780083  	MOV	W3, W1
0x4ECC	0x780104  	MOV	W4, W2
L__ReceivedOnFilter1343:
0x4ECE	0xE90000  	DEC	W0, W0
0x4ED0	0x350003  	BRA LT	L__ReceivedOnFilter1344
0x4ED2	0xD10102  	LSR	W2, W2
0x4ED4	0xD38081  	RRC	W1, W1
0x4ED6	0x37FFFB  	BRA	L__ReceivedOnFilter1343
L__ReceivedOnFilter1344:
0x4ED8	0x20FFF0  	MOV	#4095, W0
0x4EDA	0x608180  	AND	W1, W0, W3
;NMRAnetCANReceive.mpas,332 :: 		DataBytes[2] := (MTI_Code shr 8) and $00FF;
0x4EDC	0xDE1948  	LSR	W3, #8, W2
0x4EDE	0xB3CFF1  	MOV.B	#255, W1
0x4EE0	0x470074  	ADD	W14, #20, W0
0x4EE2	0x614801  	AND.B	W2, W1, [W0]
;NMRAnetCANReceive.mpas,333 :: 		DataBytes[3] := MTI_Code and $00FF;
0x4EE4	0xB3CFF1  	MOV.B	#255, W1
0x4EE6	0x470075  	ADD	W14, #21, W0
0x4EE8	0x61C801  	AND.B	W3, W1, [W0]
;NMRAnetCANReceive.mpas,334 :: 		NMRAnetUtilities_CreateNMRABusMessageCANBuffer(Node, @CAN_Engine.TX_AddressedErrorBuffer, MTI_OPTIONAL_INTERACTION_REJECTED, SourceAlias, 4, @DataBytes);
0x4EEA	0x470072  	ADD	W14, #18, W0
0x4EEC	0x28000C  	MOV	#32768, W12
0x4EEE	0x20906D  	MOV	#2310, W13
0x4EF0	0x225F8B  	MOV	#lo_addr(_CAN_Engine+30), W11
0x4EF2	0x780506  	MOV	W6, W10
; Node end address is: 12 (W6)
0x4EF4	0x781F80  	PUSH	W0
0x4EF6	0x200040  	MOV	#4, W0
0x4EF8	0x781F80  	PUSH	W0
0x4EFA	0x781F85  	PUSH	W5
; SourceAlias end address is: 10 (W5)
0x4EFC	0x07F48F  	RCALL	_NMRAnetUtilities_CreateNMRABusMessageCANBuffer
0x4EFE	0xB1006F  	SUB	#6, W15
;NMRAnetCANReceive.mpas,335 :: 		CAN_Engine.TX_AddressedErrorBuffer.State := CAN_Engine.TX_AddressedErrorBuffer.State or BS_ALLOCATED;
0x4F00	0x226050  	MOV	#lo_addr(_CAN_Engine+43), W0
0x4F02	0x784090  	MOV.B	[W0], W1
0x4F04	0x226050  	MOV	#lo_addr(_CAN_Engine+43), W0
0x4F06	0x70C862  	IOR.B	W1, #2, [W0]
;NMRAnetCANReceive.mpas,336 :: 		StartCANHighPriorityMessageEngine;
0x4F08	0x07E8AE  	RCALL	_StartCANHighPriorityMessageEngine
;NMRAnetCANReceive.mpas,337 :: 		end
L__ReceivedOnFilter1130:
;NMRAnetCANReceive.mpas,338 :: 		end
L__ReceivedOnFilter181:
;NMRAnetCANReceive.mpas,339 :: 		end
L__ReceivedOnFilter178:
;NMRAnetCANReceive.mpas,340 :: 		end else
0x4F0A	0x3700EF  	BRA	L__ReceivedOnFilter176
L__ReceivedOnFilter175:
;NMRAnetCANReceive.mpas,342 :: 		case CANBuffer^.ID and MTI_MASK of
; Node start address is: 8 (W4)
0x4F0C	0xBE011A  	MOV.D	[W10], W2
0x4F0E	0x2F0000  	MOV	#61440, W0
0x4F10	0x20FFF1  	MOV	#4095, W1
0x4F12	0x610100  	AND	W2, W0, W2
0x4F14	0x618181  	AND	W3, W1, W3
0x4F16	0x980F72  	MOV	W2, [W14+30]
0x4F18	0x981703  	MOV	W3, [W14+32]
;NMRAnetCANReceive.mpas,343 :: 		MTI_VERIFY_NODE_ID_NUMBER   : begin
0x4F1A	0x200000  	MOV	#0, W0
0x4F1C	0x209491  	MOV	#2377, W1
0x4F1E	0xE11000  	CP	W2, W0
0x4F20	0xE19801  	CPB	W3, W1
0x4F22	0x3A0017  	BRA NZ	L__ReceivedOnFilter1135
L__ReceivedOnFilter1345:
; Node end address is: 8 (W4)
;NMRAnetCANReceive.mpas,345 :: 		if (CANBuffer^.DataCount = 0) then                                      // THIS IS NOT CLEAR IN THE SPEC
0x4F24	0x450064  	ADD	W10, #4, W0
0x4F26	0x784010  	MOV.B	[W0], W0
0x4F28	0xE10460  	CP.B	W0, #0
0x4F2A	0x3A0003  	BRA NZ	L__ReceivedOnFilter1137
L__ReceivedOnFilter1346:
;NMRAnetCANReceive.mpas,346 :: 		NMRAnetNode_SetMsgFlags(MF_VERIFY_NODE_ID)
0x4F2C	0x20010A  	MOV	#16, W10
0x4F2E	0x07F601  	RCALL	_NMRAnetNode_SetMsgFlags
0x4F30	0x37000F  	BRA	L__ReceivedOnFilter1138
;NMRAnetCANReceive.mpas,347 :: 		else begin
L__ReceivedOnFilter1137:
;NMRAnetCANReceive.mpas,348 :: 		NMRAnetUtilities_CANBufferBytesToNodeID(@CANBuffer^.DataBytes, NodeID, 0);
0x4F32	0x4500E5  	ADD	W10, #5, W1
0x4F34	0x470062  	ADD	W14, #2, W0
0x4F36	0xEF2018  	CLR	W12
0x4F38	0x780580  	MOV	W0, W11
0x4F3A	0x780501  	MOV	W1, W10
0x4F3C	0x07E5C3  	RCALL	_NMRAnetUtilities_CANBufferBytesToNodeID
;NMRAnetCANReceive.mpas,349 :: 		Node := NMRAnetNode_FindByNodeID(NodeID);
0x4F3E	0x470062  	ADD	W14, #2, W0
0x4F40	0x780500  	MOV	W0, W10
0x4F42	0x07E592  	RCALL	_NMRAnetNode_FindByNodeID
; Node start address is: 2 (W1)
0x4F44	0x780080  	MOV	W0, W1
;NMRAnetCANReceive.mpas,350 :: 		if Node <> nil then
0x4F46	0xE10060  	CP	W0, #0
0x4F48	0x320003  	BRA Z	L__ReceivedOnFilter1140
L__ReceivedOnFilter1347:
;NMRAnetCANReceive.mpas,351 :: 		NMRAnetNode_SetMsgFlag(Node, MF_VERIFY_NODE_ID)
0x4F4A	0xB3C10B  	MOV.B	#16, W11
0x4F4C	0x780501  	MOV	W1, W10
; Node end address is: 2 (W1)
0x4F4E	0x07F69A  	RCALL	_NMRAnetNode_SetMsgFlag
L__ReceivedOnFilter1140:
;NMRAnetCANReceive.mpas,352 :: 		end
L__ReceivedOnFilter1138:
;NMRAnetCANReceive.mpas,353 :: 		end;
0x4F50	0x3700CC  	BRA	L__ReceivedOnFilter1132
L__ReceivedOnFilter1135:
;NMRAnetCANReceive.mpas,355 :: 		MTI_CONSUMER_IDENTIFY       : begin
; Node start address is: 8 (W4)
0x4F52	0x240002  	MOV	#16384, W2
0x4F54	0x2098F3  	MOV	#2447, W3
0x4F56	0x90087E  	MOV	[W14+30], W0
0x4F58	0x90108E  	MOV	[W14+32], W1
0x4F5A	0xE10002  	CP	W0, W2
0x4F5C	0xE18803  	CPB	W1, W3
0x4F5E	0x3A0044  	BRA NZ	L__ReceivedOnFilter1144
L__ReceivedOnFilter1348:
;NMRAnetCANReceive.mpas,356 :: 		if not AppCallback_ConsumerIdentify(Node, @CANBuffer^.DataBytes) then
0x4F60	0x450065  	ADD	W10, #5, W0
0x4F62	0x781F8A  	PUSH	W10
0x4F64	0x780580  	MOV	W0, W11
0x4F66	0x780504  	MOV	W4, W10
; Node end address is: 8 (W4)
0x4F68	0x07E5AA  	RCALL	_AppCallback_ConsumerIdentify
0x4F6A	0x78054F  	POP	W10
0x4F6C	0xEEA000  	COM	W0
0x4F6E	0x32003B  	BRA Z	L__ReceivedOnFilter1146
L__ReceivedOnFilter1349:
;NMRAnetCANReceive.mpas,358 :: 		VNodeEventIndex := -1;
0x4F70	0x2FFFF0  	MOV	#65535, W0
0x4F72	0x980770  	MOV	W0, [W14+14]
;NMRAnetCANReceive.mpas,359 :: 		NodeEventIndex := -1;
0x4F74	0x2FFFF0  	MOV	#65535, W0
0x4F76	0x980F00  	MOV	W0, [W14+16]
;NMRAnetCANReceive.mpas,360 :: 		VNodeEvent := NMRAnetUtilities_SupportsVNodeEventAsConsumer(@CANBuffer^.DataBytes, VNodeEventIndex);
0x4F78	0x4500E5  	ADD	W10, #5, W1
0x4F7A	0x47006E  	ADD	W14, #14, W0
0x4F7C	0x781F8A  	PUSH	W10
0x4F7E	0x780580  	MOV	W0, W11
0x4F80	0x780501  	MOV	W1, W10
0x4F82	0x07E558  	RCALL	_NMRAnetUtilities_SupportsVNodeEventAsConsumer
0x4F84	0x78054F  	POP	W10
; VNodeEvent start address is: 14 (W7)
0x4F86	0x780380  	MOV	W0, W7
;NMRAnetCANReceive.mpas,361 :: 		NodeEvent := NMRAnetUtilities_SupportsEventAsConsumer(@CANBuffer^.DataBytes, NodeEventIndex);
0x4F88	0x4500E5  	ADD	W10, #5, W1
0x4F8A	0x470070  	ADD	W14, #16, W0
0x4F8C	0x780580  	MOV	W0, W11
0x4F8E	0x780501  	MOV	W1, W10
0x4F90	0x07F0D3  	RCALL	_NMRAnetUtilities_SupportsEventAsConsumer
; NodeEvent start address is: 12 (W6)
0x4F92	0x780300  	MOV	W0, W6
;NMRAnetCANReceive.mpas,362 :: 		for i := 0 to Nodes.AllocatedCount - 1 do
; i start address is: 16 (W8)
0x4F94	0xEF2010  	CLR	W8
; i end address is: 16 (W8)
L__ReceivedOnFilter1148:
; i start address is: 16 (W8)
; NodeEvent start address is: 12 (W6)
; NodeEvent end address is: 12 (W6)
; VNodeEvent start address is: 14 (W7)
; VNodeEvent end address is: 14 (W7)
0x4F96	0x812780  	MOV	_Nodes+3120, W0
0x4F98	0xED2000  	DEC	W0
0x4F9A	0x980F50  	MOV	W0, [W14+26]
0x4F9C	0xE14000  	CP	W8, W0
0x4F9E	0x3C0023  	BRA GT	L__ReceivedOnFilter1152
L__ReceivedOnFilter1350:
; NodeEvent end address is: 12 (W6)
; VNodeEvent end address is: 14 (W7)
;NMRAnetCANReceive.mpas,364 :: 		if NMRAnetNode_TestStateFlag(Nodes.AllocatedList[i], NS_VIRTUAL) then
; VNodeEvent start address is: 14 (W7)
; NodeEvent start address is: 12 (W6)
0x4FA0	0xDD40C1  	SL	W8, #1, W1
0x4FA2	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x4FA4	0x400001  	ADD	W0, W1, W0
0x4FA6	0x781F8A  	PUSH	W10
0x4FA8	0xB3C08B  	MOV.B	#8, W11
0x4FAA	0x780510  	MOV	[W0], W10
0x4FAC	0x07F671  	RCALL	_NMRAnetNode_TestStateFlag
0x4FAE	0x78054F  	POP	W10
0x4FB0	0xE20000  	CP0	W0
0x4FB2	0x32000C  	BRA Z	L__ReceivedOnFilter1154
L__ReceivedOnFilter1351:
;NMRAnetCANReceive.mpas,366 :: 		if VNodeEvent then
0x4FB4	0xE2000E  	CP0	W7
0x4FB6	0x320009  	BRA Z	L__ReceivedOnFilter1157
L__ReceivedOnFilter1352:
;NMRAnetCANReceive.mpas,367 :: 		NMRAnetNode_SetConsumerEventFlag(Nodes.AllocatedList[i], VNodeEventIndex, EVENT_STATE_UNKOWN);
0x4FB8	0xDD40C1  	SL	W8, #1, W1
0x4FBA	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x4FBC	0x400001  	ADD	W0, W1, W0
0x4FBE	0x781F8A  	PUSH	W10
0x4FC0	0xB3C03C  	MOV.B	#3, W12
0x4FC2	0x9005FE  	MOV	[W14+14], W11
0x4FC4	0x780510  	MOV	[W0], W10
0x4FC6	0x07DA98  	RCALL	_NMRAnetNode_SetConsumerEventFlag
0x4FC8	0x78054F  	POP	W10
L__ReceivedOnFilter1157:
;NMRAnetCANReceive.mpas,368 :: 		end else
0x4FCA	0x370008  	BRA	L__ReceivedOnFilter1155
L__ReceivedOnFilter1154:
;NMRAnetCANReceive.mpas,370 :: 		if NodeEvent then
0x4FCC	0xE2000C  	CP0	W6
0x4FCE	0x320006  	BRA Z	L__ReceivedOnFilter1160
L__ReceivedOnFilter1353:
;NMRAnetCANReceive.mpas,371 :: 		NMRAnetNode_SetConsumerEventFlag(Nodes.AllocatedList[0], NodeEventIndex, EVENT_STATE_UNKOWN);
0x4FD0	0x781F8A  	PUSH	W10
0x4FD2	0xB3C03C  	MOV.B	#3, W12
0x4FD4	0x900D8E  	MOV	[W14+16], W11
0x4FD6	0x81237A  	MOV	_Nodes+2990, W10
0x4FD8	0x07DA8F  	RCALL	_NMRAnetNode_SetConsumerEventFlag
0x4FDA	0x78054F  	POP	W10
L__ReceivedOnFilter1160:
;NMRAnetCANReceive.mpas,372 :: 		end
L__ReceivedOnFilter1155:
;NMRAnetCANReceive.mpas,373 :: 		end;
0x4FDC	0x90085E  	MOV	[W14+26], W0
0x4FDE	0xE14000  	CP	W8, W0
0x4FE0	0x320002  	BRA Z	L__ReceivedOnFilter1152
L__ReceivedOnFilter1354:
; i start address is: 16 (W8)
0x4FE2	0xEC2010  	INC	W8
; i end address is: 16 (W8)
; NodeEvent end address is: 12 (W6)
; VNodeEvent end address is: 14 (W7)
; i end address is: 16 (W8)
0x4FE4	0x37FFD8  	BRA	L__ReceivedOnFilter1148
L__ReceivedOnFilter1152:
;NMRAnetCANReceive.mpas,374 :: 		end
L__ReceivedOnFilter1146:
;NMRAnetCANReceive.mpas,375 :: 		end;
0x4FE6	0x370081  	BRA	L__ReceivedOnFilter1132
L__ReceivedOnFilter1144:
;NMRAnetCANReceive.mpas,376 :: 		MTI_CONSUMER_IDENTIFY_RANGE : begin
; Node start address is: 8 (W4)
0x4FE8	0x240000  	MOV	#16384, W0
0x4FEA	0x2094A1  	MOV	#2378, W1
0x4FEC	0x90097E  	MOV	[W14+30], W2
0x4FEE	0x90118E  	MOV	[W14+32], W3
0x4FF0	0xE11000  	CP	W2, W0
0x4FF2	0xE19801  	CPB	W3, W1
0x4FF4	0x3A0001  	BRA NZ	L__ReceivedOnFilter1164
L__ReceivedOnFilter1355:
; Node end address is: 8 (W4)
;NMRAnetCANReceive.mpas,378 :: 		end;
0x4FF6	0x370079  	BRA	L__ReceivedOnFilter1132
L__ReceivedOnFilter1164:
;NMRAnetCANReceive.mpas,379 :: 		MTI_PRODUCER_IDENDIFY       : begin
; Node start address is: 8 (W4)
0x4FF8	0x240000  	MOV	#16384, W0
0x4FFA	0x209911  	MOV	#2449, W1
0x4FFC	0xE11000  	CP	W2, W0
0x4FFE	0xE19801  	CPB	W3, W1
0x5000	0x3A0044  	BRA NZ	L__ReceivedOnFilter1167
L__ReceivedOnFilter1356:
;NMRAnetCANReceive.mpas,380 :: 		if not AppCallback_ProducerIdentify(Node, @CANBuffer^.DataBytes) then
0x5002	0x450065  	ADD	W10, #5, W0
0x5004	0x781F8A  	PUSH	W10
0x5006	0x780580  	MOV	W0, W11
0x5008	0x780504  	MOV	W4, W10
; Node end address is: 8 (W4)
0x500A	0x07F0B0  	RCALL	_AppCallback_ProducerIdentify
0x500C	0x78054F  	POP	W10
0x500E	0xEEA000  	COM	W0
0x5010	0x32003B  	BRA Z	L__ReceivedOnFilter1169
L__ReceivedOnFilter1357:
;NMRAnetCANReceive.mpas,382 :: 		VNodeEventIndex := -1;
0x5012	0x2FFFF0  	MOV	#65535, W0
0x5014	0x980770  	MOV	W0, [W14+14]
;NMRAnetCANReceive.mpas,383 :: 		NodeEventIndex := -1;
0x5016	0x2FFFF0  	MOV	#65535, W0
0x5018	0x980F00  	MOV	W0, [W14+16]
;NMRAnetCANReceive.mpas,384 :: 		VNodeEvent := NMRAnetUtilities_SupportsVNodeEventAsProducer(@CANBuffer^.DataBytes, VNodeEventIndex);
0x501A	0x4500E5  	ADD	W10, #5, W1
0x501C	0x47006E  	ADD	W14, #14, W0
0x501E	0x781F8A  	PUSH	W10
0x5020	0x780580  	MOV	W0, W11
0x5022	0x780501  	MOV	W1, W10
0x5024	0x07E0A6  	RCALL	_NMRAnetUtilities_SupportsVNodeEventAsProducer
0x5026	0x78054F  	POP	W10
; VNodeEvent start address is: 14 (W7)
0x5028	0x780380  	MOV	W0, W7
;NMRAnetCANReceive.mpas,385 :: 		NodeEvent := NMRAnetUtilities_SupportsEventAsProducer(@CANBuffer^.DataBytes, NodeEventIndex);
0x502A	0x4500E5  	ADD	W10, #5, W1
0x502C	0x470070  	ADD	W14, #16, W0
0x502E	0x780580  	MOV	W0, W11
0x5030	0x780501  	MOV	W1, W10
0x5032	0x07DF3C  	RCALL	_NMRAnetUtilities_SupportsEventAsProducer
; NodeEvent start address is: 12 (W6)
0x5034	0x780300  	MOV	W0, W6
;NMRAnetCANReceive.mpas,386 :: 		for i := 0 to Nodes.AllocatedCount - 1 do
; i start address is: 16 (W8)
0x5036	0xEF2010  	CLR	W8
; i end address is: 16 (W8)
L__ReceivedOnFilter1171:
; i start address is: 16 (W8)
; NodeEvent start address is: 12 (W6)
; NodeEvent end address is: 12 (W6)
; VNodeEvent start address is: 14 (W7)
; VNodeEvent end address is: 14 (W7)
0x5038	0x812780  	MOV	_Nodes+3120, W0
0x503A	0xED2000  	DEC	W0
0x503C	0x980F50  	MOV	W0, [W14+26]
0x503E	0xE14000  	CP	W8, W0
0x5040	0x3C0023  	BRA GT	L__ReceivedOnFilter1175
L__ReceivedOnFilter1358:
; NodeEvent end address is: 12 (W6)
; VNodeEvent end address is: 14 (W7)
;NMRAnetCANReceive.mpas,388 :: 		if NMRAnetNode_TestStateFlag(Nodes.AllocatedList[i], NS_VIRTUAL) then
; VNodeEvent start address is: 14 (W7)
; NodeEvent start address is: 12 (W6)
0x5042	0xDD40C1  	SL	W8, #1, W1
0x5044	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x5046	0x400001  	ADD	W0, W1, W0
0x5048	0x781F8A  	PUSH	W10
0x504A	0xB3C08B  	MOV.B	#8, W11
0x504C	0x780510  	MOV	[W0], W10
0x504E	0x07F620  	RCALL	_NMRAnetNode_TestStateFlag
0x5050	0x78054F  	POP	W10
0x5052	0xE20000  	CP0	W0
0x5054	0x32000C  	BRA Z	L__ReceivedOnFilter1177
L__ReceivedOnFilter1359:
;NMRAnetCANReceive.mpas,390 :: 		if VNodeEvent then
0x5056	0xE2000E  	CP0	W7
0x5058	0x320009  	BRA Z	L__ReceivedOnFilter1180
L__ReceivedOnFilter1360:
;NMRAnetCANReceive.mpas,391 :: 		NMRAnetNode_SetProducerEventFlag(Nodes.AllocatedList[i], VNodeEventIndex, EVENT_STATE_UNKOWN);
0x505A	0xDD40C1  	SL	W8, #1, W1
0x505C	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x505E	0x400001  	ADD	W0, W1, W0
0x5060	0x781F8A  	PUSH	W10
0x5062	0xB3C03C  	MOV.B	#3, W12
0x5064	0x9005FE  	MOV	[W14+14], W11
0x5066	0x780510  	MOV	[W0], W10
0x5068	0x07DA01  	RCALL	_NMRAnetNode_SetProducerEventFlag
0x506A	0x78054F  	POP	W10
L__ReceivedOnFilter1180:
;NMRAnetCANReceive.mpas,392 :: 		end else
0x506C	0x370008  	BRA	L__ReceivedOnFilter1178
L__ReceivedOnFilter1177:
;NMRAnetCANReceive.mpas,394 :: 		if NodeEvent then
0x506E	0xE2000C  	CP0	W6
0x5070	0x320006  	BRA Z	L__ReceivedOnFilter1183
L__ReceivedOnFilter1361:
;NMRAnetCANReceive.mpas,395 :: 		NMRAnetNode_SetProducerEventFlag(Nodes.AllocatedList[0], NodeEventIndex, EVENT_STATE_UNKOWN);
0x5072	0x781F8A  	PUSH	W10
0x5074	0xB3C03C  	MOV.B	#3, W12
0x5076	0x900D8E  	MOV	[W14+16], W11
0x5078	0x81237A  	MOV	_Nodes+2990, W10
0x507A	0x07D9F8  	RCALL	_NMRAnetNode_SetProducerEventFlag
0x507C	0x78054F  	POP	W10
L__ReceivedOnFilter1183:
;NMRAnetCANReceive.mpas,396 :: 		end
L__ReceivedOnFilter1178:
;NMRAnetCANReceive.mpas,397 :: 		end;
0x507E	0x90085E  	MOV	[W14+26], W0
0x5080	0xE14000  	CP	W8, W0
0x5082	0x320002  	BRA Z	L__ReceivedOnFilter1175
L__ReceivedOnFilter1362:
; i start address is: 16 (W8)
0x5084	0xEC2010  	INC	W8
; i end address is: 16 (W8)
; NodeEvent end address is: 12 (W6)
; VNodeEvent end address is: 14 (W7)
; i end address is: 16 (W8)
0x5086	0x37FFD8  	BRA	L__ReceivedOnFilter1171
L__ReceivedOnFilter1175:
;NMRAnetCANReceive.mpas,398 :: 		end
L__ReceivedOnFilter1169:
;NMRAnetCANReceive.mpas,399 :: 		end;
0x5088	0x370030  	BRA	L__ReceivedOnFilter1132
L__ReceivedOnFilter1167:
;NMRAnetCANReceive.mpas,400 :: 		MTI_PRODUCER_IDENTIFY_RANGE : begin
0x508A	0x240000  	MOV	#16384, W0
0x508C	0x209521  	MOV	#2386, W1
0x508E	0x90097E  	MOV	[W14+30], W2
0x5090	0x90118E  	MOV	[W14+32], W3
0x5092	0xE11000  	CP	W2, W0
0x5094	0xE19801  	CPB	W3, W1
0x5096	0x3A0001  	BRA NZ	L__ReceivedOnFilter1187
L__ReceivedOnFilter1363:
;NMRAnetCANReceive.mpas,402 :: 		end;
0x5098	0x370028  	BRA	L__ReceivedOnFilter1132
L__ReceivedOnFilter1187:
;NMRAnetCANReceive.mpas,403 :: 		MTI_EVENT_LEARN             : begin
0x509A	0x240000  	MOV	#16384, W0
0x509C	0x209591  	MOV	#2393, W1
0x509E	0xE11000  	CP	W2, W0
0x50A0	0xE19801  	CPB	W3, W1
0x50A2	0x3A0001  	BRA NZ	L__ReceivedOnFilter1190
L__ReceivedOnFilter1364:
;NMRAnetCANReceive.mpas,405 :: 		end;
0x50A4	0x370022  	BRA	L__ReceivedOnFilter1132
L__ReceivedOnFilter1190:
;NMRAnetCANReceive.mpas,406 :: 		MTI_EVENTS_IDENTIFY         : begin
0x50A6	0x200000  	MOV	#0, W0
0x50A8	0x209971  	MOV	#2455, W1
0x50AA	0xE11000  	CP	W2, W0
0x50AC	0xE19801  	CPB	W3, W1
0x50AE	0x3A001D  	BRA NZ	L__ReceivedOnFilter1193
L__ReceivedOnFilter1365:
;NMRAnetCANReceive.mpas,407 :: 		if not AppCallback_EventsIdentify then
0x50B0	0x07EFAD  	RCALL	_AppCallback_EventsIdentify
0x50B2	0xEEA000  	COM	W0
0x50B4	0x320019  	BRA Z	L__ReceivedOnFilter1195
L__ReceivedOnFilter1366:
;NMRAnetCANReceive.mpas,409 :: 		for j := 0 to Nodes.AllocatedCount - 1 do
; j start address is: 14 (W7)
0x50B6	0xEF200E  	CLR	W7
; j end address is: 14 (W7)
L__ReceivedOnFilter1197:
; j start address is: 14 (W7)
0x50B8	0x812780  	MOV	_Nodes+3120, W0
0x50BA	0xED2000  	DEC	W0
0x50BC	0x980F50  	MOV	W0, [W14+26]
0x50BE	0xE13800  	CP	W7, W0
0x50C0	0x3C0013  	BRA GT	L__ReceivedOnFilter1201
L__ReceivedOnFilter1367:
;NMRAnetCANReceive.mpas,411 :: 		NMRAnetNode_SetProducerEventFlags(Nodes.AllocatedList[j], EVENT_STATE_UNKOWN);
0x50C2	0xDD38C1  	SL	W7, #1, W1
0x50C4	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x50C6	0x400001  	ADD	W0, W1, W0
0x50C8	0x781F8A  	PUSH	W10
0x50CA	0xB3C03B  	MOV.B	#3, W11
0x50CC	0x780510  	MOV	[W0], W10
0x50CE	0x07DE8F  	RCALL	_NMRAnetNode_SetProducerEventFlags
;NMRAnetCANReceive.mpas,412 :: 		NMRAnetNode_SetConsumerEventFlags(Nodes.AllocatedList[j], EVENT_STATE_UNKOWN);
0x50D0	0xDD38C1  	SL	W7, #1, W1
0x50D2	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x50D4	0x400001  	ADD	W0, W1, W0
0x50D6	0xB3C03B  	MOV.B	#3, W11
0x50D8	0x780510  	MOV	[W0], W10
0x50DA	0x07DE69  	RCALL	_NMRAnetNode_SetConsumerEventFlags
0x50DC	0x78054F  	POP	W10
;NMRAnetCANReceive.mpas,413 :: 		end;
0x50DE	0x90085E  	MOV	[W14+26], W0
0x50E0	0xE13800  	CP	W7, W0
0x50E2	0x320002  	BRA Z	L__ReceivedOnFilter1201
L__ReceivedOnFilter1368:
; j start address is: 14 (W7)
0x50E4	0xEC200E  	INC	W7
; j end address is: 14 (W7)
; j end address is: 14 (W7)
0x50E6	0x37FFE8  	BRA	L__ReceivedOnFilter1197
L__ReceivedOnFilter1201:
;NMRAnetCANReceive.mpas,414 :: 		end
L__ReceivedOnFilter1195:
;NMRAnetCANReceive.mpas,415 :: 		end;
0x50E8	0x370000  	BRA	L__ReceivedOnFilter1132
L__ReceivedOnFilter1193:
L__ReceivedOnFilter1132:
;NMRAnetCANReceive.mpas,418 :: 		end;
L__ReceivedOnFilter176:
;NMRAnetCANReceive.mpas,419 :: 		end;
0x50EA	0x370197  	BRA	L__ReceivedOnFilter170
L__ReceivedOnFilter173:
;NMRAnetCANReceive.mpas,420 :: 		MTI_FRAME_TYPE_DATAGRAM_ONLY_FRAME : begin
; SourceAlias start address is: 10 (W5)
0x50EC	0x200002  	MOV	#0, W2
0x50EE	0x20A003  	MOV	#2560, W3
0x50F0	0x90101E  	MOV	[W14+34], W0
0x50F2	0x9010AE  	MOV	[W14+36], W1
0x50F4	0xE10002  	CP	W0, W2
0x50F6	0xE18803  	CPB	W1, W3
0x50F8	0x3A007C  	BRA NZ	L__ReceivedOnFilter1204
L__ReceivedOnFilter1369:
;NMRAnetCANReceive.mpas,421 :: 		Node := NMRAnetNode_FindByAlias( NMRAnetUtilities_ExtractDestinationCodedInMTIAlias(CANBuffer));
0x50FA	0x781F85  	PUSH	W5
0x50FC	0x07F0DA  	RCALL	_NMRAnetUtilities_ExtractDestinationCodedInMTIAlias
0x50FE	0x781F8A  	PUSH	W10
0x5100	0x780500  	MOV	W0, W10
0x5102	0x07F3F0  	RCALL	_NMRAnetNode_FindByAlias
0x5104	0x78054F  	POP	W10
0x5106	0x7802CF  	POP	W5
; Node start address is: 4 (W2)
0x5108	0x780100  	MOV	W0, W2
;NMRAnetCANReceive.mpas,422 :: 		if Node <> nil then
0x510A	0xE10060  	CP	W0, #0
0x510C	0x320071  	BRA Z	L__ReceivedOnFilter1206
L__ReceivedOnFilter1370:
;NMRAnetCANReceive.mpas,424 :: 		if NMRAnetBufferPools_AllocateDatagramBuffer(DatagramBuffer, False) then
0x510E	0x47006C  	ADD	W14, #12, W0
0x5110	0x781F82  	PUSH	W2
0x5112	0x781F85  	PUSH	W5
0x5114	0x781F8A  	PUSH	W10
0x5116	0xEF2016  	CLR	W11
0x5118	0x780500  	MOV	W0, W10
0x511A	0x07F0E1  	RCALL	_NMRAnetBufferPools_AllocateDatagramBuffer
0x511C	0x78054F  	POP	W10
0x511E	0x7802CF  	POP	W5
0x5120	0x78014F  	POP	W2
0x5122	0xE20000  	CP0	W0
0x5124	0x320055  	BRA Z	L__ReceivedOnFilter1209
L__ReceivedOnFilter1371:
;NMRAnetCANReceive.mpas,426 :: 		NMRAnetUtilities_DatagramBufferLink(Node, DatagramBuffer);
0x5126	0x781F8A  	PUSH	W10
0x5128	0x9005EE  	MOV	[W14+12], W11
0x512A	0x780502  	MOV	W2, W10
0x512C	0x07F0AF  	RCALL	_NMRAnetUtilities_DatagramBufferLink
0x512E	0x78054F  	POP	W10
;NMRAnetCANReceive.mpas,427 :: 		DatagramBuffer^.mCode := BMC_DATAGRAM;
0x5130	0x90006E  	MOV	[W14+12], W0
0x5132	0x4000E6  	ADD	W0, #6, W1
0x5134	0xB3C070  	MOV.B	#7, W0
0x5136	0x784880  	MOV.B	W0, [W1]
;NMRAnetCANReceive.mpas,428 :: 		DatagramBuffer^.Alias := SourceAlias;
0x5138	0x90006E  	MOV	[W14+12], W0
0x513A	0xECA000  	INC2	W0
0x513C	0x780805  	MOV	W5, [W0]
;NMRAnetCANReceive.mpas,429 :: 		DatagramBuffer^.iByteCount := CANBuffer^.DataCount;
0x513E	0x90006E  	MOV	[W14+12], W0
0x5140	0x4000EA  	ADD	W0, #10, W1
0x5142	0x450064  	ADD	W10, #4, W0
0x5144	0x784890  	MOV.B	[W0], [W1]
;NMRAnetCANReceive.mpas,430 :: 		for i := 0 to DatagramBuffer^.iByteCount - 1 do
; i start address is: 6 (W3)
0x5146	0xEF2006  	CLR	W3
; Node end address is: 4 (W2)
; i end address is: 6 (W3)
; SourceAlias end address is: 10 (W5)
0x5148	0x780202  	MOV	W2, W4
L__ReceivedOnFilter1211:
; i start address is: 6 (W3)
; Node start address is: 8 (W4)
; SourceAlias start address is: 10 (W5)
0x514A	0x90006E  	MOV	[W14+12], W0
0x514C	0x40006A  	ADD	W0, #10, W0
0x514E	0xFB8010  	ZE	[W0], W0
0x5150	0x500161  	SUB	W0, #1, W2
0x5152	0xE11802  	CP	W3, W2
0x5154	0x3C000A  	BRA GT	L__ReceivedOnFilter1215
L__ReceivedOnFilter1372:
;NMRAnetCANReceive.mpas,431 :: 		DatagramBuffer^.DataBytes[i] := CANBuffer^.DataBytes[i];
0x5156	0x90006E  	MOV	[W14+12], W0
0x5158	0x40006B  	ADD	W0, #11, W0
0x515A	0x400083  	ADD	W0, W3, W1
0x515C	0x450065  	ADD	W10, #5, W0
0x515E	0x400003  	ADD	W0, W3, W0
0x5160	0x784890  	MOV.B	[W0], [W1]
0x5162	0xE11802  	CP	W3, W2
0x5164	0x320002  	BRA Z	L__ReceivedOnFilter1215
L__ReceivedOnFilter1373:
; i start address is: 6 (W3)
0x5166	0xEC2006  	INC	W3
; i end address is: 6 (W3)
; i end address is: 6 (W3)
0x5168	0x37FFF0  	BRA	L__ReceivedOnFilter1211
L__ReceivedOnFilter1215:
;NMRAnetCANReceive.mpas,432 :: 		DatagramBuffer^.State := DatagramBuffer^.State and not CBS_PROCESSING or CBS_TRANSFER_COMPLETE;
0x516A	0x90006E  	MOV	[W14+12], W0
0x516C	0x784010  	MOV.B	[W0], W0
0x516E	0xFB8080  	ZE	W0, W1
0x5170	0x200FD0  	MOV	#253, W0
0x5172	0x608000  	AND	W1, W0, W0
0x5174	0x7000E8  	IOR	W0, #8, W1
0x5176	0x90006E  	MOV	[W14+12], W0
0x5178	0x784801  	MOV.B	W1, [W0]
;NMRAnetCANReceive.mpas,433 :: 		case DatagramBuffer^.DataBytes[0] of
0x517A	0x90006E  	MOV	[W14+12], W0
0x517C	0x40006B  	ADD	W0, #11, W0
0x517E	0x784110  	MOV.B	[W0], W2
;NMRAnetCANReceive.mpas,437 :: 		DATAGRAM_TYPE_MEMORY_CONFIGURATION : DatagramBuffer^.mCode := BMC_DATAGRAM_MEMORY_CONFIG;
0x5180	0xB3C200  	MOV.B	#32, W0
0x5182	0xE11400  	CP.B	W2, W0
0x5184	0x3A0005  	BRA NZ	L__ReceivedOnFilter1219
L__ReceivedOnFilter1374:
; Node end address is: 8 (W4)
; SourceAlias end address is: 10 (W5)
0x5186	0x90006E  	MOV	[W14+12], W0
0x5188	0x4000E6  	ADD	W0, #6, W1
0x518A	0xB3C080  	MOV.B	#8, W0
0x518C	0x784880  	MOV.B	W0, [W1]
0x518E	0x37001F  	BRA	L__ReceivedOnFilter1216
L__ReceivedOnFilter1219:
;NMRAnetCANReceive.mpas,438 :: 		DATAGRAM_TYPE_TRAIN_CONTROL        : DatagramBuffer^.mCode := BMC_DATAGRAM_TRACTION_CONTROL
; SourceAlias start address is: 10 (W5)
; Node start address is: 8 (W4)
0x5190	0xB3C300  	MOV.B	#48, W0
0x5192	0xE11400  	CP.B	W2, W0
0x5194	0x3A0005  	BRA NZ	L__ReceivedOnFilter1222
L__ReceivedOnFilter1375:
; Node end address is: 8 (W4)
; SourceAlias end address is: 10 (W5)
0x5196	0x90006E  	MOV	[W14+12], W0
0x5198	0x4000E6  	ADD	W0, #6, W1
0x519A	0xB3C090  	MOV.B	#9, W0
0x519C	0x784880  	MOV.B	W0, [W1]
;NMRAnetCANReceive.mpas,439 :: 		else begin
0x519E	0x370017  	BRA	L__ReceivedOnFilter1216
L__ReceivedOnFilter1222:
;NMRAnetCANReceive.mpas,440 :: 		NMRAnetUtilities_DatagramBufferUnLink(Node, DatagramBuffer);
; SourceAlias start address is: 10 (W5)
; Node start address is: 8 (W4)
0x51A0	0x781F8A  	PUSH	W10
0x51A2	0x9005EE  	MOV	[W14+12], W11
0x51A4	0x780504  	MOV	W4, W10
0x51A6	0x07E775  	RCALL	_NMRAnetUtilities_DatagramBufferUnLink
;NMRAnetCANReceive.mpas,441 :: 		NMRAnetBufferPools_ReleaseDatagramBuffer(DatagramBuffer);
0x51A8	0x90056E  	MOV	[W14+12], W10
0x51AA	0x07E799  	RCALL	_NMRAnetBufferPools_ReleaseDatagramBuffer
;NMRAnetCANReceive.mpas,442 :: 		DataBytesPtr := PCAN_DataBytes( @DATAGRAM_RESULT_REJECTED_SOURCE_DATAGRAMS_NOT_ACCEPTED);
; DataBytesPtr start address is: 0 (W0)
0x51AC	0x28DBD0  	MOV	#lo_addr(_DATAGRAM_RESULT_REJECTED_SOURCE_DATAGRAMS_NOT_ACCEPTED), W0
;NMRAnetCANReceive.mpas,443 :: 		NMRAnetUtilities_CreateNMRABusMessageCANBuffer(Node, @CAN_Engine.TX_DatagramRejected, MTI_DATAGRAM_REJECTED_REPLY, SourceAlias, 2, DataBytesPtr);
0x51AE	0x28000C  	MOV	#32768, W12
0x51B0	0x209A4D  	MOV	#2468, W13
0x51B2	0x22606B  	MOV	#lo_addr(_CAN_Engine+44), W11
0x51B4	0x780504  	MOV	W4, W10
; Node end address is: 8 (W4)
0x51B6	0x781F80  	PUSH	W0
; DataBytesPtr end address is: 0 (W0)
0x51B8	0x200020  	MOV	#2, W0
0x51BA	0x781F80  	PUSH	W0
0x51BC	0x781F85  	PUSH	W5
; SourceAlias end address is: 10 (W5)
0x51BE	0x07F32E  	RCALL	_NMRAnetUtilities_CreateNMRABusMessageCANBuffer
0x51C0	0xB1006F  	SUB	#6, W15
;NMRAnetCANReceive.mpas,444 :: 		CAN_Engine.TX_DatagramRejected.State := CAN_Engine.TX_DatagramRejected.State or BS_ALLOCATED;
0x51C2	0x226130  	MOV	#lo_addr(_CAN_Engine+57), W0
0x51C4	0x784090  	MOV.B	[W0], W1
0x51C6	0x226130  	MOV	#lo_addr(_CAN_Engine+57), W0
0x51C8	0x70C862  	IOR.B	W1, #2, [W0]
;NMRAnetCANReceive.mpas,445 :: 		StartCANHighPriorityMessageEngine
0x51CA	0x07E74D  	RCALL	_StartCANHighPriorityMessageEngine
0x51CC	0x78054F  	POP	W10
;NMRAnetCANReceive.mpas,446 :: 		end;
L__ReceivedOnFilter1216:
;NMRAnetCANReceive.mpas,448 :: 		end else
0x51CE	0x370010  	BRA	L__ReceivedOnFilter1210
L__ReceivedOnFilter1209:
;NMRAnetCANReceive.mpas,450 :: 		DataBytesPtr := PCAN_DataBytes( @DATAGRAM_RESULT_REJECTED_BUFFER_FULL);
; DataBytesPtr start address is: 0 (W0)
; SourceAlias start address is: 10 (W5)
; Node start address is: 4 (W2)
0x51D0	0x28DBB0  	MOV	#lo_addr(_DATAGRAM_RESULT_REJECTED_BUFFER_FULL), W0
;NMRAnetCANReceive.mpas,451 :: 		NMRAnetUtilities_CreateNMRABusMessageCANBuffer(Node, @CAN_Engine.TX_DatagramRejected, MTI_DATAGRAM_REJECTED_REPLY, SourceAlias, 2, DataBytesPtr);
0x51D2	0x28000C  	MOV	#32768, W12
0x51D4	0x209A4D  	MOV	#2468, W13
0x51D6	0x22606B  	MOV	#lo_addr(_CAN_Engine+44), W11
0x51D8	0x780502  	MOV	W2, W10
; Node end address is: 4 (W2)
0x51DA	0x781F80  	PUSH	W0
; DataBytesPtr end address is: 0 (W0)
0x51DC	0x200020  	MOV	#2, W0
0x51DE	0x781F80  	PUSH	W0
0x51E0	0x781F85  	PUSH	W5
; SourceAlias end address is: 10 (W5)
0x51E2	0x07F31C  	RCALL	_NMRAnetUtilities_CreateNMRABusMessageCANBuffer
0x51E4	0xB1006F  	SUB	#6, W15
;NMRAnetCANReceive.mpas,452 :: 		CAN_Engine.TX_DatagramRejected.State := CAN_Engine.TX_DatagramRejected.State or BS_ALLOCATED;
0x51E6	0x226130  	MOV	#lo_addr(_CAN_Engine+57), W0
0x51E8	0x784090  	MOV.B	[W0], W1
0x51EA	0x226130  	MOV	#lo_addr(_CAN_Engine+57), W0
0x51EC	0x70C862  	IOR.B	W1, #2, [W0]
;NMRAnetCANReceive.mpas,453 :: 		StartCANHighPriorityMessageEngine;
0x51EE	0x07E73B  	RCALL	_StartCANHighPriorityMessageEngine
;NMRAnetCANReceive.mpas,454 :: 		end
L__ReceivedOnFilter1210:
;NMRAnetCANReceive.mpas,455 :: 		end
L__ReceivedOnFilter1206:
;NMRAnetCANReceive.mpas,456 :: 		end;
0x51F0	0x370114  	BRA	L__ReceivedOnFilter170
L__ReceivedOnFilter1204:
;NMRAnetCANReceive.mpas,457 :: 		MTI_FRAME_TYPE_DATAGRAM_FRAME_START : begin
; SourceAlias start address is: 10 (W5)
0x51F2	0x200002  	MOV	#0, W2
0x51F4	0x20B003  	MOV	#2816, W3
0x51F6	0x90101E  	MOV	[W14+34], W0
0x51F8	0x9010AE  	MOV	[W14+36], W1
0x51FA	0xE10002  	CP	W0, W2
0x51FC	0xE18803  	CPB	W1, W3
0x51FE	0x3A004A  	BRA NZ	L__ReceivedOnFilter1225
L__ReceivedOnFilter1376:
;NMRAnetCANReceive.mpas,458 :: 		Node := NMRAnetNode_FindByAlias( NMRAnetUtilities_ExtractDestinationCodedInMTIAlias(CANBuffer));
0x5200	0x781F85  	PUSH	W5
0x5202	0x07F057  	RCALL	_NMRAnetUtilities_ExtractDestinationCodedInMTIAlias
0x5204	0x781F8A  	PUSH	W10
0x5206	0x780500  	MOV	W0, W10
0x5208	0x07F36D  	RCALL	_NMRAnetNode_FindByAlias
0x520A	0x78054F  	POP	W10
0x520C	0x7802CF  	POP	W5
; Node start address is: 2 (W1)
0x520E	0x780080  	MOV	W0, W1
;NMRAnetCANReceive.mpas,459 :: 		if Node <> nil then
0x5210	0xE10060  	CP	W0, #0
0x5212	0x32003F  	BRA Z	L__ReceivedOnFilter1227
L__ReceivedOnFilter1377:
;NMRAnetCANReceive.mpas,461 :: 		if NMRAnetUtilities_FindInProcessDatagram(Node, SourceAlias, DatagramBuffer) then
0x5214	0x47006C  	ADD	W14, #12, W0
0x5216	0x781F81  	PUSH	W1
0x5218	0x781F8A  	PUSH	W10
0x521A	0x780600  	MOV	W0, W12
0x521C	0x780585  	MOV	W5, W11
0x521E	0x780501  	MOV	W1, W10
0x5220	0x07EFEF  	RCALL	_NMRAnetUtilities_FindInProcessDatagram
0x5222	0x78054F  	POP	W10
0x5224	0x7800CF  	POP	W1
0x5226	0xE20000  	CP0	W0
0x5228	0x320001  	BRA Z	L__ReceivedOnFilter1230
L__ReceivedOnFilter1378:
; Node end address is: 2 (W1)
; SourceAlias end address is: 10 (W5)
;NMRAnetCANReceive.mpas,464 :: 		end else
0x522A	0x370033  	BRA	L__ReceivedOnFilter1231
L__ReceivedOnFilter1230:
;NMRAnetCANReceive.mpas,466 :: 		if NMRAnetBufferPools_AllocateDatagramBuffer(DatagramBuffer, False) then
; SourceAlias start address is: 10 (W5)
; Node start address is: 2 (W1)
0x522C	0x47006C  	ADD	W14, #12, W0
0x522E	0x781F81  	PUSH	W1
0x5230	0x781F85  	PUSH	W5
0x5232	0x781F8A  	PUSH	W10
0x5234	0xEF2016  	CLR	W11
0x5236	0x780500  	MOV	W0, W10
0x5238	0x07F052  	RCALL	_NMRAnetBufferPools_AllocateDatagramBuffer
0x523A	0x78054F  	POP	W10
0x523C	0x7802CF  	POP	W5
0x523E	0x7800CF  	POP	W1
0x5240	0xE20000  	CP0	W0
0x5242	0x320027  	BRA Z	L__ReceivedOnFilter1233
L__ReceivedOnFilter1379:
;NMRAnetCANReceive.mpas,468 :: 		NMRAnetUtilities_DatagramBufferLink(Node, DatagramBuffer);
0x5244	0x781F8A  	PUSH	W10
0x5246	0x9005EE  	MOV	[W14+12], W11
0x5248	0x780501  	MOV	W1, W10
; Node end address is: 2 (W1)
0x524A	0x07F020  	RCALL	_NMRAnetUtilities_DatagramBufferLink
0x524C	0x78054F  	POP	W10
;NMRAnetCANReceive.mpas,469 :: 		DatagramBuffer^.mCode := BMC_DATAGRAM;
0x524E	0x90006E  	MOV	[W14+12], W0
0x5250	0x4000E6  	ADD	W0, #6, W1
0x5252	0xB3C070  	MOV.B	#7, W0
0x5254	0x784880  	MOV.B	W0, [W1]
;NMRAnetCANReceive.mpas,470 :: 		DatagramBuffer^.State := DatagramBuffer^.State or CBS_PROCESSING;          // Not ready for the main loop to work it yet.
0x5256	0x90006E  	MOV	[W14+12], W0
0x5258	0x784010  	MOV.B	[W0], W0
0x525A	0xFB8000  	ZE	W0, W0
0x525C	0x7000E2  	IOR	W0, #2, W1
0x525E	0x90006E  	MOV	[W14+12], W0
0x5260	0x784801  	MOV.B	W1, [W0]
;NMRAnetCANReceive.mpas,471 :: 		DatagramBuffer^.Alias := SourceAlias;
0x5262	0x90006E  	MOV	[W14+12], W0
0x5264	0xECA000  	INC2	W0
0x5266	0x780805  	MOV	W5, [W0]
; SourceAlias end address is: 10 (W5)
;NMRAnetCANReceive.mpas,472 :: 		DatagramBuffer^.iByteCount := CANBuffer^.DataCount;
0x5268	0x90006E  	MOV	[W14+12], W0
0x526A	0x4000EA  	ADD	W0, #10, W1
0x526C	0x450064  	ADD	W10, #4, W0
0x526E	0x784890  	MOV.B	[W0], [W1]
;NMRAnetCANReceive.mpas,473 :: 		for i := 0 to DatagramBuffer^.iByteCount - 1 do
; i start address is: 6 (W3)
0x5270	0xEF2006  	CLR	W3
; i end address is: 6 (W3)
L__ReceivedOnFilter1235:
; i start address is: 6 (W3)
0x5272	0x90006E  	MOV	[W14+12], W0
0x5274	0x40006A  	ADD	W0, #10, W0
0x5276	0xFB8010  	ZE	[W0], W0
0x5278	0x500161  	SUB	W0, #1, W2
0x527A	0xE11802  	CP	W3, W2
0x527C	0x3C000A  	BRA GT	L__ReceivedOnFilter1239
L__ReceivedOnFilter1380:
;NMRAnetCANReceive.mpas,474 :: 		DatagramBuffer^.DataBytes[i] := CANBuffer^.DataBytes[i];
0x527E	0x90006E  	MOV	[W14+12], W0
0x5280	0x40006B  	ADD	W0, #11, W0
0x5282	0x400083  	ADD	W0, W3, W1
0x5284	0x450065  	ADD	W10, #5, W0
0x5286	0x400003  	ADD	W0, W3, W0
0x5288	0x784890  	MOV.B	[W0], [W1]
0x528A	0xE11802  	CP	W3, W2
0x528C	0x320002  	BRA Z	L__ReceivedOnFilter1239
L__ReceivedOnFilter1381:
; i start address is: 6 (W3)
0x528E	0xEC2006  	INC	W3
; i end address is: 6 (W3)
; i end address is: 6 (W3)
0x5290	0x37FFF0  	BRA	L__ReceivedOnFilter1235
L__ReceivedOnFilter1239:
;NMRAnetCANReceive.mpas,475 :: 		end
L__ReceivedOnFilter1233:
;NMRAnetCANReceive.mpas,476 :: 		end
L__ReceivedOnFilter1231:
;NMRAnetCANReceive.mpas,477 :: 		end
L__ReceivedOnFilter1227:
;NMRAnetCANReceive.mpas,478 :: 		end;
0x5292	0x3700C3  	BRA	L__ReceivedOnFilter170
L__ReceivedOnFilter1225:
;NMRAnetCANReceive.mpas,479 :: 		MTI_FRAME_TYPE_DATAGRAM_FRAME       : begin
; SourceAlias start address is: 10 (W5)
0x5294	0x200002  	MOV	#0, W2
0x5296	0x20C003  	MOV	#3072, W3
0x5298	0x90101E  	MOV	[W14+34], W0
0x529A	0x9010AE  	MOV	[W14+36], W1
0x529C	0xE10002  	CP	W0, W2
0x529E	0xE18803  	CPB	W1, W3
0x52A0	0x3A0030  	BRA NZ	L__ReceivedOnFilter1242
L__ReceivedOnFilter1382:
;NMRAnetCANReceive.mpas,480 :: 		Node := NMRAnetNode_FindByAlias( NMRAnetUtilities_ExtractDestinationCodedInMTIAlias(CANBuffer));
0x52A2	0x781F85  	PUSH	W5
0x52A4	0x07F006  	RCALL	_NMRAnetUtilities_ExtractDestinationCodedInMTIAlias
0x52A6	0x781F8A  	PUSH	W10
0x52A8	0x780500  	MOV	W0, W10
0x52AA	0x07F31C  	RCALL	_NMRAnetNode_FindByAlias
0x52AC	0x78054F  	POP	W10
0x52AE	0x7802CF  	POP	W5
; Node start address is: 2 (W1)
0x52B0	0x780080  	MOV	W0, W1
;NMRAnetCANReceive.mpas,481 :: 		if Node <> nil then
0x52B2	0xE10060  	CP	W0, #0
0x52B4	0x320025  	BRA Z	L__ReceivedOnFilter1244
L__ReceivedOnFilter1383:
;NMRAnetCANReceive.mpas,483 :: 		if NMRAnetUtilities_FindInProcessDatagram(Node, SourceAlias, DatagramBuffer) then
0x52B6	0x47006C  	ADD	W14, #12, W0
0x52B8	0x781F8A  	PUSH	W10
0x52BA	0x780600  	MOV	W0, W12
0x52BC	0x780585  	MOV	W5, W11
; SourceAlias end address is: 10 (W5)
0x52BE	0x780501  	MOV	W1, W10
; Node end address is: 2 (W1)
0x52C0	0x07EF9F  	RCALL	_NMRAnetUtilities_FindInProcessDatagram
0x52C2	0x78054F  	POP	W10
0x52C4	0xE20000  	CP0	W0
0x52C6	0x32001C  	BRA Z	L__ReceivedOnFilter1247
L__ReceivedOnFilter1384:
;NMRAnetCANReceive.mpas,485 :: 		Offset := DatagramBuffer^.iByteCount;
0x52C8	0x90006E  	MOV	[W14+12], W0
0x52CA	0x40006A  	ADD	W0, #10, W0
; Offset start address is: 6 (W3)
0x52CC	0x784190  	MOV.B	[W0], W3
;NMRAnetCANReceive.mpas,486 :: 		for i := 0 to  CANBuffer^.DataCount - 1 do
; i start address is: 8 (W4)
0x52CE	0xEF2008  	CLR	W4
; i end address is: 8 (W4)
; Offset end address is: 6 (W3)
L__ReceivedOnFilter1249:
; i start address is: 8 (W4)
; Offset start address is: 6 (W3)
0x52D0	0x450064  	ADD	W10, #4, W0
0x52D2	0xFB8010  	ZE	[W0], W0
0x52D4	0x500161  	SUB	W0, #1, W2
0x52D6	0xE12002  	CP	W4, W2
0x52D8	0x3C000C  	BRA GT	L__ReceivedOnFilter1253
L__ReceivedOnFilter1385:
;NMRAnetCANReceive.mpas,487 :: 		DatagramBuffer^.DataBytes[Offset + i] := CANBuffer^.DataBytes[i];
0x52DA	0x90006E  	MOV	[W14+12], W0
0x52DC	0x4000EB  	ADD	W0, #11, W1
0x52DE	0xFB8003  	ZE	W3, W0
0x52E0	0x400004  	ADD	W0, W4, W0
0x52E2	0x408080  	ADD	W1, W0, W1
0x52E4	0x450065  	ADD	W10, #5, W0
0x52E6	0x400004  	ADD	W0, W4, W0
0x52E8	0x784890  	MOV.B	[W0], [W1]
0x52EA	0xE12002  	CP	W4, W2
0x52EC	0x320002  	BRA Z	L__ReceivedOnFilter1253
L__ReceivedOnFilter1386:
; i start address is: 8 (W4)
0x52EE	0xEC2008  	INC	W4
; i end address is: 8 (W4)
; i end address is: 8 (W4)
0x52F0	0x37FFEF  	BRA	L__ReceivedOnFilter1249
L__ReceivedOnFilter1253:
;NMRAnetCANReceive.mpas,488 :: 		DatagramBuffer^.iByteCount := CANBuffer^.DataCount + Offset;
0x52F2	0x90006E  	MOV	[W14+12], W0
0x52F4	0x40016A  	ADD	W0, #10, W2
0x52F6	0x450064  	ADD	W10, #4, W0
0x52F8	0xFB8090  	ZE	[W0], W1
0x52FA	0xFB8003  	ZE	W3, W0
; Offset end address is: 6 (W3)
0x52FC	0x408000  	ADD	W1, W0, W0
0x52FE	0x784900  	MOV.B	W0, [W2]
;NMRAnetCANReceive.mpas,489 :: 		end
L__ReceivedOnFilter1247:
;NMRAnetCANReceive.mpas,490 :: 		end
L__ReceivedOnFilter1244:
;NMRAnetCANReceive.mpas,491 :: 		end;
0x5300	0x37008C  	BRA	L__ReceivedOnFilter170
L__ReceivedOnFilter1242:
;NMRAnetCANReceive.mpas,492 :: 		MTI_FRAME_TYPE_DATAGRAM_FRAME_END   : begin
; SourceAlias start address is: 10 (W5)
0x5302	0x200002  	MOV	#0, W2
0x5304	0x20D003  	MOV	#3328, W3
0x5306	0x90101E  	MOV	[W14+34], W0
0x5308	0x9010AE  	MOV	[W14+36], W1
0x530A	0xE10002  	CP	W0, W2
0x530C	0xE18803  	CPB	W1, W3
0x530E	0x3A0078  	BRA NZ	L__ReceivedOnFilter1256
L__ReceivedOnFilter1387:
;NMRAnetCANReceive.mpas,493 :: 		Node := NMRAnetNode_FindByAlias( NMRAnetUtilities_ExtractDestinationCodedInMTIAlias(CANBuffer));
0x5310	0x781F85  	PUSH	W5
0x5312	0x07EFCF  	RCALL	_NMRAnetUtilities_ExtractDestinationCodedInMTIAlias
0x5314	0x781F8A  	PUSH	W10
0x5316	0x780500  	MOV	W0, W10
0x5318	0x07F2E5  	RCALL	_NMRAnetNode_FindByAlias
0x531A	0x78054F  	POP	W10
0x531C	0x7802CF  	POP	W5
; Node start address is: 2 (W1)
0x531E	0x780080  	MOV	W0, W1
;NMRAnetCANReceive.mpas,494 :: 		if Node <> nil then
0x5320	0xE10060  	CP	W0, #0
0x5322	0x32006D  	BRA Z	L__ReceivedOnFilter1258
L__ReceivedOnFilter1388:
;NMRAnetCANReceive.mpas,496 :: 		DatagramBuffer := nil;
0x5324	0xEF2000  	CLR	W0
0x5326	0x980760  	MOV	W0, [W14+12]
;NMRAnetCANReceive.mpas,497 :: 		if NMRAnetUtilities_FindInProcessDatagram(Node, SourceAlias, DatagramBuffer) then
0x5328	0x47006C  	ADD	W14, #12, W0
0x532A	0x781F81  	PUSH	W1
0x532C	0x781F8A  	PUSH	W10
0x532E	0x780600  	MOV	W0, W12
0x5330	0x780585  	MOV	W5, W11
0x5332	0x780501  	MOV	W1, W10
0x5334	0x07EF65  	RCALL	_NMRAnetUtilities_FindInProcessDatagram
0x5336	0x78054F  	POP	W10
0x5338	0x7800CF  	POP	W1
0x533A	0xE20000  	CP0	W0
0x533C	0x320050  	BRA Z	L__ReceivedOnFilter1261
L__ReceivedOnFilter1389:
;NMRAnetCANReceive.mpas,500 :: 		Offset := DatagramBuffer^.iByteCount;
0x533E	0x90006E  	MOV	[W14+12], W0
0x5340	0x40006A  	ADD	W0, #10, W0
; Offset start address is: 6 (W3)
0x5342	0x784190  	MOV.B	[W0], W3
;NMRAnetCANReceive.mpas,501 :: 		for i := 0 to CANBuffer^.DataCount - 1 do
; i start address is: 12 (W6)
0x5344	0xEF200C  	CLR	W6
; Node end address is: 2 (W1)
; Offset end address is: 6 (W3)
; SourceAlias end address is: 10 (W5)
; i end address is: 12 (W6)
0x5346	0x780201  	MOV	W1, W4
L__ReceivedOnFilter1263:
; i start address is: 12 (W6)
; Offset start address is: 6 (W3)
; Node start address is: 8 (W4)
; SourceAlias start address is: 10 (W5)
0x5348	0x450064  	ADD	W10, #4, W0
0x534A	0xFB8010  	ZE	[W0], W0
0x534C	0x500161  	SUB	W0, #1, W2
0x534E	0xE13002  	CP	W6, W2
0x5350	0x3C000C  	BRA GT	L__ReceivedOnFilter1267
L__ReceivedOnFilter1390:
;NMRAnetCANReceive.mpas,502 :: 		DatagramBuffer^.DataBytes[Offset + i] := CANBuffer^.DataBytes[i];
0x5352	0x90006E  	MOV	[W14+12], W0
0x5354	0x4000EB  	ADD	W0, #11, W1
0x5356	0xFB8003  	ZE	W3, W0
0x5358	0x400006  	ADD	W0, W6, W0
0x535A	0x408080  	ADD	W1, W0, W1
0x535C	0x450065  	ADD	W10, #5, W0
0x535E	0x400006  	ADD	W0, W6, W0
0x5360	0x784890  	MOV.B	[W0], [W1]
0x5362	0xE13002  	CP	W6, W2
0x5364	0x320002  	BRA Z	L__ReceivedOnFilter1267
L__ReceivedOnFilter1391:
; i start address is: 12 (W6)
0x5366	0xEC200C  	INC	W6
; i end address is: 12 (W6)
; i end address is: 12 (W6)
0x5368	0x37FFEF  	BRA	L__ReceivedOnFilter1263
L__ReceivedOnFilter1267:
;NMRAnetCANReceive.mpas,503 :: 		DatagramBuffer^.iByteCount := CANBuffer^.DataCount + Offset;
0x536A	0x90006E  	MOV	[W14+12], W0
0x536C	0x40016A  	ADD	W0, #10, W2
0x536E	0x450064  	ADD	W10, #4, W0
0x5370	0xFB8090  	ZE	[W0], W1
0x5372	0xFB8003  	ZE	W3, W0
; Offset end address is: 6 (W3)
0x5374	0x408000  	ADD	W1, W0, W0
0x5376	0x784900  	MOV.B	W0, [W2]
;NMRAnetCANReceive.mpas,504 :: 		DatagramBuffer^.State := DatagramBuffer^.State and not CBS_PROCESSING or CBS_TRANSFER_COMPLETE;  // Signed Sealed so Deliver.
0x5378	0x90006E  	MOV	[W14+12], W0
0x537A	0x784010  	MOV.B	[W0], W0
0x537C	0xFB8080  	ZE	W0, W1
0x537E	0x200FD0  	MOV	#253, W0
0x5380	0x608000  	AND	W1, W0, W0
0x5382	0x7000E8  	IOR	W0, #8, W1
0x5384	0x90006E  	MOV	[W14+12], W0
0x5386	0x784801  	MOV.B	W1, [W0]
;NMRAnetCANReceive.mpas,505 :: 		case DatagramBuffer^.DataBytes[0] of
0x5388	0x90006E  	MOV	[W14+12], W0
0x538A	0x40006B  	ADD	W0, #11, W0
0x538C	0x784110  	MOV.B	[W0], W2
;NMRAnetCANReceive.mpas,509 :: 		DATAGRAM_TYPE_MEMORY_CONFIGURATION : DatagramBuffer^.mCode := BMC_DATAGRAM_MEMORY_CONFIG;
0x538E	0xB3C200  	MOV.B	#32, W0
0x5390	0xE11400  	CP.B	W2, W0
0x5392	0x3A0005  	BRA NZ	L__ReceivedOnFilter1271
L__ReceivedOnFilter1392:
; Node end address is: 8 (W4)
; SourceAlias end address is: 10 (W5)
0x5394	0x90006E  	MOV	[W14+12], W0
0x5396	0x4000E6  	ADD	W0, #6, W1
0x5398	0xB3C080  	MOV.B	#8, W0
0x539A	0x784880  	MOV.B	W0, [W1]
0x539C	0x37001F  	BRA	L__ReceivedOnFilter1268
L__ReceivedOnFilter1271:
;NMRAnetCANReceive.mpas,510 :: 		DATAGRAM_TYPE_TRAIN_CONTROL        : DatagramBuffer^.mCode := BMC_DATAGRAM_TRACTION_CONTROL
; SourceAlias start address is: 10 (W5)
; Node start address is: 8 (W4)
0x539E	0xB3C300  	MOV.B	#48, W0
0x53A0	0xE11400  	CP.B	W2, W0
0x53A2	0x3A0005  	BRA NZ	L__ReceivedOnFilter1274
L__ReceivedOnFilter1393:
; Node end address is: 8 (W4)
; SourceAlias end address is: 10 (W5)
0x53A4	0x90006E  	MOV	[W14+12], W0
0x53A6	0x4000E6  	ADD	W0, #6, W1
0x53A8	0xB3C090  	MOV.B	#9, W0
0x53AA	0x784880  	MOV.B	W0, [W1]
;NMRAnetCANReceive.mpas,511 :: 		else begin
0x53AC	0x370017  	BRA	L__ReceivedOnFilter1268
L__ReceivedOnFilter1274:
;NMRAnetCANReceive.mpas,512 :: 		NMRAnetUtilities_DatagramBufferUnLink(Node, DatagramBuffer);
; SourceAlias start address is: 10 (W5)
; Node start address is: 8 (W4)
0x53AE	0x781F8A  	PUSH	W10
0x53B0	0x9005EE  	MOV	[W14+12], W11
0x53B2	0x780504  	MOV	W4, W10
0x53B4	0x07E66E  	RCALL	_NMRAnetUtilities_DatagramBufferUnLink
;NMRAnetCANReceive.mpas,513 :: 		NMRAnetBufferPools_ReleaseDatagramBuffer(DatagramBuffer);
0x53B6	0x90056E  	MOV	[W14+12], W10
0x53B8	0x07E692  	RCALL	_NMRAnetBufferPools_ReleaseDatagramBuffer
;NMRAnetCANReceive.mpas,514 :: 		DataBytesPtr := PCAN_DataBytes( @DATAGRAM_RESULT_REJECTED_SOURCE_DATAGRAMS_NOT_ACCEPTED);
; DataBytesPtr start address is: 0 (W0)
0x53BA	0x28DBD0  	MOV	#lo_addr(_DATAGRAM_RESULT_REJECTED_SOURCE_DATAGRAMS_NOT_ACCEPTED), W0
;NMRAnetCANReceive.mpas,515 :: 		NMRAnetUtilities_CreateNMRABusMessageCANBuffer(Node, @CAN_Engine.TX_DatagramRejected, MTI_DATAGRAM_REJECTED_REPLY, SourceAlias, 2, DataBytesPtr);
0x53BC	0x28000C  	MOV	#32768, W12
0x53BE	0x209A4D  	MOV	#2468, W13
0x53C0	0x22606B  	MOV	#lo_addr(_CAN_Engine+44), W11
0x53C2	0x780504  	MOV	W4, W10
; Node end address is: 8 (W4)
0x53C4	0x781F80  	PUSH	W0
; DataBytesPtr end address is: 0 (W0)
0x53C6	0x200020  	MOV	#2, W0
0x53C8	0x781F80  	PUSH	W0
0x53CA	0x781F85  	PUSH	W5
; SourceAlias end address is: 10 (W5)
0x53CC	0x07F227  	RCALL	_NMRAnetUtilities_CreateNMRABusMessageCANBuffer
0x53CE	0xB1006F  	SUB	#6, W15
;NMRAnetCANReceive.mpas,516 :: 		CAN_Engine.TX_DatagramRejected.State := CAN_Engine.TX_DatagramRejected.State or BS_ALLOCATED;
0x53D0	0x226130  	MOV	#lo_addr(_CAN_Engine+57), W0
0x53D2	0x784090  	MOV.B	[W0], W1
0x53D4	0x226130  	MOV	#lo_addr(_CAN_Engine+57), W0
0x53D6	0x70C862  	IOR.B	W1, #2, [W0]
;NMRAnetCANReceive.mpas,517 :: 		StartCANHighPriorityMessageEngine;
0x53D8	0x07E646  	RCALL	_StartCANHighPriorityMessageEngine
0x53DA	0x78054F  	POP	W10
;NMRAnetCANReceive.mpas,518 :: 		end;
L__ReceivedOnFilter1268:
;NMRAnetCANReceive.mpas,520 :: 		end else
0x53DC	0x370010  	BRA	L__ReceivedOnFilter1262
L__ReceivedOnFilter1261:
;NMRAnetCANReceive.mpas,522 :: 		DataBytesPtr := PCAN_DataBytes( @DATAGRAM_RESULT_REJECTED_BUFFER_FULL);
; DataBytesPtr start address is: 0 (W0)
; SourceAlias start address is: 10 (W5)
; Node start address is: 2 (W1)
0x53DE	0x28DBB0  	MOV	#lo_addr(_DATAGRAM_RESULT_REJECTED_BUFFER_FULL), W0
;NMRAnetCANReceive.mpas,523 :: 		NMRAnetUtilities_CreateNMRABusMessageCANBuffer(Node, @CAN_Engine.TX_DatagramRejected, MTI_DATAGRAM_REJECTED_REPLY, SourceAlias, 2, DataBytesPtr);
0x53E0	0x28000C  	MOV	#32768, W12
0x53E2	0x209A4D  	MOV	#2468, W13
0x53E4	0x22606B  	MOV	#lo_addr(_CAN_Engine+44), W11
0x53E6	0x780501  	MOV	W1, W10
; Node end address is: 2 (W1)
0x53E8	0x781F80  	PUSH	W0
; DataBytesPtr end address is: 0 (W0)
0x53EA	0x200020  	MOV	#2, W0
0x53EC	0x781F80  	PUSH	W0
0x53EE	0x781F85  	PUSH	W5
; SourceAlias end address is: 10 (W5)
0x53F0	0x07F215  	RCALL	_NMRAnetUtilities_CreateNMRABusMessageCANBuffer
0x53F2	0xB1006F  	SUB	#6, W15
;NMRAnetCANReceive.mpas,524 :: 		CAN_Engine.TX_DatagramRejected.State := CAN_Engine.TX_DatagramRejected.State or BS_ALLOCATED;
0x53F4	0x226130  	MOV	#lo_addr(_CAN_Engine+57), W0
0x53F6	0x784090  	MOV.B	[W0], W1
0x53F8	0x226130  	MOV	#lo_addr(_CAN_Engine+57), W0
0x53FA	0x70C862  	IOR.B	W1, #2, [W0]
;NMRAnetCANReceive.mpas,525 :: 		StartCANHighPriorityMessageEngine;
0x53FC	0x07E634  	RCALL	_StartCANHighPriorityMessageEngine
;NMRAnetCANReceive.mpas,526 :: 		end
L__ReceivedOnFilter1262:
;NMRAnetCANReceive.mpas,527 :: 		end
L__ReceivedOnFilter1258:
;NMRAnetCANReceive.mpas,528 :: 		end;
0x53FE	0x37000D  	BRA	L__ReceivedOnFilter170
L__ReceivedOnFilter1256:
;NMRAnetCANReceive.mpas,529 :: 		MTI_FRAME_TYPE_STREAM_SEND          : begin
0x5400	0x200002  	MOV	#0, W2
0x5402	0x20F003  	MOV	#3840, W3
0x5404	0x90101E  	MOV	[W14+34], W0
0x5406	0x9010AE  	MOV	[W14+36], W1
0x5408	0xE10002  	CP	W0, W2
0x540A	0xE18803  	CPB	W1, W3
0x540C	0x3A0006  	BRA NZ	L__ReceivedOnFilter1277
L__ReceivedOnFilter1394:
;NMRAnetCANReceive.mpas,530 :: 		Node := NMRAnetNode_FindByAlias( NMRAnetUtilities_ExtractDestinationCodedInMTIAlias(CANBuffer));
0x540E	0x07EF51  	RCALL	_NMRAnetUtilities_ExtractDestinationCodedInMTIAlias
0x5410	0x780500  	MOV	W0, W10
0x5412	0x07F268  	RCALL	_NMRAnetNode_FindByAlias
;NMRAnetCANReceive.mpas,531 :: 		if Node <> nil then
0x5414	0xE10060  	CP	W0, #0
0x5416	0x320000  	BRA Z	L__ReceivedOnFilter1279
L__ReceivedOnFilter1395:
;NMRAnetCANReceive.mpas,533 :: 		end
L__ReceivedOnFilter1279:
;NMRAnetCANReceive.mpas,534 :: 		end;
0x5418	0x370000  	BRA	L__ReceivedOnFilter170
L__ReceivedOnFilter1277:
L__ReceivedOnFilter170:
;NMRAnetCANReceive.mpas,536 :: 		end
L__ReceivedOnFilter169:
;NMRAnetCANReceive.mpas,537 :: 		end;
L__ReceivedOnFilter165:
;NMRAnetCANReceive.mpas,539 :: 		if TMR4 > MaxTime_RX then MaxTime_RX := TMR4;
0x541A	0x8008A1  	MOV	TMR4, W1
0x541C	0x225C40  	MOV	#lo_addr(_MaxTime_RX), W0
0x541E	0xE10810  	CP	W1, [W0]
0x5420	0x360002  	BRA LEU	L__ReceivedOnFilter1282
L__ReceivedOnFilter1396:
0x5422	0xBF8114  	MOV	TMR4, WREG
0x5424	0x892E20  	MOV	W0, _MaxTime_RX
L__ReceivedOnFilter1282:
;NMRAnetCANReceive.mpas,540 :: 		end;
L_end_ReceivedOnFilter1:
0x5426	0x7806CF  	POP	W13
0x5428	0x78064F  	POP	W12
0x542A	0x7805CF  	POP	W11
0x542C	0x78054F  	POP	W10
0x542E	0xFA8000  	ULNK
0x5430	0x060000  	RETURN
; end of _ReceivedOnFilter1
_NMRAnetUtilities_ExtractSourceAlias:
;NMRAnetUtilities.mpas,237 :: 		begin
;NMRAnetUtilities.mpas,238 :: 		Result := CANBuffer^.ID and MASK_SOURCE_ALIAS
0x3920	0x78009A  	MOV	[W10], W1
0x3922	0x20FFF0  	MOV	#4095, W0
; Result start address is: 2 (W1)
0x3924	0x608080  	AND	W1, W0, W1
;NMRAnetUtilities.mpas,239 :: 		end;
0x3926	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_ExtractSourceAlias:
0x3928	0x060000  	RETURN
; end of _NMRAnetUtilities_ExtractSourceAlias
_NMRAnetNode_FindByAlias:
;NMRAnetNode.mpas,190 :: 		begin
;NMRAnetNode.mpas,191 :: 		Result := PNMRAnetNode( nil);
0x38E4	0x781F8A  	PUSH	W10
0x38E6	0x781F8B  	PUSH	W11
; Result start address is: 10 (W5)
0x38E8	0x200005  	MOV	#0, W5
;NMRAnetNode.mpas,202 :: 		Index := BinarySearchAliasID(Nodes, AliasID);
0x38EA	0x78058A  	MOV	W10, W11
0x38EC	0x218C0A  	MOV	#lo_addr(_Nodes), W10
0x38EE	0x07EA12  	RCALL	NMRAnetNode_BinarySearchAliasID
; Index start address is: 6 (W3)
0x38F0	0x780180  	MOV	W0, W3
;NMRAnetNode.mpas,203 :: 		if (Index > -1) and (Index < Nodes.AllocatedCount) then
0x38F2	0x2FFFF1  	MOV	#65535, W1
0x38F4	0xE10001  	CP	W0, W1
0x38F6	0xEF2004  	CLR	W2
0x38F8	0x340001  	BRA LE	L__NMRAnetNode_FindByAlias231
0x38FA	0xEEA004  	COM	W2
L__NMRAnetNode_FindByAlias231:
0x38FC	0x224F01  	MOV	#lo_addr(_Nodes+3120), W1
0x38FE	0xE10011  	CP	W0, [W1]
0x3900	0xEF2000  	CLR	W0
0x3902	0x3D0001  	BRA GE	L__NMRAnetNode_FindByAlias232
0x3904	0xEEA000  	COM	W0
L__NMRAnetNode_FindByAlias232:
0x3906	0x610000  	AND	W2, W0, W0
0x3908	0xE20000  	CP0	W0
0x390A	0x320005  	BRA Z	L__NMRAnetNode_FindByAlias210
L__NMRAnetNode_FindByAlias233:
; Result end address is: 10 (W5)
;NMRAnetNode.mpas,204 :: 		Result := Nodes.AllocatedList[Index];
0x390C	0xDD18C1  	SL	W3, #1, W1
; Index end address is: 6 (W3)
0x390E	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x3910	0x400001  	ADD	W0, W1, W0
; Result start address is: 2 (W1)
0x3912	0x780090  	MOV	[W0], W1
; Result end address is: 2 (W1)
0x3914	0x370001  	BRA	L__NMRAnetNode_FindByAlias28
L__NMRAnetNode_FindByAlias210:
;NMRAnetNode.mpas,203 :: 		if (Index > -1) and (Index < Nodes.AllocatedCount) then
0x3916	0x780085  	MOV	W5, W1
;NMRAnetNode.mpas,204 :: 		Result := Nodes.AllocatedList[Index];
L__NMRAnetNode_FindByAlias28:
;NMRAnetNode.mpas,205 :: 		end;
; Result start address is: 2 (W1)
0x3918	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetNode_FindByAlias:
0x391A	0x7805CF  	POP	W11
0x391C	0x78054F  	POP	W10
0x391E	0x060000  	RETURN
; end of _NMRAnetNode_FindByAlias
NMRAnetNode_BinarySearchAliasID:
0x0D14	0xFA0004  	LNK	#4
;NMRAnetNode.mpas,158 :: 		begin
;NMRAnetNode.mpas,159 :: 		Min := 0;
; Min start address is: 8 (W4)
0x0D16	0xEF2008  	CLR	W4
;NMRAnetNode.mpas,160 :: 		Max := LocalNodes.AllocatedCount - 1;
0x0D18	0x20C300  	MOV	#3120, W0
0x0D1A	0x450000  	ADD	W10, W0, W0
0x0D1C	0x780010  	MOV	[W0], W0
; Max start address is: 6 (W3)
0x0D1E	0x5001E1  	SUB	W0, #1, W3
; Min end address is: 8 (W4)
; Max end address is: 6 (W3)
;NMRAnetNode.mpas,161 :: 		while Min <= Max do
L_NMRAnetNode_BinarySearchAliasID16:
; Max start address is: 6 (W3)
; Min start address is: 8 (W4)
0x0D20	0xE12003  	CP	W4, W3
0x0D22	0x3C001B  	BRA GT	L_NMRAnetNode_BinarySearchAliasID17
L_NMRAnetNode_BinarySearchAliasID227:
;NMRAnetNode.mpas,163 :: 		Middle := (Min + Max) shr 1;
0x0D24	0x420003  	ADD	W4, W3, W0
0x0D26	0xDE8141  	ASR	W0, #1, W2
0x0D28	0x980702  	MOV	W2, [W14+0]
;NMRAnetNode.mpas,164 :: 		MidAliasID := LocalNodes.AllocatedList[Middle]^.Info.AliasID;
0x0D2A	0x20BAE0  	MOV	#2990, W0
0x0D2C	0x450080  	ADD	W10, W0, W1
0x0D2E	0xDD1041  	SL	W2, #1, W0
0x0D30	0x408000  	ADD	W1, W0, W0
0x0D32	0x780010  	MOV	[W0], W0
0x0D34	0xECA000  	INC2	W0
0x0D36	0x400070  	ADD	W0, #16, W0
0x0D38	0x780010  	MOV	[W0], W0
0x0D3A	0x980710  	MOV	W0, [W14+2]
;NMRAnetNode.mpas,165 :: 		if AliasID < MidAliasID then
0x0D3C	0xE15800  	CP	W11, W0
0x0D3E	0x310004  	BRA GEU	L_NMRAnetNode_BinarySearchAliasID21
L_NMRAnetNode_BinarySearchAliasID228:
; Max end address is: 6 (W3)
;NMRAnetNode.mpas,166 :: 		Max := Middle - 1
0x0D40	0x90000E  	MOV	[W14+0], W0
; Max start address is: 0 (W0)
0x0D42	0xED2000  	DEC	W0
0x0D44	0x780180  	MOV	W0, W3
; Max end address is: 0 (W0)
; Min end address is: 8 (W4)
0x0D46	0x370008  	BRA	L_NMRAnetNode_BinarySearchAliasID22
;NMRAnetNode.mpas,167 :: 		else
L_NMRAnetNode_BinarySearchAliasID21:
;NMRAnetNode.mpas,168 :: 		if AliasID = MidAliasID then
; Max start address is: 6 (W3)
0x0D48	0x470062  	ADD	W14, #2, W0
0x0D4A	0xE15810  	CP	W11, [W0]
0x0D4C	0x3A0002  	BRA NZ	L_NMRAnetNode_BinarySearchAliasID24
L_NMRAnetNode_BinarySearchAliasID229:
; Max end address is: 6 (W3)
;NMRAnetNode.mpas,170 :: 		Result := Middle;
; Result start address is: 2 (W1)
0x0D4E	0x90008E  	MOV	[W14+0], W1
;NMRAnetNode.mpas,171 :: 		Exit
; Result end address is: 2 (W1)
0x0D50	0x370005  	BRA	L_end_NMRAnetNode_BinarySearchAliasID
;NMRAnetNode.mpas,172 :: 		end else
L_NMRAnetNode_BinarySearchAliasID24:
;NMRAnetNode.mpas,173 :: 		Min := Middle + 1
; Max start address is: 6 (W3)
0x0D52	0x90000E  	MOV	[W14+0], W0
; Min start address is: 0 (W0)
0x0D54	0xEC2000  	INC	W0
; Min end address is: 0 (W0)
; Max end address is: 6 (W3)
0x0D56	0x780200  	MOV	W0, W4
L_NMRAnetNode_BinarySearchAliasID22:
;NMRAnetNode.mpas,174 :: 		end;
; Min start address is: 8 (W4)
; Max start address is: 6 (W3)
; Min end address is: 8 (W4)
; Max end address is: 6 (W3)
0x0D58	0x37FFE3  	BRA	L_NMRAnetNode_BinarySearchAliasID16
L_NMRAnetNode_BinarySearchAliasID17:
;NMRAnetNode.mpas,175 :: 		Result := -1;
; Result start address is: 2 (W1)
0x0D5A	0x2FFFF1  	MOV	#65535, W1
; Result end address is: 2 (W1)
;NMRAnetNode.mpas,176 :: 		end;
L_end_NMRAnetNode_BinarySearchAliasID:
; Result start address is: 2 (W1)
0x0D5C	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_BinarySearchAliasID:
0x0D5E	0xFA8000  	ULNK
0x0D60	0x060000  	RETURN
; end of NMRAnetNode_BinarySearchAliasID
_NMRAnetNode_SetMsgFlags:
0x3B32	0xFA0002  	LNK	#2
;NMRAnetNode.mpas,406 :: 		begin
;NMRAnetNode.mpas,407 :: 		for i := 0 to Nodes.AllocatedCount - 1 do
; i start address is: 6 (W3)
0x3B34	0xEF2006  	CLR	W3
; i end address is: 6 (W3)
L__NMRAnetNode_SetMsgFlags91:
; i start address is: 6 (W3)
0x3B36	0x812780  	MOV	_Nodes+3120, W0
0x3B38	0x500161  	SUB	W0, #1, W2
0x3B3A	0xE11802  	CP	W3, W2
0x3B3C	0x3C0018  	BRA GT	L__NMRAnetNode_SetMsgFlags95
L__NMRAnetNode_SetMsgFlags256:
;NMRAnetNode.mpas,409 :: 		Node := Nodes.AllocatedList[i];
0x3B3E	0xDD18C1  	SL	W3, #1, W1
0x3B40	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x3B42	0x400001  	ADD	W0, W1, W0
0x3B44	0x780010  	MOV	[W0], W0
0x3B46	0x980700  	MOV	W0, [W14+0]
;NMRAnetNode.mpas,410 :: 		if Node^.State and NS_PERMITTED = NS_PERMITTED then
0x3B48	0x784010  	MOV.B	[W0], W0
0x3B4A	0xFB8000  	ZE	W0, W0
0x3B4C	0x600062  	AND	W0, #2, W0
0x3B4E	0xE10062  	CP	W0, #2
0x3B50	0x3A0006  	BRA NZ	L__NMRAnetNode_SetMsgFlags97
L__NMRAnetNode_SetMsgFlags257:
;NMRAnetNode.mpas,411 :: 		Node^.MsgFlags := Node^.MsgFlags or MsgFlags
0x3B52	0x90000E  	MOV	[W14+0], W0
0x3B54	0x4000F6  	ADD	W0, #22, W1
0x3B56	0xFB8011  	ZE	[W1], W0
0x3B58	0x70000A  	IOR	W0, W10, W0
0x3B5A	0x784880  	MOV.B	W0, [W1]
0x3B5C	0x370004  	BRA	L__NMRAnetNode_SetMsgFlags98
;NMRAnetNode.mpas,412 :: 		else
L__NMRAnetNode_SetMsgFlags97:
;NMRAnetNode.mpas,413 :: 		Node^.MsgFlags := 0;
0x3B5E	0x90000E  	MOV	[W14+0], W0
0x3B60	0x4000F6  	ADD	W0, #22, W1
0x3B62	0xEF2000  	CLR	W0
0x3B64	0x784880  	MOV.B	W0, [W1]
L__NMRAnetNode_SetMsgFlags98:
;NMRAnetNode.mpas,414 :: 		end;
0x3B66	0xE11802  	CP	W3, W2
0x3B68	0x320002  	BRA Z	L__NMRAnetNode_SetMsgFlags95
L__NMRAnetNode_SetMsgFlags258:
; i start address is: 6 (W3)
0x3B6A	0xEC2006  	INC	W3
; i end address is: 6 (W3)
; i end address is: 6 (W3)
0x3B6C	0x37FFE4  	BRA	L__NMRAnetNode_SetMsgFlags91
L__NMRAnetNode_SetMsgFlags95:
;NMRAnetNode.mpas,415 :: 		end;
L_end_NMRAnetNode_SetMsgFlags:
0x3B6E	0xFA8000  	ULNK
0x3B70	0x060000  	RETURN
; end of _NMRAnetNode_SetMsgFlags
_NMRAnetUtilities_IsAddressedMessage:
;NMRAnetUtilities.mpas,417 :: 		begin
;NMRAnetUtilities.mpas,418 :: 		Result := CANBuffer^.ID and MTI_ADDRESSED_MASK <> 0
0x3C6C	0xBE011A  	MOV.D	[W10], W2
0x3C6E	0x280000  	MOV	#32768, W0
0x3C70	0x200001  	MOV	#0, W1
0x3C72	0x610000  	AND	W2, W0, W0
0x3C74	0x618081  	AND	W3, W1, W1
; Result start address is: 2 (W1)
0x3C76	0xE10060  	CP	W0, #0
0x3C78	0xE18860  	CPB	W1, #0
0x3C7A	0xEF2002  	CLR	W1
0x3C7C	0x320001  	BRA Z	L__NMRAnetUtilities_IsAddressedMessage321
0x3C7E	0xEEA002  	COM	W1
L__NMRAnetUtilities_IsAddressedMessage321:
;NMRAnetUtilities.mpas,419 :: 		end;
0x3C80	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_IsAddressedMessage:
0x3C82	0x060000  	RETURN
; end of _NMRAnetUtilities_IsAddressedMessage
_NMRAnetUtilities_ExtractDestinationAlias:
;NMRAnetUtilities.mpas,182 :: 		begin
;NMRAnetUtilities.mpas,183 :: 		Result := 0;
; Result start address is: 8 (W4)
0x3C48	0xEF2008  	CLR	W4
;NMRAnetUtilities.mpas,184 :: 		if NMRAnetUtilities_IsAddressedMessage(CANBuffer) then
0x3C4A	0x070010  	RCALL	_NMRAnetUtilities_IsAddressedMessage
0x3C4C	0xE20000  	CP0	W0
0x3C4E	0x32000B  	BRA Z	L__NMRAnetUtilities_ExtractDestinationAlias237
L__NMRAnetUtilities_ExtractDestinationAlias277:
; Result end address is: 8 (W4)
;NMRAnetUtilities.mpas,186 :: 		Result := CANBuffer^.DataBytes[0] shl 8;
0x3C50	0x4500E5  	ADD	W10, #5, W1
0x3C52	0x784011  	MOV.B	[W1], W0
0x3C54	0xFB8000  	ZE	W0, W0
0x3C56	0xDD0048  	SL	W0, #8, W0
; Result start address is: 4 (W2)
0x3C58	0x780100  	MOV	W0, W2
;NMRAnetUtilities.mpas,187 :: 		Result := Result or CANBuffer^.DataBytes[1];
0x3C5A	0x408061  	ADD	W1, #1, W0
0x3C5C	0xFB8010  	ZE	[W0], W0
; Result start address is: 2 (W1)
0x3C5E	0x710080  	IOR	W2, W0, W1
; Result end address is: 4 (W2)
;NMRAnetUtilities.mpas,188 :: 		Result := Result and $0FFF;
0x3C60	0x20FFF0  	MOV	#4095, W0
0x3C62	0x608080  	AND	W1, W0, W1
; Result end address is: 2 (W1)
;NMRAnetUtilities.mpas,189 :: 		end
0x3C64	0x370001  	BRA	L__NMRAnetUtilities_ExtractDestinationAlias38
L__NMRAnetUtilities_ExtractDestinationAlias237:
;NMRAnetUtilities.mpas,184 :: 		if NMRAnetUtilities_IsAddressedMessage(CANBuffer) then
0x3C66	0x780084  	MOV	W4, W1
;NMRAnetUtilities.mpas,189 :: 		end
L__NMRAnetUtilities_ExtractDestinationAlias38:
;NMRAnetUtilities.mpas,190 :: 		end;
; Result start address is: 2 (W1)
0x3C68	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_ExtractDestinationAlias:
0x3C6A	0x060000  	RETURN
; end of _NMRAnetUtilities_ExtractDestinationAlias
_NMRAnetNode_TestStateFlag:
;NMRAnetNode.mpas,478 :: 		begin
;NMRAnetNode.mpas,479 :: 		Result := Node^.State and Flag = Flag;
0x3C90	0x78401A  	MOV.B	[W10], W0
0x3C92	0xFB8080  	ZE	W0, W1
0x3C94	0xFB800B  	ZE	W11, W0
0x3C96	0x608080  	AND	W1, W0, W1
0x3C98	0xFB800B  	ZE	W11, W0
; Result start address is: 2 (W1)
0x3C9A	0xE10800  	CP	W1, W0
0x3C9C	0xEF2002  	CLR	W1
0x3C9E	0x3A0001  	BRA NZ	L__NMRAnetNode_TestStateFlag265
0x3CA0	0xEEA002  	COM	W1
L__NMRAnetNode_TestStateFlag265:
;NMRAnetNode.mpas,480 :: 		end;
0x3CA2	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetNode_TestStateFlag:
0x3CA4	0x060000  	RETURN
; end of _NMRAnetNode_TestStateFlag
_NMRAnetNode_SetMsgFlag:
;NMRAnetNode.mpas,492 :: 		begin
;NMRAnetNode.mpas,493 :: 		Node^.MsgFlags := Node^.MsgFlags or Flag;
0x3C84	0x450176  	ADD	W10, #22, W2
0x3C86	0xFB8092  	ZE	[W2], W1
0x3C88	0xFB800B  	ZE	W11, W0
0x3C8A	0x708000  	IOR	W1, W0, W0
0x3C8C	0x784900  	MOV.B	W0, [W2]
;NMRAnetNode.mpas,494 :: 		end;
L_end_NMRAnetNode_SetMsgFlag:
0x3C8E	0x060000  	RETURN
; end of _NMRAnetNode_SetMsgFlag
_NMRAnetUtilities_ExtractDestinationAliasFlags:
;NMRAnetUtilities.mpas,201 :: 		begin
;NMRAnetUtilities.mpas,202 :: 		Result := 0;
; Result start address is: 8 (W4)
0x3BC6	0xEF2008  	CLR	W4
;NMRAnetUtilities.mpas,203 :: 		if NMRAnetUtilities_IsAddressedMessage(Buffer) then
0x3BC8	0x070051  	RCALL	_NMRAnetUtilities_IsAddressedMessage
0x3BCA	0xE20000  	CP0	W0
0x3BCC	0x32000B  	BRA Z	L__NMRAnetUtilities_ExtractDestinationAliasFlags238
L__NMRAnetUtilities_ExtractDestinationAliasFlags279:
; Result end address is: 8 (W4)
;NMRAnetUtilities.mpas,205 :: 		Result := Buffer^.DataBytes[0] shl 8;
0x3BCE	0x4500E5  	ADD	W10, #5, W1
0x3BD0	0x784011  	MOV.B	[W1], W0
0x3BD2	0xFB8000  	ZE	W0, W0
0x3BD4	0xDD0048  	SL	W0, #8, W0
; Result start address is: 4 (W2)
0x3BD6	0x780100  	MOV	W0, W2
;NMRAnetUtilities.mpas,206 :: 		Result := Result or Buffer^.DataBytes[1];
0x3BD8	0x408061  	ADD	W1, #1, W0
0x3BDA	0xFB8010  	ZE	[W0], W0
; Result start address is: 2 (W1)
0x3BDC	0x710080  	IOR	W2, W0, W1
; Result end address is: 4 (W2)
;NMRAnetUtilities.mpas,207 :: 		Result := Result and $F000;
0x3BDE	0x2F0000  	MOV	#61440, W0
0x3BE0	0x608080  	AND	W1, W0, W1
; Result end address is: 2 (W1)
;NMRAnetUtilities.mpas,208 :: 		end
0x3BE2	0x370001  	BRA	L__NMRAnetUtilities_ExtractDestinationAliasFlags42
L__NMRAnetUtilities_ExtractDestinationAliasFlags238:
;NMRAnetUtilities.mpas,203 :: 		if NMRAnetUtilities_IsAddressedMessage(Buffer) then
0x3BE4	0x780084  	MOV	W4, W1
;NMRAnetUtilities.mpas,208 :: 		end
L__NMRAnetUtilities_ExtractDestinationAliasFlags42:
;NMRAnetUtilities.mpas,209 :: 		end;
; Result start address is: 2 (W1)
0x3BE6	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_ExtractDestinationAliasFlags:
0x3BE8	0x060000  	RETURN
; end of _NMRAnetUtilities_ExtractDestinationAliasFlags
_NMRAnetBufferPools_AllocateBaseBuffer:
;NMRAnetBufferPools.mpas,174 :: 		begin
;NMRAnetBufferPools.mpas,175 :: 		Result := False;
; Result start address is: 2 (W1)
0x3B72	0xEF2002  	CLR	W1
;NMRAnetBufferPools.mpas,176 :: 		for i := 0 to MAX_BASE_BUFFER_POOL - 1 do
; i start address is: 8 (W4)
0x3B74	0xEF2008  	CLR	W4
; i end address is: 8 (W4)
L__NMRAnetBufferPools_AllocateBaseBuffer26:
;NMRAnetBufferPools.mpas,178 :: 		if BaseBufferPool.Pool[i].State = 0 then
; i start address is: 8 (W4)
; Result start address is: 2 (W1)
; Result end address is: 2 (W1)
0x3B76	0x2000A0  	MOV	#10, W0
0x3B78	0xB80104  	MUL.UU	W0, W4, W2
0x3B7A	0x210400  	MOV	#lo_addr(_BaseBufferPool), W0
0x3B7C	0x400002  	ADD	W0, W2, W0
0x3B7E	0x784010  	MOV.B	[W0], W0
0x3B80	0xE10460  	CP.B	W0, #0
0x3B82	0x3A001A  	BRA NZ	L__NMRAnetBufferPools_AllocateBaseBuffer31
L__NMRAnetBufferPools_AllocateBaseBuffer71:
; Result end address is: 2 (W1)
;NMRAnetBufferPools.mpas,180 :: 		Buffer := @BaseBufferPool.Pool[i];
0x3B84	0x2000A0  	MOV	#10, W0
0x3B86	0xB80104  	MUL.UU	W0, W4, W2
; i end address is: 8 (W4)
0x3B88	0x210400  	MOV	#lo_addr(_BaseBufferPool), W0
0x3B8A	0x400D02  	ADD	W0, W2, [W10]
;NMRAnetBufferPools.mpas,182 :: 		NMRAnetBufferPools_InitializeBaseBuffer(Buffer);
0x3B8C	0x781F8A  	PUSH	W10
0x3B8E	0x78051A  	MOV	[W10], W10
0x3B90	0x07EE0C  	RCALL	_NMRAnetBufferPools_InitializeBaseBuffer
0x3B92	0x78054F  	POP	W10
;NMRAnetBufferPools.mpas,183 :: 		Buffer^.State := CBS_ALLOCATED;
0x3B94	0x78009A  	MOV	[W10], W1
0x3B96	0xB3C010  	MOV.B	#1, W0
0x3B98	0x784880  	MOV.B	W0, [W1]
;NMRAnetBufferPools.mpas,184 :: 		Inc(BaseBufferPool.Count);
0x3B9A	0x215550  	MOV	#lo_addr(_BaseBufferPool+1301), W0
0x3B9C	0xFB8010  	ZE	[W0], W0
0x3B9E	0x4000E1  	ADD	W0, #1, W1
0x3BA0	0x215550  	MOV	#lo_addr(_BaseBufferPool+1301), W0
0x3BA2	0x784801  	MOV.B	W1, [W0]
;NMRAnetBufferPools.mpas,185 :: 		if BaseBufferPool.Count >= BaseBufferPool.MaxCount then
0x3BA4	0x215550  	MOV	#lo_addr(_BaseBufferPool+1301), W0
0x3BA6	0x784090  	MOV.B	[W0], W1
0x3BA8	0x215540  	MOV	#lo_addr(_BaseBufferPool+1300), W0
0x3BAA	0xE10C10  	CP.B	W1, [W0]
0x3BAC	0x390003  	BRA LTU	L__NMRAnetBufferPools_AllocateBaseBuffer34
L__NMRAnetBufferPools_AllocateBaseBuffer72:
;NMRAnetBufferPools.mpas,186 :: 		BaseBufferPool.MaxCount := BaseBufferPool.Count;
0x3BAE	0x215541  	MOV	#lo_addr(_BaseBufferPool+1300), W1
0x3BB0	0x215550  	MOV	#lo_addr(_BaseBufferPool+1301), W0
0x3BB2	0x784890  	MOV.B	[W0], [W1]
L__NMRAnetBufferPools_AllocateBaseBuffer34:
;NMRAnetBufferPools.mpas,187 :: 		Result := True;
; Result start address is: 2 (W1)
0x3BB4	0x2FFFF1  	MOV	#65535, W1
;NMRAnetBufferPools.mpas,189 :: 		Break
0x3BB6	0x370005  	BRA	L__NMRAnetBufferPools_AllocateBaseBuffer29
;NMRAnetBufferPools.mpas,190 :: 		end
L__NMRAnetBufferPools_AllocateBaseBuffer31:
;NMRAnetBufferPools.mpas,191 :: 		end;
; i start address is: 8 (W4)
0x3BB8	0x200810  	MOV	#129, W0
0x3BBA	0xE12000  	CP	W4, W0
0x3BBC	0x320002  	BRA Z	L__NMRAnetBufferPools_AllocateBaseBuffer59
L__NMRAnetBufferPools_AllocateBaseBuffer73:
; i start address is: 8 (W4)
0x3BBE	0xEC2008  	INC	W4
; i end address is: 8 (W4)
; i end address is: 8 (W4)
; Result end address is: 2 (W1)
0x3BC0	0x37FFDA  	BRA	L__NMRAnetBufferPools_AllocateBaseBuffer26
L__NMRAnetBufferPools_AllocateBaseBuffer59:
L__NMRAnetBufferPools_AllocateBaseBuffer29:
;NMRAnetBufferPools.mpas,193 :: 		end;
; Result start address is: 2 (W1)
0x3BC2	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetBufferPools_AllocateBaseBuffer:
0x3BC4	0x060000  	RETURN
; end of _NMRAnetBufferPools_AllocateBaseBuffer
_NMRAnetUtilities_BaseBufferLink:
;NMRAnetUtilities.mpas,711 :: 		begin
;NMRAnetUtilities.mpas,712 :: 		if Node^.BaseBuffers = nil then
0x3C22	0x45007A  	ADD	W10, #26, W0
0x3C24	0x780010  	MOV	[W0], W0
0x3C26	0xE10060  	CP	W0, #0
0x3C28	0x3A0003  	BRA NZ	L__NMRAnetUtilities_BaseBufferLink134
L__NMRAnetUtilities_BaseBufferLink369:
;NMRAnetUtilities.mpas,713 :: 		Node^.BaseBuffers := Buffer
0x3C2A	0x45007A  	ADD	W10, #26, W0
0x3C2C	0x78080B  	MOV	W11, [W0]
0x3C2E	0x37000B  	BRA	L__NMRAnetUtilities_BaseBufferLink135
;NMRAnetUtilities.mpas,714 :: 		else begin                                  // Tack it to the end of the chain
L__NMRAnetUtilities_BaseBufferLink134:
;NMRAnetUtilities.mpas,715 :: 		Temp := Node^.BaseBuffers;
0x3C30	0x45007A  	ADD	W10, #26, W0
; Temp start address is: 2 (W1)
0x3C32	0x780090  	MOV	[W0], W1
; Temp end address is: 2 (W1)
;NMRAnetUtilities.mpas,716 :: 		while Temp^.Next <> nil do
L__NMRAnetUtilities_BaseBufferLink137:
; Temp start address is: 2 (W1)
0x3C34	0x408064  	ADD	W1, #4, W0
0x3C36	0x780010  	MOV	[W0], W0
0x3C38	0xE10060  	CP	W0, #0
0x3C3A	0x320003  	BRA Z	L__NMRAnetUtilities_BaseBufferLink138
L__NMRAnetUtilities_BaseBufferLink370:
;NMRAnetUtilities.mpas,717 :: 		Temp := Temp^.Next;
0x3C3C	0x408064  	ADD	W1, #4, W0
0x3C3E	0x780090  	MOV	[W0], W1
0x3C40	0x37FFF9  	BRA	L__NMRAnetUtilities_BaseBufferLink137
L__NMRAnetUtilities_BaseBufferLink138:
;NMRAnetUtilities.mpas,718 :: 		Temp^.Next := Buffer
0x3C42	0x408064  	ADD	W1, #4, W0
; Temp end address is: 2 (W1)
0x3C44	0x78080B  	MOV	W11, [W0]
;NMRAnetUtilities.mpas,719 :: 		end
L__NMRAnetUtilities_BaseBufferLink135:
;NMRAnetUtilities.mpas,720 :: 		end;
L_end_NMRAnetUtilities_BaseBufferLink:
0x3C46	0x060000  	RETURN
; end of _NMRAnetUtilities_BaseBufferLink
_AppCallback_EventsIdentifyByDest:
;NMRAnetAppCallbacks.mpas,346 :: 		begin
;NMRAnetAppCallbacks.mpas,347 :: 		Result := True;                                                               // We handled it
0x3BEA	0x781F8B  	PUSH	W11
; Result start address is: 14 (W7)
0x3BEC	0x2FFFF7  	MOV	#65535, W7
;NMRAnetAppCallbacks.mpas,348 :: 		NMRAnetNode_SetConsumerEventFlags(Node, EVENT_STATE_UNKOWN);                  // Consumers are eaay.
0x3BEE	0xB3C03B  	MOV.B	#3, W11
0x3BF0	0x07E8DE  	RCALL	_NMRAnetNode_SetConsumerEventFlags
;NMRAnetAppCallbacks.mpas,350 :: 		if NMRAnetNode_TestStateFlag(Node, NS_VIRTUAL) then
0x3BF2	0xB3C08B  	MOV.B	#8, W11
0x3BF4	0x07004D  	RCALL	_NMRAnetNode_TestStateFlag
0x3BF6	0xE20000  	CP0	W0
0x3BF8	0x32000C  	BRA Z	L__AppCallback_EventsIdentifyByDest92
L__AppCallback_EventsIdentifyByDest220:
;NMRAnetAppCallbacks.mpas,352 :: 		for ProducerIndex := 0 to MAX_VNODE_SUPPORTED_EVENTS_PRODUCED - 1 do        // Producers take some work
; ProducerIndex start address is: 0 (W0)
0x3BFA	0xEF2000  	CLR	W0
; ProducerIndex end address is: 0 (W0)
; Result end address is: 14 (W7)
0x3BFC	0x780300  	MOV	W0, W6
L__AppCallback_EventsIdentifyByDest95:
;NMRAnetAppCallbacks.mpas,353 :: 		SetProxyNodeProducerFlags(Node, ProducerIndex);
; ProducerIndex start address is: 12 (W6)
; Result start address is: 14 (W7)
0x3BFE	0x780586  	MOV	W6, W11
0x3C00	0x07E8B0  	RCALL	NMRAnetAppCallbacks_SetProxyNodeProducerFlags
0x3C02	0xE13062  	CP	W6, #2
0x3C04	0x320002  	BRA Z	L__AppCallback_EventsIdentifyByDest98
L__AppCallback_EventsIdentifyByDest221:
; ProducerIndex start address is: 12 (W6)
0x3C06	0xEC200C  	INC	W6
; ProducerIndex end address is: 12 (W6)
; ProducerIndex end address is: 12 (W6)
0x3C08	0x37FFFA  	BRA	L__AppCallback_EventsIdentifyByDest95
L__AppCallback_EventsIdentifyByDest98:
;NMRAnetAppCallbacks.mpas,354 :: 		SetProxyNodeDccAddressFlags(Node, nil);
0x3C0A	0xEF2016  	CLR	W11
0x3C0C	0x07E910  	RCALL	NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags
;NMRAnetAppCallbacks.mpas,355 :: 		end else
0x3C0E	0x780087  	MOV	W7, W1
0x3C10	0x370005  	BRA	L__AppCallback_EventsIdentifyByDest93
L__AppCallback_EventsIdentifyByDest92:
;NMRAnetAppCallbacks.mpas,357 :: 		NMRAnetNode_SetProducerEventFlags(Node, EVENT_STATE_UNKOWN);
0x3C12	0xB3C03B  	MOV.B	#3, W11
0x3C14	0x07E8EC  	RCALL	_NMRAnetNode_SetProducerEventFlags
;NMRAnetAppCallbacks.mpas,358 :: 		NMRAnetNode_SetConsumerEventFlags(Node, EVENT_STATE_UNKOWN);
0x3C16	0xB3C03B  	MOV.B	#3, W11
0x3C18	0x07E8CA  	RCALL	_NMRAnetNode_SetConsumerEventFlags
; Result end address is: 14 (W7)
0x3C1A	0x780087  	MOV	W7, W1
;NMRAnetAppCallbacks.mpas,359 :: 		end;
L__AppCallback_EventsIdentifyByDest93:
;NMRAnetAppCallbacks.mpas,360 :: 		end;
; Result start address is: 2 (W1)
0x3C1C	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_AppCallback_EventsIdentifyByDest:
0x3C1E	0x7805CF  	POP	W11
0x3C20	0x060000  	RETURN
; end of _AppCallback_EventsIdentifyByDest
_NMRAnetNode_SetConsumerEventFlags:
;NMRAnetNode.mpas,694 :: 		begin
;NMRAnetNode.mpas,697 :: 		if NMRAnetNode_TestStateFlag(Node, NS_VIRTUAL) then
0x0DAE	0x781F8C  	PUSH	W12
0x0DB0	0x781F8B  	PUSH	W11
0x0DB2	0xB3C08B  	MOV.B	#8, W11
0x0DB4	0x07176D  	RCALL	_NMRAnetNode_TestStateFlag
0x0DB6	0x7805CF  	POP	W11
0x0DB8	0xE20000  	CP0	W0
0x0DBA	0x32000C  	BRA Z	L__NMRAnetNode_SetConsumerEventFlags165
L__NMRAnetNode_SetConsumerEventFlags288:
;NMRAnetNode.mpas,699 :: 		for i := 0 to MAX_VNODE_SUPPORTED_EVENTS_CONSUMED - 1 do
; i start address is: 0 (W0)
0x0DBC	0xEF2000  	CLR	W0
; i end address is: 0 (W0)
0x0DBE	0x780300  	MOV	W0, W6
L__NMRAnetNode_SetConsumerEventFlags168:
;NMRAnetNode.mpas,700 :: 		NMRAnetNode_SetConsumerEventFlag(Node, i, State);
; i start address is: 12 (W6)
0x0DC0	0x781F8B  	PUSH	W11
0x0DC2	0x78460B  	MOV.B	W11, W12
0x0DC4	0x780586  	MOV	W6, W11
0x0DC6	0x07FB98  	RCALL	_NMRAnetNode_SetConsumerEventFlag
0x0DC8	0x7805CF  	POP	W11
0x0DCA	0xE13060  	CP	W6, #0
0x0DCC	0x320002  	BRA Z	L__NMRAnetNode_SetConsumerEventFlags171
L__NMRAnetNode_SetConsumerEventFlags289:
; i start address is: 12 (W6)
0x0DCE	0xEC200C  	INC	W6
; i end address is: 12 (W6)
; i end address is: 12 (W6)
0x0DD0	0x37FFF7  	BRA	L__NMRAnetNode_SetConsumerEventFlags168
L__NMRAnetNode_SetConsumerEventFlags171:
;NMRAnetNode.mpas,701 :: 		end else
0x0DD2	0x37000B  	BRA	L__NMRAnetNode_SetConsumerEventFlags166
L__NMRAnetNode_SetConsumerEventFlags165:
;NMRAnetNode.mpas,704 :: 		for i := 0 to MAX_SUPPORTED_EVENTS_CONSUMED - 1 do
; i start address is: 0 (W0)
0x0DD4	0xEF2000  	CLR	W0
; i end address is: 0 (W0)
0x0DD6	0x780300  	MOV	W0, W6
L__NMRAnetNode_SetConsumerEventFlags173:
;NMRAnetNode.mpas,705 :: 		NMRAnetNode_SetConsumerEventFlag(Node, i, State);
; i start address is: 12 (W6)
0x0DD8	0x781F8B  	PUSH	W11
0x0DDA	0x78460B  	MOV.B	W11, W12
0x0DDC	0x780586  	MOV	W6, W11
0x0DDE	0x07FB8C  	RCALL	_NMRAnetNode_SetConsumerEventFlag
0x0DE0	0x7805CF  	POP	W11
0x0DE2	0xE13060  	CP	W6, #0
0x0DE4	0x320002  	BRA Z	L__NMRAnetNode_SetConsumerEventFlags176
L__NMRAnetNode_SetConsumerEventFlags290:
; i start address is: 12 (W6)
0x0DE6	0xEC200C  	INC	W6
; i end address is: 12 (W6)
; i end address is: 12 (W6)
0x0DE8	0x37FFF7  	BRA	L__NMRAnetNode_SetConsumerEventFlags173
L__NMRAnetNode_SetConsumerEventFlags176:
;NMRAnetNode.mpas,706 :: 		end
L__NMRAnetNode_SetConsumerEventFlags166:
;NMRAnetNode.mpas,708 :: 		end;
L_end_NMRAnetNode_SetConsumerEventFlags:
0x0DEA	0x78064F  	POP	W12
0x0DEC	0x060000  	RETURN
; end of _NMRAnetNode_SetConsumerEventFlags
_NMRAnetNode_SetConsumerEventFlag:
;NMRAnetNode.mpas,724 :: 		begin
;NMRAnetNode.mpas,726 :: 		ByteOffset := EventIndex div 4;    // There are 4 Events supported in each Byte
0x04F8	0xDED842  	ASR	W11, #2, W0
; ByteOffset start address is: 8 (W4)
0x04FA	0x780200  	MOV	W0, W4
;NMRAnetNode.mpas,727 :: 		EventOffset := EventIndex mod 4;   // There are
0x04FC	0x200042  	MOV	#4, W2
0x04FE	0x090011  	REPEAT	#17
0x0500	0xD80582  	DIV.S	W11, W2
0x0502	0x780001  	MOV	W1, W0
; EventOffset start address is: 10 (W5)
0x0504	0x780280  	MOV	W0, W5
;NMRAnetNode.mpas,728 :: 		Mask := %00000011;
; Mask start address is: 4 (W2)
0x0506	0xB3C032  	MOV.B	#3, W2
;NMRAnetNode.mpas,729 :: 		Mask := Mask shl (EventOffset * 2);  // 2 bits per event
0x0508	0xDD00C1  	SL	W0, #1, W1
0x050A	0xFB8002  	ZE	W2, W0
; Mask end address is: 4 (W2)
0x050C	0xDD0001  	SL	W0, W1, W0
;NMRAnetNode.mpas,730 :: 		Mask := not Mask;
0x050E	0xEAC180  	COM.B	W0, W3
;NMRAnetNode.mpas,731 :: 		Node^.EventsConsumedFlags[ByteOffset] := Node^.EventsConsumedFlags[ByteOffset] and Mask;
0x0510	0x450078  	ADD	W10, #24, W0
0x0512	0x400104  	ADD	W0, W4, W2
0x0514	0xFB8092  	ZE	[W2], W1
0x0516	0xFB8003  	ZE	W3, W0
0x0518	0x608000  	AND	W1, W0, W0
0x051A	0x784900  	MOV.B	W0, [W2]
;NMRAnetNode.mpas,732 :: 		Mask := State shl (EventOffset * 2);
0x051C	0xDD28C1  	SL	W5, #1, W1
; EventOffset end address is: 10 (W5)
0x051E	0xFB800C  	ZE	W12, W0
0x0520	0xDD0181  	SL	W0, W1, W3
;NMRAnetNode.mpas,733 :: 		Node^.EventsConsumedFlags[ByteOffset] := Node^.EventsConsumedFlags[ByteOffset] or Mask;
0x0522	0x450078  	ADD	W10, #24, W0
0x0524	0x400104  	ADD	W0, W4, W2
; ByteOffset end address is: 8 (W4)
0x0526	0xFB8092  	ZE	[W2], W1
0x0528	0xFB8003  	ZE	W3, W0
0x052A	0x708000  	IOR	W1, W0, W0
0x052C	0x784900  	MOV.B	W0, [W2]
;NMRAnetNode.mpas,735 :: 		end;
L_end_NMRAnetNode_SetConsumerEventFlag:
0x052E	0x060000  	RETURN
; end of _NMRAnetNode_SetConsumerEventFlag
NMRAnetAppCallbacks_SetProxyNodeProducerFlags:
;NMRAnetAppCallbacks.mpas,257 :: 		begin
;NMRAnetAppCallbacks.mpas,260 :: 		EVENT_TRAIN_INDEX           : NMRAnetNode_SetProducerEventFlag(Node, EventIndex, EVENT_STATE_VALID);
0x0D62	0x781F8C  	PUSH	W12
0x0D64	0xE15860  	CP	W11, #0
0x0D66	0x3A0003  	BRA NZ	L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags47
L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags202:
0x0D68	0xB3C01C  	MOV.B	#1, W12
0x0D6A	0x07FB80  	RCALL	_NMRAnetNode_SetProducerEventFlag
0x0D6C	0x37001E  	BRA	L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags44
L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags47:
;NMRAnetAppCallbacks.mpas,261 :: 		EVENT_TRAIN_DCC_IDLE_INDEX  : begin
0x0D6E	0xE15861  	CP	W11, #1
0x0D70	0x3A000C  	BRA NZ	L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags50
L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags203:
;NMRAnetAppCallbacks.mpas,262 :: 		if GetProxyData(Node)^.State and PS_ALLOCATED = PS_ALLOCATED then
0x0D72	0x07FB57  	RCALL	_GetProxyData
0x0D74	0x784010  	MOV.B	[W0], W0
0x0D76	0xFB8000  	ZE	W0, W0
0x0D78	0x600061  	AND	W0, #1, W0
0x0D7A	0xE10061  	CP	W0, #1
0x0D7C	0x3A0003  	BRA NZ	L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags52
L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags204:
;NMRAnetAppCallbacks.mpas,263 :: 		NMRAnetNode_SetProducerEventFlag(Node, EventIndex, EVENT_STATE_INVALID)
0x0D7E	0xB3C02C  	MOV.B	#2, W12
0x0D80	0x07FB75  	RCALL	_NMRAnetNode_SetProducerEventFlag
0x0D82	0x370002  	BRA	L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags53
;NMRAnetAppCallbacks.mpas,264 :: 		else
L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags52:
;NMRAnetAppCallbacks.mpas,265 :: 		NMRAnetNode_SetProducerEventFlag(Node, EventIndex, EVENT_STATE_VALID);
0x0D84	0xB3C01C  	MOV.B	#1, W12
0x0D86	0x07FB72  	RCALL	_NMRAnetNode_SetProducerEventFlag
L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags53:
;NMRAnetAppCallbacks.mpas,266 :: 		end;
0x0D88	0x370010  	BRA	L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags44
L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags50:
;NMRAnetAppCallbacks.mpas,267 :: 		EVENT_TRAIN_DCC_INUSE_INDEX : begin
0x0D8A	0xE15862  	CP	W11, #2
0x0D8C	0x3A000C  	BRA NZ	L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags56
L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags205:
;NMRAnetAppCallbacks.mpas,268 :: 		if GetProxyData(Node)^.State and PS_ALLOCATED = PS_ALLOCATED then
0x0D8E	0x07FB49  	RCALL	_GetProxyData
0x0D90	0x784010  	MOV.B	[W0], W0
0x0D92	0xFB8000  	ZE	W0, W0
0x0D94	0x600061  	AND	W0, #1, W0
0x0D96	0xE10061  	CP	W0, #1
0x0D98	0x3A0003  	BRA NZ	L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags58
L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags206:
;NMRAnetAppCallbacks.mpas,269 :: 		NMRAnetNode_SetProducerEventFlag(Node, EventIndex, EVENT_STATE_VALID)
0x0D9A	0xB3C01C  	MOV.B	#1, W12
0x0D9C	0x07FB67  	RCALL	_NMRAnetNode_SetProducerEventFlag
0x0D9E	0x370002  	BRA	L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags59
;NMRAnetAppCallbacks.mpas,270 :: 		else
L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags58:
;NMRAnetAppCallbacks.mpas,271 :: 		NMRAnetNode_SetProducerEventFlag(Node, EventIndex, EVENT_STATE_INVALID);
0x0DA0	0xB3C02C  	MOV.B	#2, W12
0x0DA2	0x07FB64  	RCALL	_NMRAnetNode_SetProducerEventFlag
L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags59:
;NMRAnetAppCallbacks.mpas,273 :: 		else
0x0DA4	0x370002  	BRA	L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags44
L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags56:
;NMRAnetAppCallbacks.mpas,274 :: 		NMRAnetNode_SetProducerEventFlag(Node, EventIndex, EVENT_STATE_UNKOWN);
0x0DA6	0xB3C03C  	MOV.B	#3, W12
0x0DA8	0x07FB61  	RCALL	_NMRAnetNode_SetProducerEventFlag
L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags44:
;NMRAnetAppCallbacks.mpas,276 :: 		end;
L_end_SetProxyNodeProducerFlags:
0x0DAA	0x78064F  	POP	W12
0x0DAC	0x060000  	RETURN
; end of NMRAnetAppCallbacks_SetProxyNodeProducerFlags
_NMRAnetNode_SetProducerEventFlag:
;NMRAnetNode.mpas,583 :: 		begin
;NMRAnetNode.mpas,585 :: 		ByteOffset := EventIndex div 4;    // There are 4 Events supported in each Byte
0x046C	0xDED842  	ASR	W11, #2, W0
; ByteOffset start address is: 8 (W4)
0x046E	0x780200  	MOV	W0, W4
;NMRAnetNode.mpas,586 :: 		EventOffset := EventIndex mod 4;   // There are
0x0470	0x200042  	MOV	#4, W2
0x0472	0x090011  	REPEAT	#17
0x0474	0xD80582  	DIV.S	W11, W2
0x0476	0x780001  	MOV	W1, W0
; EventOffset start address is: 10 (W5)
0x0478	0x780280  	MOV	W0, W5
;NMRAnetNode.mpas,587 :: 		Mask := %00000011;
; Mask start address is: 4 (W2)
0x047A	0xB3C032  	MOV.B	#3, W2
;NMRAnetNode.mpas,588 :: 		Mask := Mask shl (EventOffset * 2);  // 2 bits per event
0x047C	0xDD00C1  	SL	W0, #1, W1
0x047E	0xFB8002  	ZE	W2, W0
; Mask end address is: 4 (W2)
0x0480	0xDD0001  	SL	W0, W1, W0
;NMRAnetNode.mpas,589 :: 		Mask := not Mask;
0x0482	0xEAC180  	COM.B	W0, W3
;NMRAnetNode.mpas,590 :: 		Node^.EventsProducedFlags[ByteOffset] := Node^.EventsProducedFlags[ByteOffset] and Mask;  // Clear it
0x0484	0x450077  	ADD	W10, #23, W0
0x0486	0x400104  	ADD	W0, W4, W2
0x0488	0xFB8092  	ZE	[W2], W1
0x048A	0xFB8003  	ZE	W3, W0
0x048C	0x608000  	AND	W1, W0, W0
0x048E	0x784900  	MOV.B	W0, [W2]
;NMRAnetNode.mpas,591 :: 		Mask := State shl (EventOffset * 2);
0x0490	0xDD28C1  	SL	W5, #1, W1
; EventOffset end address is: 10 (W5)
0x0492	0xFB800C  	ZE	W12, W0
0x0494	0xDD0181  	SL	W0, W1, W3
;NMRAnetNode.mpas,592 :: 		Node^.EventsProducedFlags[ByteOffset] := Node^.EventsProducedFlags[ByteOffset] or Mask;  // Set it to the State
0x0496	0x450077  	ADD	W10, #23, W0
0x0498	0x400104  	ADD	W0, W4, W2
; ByteOffset end address is: 8 (W4)
0x049A	0xFB8092  	ZE	[W2], W1
0x049C	0xFB8003  	ZE	W3, W0
0x049E	0x708000  	IOR	W1, W0, W0
0x04A0	0x784900  	MOV.B	W0, [W2]
;NMRAnetNode.mpas,594 :: 		end;
L_end_NMRAnetNode_SetProducerEventFlag:
0x04A2	0x060000  	RETURN
; end of _NMRAnetNode_SetProducerEventFlag
NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags:
;NMRAnetAppCallbacks.mpas,236 :: 		begin
;NMRAnetAppCallbacks.mpas,237 :: 		TestForSetFlag := True;
; TestForSetFlag start address is: 0 (W0)
0x0E2E	0x2FFFF0  	MOV	#65535, W0
;NMRAnetAppCallbacks.mpas,238 :: 		if Event <> nil then
0x0E30	0xE15860  	CP	W11, #0
0x0E32	0x32000D  	BRA Z	L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags179
L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags195:
; TestForSetFlag end address is: 0 (W0)
;NMRAnetAppCallbacks.mpas,239 :: 		TestForSetFlag := (Event^[0] = $06) and (Event^[1] = $01);
0x0E34	0x78401B  	MOV.B	[W11], W0
0x0E36	0xE10466  	CP.B	W0, #6
0x0E38	0xEF2002  	CLR	W1
0x0E3A	0x3A0001  	BRA NZ	L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags196
0x0E3C	0xEEA002  	COM	W1
L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags196:
0x0E3E	0x458061  	ADD	W11, #1, W0
0x0E40	0x784010  	MOV.B	[W0], W0
0x0E42	0xE10461  	CP.B	W0, #1
0x0E44	0xEF2000  	CLR	W0
0x0E46	0x3A0001  	BRA NZ	L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags197
0x0E48	0xEEA000  	COM	W0
L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags197:
; TestForSetFlag start address is: 0 (W0)
0x0E4A	0x608000  	AND	W1, W0, W0
; TestForSetFlag end address is: 0 (W0)
0x0E4C	0x370000  	BRA	L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags32
L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags179:
;NMRAnetAppCallbacks.mpas,238 :: 		if Event <> nil then
;NMRAnetAppCallbacks.mpas,239 :: 		TestForSetFlag := (Event^[0] = $06) and (Event^[1] = $01);
L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags32:
;NMRAnetAppCallbacks.mpas,241 :: 		if TestForSetFlag then
; TestForSetFlag start address is: 0 (W0)
0x0E4E	0xE20000  	CP0	W0
0x0E50	0x320016  	BRA Z	L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags35
L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags198:
; TestForSetFlag end address is: 0 (W0)
;NMRAnetAppCallbacks.mpas,243 :: 		ProxyData := GetProxyData(Node);
0x0E52	0x07FAE7  	RCALL	_GetProxyData
; ProxyData start address is: 4 (W2)
0x0E54	0x780100  	MOV	W0, W2
;NMRAnetAppCallbacks.mpas,244 :: 		if ProxyData^.State and PS_ALLOCATED = PS_ALLOCATED then
0x0E56	0x784010  	MOV.B	[W0], W0
0x0E58	0xFB8000  	ZE	W0, W0
0x0E5A	0x600061  	AND	W0, #1, W0
0x0E5C	0xE10061  	CP	W0, #1
0x0E5E	0x3A000F  	BRA NZ	L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags38
L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags199:
;NMRAnetAppCallbacks.mpas,246 :: 		Address := (Event^[4] shl 8) or Event^[5];
0x0E60	0x458064  	ADD	W11, #4, W0
0x0E62	0x784010  	MOV.B	[W0], W0
0x0E64	0xFB8000  	ZE	W0, W0
0x0E66	0xDD00C8  	SL	W0, #8, W1
0x0E68	0x458065  	ADD	W11, #5, W0
0x0E6A	0xFB8010  	ZE	[W0], W0
0x0E6C	0x708080  	IOR	W1, W0, W1
;NMRAnetAppCallbacks.mpas,247 :: 		if ProxyData^.Address = Address then
0x0E6E	0x410068  	ADD	W2, #8, W0
0x0E70	0x780010  	MOV	[W0], W0
0x0E72	0xE10001  	CP	W0, W1
0x0E74	0x3A0004  	BRA NZ	L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags41
L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags200:
;NMRAnetAppCallbacks.mpas,248 :: 		ProxyData^.MsgFlags := ProxyData^.MsgFlags or MSG_DCC_ADDRESS_ALLOCATED;
0x0E76	0x4100E1  	ADD	W2, #1, W1
; ProxyData end address is: 4 (W2)
0x0E78	0xFB8011  	ZE	[W1], W0
0x0E7A	0x700061  	IOR	W0, #1, W0
0x0E7C	0x784880  	MOV.B	W0, [W1]
L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags41:
;NMRAnetAppCallbacks.mpas,249 :: 		end
L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags38:
;NMRAnetAppCallbacks.mpas,250 :: 		end
L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags35:
;NMRAnetAppCallbacks.mpas,251 :: 		end;
L_end_SetProxyNodeDccAddressFlags:
0x0E7E	0x060000  	RETURN
; end of NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags
_NMRAnetNode_SetProducerEventFlags:
;NMRAnetNode.mpas,553 :: 		begin
;NMRAnetNode.mpas,556 :: 		if NMRAnetNode_TestStateFlag(Node, NS_VIRTUAL) then
0x0DEE	0x781F8C  	PUSH	W12
0x0DF0	0x781F8B  	PUSH	W11
0x0DF2	0xB3C08B  	MOV.B	#8, W11
0x0DF4	0x07174D  	RCALL	_NMRAnetNode_TestStateFlag
0x0DF6	0x7805CF  	POP	W11
0x0DF8	0xE20000  	CP0	W0
0x0DFA	0x32000C  	BRA Z	L__NMRAnetNode_SetProducerEventFlags118
L__NMRAnetNode_SetProducerEventFlags273:
;NMRAnetNode.mpas,558 :: 		for i := 0 to MAX_VNODE_SUPPORTED_EVENTS_PRODUCED - 1 do
; i start address is: 0 (W0)
0x0DFC	0xEF2000  	CLR	W0
; i end address is: 0 (W0)
0x0DFE	0x780300  	MOV	W0, W6
L__NMRAnetNode_SetProducerEventFlags121:
;NMRAnetNode.mpas,559 :: 		NMRAnetNode_SetProducerEventFlag(Node, i, State);
; i start address is: 12 (W6)
0x0E00	0x781F8B  	PUSH	W11
0x0E02	0x78460B  	MOV.B	W11, W12
0x0E04	0x780586  	MOV	W6, W11
0x0E06	0x07FB32  	RCALL	_NMRAnetNode_SetProducerEventFlag
0x0E08	0x7805CF  	POP	W11
0x0E0A	0xE13062  	CP	W6, #2
0x0E0C	0x320002  	BRA Z	L__NMRAnetNode_SetProducerEventFlags124
L__NMRAnetNode_SetProducerEventFlags274:
; i start address is: 12 (W6)
0x0E0E	0xEC200C  	INC	W6
; i end address is: 12 (W6)
; i end address is: 12 (W6)
0x0E10	0x37FFF7  	BRA	L__NMRAnetNode_SetProducerEventFlags121
L__NMRAnetNode_SetProducerEventFlags124:
;NMRAnetNode.mpas,560 :: 		end else
0x0E12	0x37000B  	BRA	L__NMRAnetNode_SetProducerEventFlags119
L__NMRAnetNode_SetProducerEventFlags118:
;NMRAnetNode.mpas,563 :: 		for i := 0 to MAX_SUPPORTED_EVENTS_PRODUCED - 1 do
; i start address is: 0 (W0)
0x0E14	0xEF2000  	CLR	W0
; i end address is: 0 (W0)
0x0E16	0x780300  	MOV	W0, W6
L__NMRAnetNode_SetProducerEventFlags126:
;NMRAnetNode.mpas,564 :: 		NMRAnetNode_SetProducerEventFlag(Node, i, State);
; i start address is: 12 (W6)
0x0E18	0x781F8B  	PUSH	W11
0x0E1A	0x78460B  	MOV.B	W11, W12
0x0E1C	0x780586  	MOV	W6, W11
0x0E1E	0x07FB26  	RCALL	_NMRAnetNode_SetProducerEventFlag
0x0E20	0x7805CF  	POP	W11
0x0E22	0xE13061  	CP	W6, #1
0x0E24	0x320002  	BRA Z	L__NMRAnetNode_SetProducerEventFlags129
L__NMRAnetNode_SetProducerEventFlags275:
; i start address is: 12 (W6)
0x0E26	0xEC200C  	INC	W6
; i end address is: 12 (W6)
; i end address is: 12 (W6)
0x0E28	0x37FFF7  	BRA	L__NMRAnetNode_SetProducerEventFlags126
L__NMRAnetNode_SetProducerEventFlags129:
;NMRAnetNode.mpas,565 :: 		end
L__NMRAnetNode_SetProducerEventFlags119:
;NMRAnetNode.mpas,567 :: 		end;
L_end_NMRAnetNode_SetProducerEventFlags:
0x0E2A	0x78064F  	POP	W12
0x0E2C	0x060000  	RETURN
; end of _NMRAnetNode_SetProducerEventFlags
_NMRAnetUtilities_FindInDatagramByState:
0x1C62	0xFA0000  	LNK	#0
;NMRAnetUtilities.mpas,815 :: 		begin
;NMRAnetUtilities.mpas,816 :: 		Result := False;
; AnyBit start address is: 6 (W3)
0x1C64	0x97B9CE  	MOV	[W14-8], W3
; Result start address is: 4 (W2)
0x1C66	0xEF2004  	CLR	W2
;NMRAnetUtilities.mpas,817 :: 		Temp := Node^.DatagramBuffers;
0x1C68	0x45007C  	ADD	W10, #28, W0
; Temp start address is: 8 (W4)
0x1C6A	0x780210  	MOV	[W0], W4
; Result end address is: 4 (W2)
; Temp end address is: 8 (W4)
;NMRAnetUtilities.mpas,818 :: 		while Temp <> nil do
L__NMRAnetUtilities_FindInDatagramByState182:
; Temp start address is: 8 (W4)
; Result start address is: 4 (W2)
; AnyBit start address is: 6 (W3)
; AnyBit end address is: 6 (W3)
0x1C6C	0xE12060  	CP	W4, #0
0x1C6E	0x32001D  	BRA Z	L__NMRAnetUtilities_FindInDatagramByState241
L__NMRAnetUtilities_FindInDatagramByState389:
; AnyBit end address is: 6 (W3)
;NMRAnetUtilities.mpas,820 :: 		if Temp^.Alias = Alias then
; AnyBit start address is: 6 (W3)
0x1C70	0x420062  	ADD	W4, #2, W0
0x1C72	0x780010  	MOV	[W0], W0
0x1C74	0xE1000B  	CP	W0, W11
0x1C76	0x3A0016  	BRA NZ	L__NMRAnetUtilities_FindInDatagramByState187
L__NMRAnetUtilities_FindInDatagramByState390:
;NMRAnetUtilities.mpas,822 :: 		if AnyBit then
0x1C78	0xE20006  	CP0	W3
0x1C7A	0x32000A  	BRA Z	L__NMRAnetUtilities_FindInDatagramByState190
L__NMRAnetUtilities_FindInDatagramByState391:
;NMRAnetUtilities.mpas,824 :: 		if Temp^.State and AState <> 0 then                                     // Test if any bit is set
0x1C7C	0x784014  	MOV.B	[W4], W0
0x1C7E	0xFB8080  	ZE	W0, W1
0x1C80	0xFB800D  	ZE	W13, W0
0x1C82	0x608000  	AND	W1, W0, W0
0x1C84	0xE10060  	CP	W0, #0
0x1C86	0x320003  	BRA Z	L__NMRAnetUtilities_FindInDatagramByState193
L__NMRAnetUtilities_FindInDatagramByState392:
; Result end address is: 4 (W2)
; AnyBit end address is: 6 (W3)
;NMRAnetUtilities.mpas,826 :: 		Buffer := Temp;
0x1C88	0x780E04  	MOV	W4, [W12]
; Temp end address is: 8 (W4)
;NMRAnetUtilities.mpas,827 :: 		Result := True;
; Result start address is: 2 (W1)
0x1C8A	0x2FFFF1  	MOV	#65535, W1
;NMRAnetUtilities.mpas,828 :: 		Break
; Result end address is: 2 (W1)
0x1C8C	0x37000F  	BRA	L__NMRAnetUtilities_FindInDatagramByState183
;NMRAnetUtilities.mpas,829 :: 		end;
L__NMRAnetUtilities_FindInDatagramByState193:
;NMRAnetUtilities.mpas,830 :: 		end else
; Temp start address is: 8 (W4)
; AnyBit start address is: 6 (W3)
; Result start address is: 4 (W2)
0x1C8E	0x37000A  	BRA	L__NMRAnetUtilities_FindInDatagramByState191
L__NMRAnetUtilities_FindInDatagramByState190:
;NMRAnetUtilities.mpas,832 :: 		if Temp^.State and AState = AState then                                 // Test for and exact match for the State bits
0x1C90	0x784014  	MOV.B	[W4], W0
0x1C92	0xFB8080  	ZE	W0, W1
0x1C94	0xFB800D  	ZE	W13, W0
0x1C96	0x608080  	AND	W1, W0, W1
0x1C98	0xFB800D  	ZE	W13, W0
0x1C9A	0xE10800  	CP	W1, W0
0x1C9C	0x3A0003  	BRA NZ	L__NMRAnetUtilities_FindInDatagramByState196
L__NMRAnetUtilities_FindInDatagramByState393:
; Result end address is: 4 (W2)
; AnyBit end address is: 6 (W3)
;NMRAnetUtilities.mpas,834 :: 		Buffer := Temp;
0x1C9E	0x780E04  	MOV	W4, [W12]
; Temp end address is: 8 (W4)
;NMRAnetUtilities.mpas,835 :: 		Result := True;
; Result start address is: 2 (W1)
0x1CA0	0x2FFFF1  	MOV	#65535, W1
;NMRAnetUtilities.mpas,836 :: 		Break
; Result end address is: 2 (W1)
0x1CA2	0x370004  	BRA	L__NMRAnetUtilities_FindInDatagramByState183
;NMRAnetUtilities.mpas,837 :: 		end;
L__NMRAnetUtilities_FindInDatagramByState196:
;NMRAnetUtilities.mpas,838 :: 		end
; Temp start address is: 8 (W4)
; AnyBit start address is: 6 (W3)
; Result start address is: 4 (W2)
L__NMRAnetUtilities_FindInDatagramByState191:
;NMRAnetUtilities.mpas,839 :: 		end;
L__NMRAnetUtilities_FindInDatagramByState187:
;NMRAnetUtilities.mpas,840 :: 		Temp := Temp^.Next
0x1CA4	0x420064  	ADD	W4, #4, W0
0x1CA6	0x780210  	MOV	[W0], W4
;NMRAnetUtilities.mpas,841 :: 		end;
; Result end address is: 4 (W2)
; AnyBit end address is: 6 (W3)
; Temp end address is: 8 (W4)
0x1CA8	0x37FFE1  	BRA	L__NMRAnetUtilities_FindInDatagramByState182
L__NMRAnetUtilities_FindInDatagramByState241:
;NMRAnetUtilities.mpas,818 :: 		while Temp <> nil do
0x1CAA	0x780082  	MOV	W2, W1
;NMRAnetUtilities.mpas,841 :: 		end;
L__NMRAnetUtilities_FindInDatagramByState183:
;NMRAnetUtilities.mpas,842 :: 		end;
; Result start address is: 2 (W1)
0x1CAC	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_FindInDatagramByState:
0x1CAE	0xFA8000  	ULNK
0x1CB0	0x060000  	RETURN
; end of _NMRAnetUtilities_FindInDatagramByState
_NMRAnetUtilities_DatagramBufferUnLink:
;NMRAnetUtilities.mpas,785 :: 		begin
;NMRAnetUtilities.mpas,786 :: 		if Node^.DatagramBuffers <> nil then
0x2092	0x45007C  	ADD	W10, #28, W0
0x2094	0x780010  	MOV	[W0], W0
0x2096	0xE10060  	CP	W0, #0
0x2098	0x320021  	BRA Z	L__NMRAnetUtilities_DatagramBufferUnLink167
L__NMRAnetUtilities_DatagramBufferUnLink382:
;NMRAnetUtilities.mpas,788 :: 		if Node^.DatagramBuffers = Buffer then           // Root Buffer match case is easy
0x209A	0x45007C  	ADD	W10, #28, W0
0x209C	0x780010  	MOV	[W0], W0
0x209E	0xE1000B  	CP	W0, W11
0x20A0	0x3A0005  	BRA NZ	L__NMRAnetUtilities_DatagramBufferUnLink170
L__NMRAnetUtilities_DatagramBufferUnLink383:
;NMRAnetUtilities.mpas,789 :: 		Node^.DatagramBuffers := Node^.DatagramBuffers^.Next
0x20A2	0x4500FC  	ADD	W10, #28, W1
0x20A4	0x780011  	MOV	[W1], W0
0x20A6	0x400064  	ADD	W0, #4, W0
0x20A8	0x780890  	MOV	[W0], [W1]
0x20AA	0x370018  	BRA	L__NMRAnetUtilities_DatagramBufferUnLink171
;NMRAnetUtilities.mpas,790 :: 		else begin
L__NMRAnetUtilities_DatagramBufferUnLink170:
;NMRAnetUtilities.mpas,791 :: 		Parent := Node^.DatagramBuffers;                // Already know it is not the root buffer so setup for the first level down
0x20AC	0x45007C  	ADD	W10, #28, W0
; Parent start address is: 6 (W3)
0x20AE	0x780190  	MOV	[W0], W3
;NMRAnetUtilities.mpas,792 :: 		Temp := Node^.DatagramBuffers^.Next;
0x20B0	0x780010  	MOV	[W0], W0
0x20B2	0x400064  	ADD	W0, #4, W0
; Temp start address is: 4 (W2)
0x20B4	0x780110  	MOV	[W0], W2
; Parent end address is: 6 (W3)
; Temp end address is: 4 (W2)
;NMRAnetUtilities.mpas,793 :: 		while (Temp <> nil) and (Temp <> Buffer) do
L__NMRAnetUtilities_DatagramBufferUnLink173:
; Temp start address is: 4 (W2)
; Parent start address is: 6 (W3)
0x20B6	0xE11060  	CP	W2, #0
0x20B8	0xEF2002  	CLR	W1
0x20BA	0x320001  	BRA Z	L__NMRAnetUtilities_DatagramBufferUnLink384
0x20BC	0xEEA002  	COM	W1
L__NMRAnetUtilities_DatagramBufferUnLink384:
0x20BE	0xE1100B  	CP	W2, W11
0x20C0	0xEF2000  	CLR	W0
0x20C2	0x320001  	BRA Z	L__NMRAnetUtilities_DatagramBufferUnLink385
0x20C4	0xEEA000  	COM	W0
L__NMRAnetUtilities_DatagramBufferUnLink385:
0x20C6	0x608000  	AND	W1, W0, W0
0x20C8	0x320004  	BRA Z	L__NMRAnetUtilities_DatagramBufferUnLink174
L__NMRAnetUtilities_DatagramBufferUnLink386:
;NMRAnetUtilities.mpas,795 :: 		Parent := Temp;
0x20CA	0x780182  	MOV	W2, W3
;NMRAnetUtilities.mpas,796 :: 		Temp := Temp^.Next
0x20CC	0x410064  	ADD	W2, #4, W0
0x20CE	0x780110  	MOV	[W0], W2
;NMRAnetUtilities.mpas,797 :: 		end;
0x20D0	0x37FFF2  	BRA	L__NMRAnetUtilities_DatagramBufferUnLink173
L__NMRAnetUtilities_DatagramBufferUnLink174:
;NMRAnetUtilities.mpas,798 :: 		if Temp <> nil then
0x20D2	0xE11060  	CP	W2, #0
0x20D4	0x320003  	BRA Z	L__NMRAnetUtilities_DatagramBufferUnLink178
L__NMRAnetUtilities_DatagramBufferUnLink387:
;NMRAnetUtilities.mpas,799 :: 		Parent^.Next := Temp^.Next
0x20D6	0x4180E4  	ADD	W3, #4, W1
; Parent end address is: 6 (W3)
0x20D8	0x410064  	ADD	W2, #4, W0
; Temp end address is: 4 (W2)
0x20DA	0x780890  	MOV	[W0], [W1]
L__NMRAnetUtilities_DatagramBufferUnLink178:
;NMRAnetUtilities.mpas,800 :: 		end
L__NMRAnetUtilities_DatagramBufferUnLink171:
;NMRAnetUtilities.mpas,801 :: 		end;
L__NMRAnetUtilities_DatagramBufferUnLink167:
;NMRAnetUtilities.mpas,802 :: 		end;
L_end_NMRAnetUtilities_DatagramBufferUnLink:
0x20DC	0x060000  	RETURN
; end of _NMRAnetUtilities_DatagramBufferUnLink
_NMRAnetBufferPools_ReleaseDatagramBuffer:
;NMRAnetBufferPools.mpas,259 :: 		begin
;NMRAnetBufferPools.mpas,260 :: 		if Buffer <> nil then
0x20DE	0xE15060  	CP	W10, #0
0x20E0	0x320007  	BRA Z	L__NMRAnetBufferPools_ReleaseDatagramBuffer57
L__NMRAnetBufferPools_ReleaseDatagramBuffer82:
;NMRAnetBufferPools.mpas,263 :: 		Buffer^.State := 0;
0x20E2	0xEF2000  	CLR	W0
0x20E4	0x784D00  	MOV.B	W0, [W10]
;NMRAnetBufferPools.mpas,264 :: 		Dec(DatagramPool.Count);
0x20E6	0x2160F0  	MOV	#lo_addr(_DatagramPool+185), W0
0x20E8	0xFB8010  	ZE	[W0], W0
0x20EA	0x5000E1  	SUB	W0, #1, W1
0x20EC	0x2160F0  	MOV	#lo_addr(_DatagramPool+185), W0
0x20EE	0x784801  	MOV.B	W1, [W0]
;NMRAnetBufferPools.mpas,265 :: 		end;
L__NMRAnetBufferPools_ReleaseDatagramBuffer57:
;NMRAnetBufferPools.mpas,266 :: 		end;
L_end_NMRAnetBufferPools_ReleaseDatagramBuffer:
0x20F0	0x060000  	RETURN
; end of _NMRAnetBufferPools_ReleaseDatagramBuffer
_AppCallback_TractionControl:
0x1D28	0xFA0020  	LNK	#32
;NMRAnetAppCallbacks.mpas,373 :: 		begin
;NMRAnetAppCallbacks.mpas,374 :: 		ProxyData := GetProxyData(Node);
0x1D2A	0x781F8A  	PUSH	W10
0x1D2C	0x781F8B  	PUSH	W11
0x1D2E	0x781F8C  	PUSH	W12
0x1D30	0x781F8D  	PUSH	W13
0x1D32	0x07F377  	RCALL	_GetProxyData
; ProxyData start address is: 16 (W8)
0x1D34	0x780400  	MOV	W0, W8
;NMRAnetAppCallbacks.mpas,375 :: 		AddressHi := (ProxyDAta^.Address shr 8) and $00FF;
0x1D36	0x400068  	ADD	W0, #8, W0
0x1D38	0x780110  	MOV	[W0], W2
0x1D3A	0xDE10C8  	LSR	W2, #8, W1
0x1D3C	0xB3CFF0  	MOV.B	#255, W0
; AddressHi start address is: 8 (W4)
0x1D3E	0x60C200  	AND.B	W1, W0, W4
;NMRAnetAppCallbacks.mpas,376 :: 		AddressLo := ProxyDAta^.Address and $00FF;
0x1D40	0xB3CFF0  	MOV.B	#255, W0
; AddressLo start address is: 18 (W9)
0x1D42	0x614480  	AND.B	W2, W0, W9
;NMRAnetAppCallbacks.mpas,377 :: 		case CANBuffer^.DataBytes[2] and TRACTION_PROTOCOL_MASK of
0x1D44	0x458065  	ADD	W11, #5, W0
0x1D46	0xECA000  	INC2	W0
0x1D48	0xFB8090  	ZE	[W0], W1
0x1D4A	0x200F00  	MOV	#240, W0
0x1D4C	0x608000  	AND	W1, W0, W0
0x1D4E	0x980F70  	MOV	W0, [W14+30]
;NMRAnetAppCallbacks.mpas,378 :: 		TRACTION_OLCB :
0x1D50	0xE10060  	CP	W0, #0
0x1D52	0x3A0017  	BRA NZ	L__AppCallback_TractionControl103
L__AppCallback_TractionControl223:
; ProxyData end address is: 16 (W8)
; AddressHi end address is: 8 (W4)
; AddressLo end address is: 18 (W9)
;NMRAnetAppCallbacks.mpas,380 :: 		case CANBuffer^.DataBytes[2] and TRACTION_OP_MASK of
0x1D54	0x458065  	ADD	W11, #5, W0
0x1D56	0xECA000  	INC2	W0
0x1D58	0xFB8010  	ZE	[W0], W0
0x1D5A	0x60006F  	AND	W0, #15, W0
0x1D5C	0x980F60  	MOV	W0, [W14+28]
;NMRAnetAppCallbacks.mpas,381 :: 		TRACTION_OP_SPEED_DIR :
0x1D5E	0xE10060  	CP	W0, #0
0x1D60	0x3A000B  	BRA NZ	L__AppCallback_TractionControl107
L__AppCallback_TractionControl224:
;NMRAnetAppCallbacks.mpas,384 :: 		SpeedInt := HalfToFloat( (CANBuffer^.DataBytes[3] shl 8) or (CANBuffer^.DataBytes[4]));
0x1D62	0x458165  	ADD	W11, #5, W2
0x1D64	0x410063  	ADD	W2, #3, W0
0x1D66	0x784010  	MOV.B	[W0], W0
0x1D68	0xFB8000  	ZE	W0, W0
0x1D6A	0xDD00C8  	SL	W0, #8, W1
0x1D6C	0x410064  	ADD	W2, #4, W0
0x1D6E	0xFB8010  	ZE	[W0], W0
0x1D70	0x708000  	IOR	W1, W0, W0
0x1D72	0x780500  	MOV	W0, W10
0x1D74	0x07F6C3  	RCALL	_HalfToFloat
;NMRAnetAppCallbacks.mpas,386 :: 		end;
0x1D76	0x370004  	BRA	L__AppCallback_TractionControl104
L__AppCallback_TractionControl107:
;NMRAnetAppCallbacks.mpas,387 :: 		TRACTION_OP_FUNCTION :
0x1D78	0x90086E  	MOV	[W14+28], W0
0x1D7A	0xE10061  	CP	W0, #1
0x1D7C	0x3A0001  	BRA NZ	L__AppCallback_TractionControl110
L__AppCallback_TractionControl225:
;NMRAnetAppCallbacks.mpas,389 :: 		end;
0x1D7E	0x370000  	BRA	L__AppCallback_TractionControl104
L__AppCallback_TractionControl110:
L__AppCallback_TractionControl104:
;NMRAnetAppCallbacks.mpas,391 :: 		end;
0x1D80	0x37016C  	BRA	L__AppCallback_TractionControl100
L__AppCallback_TractionControl103:
;NMRAnetAppCallbacks.mpas,392 :: 		TRACTION_DCC :
; AddressLo start address is: 18 (W9)
; AddressHi start address is: 8 (W4)
; ProxyData start address is: 16 (W8)
0x1D82	0x200801  	MOV	#128, W1
0x1D84	0x90087E  	MOV	[W14+30], W0
0x1D86	0xE10001  	CP	W0, W1
0x1D88	0x3A0168  	BRA NZ	L__AppCallback_TractionControl113
L__AppCallback_TractionControl226:
;NMRAnetAppCallbacks.mpas,394 :: 		case CANBuffer^.DataBytes[2] and $0F of
0x1D8A	0x458065  	ADD	W11, #5, W0
0x1D8C	0xECA000  	INC2	W0
0x1D8E	0xFB8010  	ZE	[W0], W0
0x1D90	0x60006F  	AND	W0, #15, W0
0x1D92	0x980F70  	MOV	W0, [W14+30]
;NMRAnetAppCallbacks.mpas,395 :: 		TRACTION_OP_SPEED_DIR :
0x1D94	0xE10060  	CP	W0, #0
0x1D96	0x3A004F  	BRA NZ	L__AppCallback_TractionControl117
L__AppCallback_TractionControl227:
;NMRAnetAppCallbacks.mpas,397 :: 		ProxyData^.Speed := CANBuffer^.DataBytes[3];
0x1D98	0x4400E2  	ADD	W8, #2, W1
0x1D9A	0x458065  	ADD	W11, #5, W0
0x1D9C	0x400063  	ADD	W0, #3, W0
0x1D9E	0xFB8010  	ZE	[W0], W0
0x1DA0	0x780880  	MOV	W0, [W1]
;NMRAnetAppCallbacks.mpas,398 :: 		if AddressHi and $C0 = $C0 then
0x1DA2	0xFB8084  	ZE	W4, W1
0x1DA4	0x200C00  	MOV	#192, W0
0x1DA6	0x608080  	AND	W1, W0, W1
0x1DA8	0x200C00  	MOV	#192, W0
0x1DAA	0xE10800  	CP	W1, W0
0x1DAC	0x3A0029  	BRA NZ	L__AppCallback_TractionControl119
L__AppCallback_TractionControl228:
;NMRAnetAppCallbacks.mpas,400 :: 		if CANBuffer^.DataBytes[4] = 128 then
0x1DAE	0x458065  	ADD	W11, #5, W0
0x1DB0	0x400064  	ADD	W0, #4, W0
0x1DB2	0x784090  	MOV.B	[W0], W1
0x1DB4	0xB3C800  	MOV.B	#128, W0
0x1DB6	0xE10C00  	CP.B	W1, W0
0x1DB8	0x3A000F  	BRA NZ	L__AppCallback_TractionControl122
L__AppCallback_TractionControl229:
;NMRAnetAppCallbacks.mpas,403 :: 		NMRA_DCC_LoadPacket(@DCCPacket, AddressHi, AddressLo, %00111111, ProxyData^.Speed, 0, 4);
0x1DBA	0x470160  	ADD	W14, #0, W2
0x1DBC	0x440062  	ADD	W8, #2, W0
; ProxyData end address is: 16 (W8)
0x1DBE	0x780090  	MOV	[W0], W1
0x1DC0	0xB3C3FD  	MOV.B	#63, W13
0x1DC2	0x784609  	MOV.B	W9, W12
; AddressLo end address is: 18 (W9)
0x1DC4	0x784584  	MOV.B	W4, W11
; AddressHi end address is: 8 (W4)
0x1DC6	0x780502  	MOV	W2, W10
0x1DC8	0x200040  	MOV	#4, W0
0x1DCA	0x781F80  	PUSH	W0
0x1DCC	0xEF2000  	CLR	W0
0x1DCE	0x781F80  	PUSH	W0
0x1DD0	0x781F81  	PUSH	W1
0x1DD2	0x07F670  	RCALL	_NMRA_DCC_LoadPacket
0x1DD4	0xB1006F  	SUB	#6, W15
;NMRAnetAppCallbacks.mpas,404 :: 		end
0x1DD6	0x37000E  	BRA	L__AppCallback_TractionControl123
;NMRAnetAppCallbacks.mpas,405 :: 		else
L__AppCallback_TractionControl122:
;NMRAnetAppCallbacks.mpas,408 :: 		NMRA_DCC_LoadPacket(@DCCPacket, AddressHi, AddressLo, ProxyData^.Speed, 0, 0, 3);
; AddressLo start address is: 18 (W9)
; AddressHi start address is: 8 (W4)
; ProxyData start address is: 16 (W8)
0x1DD8	0x4700E0  	ADD	W14, #0, W1
0x1DDA	0x440062  	ADD	W8, #2, W0
; ProxyData end address is: 16 (W8)
0x1DDC	0x784690  	MOV.B	[W0], W13
0x1DDE	0x784609  	MOV.B	W9, W12
; AddressLo end address is: 18 (W9)
0x1DE0	0x784584  	MOV.B	W4, W11
; AddressHi end address is: 8 (W4)
0x1DE2	0x780501  	MOV	W1, W10
0x1DE4	0x200030  	MOV	#3, W0
0x1DE6	0x781F80  	PUSH	W0
0x1DE8	0xEF2000  	CLR	W0
0x1DEA	0x781F80  	PUSH	W0
0x1DEC	0xEF2000  	CLR	W0
0x1DEE	0x781F80  	PUSH	W0
0x1DF0	0x07F661  	RCALL	_NMRA_DCC_LoadPacket
0x1DF2	0xB1006F  	SUB	#6, W15
;NMRAnetAppCallbacks.mpas,409 :: 		end;
L__AppCallback_TractionControl123:
;NMRAnetAppCallbacks.mpas,410 :: 		NMRA_DCC_QueuePacket(@Track, @DCCPacket, False);
0x1DF4	0x470060  	ADD	W14, #0, W0
0x1DF6	0xEF2018  	CLR	W12
0x1DF8	0x780580  	MOV	W0, W11
0x1DFA	0x21612A  	MOV	#lo_addr(_Track), W10
0x1DFC	0x07F871  	RCALL	_NMRA_DCC_QueuePacket
;NMRAnetAppCallbacks.mpas,411 :: 		end else
0x1DFE	0x37001A  	BRA	L__AppCallback_TractionControl120
L__AppCallback_TractionControl119:
;NMRAnetAppCallbacks.mpas,413 :: 		if CANBuffer^.DataBytes[4] < 128 then // Can't do short address with 128 Step
; AddressLo start address is: 18 (W9)
; ProxyData start address is: 16 (W8)
0x1E00	0x458065  	ADD	W11, #5, W0
0x1E02	0x400064  	ADD	W0, #4, W0
0x1E04	0x784090  	MOV.B	[W0], W1
0x1E06	0xB3C800  	MOV.B	#128, W0
0x1E08	0xE10C00  	CP.B	W1, W0
0x1E0A	0x310014  	BRA GEU	L__AppCallback_TractionControl125
L__AppCallback_TractionControl230:
;NMRAnetAppCallbacks.mpas,416 :: 		NMRA_DCC_LoadPacket(@DCCPacket, AddressLo, ProxyData^.Speed, 0, 0, 0, 2);
0x1E0C	0x4700E0  	ADD	W14, #0, W1
0x1E0E	0x440062  	ADD	W8, #2, W0
; ProxyData end address is: 16 (W8)
0x1E10	0xEF201A  	CLR	W13
0x1E12	0x784610  	MOV.B	[W0], W12
0x1E14	0x784589  	MOV.B	W9, W11
; AddressLo end address is: 18 (W9)
0x1E16	0x780501  	MOV	W1, W10
0x1E18	0x200020  	MOV	#2, W0
0x1E1A	0x781F80  	PUSH	W0
0x1E1C	0xEF2000  	CLR	W0
0x1E1E	0x781F80  	PUSH	W0
0x1E20	0xEF2000  	CLR	W0
0x1E22	0x781F80  	PUSH	W0
0x1E24	0x07F647  	RCALL	_NMRA_DCC_LoadPacket
0x1E26	0xB1006F  	SUB	#6, W15
;NMRAnetAppCallbacks.mpas,417 :: 		NMRA_DCC_QueuePacket(@Track, @DCCPacket, False);
0x1E28	0x470060  	ADD	W14, #0, W0
0x1E2A	0xEF2018  	CLR	W12
0x1E2C	0x780580  	MOV	W0, W11
0x1E2E	0x21612A  	MOV	#lo_addr(_Track), W10
0x1E30	0x07F857  	RCALL	_NMRA_DCC_QueuePacket
;NMRAnetAppCallbacks.mpas,418 :: 		end else
0x1E32	0x370000  	BRA	L__AppCallback_TractionControl126
L__AppCallback_TractionControl125:
;NMRAnetAppCallbacks.mpas,421 :: 		end
L__AppCallback_TractionControl126:
;NMRAnetAppCallbacks.mpas,422 :: 		end;
L__AppCallback_TractionControl120:
;NMRAnetAppCallbacks.mpas,423 :: 		end;
0x1E34	0x370111  	BRA	L__AppCallback_TractionControl114
L__AppCallback_TractionControl117:
;NMRAnetAppCallbacks.mpas,424 :: 		TRACTION_OP_FUNCTION :
; AddressLo start address is: 18 (W9)
; AddressHi start address is: 8 (W4)
; ProxyData start address is: 16 (W8)
0x1E36	0x90087E  	MOV	[W14+30], W0
0x1E38	0xE10061  	CP	W0, #1
0x1E3A	0x3A00EC  	BRA NZ	L__AppCallback_TractionControl129
L__AppCallback_TractionControl231:
;NMRAnetAppCallbacks.mpas,426 :: 		FunctionAddress := (CANBuffer^.DataBytes[4] shl 8) or CANBuffer^.DataBytes[5];
0x1E3C	0x458165  	ADD	W11, #5, W2
0x1E3E	0x410064  	ADD	W2, #4, W0
0x1E40	0x784010  	MOV.B	[W0], W0
0x1E42	0xFB8000  	ZE	W0, W0
0x1E44	0xDD00C8  	SL	W0, #8, W1
0x1E46	0x410065  	ADD	W2, #5, W0
0x1E48	0xFB8010  	ZE	[W0], W0
; FunctionAddress start address is: 10 (W5)
0x1E4A	0x708280  	IOR	W1, W0, W5
;NMRAnetAppCallbacks.mpas,427 :: 		FunctionValue := CANBuffer^.DataBytes[6];
0x1E4C	0x410066  	ADD	W2, #6, W0
; FunctionValue start address is: 6 (W3)
0x1E4E	0x784190  	MOV.B	[W0], W3
;NMRAnetAppCallbacks.mpas,429 :: 		case CANBuffer^.DataBytes[3] of
0x1E50	0x410063  	ADD	W2, #3, W0
0x1E52	0x784010  	MOV.B	[W0], W0
0x1E54	0x985F40  	MOV.B	W0, [W14+28]
;NMRAnetAppCallbacks.mpas,430 :: 		DCC_FUNCTION_28 :
0x1E56	0xE10460  	CP.B	W0, #0
0x1E58	0x3A00AE  	BRA NZ	L__AppCallback_TractionControl133
L__AppCallback_TractionControl232:
;NMRAnetAppCallbacks.mpas,434 :: 		WideFunctionMask := $00000001;
; WideFunctionMask start address is: 12 (W6)
0x1E5A	0x200016  	MOV	#1, W6
0x1E5C	0x200007  	MOV	#0, W7
;NMRAnetAppCallbacks.mpas,435 :: 		WideFunctionMask := WideFunctionMask shl FunctionAddress;   // Set the correct Function Bit
0x1E5E	0x780105  	MOV	W5, W2
0x1E60	0xBE0006  	MOV.D	W6, W0
L__AppCallback_TractionControl233:
0x1E62	0xE90102  	DEC	W2, W2
0x1E64	0x350003  	BRA LT	L__AppCallback_TractionControl234
0x1E66	0xD00000  	SL	W0, W0
0x1E68	0xD28081  	RLC	W1, W1
0x1E6A	0x37FFFB  	BRA	L__AppCallback_TractionControl233
L__AppCallback_TractionControl234:
0x1E6C	0xBE0300  	MOV.D	W0, W6
;NMRAnetAppCallbacks.mpas,436 :: 		ProxyData^.Functions := ProxyData^.Functions and not WideFunctionMask; // Clear the bit
0x1E6E	0x440164  	ADD	W8, #4, W2
0x1E70	0xEEA000  	COM	W0
0x1E72	0xEEA002  	COM	W1
0x1E74	0x601912  	AND	W0, [W2], [W2++]
0x1E76	0x609112  	AND	W1, [W2], [W2--]
;NMRAnetAppCallbacks.mpas,437 :: 		if FunctionValue > 0 then
0x1E78	0xE11C60  	CP.B	W3, #0
0x1E7A	0x360003  	BRA LEU	L__AppCallback_TractionControl135
L__AppCallback_TractionControl235:
; FunctionValue end address is: 6 (W3)
;NMRAnetAppCallbacks.mpas,438 :: 		ProxyData^.Functions := ProxyData^.Functions or WideFunctionMask;      // Set the bit if needed
0x1E7C	0x440064  	ADD	W8, #4, W0
0x1E7E	0x731810  	IOR	W6, [W0], [W0++]
0x1E80	0x739010  	IOR	W7, [W0], [W0--]
; WideFunctionMask end address is: 12 (W6)
L__AppCallback_TractionControl135:
;NMRAnetAppCallbacks.mpas,440 :: 		if FunctionAddress < 29 then
0x1E82	0xE1287D  	CP	W5, #29
0x1E84	0x310097  	BRA GEU	L__AppCallback_TractionControl138
L__AppCallback_TractionControl236:
;NMRAnetAppCallbacks.mpas,442 :: 		if FunctionAddress < 5 then
0x1E86	0xE12865  	CP	W5, #5
0x1E88	0x310011  	BRA GEU	L__AppCallback_TractionControl141
L__AppCallback_TractionControl237:
;NMRAnetAppCallbacks.mpas,444 :: 		FunctionMask := (ProxyData^.Functions shr 1) and $0F;
0x1E8A	0x4401E4  	ADD	W8, #4, W3
; ProxyData end address is: 16 (W8)
0x1E8C	0x7800B3  	MOV	[W3++], W1
0x1E8E	0x780123  	MOV	[W3--], W2
0x1E90	0xD10102  	LSR	W2, W2
0x1E92	0xD38081  	RRC	W1, W1
0x1E94	0x470066  	ADD	W14, #6, W0
0x1E96	0x60C86F  	AND.B	W1, #15, [W0]
;NMRAnetAppCallbacks.mpas,445 :: 		FunctionMask.4 := ProxyData^.Functions.0;
0x1E98	0x7800B3  	MOV	[W3++], W1
0x1E9A	0x780123  	MOV	[W3--], W2
0x1E9C	0x470066  	ADD	W14, #6, W0
0x1E9E	0xA04410  	BSET.B	[W0], #4
0x1EA0	0xAE0002  	BTSS	W1, #0
0x1EA2	0xA14410  	BCLR.B	[W0], #4
;NMRAnetAppCallbacks.mpas,446 :: 		FunctionMask := FunctionMask or %10000000;                    // Opcode bits
0x1EA4	0xB3C801  	MOV.B	#128, W1
0x1EA6	0x470066  	ADD	W14, #6, W0
0x1EA8	0x70C810  	IOR.B	W1, [W0], [W0]
;NMRAnetAppCallbacks.mpas,447 :: 		end else
0x1EAA	0x37003D  	BRA	L__AppCallback_TractionControl142
L__AppCallback_TractionControl141:
;NMRAnetAppCallbacks.mpas,448 :: 		if FunctionAddress < 9 then
; ProxyData start address is: 16 (W8)
0x1EAC	0xE12869  	CP	W5, #9
0x1EAE	0x310010  	BRA GEU	L__AppCallback_TractionControl144
L__AppCallback_TractionControl238:
;NMRAnetAppCallbacks.mpas,450 :: 		FunctionMask := (ProxyData^.Functions shr 5) and $0F;
0x1EB0	0x4401E4  	ADD	W8, #4, W3
; ProxyData end address is: 16 (W8)
0x1EB2	0x200050  	MOV	#5, W0
0x1EB4	0x7800B3  	MOV	[W3++], W1
0x1EB6	0x780123  	MOV	[W3--], W2
L__AppCallback_TractionControl239:
0x1EB8	0xE90000  	DEC	W0, W0
0x1EBA	0x350003  	BRA LT	L__AppCallback_TractionControl240
0x1EBC	0xD10102  	LSR	W2, W2
0x1EBE	0xD38081  	RRC	W1, W1
0x1EC0	0x37FFFB  	BRA	L__AppCallback_TractionControl239
L__AppCallback_TractionControl240:
0x1EC2	0x470066  	ADD	W14, #6, W0
0x1EC4	0x60C86F  	AND.B	W1, #15, [W0]
;NMRAnetAppCallbacks.mpas,451 :: 		FunctionMask := FunctionMask or %10110000;                    // Opcode bits
0x1EC6	0x90416E  	MOV.B	[W14+6], W2
0x1EC8	0xB3CB01  	MOV.B	#176, W1
0x1ECA	0x470066  	ADD	W14, #6, W0
0x1ECC	0x714801  	IOR.B	W2, W1, [W0]
;NMRAnetAppCallbacks.mpas,452 :: 		end else
0x1ECE	0x37002B  	BRA	L__AppCallback_TractionControl145
L__AppCallback_TractionControl144:
;NMRAnetAppCallbacks.mpas,453 :: 		if FunctionAddress < 13 then
; ProxyData start address is: 16 (W8)
0x1ED0	0xE1286D  	CP	W5, #13
0x1ED2	0x310010  	BRA GEU	L__AppCallback_TractionControl147
L__AppCallback_TractionControl241:
;NMRAnetAppCallbacks.mpas,455 :: 		FunctionMask := (ProxyData^.Functions shr 9) and $0F;
0x1ED4	0x4401E4  	ADD	W8, #4, W3
; ProxyData end address is: 16 (W8)
0x1ED6	0x200090  	MOV	#9, W0
0x1ED8	0x7800B3  	MOV	[W3++], W1
0x1EDA	0x780123  	MOV	[W3--], W2
L__AppCallback_TractionControl242:
0x1EDC	0xE90000  	DEC	W0, W0
0x1EDE	0x350003  	BRA LT	L__AppCallback_TractionControl243
0x1EE0	0xD10102  	LSR	W2, W2
0x1EE2	0xD38081  	RRC	W1, W1
0x1EE4	0x37FFFB  	BRA	L__AppCallback_TractionControl242
L__AppCallback_TractionControl243:
0x1EE6	0x470066  	ADD	W14, #6, W0
0x1EE8	0x60C86F  	AND.B	W1, #15, [W0]
;NMRAnetAppCallbacks.mpas,456 :: 		FunctionMask := FunctionMask or %10100000;                    // Opcode bits
0x1EEA	0x90416E  	MOV.B	[W14+6], W2
0x1EEC	0xB3CA01  	MOV.B	#160, W1
0x1EEE	0x470066  	ADD	W14, #6, W0
0x1EF0	0x714801  	IOR.B	W2, W1, [W0]
;NMRAnetAppCallbacks.mpas,457 :: 		end else
0x1EF2	0x370019  	BRA	L__AppCallback_TractionControl148
L__AppCallback_TractionControl147:
;NMRAnetAppCallbacks.mpas,458 :: 		if FunctionAddress < 21 then
; ProxyData start address is: 16 (W8)
0x1EF4	0xE12875  	CP	W5, #21
0x1EF6	0x31000C  	BRA GEU	L__AppCallback_TractionControl150
L__AppCallback_TractionControl244:
;NMRAnetAppCallbacks.mpas,460 :: 		FunctionMask := ProxyData^.Functions shr 13;
0x1EF8	0x4401E4  	ADD	W8, #4, W3
; ProxyData end address is: 16 (W8)
0x1EFA	0x2000D2  	MOV	#13, W2
0x1EFC	0xBE0013  	MOV.D	[W3], W0
L__AppCallback_TractionControl245:
0x1EFE	0xE90102  	DEC	W2, W2
0x1F00	0x350003  	BRA LT	L__AppCallback_TractionControl246
0x1F02	0xD10081  	LSR	W1, W1
0x1F04	0xD38000  	RRC	W0, W0
0x1F06	0x37FFFB  	BRA	L__AppCallback_TractionControl245
L__AppCallback_TractionControl246:
0x1F08	0x984760  	MOV.B	W0, [W14+6]
;NMRAnetAppCallbacks.mpas,461 :: 		FunctionExtendedCode := %11011110
0x1F0A	0xB3CDE0  	MOV.B	#222, W0
0x1F0C	0x984770  	MOV.B	W0, [W14+7]
;NMRAnetAppCallbacks.mpas,462 :: 		end else
0x1F0E	0x37000B  	BRA	L__AppCallback_TractionControl151
L__AppCallback_TractionControl150:
;NMRAnetAppCallbacks.mpas,464 :: 		FunctionMask := ProxyData^.Functions shr 21;
; ProxyData start address is: 16 (W8)
0x1F10	0x4401E4  	ADD	W8, #4, W3
; ProxyData end address is: 16 (W8)
0x1F12	0x200152  	MOV	#21, W2
0x1F14	0xBE0013  	MOV.D	[W3], W0
L__AppCallback_TractionControl247:
0x1F16	0xE90102  	DEC	W2, W2
0x1F18	0x350003  	BRA LT	L__AppCallback_TractionControl248
0x1F1A	0xD10081  	LSR	W1, W1
0x1F1C	0xD38000  	RRC	W0, W0
0x1F1E	0x37FFFB  	BRA	L__AppCallback_TractionControl247
L__AppCallback_TractionControl248:
0x1F20	0x984760  	MOV.B	W0, [W14+6]
;NMRAnetAppCallbacks.mpas,465 :: 		FunctionExtendedCode := %11011111
0x1F22	0xB3CDF0  	MOV.B	#223, W0
0x1F24	0x984770  	MOV.B	W0, [W14+7]
;NMRAnetAppCallbacks.mpas,466 :: 		end;
L__AppCallback_TractionControl151:
L__AppCallback_TractionControl148:
L__AppCallback_TractionControl145:
L__AppCallback_TractionControl142:
;NMRAnetAppCallbacks.mpas,469 :: 		if AddressHi and $C0 = $C0 then
0x1F26	0xFB8084  	ZE	W4, W1
0x1F28	0x200C00  	MOV	#192, W0
0x1F2A	0x608080  	AND	W1, W0, W1
0x1F2C	0x200C00  	MOV	#192, W0
0x1F2E	0xE10800  	CP	W1, W0
0x1F30	0x3A001F  	BRA NZ	L__AppCallback_TractionControl153
L__AppCallback_TractionControl249:
;NMRAnetAppCallbacks.mpas,471 :: 		if FunctionAddress < 13 then
0x1F32	0xE1286D  	CP	W5, #13
0x1F34	0x31000E  	BRA GEU	L__AppCallback_TractionControl156
L__AppCallback_TractionControl250:
; FunctionAddress end address is: 10 (W5)
;NMRAnetAppCallbacks.mpas,472 :: 		NMRA_DCC_LoadPacket(@DCCPacket, AddressHi, AddressLo, FunctionMask, 0, 0, 3)
0x1F36	0x470060  	ADD	W14, #0, W0
0x1F38	0x9046EE  	MOV.B	[W14+6], W13
0x1F3A	0x784609  	MOV.B	W9, W12
; AddressLo end address is: 18 (W9)
0x1F3C	0x784584  	MOV.B	W4, W11
; AddressHi end address is: 8 (W4)
0x1F3E	0x780500  	MOV	W0, W10
0x1F40	0x200030  	MOV	#3, W0
0x1F42	0x781F80  	PUSH	W0
0x1F44	0xEF2000  	CLR	W0
0x1F46	0x781F80  	PUSH	W0
0x1F48	0xEF2000  	CLR	W0
0x1F4A	0x781F80  	PUSH	W0
0x1F4C	0x07F5B3  	RCALL	_NMRA_DCC_LoadPacket
0x1F4E	0xB1006F  	SUB	#6, W15
0x1F50	0x37000E  	BRA	L__AppCallback_TractionControl157
;NMRAnetAppCallbacks.mpas,473 :: 		else
L__AppCallback_TractionControl156:
;NMRAnetAppCallbacks.mpas,474 :: 		NMRA_DCC_LoadPacket(@DCCPacket, AddressHi, AddressLo, FunctionExtendedCode, FunctionMask, 0, 4)
; AddressLo start address is: 18 (W9)
; AddressHi start address is: 8 (W4)
0x1F52	0x470060  	ADD	W14, #0, W0
0x1F54	0x9046FE  	MOV.B	[W14+7], W13
0x1F56	0x784609  	MOV.B	W9, W12
; AddressLo end address is: 18 (W9)
0x1F58	0x784584  	MOV.B	W4, W11
; AddressHi end address is: 8 (W4)
0x1F5A	0x780500  	MOV	W0, W10
0x1F5C	0x200040  	MOV	#4, W0
0x1F5E	0x781F80  	PUSH	W0
0x1F60	0xEF2000  	CLR	W0
0x1F62	0x781F80  	PUSH	W0
0x1F64	0x470066  	ADD	W14, #6, W0
0x1F66	0xFB8010  	ZE	[W0], W0
0x1F68	0x781F80  	PUSH	W0
0x1F6A	0x07F5A4  	RCALL	_NMRA_DCC_LoadPacket
0x1F6C	0xB1006F  	SUB	#6, W15
L__AppCallback_TractionControl157:
;NMRAnetAppCallbacks.mpas,475 :: 		end else
0x1F6E	0x37001D  	BRA	L__AppCallback_TractionControl154
L__AppCallback_TractionControl153:
;NMRAnetAppCallbacks.mpas,477 :: 		if FunctionAddress < 13 then
; FunctionAddress start address is: 10 (W5)
; AddressLo start address is: 18 (W9)
0x1F70	0xE1286D  	CP	W5, #13
0x1F72	0x31000E  	BRA GEU	L__AppCallback_TractionControl159
L__AppCallback_TractionControl251:
; FunctionAddress end address is: 10 (W5)
;NMRAnetAppCallbacks.mpas,478 :: 		NMRA_DCC_LoadPacket(@DCCPacket, AddressLo, FunctionMask, 0, 0, 0, 3)
0x1F74	0x470060  	ADD	W14, #0, W0
0x1F76	0xEF201A  	CLR	W13
0x1F78	0x90466E  	MOV.B	[W14+6], W12
0x1F7A	0x784589  	MOV.B	W9, W11
; AddressLo end address is: 18 (W9)
0x1F7C	0x780500  	MOV	W0, W10
0x1F7E	0x200030  	MOV	#3, W0
0x1F80	0x781F80  	PUSH	W0
0x1F82	0xEF2000  	CLR	W0
0x1F84	0x781F80  	PUSH	W0
0x1F86	0xEF2000  	CLR	W0
0x1F88	0x781F80  	PUSH	W0
0x1F8A	0x07F594  	RCALL	_NMRA_DCC_LoadPacket
0x1F8C	0xB1006F  	SUB	#6, W15
0x1F8E	0x37000D  	BRA	L__AppCallback_TractionControl160
;NMRAnetAppCallbacks.mpas,479 :: 		else
L__AppCallback_TractionControl159:
;NMRAnetAppCallbacks.mpas,480 :: 		NMRA_DCC_LoadPacket(@DCCPacket, AddressLo, FunctionExtendedCode, FunctionMask, 0, 0, 4)
; AddressLo start address is: 18 (W9)
0x1F90	0x470060  	ADD	W14, #0, W0
0x1F92	0x9046EE  	MOV.B	[W14+6], W13
0x1F94	0x90467E  	MOV.B	[W14+7], W12
0x1F96	0x784589  	MOV.B	W9, W11
; AddressLo end address is: 18 (W9)
0x1F98	0x780500  	MOV	W0, W10
0x1F9A	0x200040  	MOV	#4, W0
0x1F9C	0x781F80  	PUSH	W0
0x1F9E	0xEF2000  	CLR	W0
0x1FA0	0x781F80  	PUSH	W0
0x1FA2	0xEF2000  	CLR	W0
0x1FA4	0x781F80  	PUSH	W0
0x1FA6	0x07F586  	RCALL	_NMRA_DCC_LoadPacket
0x1FA8	0xB1006F  	SUB	#6, W15
L__AppCallback_TractionControl160:
;NMRAnetAppCallbacks.mpas,481 :: 		end;
L__AppCallback_TractionControl154:
;NMRAnetAppCallbacks.mpas,483 :: 		NMRA_DCC_QueuePacket(@Track, @DCCPacket, False);
0x1FAA	0x470060  	ADD	W14, #0, W0
0x1FAC	0xEF2018  	CLR	W12
0x1FAE	0x780580  	MOV	W0, W11
0x1FB0	0x21612A  	MOV	#lo_addr(_Track), W10
0x1FB2	0x07F796  	RCALL	_NMRA_DCC_QueuePacket
;NMRAnetAppCallbacks.mpas,484 :: 		end
L__AppCallback_TractionControl138:
;NMRAnetAppCallbacks.mpas,485 :: 		end;
0x1FB4	0x37002E  	BRA	L__AppCallback_TractionControl130
L__AppCallback_TractionControl133:
;NMRAnetAppCallbacks.mpas,486 :: 		DCC_FUNCTION_32k :
0x1FB6	0x90584E  	MOV.B	[W14+28], W0
0x1FB8	0xE10461  	CP.B	W0, #1
0x1FBA	0x3A002B  	BRA NZ	L__AppCallback_TractionControl163
L__AppCallback_TractionControl252:
;NMRAnetAppCallbacks.mpas,488 :: 		UART1_Write_Text('DCC_FUNCTION_32k'+LF);
0x1FBC	0x4700E8  	ADD	W14, #8, W1
0x1FBE	0xB3C440  	MOV.B	#68, W0
0x1FC0	0x785880  	MOV.B	W0, [W1++]
0x1FC2	0xB3C430  	MOV.B	#67, W0
0x1FC4	0x785880  	MOV.B	W0, [W1++]
0x1FC6	0xB3C430  	MOV.B	#67, W0
0x1FC8	0x785880  	MOV.B	W0, [W1++]
0x1FCA	0xB3C5F0  	MOV.B	#95, W0
0x1FCC	0x785880  	MOV.B	W0, [W1++]
0x1FCE	0xB3C460  	MOV.B	#70, W0
0x1FD0	0x785880  	MOV.B	W0, [W1++]
0x1FD2	0xB3C550  	MOV.B	#85, W0
0x1FD4	0x785880  	MOV.B	W0, [W1++]
0x1FD6	0xB3C4E0  	MOV.B	#78, W0
0x1FD8	0x785880  	MOV.B	W0, [W1++]
0x1FDA	0xB3C430  	MOV.B	#67, W0
0x1FDC	0x785880  	MOV.B	W0, [W1++]
0x1FDE	0xB3C540  	MOV.B	#84, W0
0x1FE0	0x785880  	MOV.B	W0, [W1++]
0x1FE2	0xB3C490  	MOV.B	#73, W0
0x1FE4	0x785880  	MOV.B	W0, [W1++]
0x1FE6	0xB3C4F0  	MOV.B	#79, W0
0x1FE8	0x785880  	MOV.B	W0, [W1++]
0x1FEA	0xB3C4E0  	MOV.B	#78, W0
0x1FEC	0x785880  	MOV.B	W0, [W1++]
0x1FEE	0xB3C5F0  	MOV.B	#95, W0
0x1FF0	0x785880  	MOV.B	W0, [W1++]
0x1FF2	0xB3C330  	MOV.B	#51, W0
0x1FF4	0x785880  	MOV.B	W0, [W1++]
0x1FF6	0xB3C320  	MOV.B	#50, W0
0x1FF8	0x785880  	MOV.B	W0, [W1++]
0x1FFA	0xB3C6B0  	MOV.B	#107, W0
0x1FFC	0x785880  	MOV.B	W0, [W1++]
0x1FFE	0xB3C0D0  	MOV.B	#13, W0
0x2000	0x785880  	MOV.B	W0, [W1++]
0x2002	0xB3C0A0  	MOV.B	#10, W0
0x2004	0x785880  	MOV.B	W0, [W1++]
0x2006	0xB3C000  	MOV.B	#0, W0
0x2008	0x785880  	MOV.B	W0, [W1++]
0x200A	0x470068  	ADD	W14, #8, W0
0x200C	0x780500  	MOV	W0, W10
0x200E	0x07F802  	RCALL	_UART1_Write_Text
;NMRAnetAppCallbacks.mpas,489 :: 		end;
0x2010	0x370000  	BRA	L__AppCallback_TractionControl130
L__AppCallback_TractionControl163:
L__AppCallback_TractionControl130:
;NMRAnetAppCallbacks.mpas,491 :: 		end;
0x2012	0x370022  	BRA	L__AppCallback_TractionControl114
L__AppCallback_TractionControl129:
;NMRAnetAppCallbacks.mpas,492 :: 		TRACTION_OP_PROXY_MGMT :
; ProxyData start address is: 16 (W8)
0x2014	0x90087E  	MOV	[W14+30], W0
0x2016	0xE10062  	CP	W0, #2
0x2018	0x3A001F  	BRA NZ	L__AppCallback_TractionControl166
L__AppCallback_TractionControl253:
;NMRAnetAppCallbacks.mpas,494 :: 		case CANBuffer^.DataBytes[3] of
0x201A	0x458065  	ADD	W11, #5, W0
0x201C	0x400063  	ADD	W0, #3, W0
;NMRAnetAppCallbacks.mpas,495 :: 		DCC_ALLOCATE_ADDRESS :
0x201E	0x784010  	MOV.B	[W0], W0
0x2020	0xE10461  	CP.B	W0, #1
0x2022	0x3A0019  	BRA NZ	L__AppCallback_TractionControl170
L__AppCallback_TractionControl254:
;NMRAnetAppCallbacks.mpas,497 :: 		ProxyData^.State := ProxyData^.State or PS_ALLOCATED;
0x2024	0x784018  	MOV.B	[W8], W0
0x2026	0xFB8000  	ZE	W0, W0
0x2028	0x700061  	IOR	W0, #1, W0
0x202A	0x784C00  	MOV.B	W0, [W8]
;NMRAnetAppCallbacks.mpas,498 :: 		ProxyData^.MsgFlags := ProxyData^.MsgFlags or MSG_DCC_ADDRESS_ALLOCATED;     // Changed State so notify the system
0x202C	0x4400E1  	ADD	W8, #1, W1
0x202E	0xFB8011  	ZE	[W1], W0
0x2030	0x700061  	IOR	W0, #1, W0
0x2032	0x784880  	MOV.B	W0, [W1]
;NMRAnetAppCallbacks.mpas,499 :: 		SetProxyNodeProducerFlags(Node, EVENT_TRAIN_DCC_IDLE_INDEX);                 // Changed State so notify the system
0x2034	0x781F8B  	PUSH	W11
0x2036	0x20001B  	MOV	#1, W11
0x2038	0x07F694  	RCALL	NMRAnetAppCallbacks_SetProxyNodeProducerFlags
;NMRAnetAppCallbacks.mpas,500 :: 		SetProxyNodeProducerFlags(Node, EVENT_TRAIN_DCC_INUSE_INDEX);                // Changed State so notify the system
0x203A	0x20002B  	MOV	#2, W11
0x203C	0x07F692  	RCALL	NMRAnetAppCallbacks_SetProxyNodeProducerFlags
0x203E	0x7805CF  	POP	W11
;NMRAnetAppCallbacks.mpas,501 :: 		ProxyData^.Address := Word ((CANBuffer^.DataBytes[4] shl 8)) or CANBuffer^.DataBytes[5];  // This is in NMRA DCC format for short/long address
0x2040	0x4401E8  	ADD	W8, #8, W3
; ProxyData end address is: 16 (W8)
0x2042	0x458165  	ADD	W11, #5, W2
0x2044	0x410064  	ADD	W2, #4, W0
0x2046	0x784010  	MOV.B	[W0], W0
0x2048	0xFB8000  	ZE	W0, W0
0x204A	0xDD00C8  	SL	W0, #8, W1
0x204C	0x410065  	ADD	W2, #5, W0
0x204E	0xFB8010  	ZE	[W0], W0
0x2050	0x708000  	IOR	W1, W0, W0
0x2052	0x780980  	MOV	W0, [W3]
;NMRAnetAppCallbacks.mpas,502 :: 		end;
0x2054	0x370000  	BRA	L__AppCallback_TractionControl167
L__AppCallback_TractionControl170:
L__AppCallback_TractionControl167:
;NMRAnetAppCallbacks.mpas,504 :: 		end;
0x2056	0x370000  	BRA	L__AppCallback_TractionControl114
L__AppCallback_TractionControl166:
L__AppCallback_TractionControl114:
;NMRAnetAppCallbacks.mpas,506 :: 		end;
0x2058	0x370000  	BRA	L__AppCallback_TractionControl100
L__AppCallback_TractionControl113:
L__AppCallback_TractionControl100:
;NMRAnetAppCallbacks.mpas,508 :: 		end;
L_end_AppCallback_TractionControl:
0x205A	0x7806CF  	POP	W13
0x205C	0x78064F  	POP	W12
0x205E	0x7805CF  	POP	W11
0x2060	0x78054F  	POP	W10
0x2062	0xFA8000  	ULNK
0x2064	0x060000  	RETURN
; end of _AppCallback_TractionControl
_HalfToFloat:
0x0AFC	0xFA0004  	LNK	#4
;Float16.mpas,68 :: 		begin
;Float16.mpas,70 :: 		Sign := Half shr 15;
0x0AFE	0xDE504F  	LSR	W10, #15, W0
; Sign start address is: 16 (W8)
0x0B00	0x780400  	MOV	W0, W8
0x0B02	0xEB0480  	CLR	W9
;Float16.mpas,71 :: 		Exp := (Half and $7C00) shr 10;
0x0B04	0x27C000  	MOV	#31744, W0
0x0B06	0x650000  	AND	W10, W0, W0
0x0B08	0xDE004A  	LSR	W0, #10, W0
0x0B0A	0xEB0080  	CLR	W1
0x0B0C	0x980700  	MOV	W0, [W14+0]
0x0B0E	0x980711  	MOV	W1, [W14+2]
;Float16.mpas,72 :: 		Mantissa := Half and 1023;
0x0B10	0x203FF0  	MOV	#1023, W0
0x0B12	0x650000  	AND	W10, W0, W0
; Mantissa start address is: 22 (W11)
0x0B14	0x780580  	MOV	W0, W11
0x0B16	0xEB0600  	CLR	W12
;Float16.mpas,74 :: 		if (Exp > 0) and (Exp < 31) then
0x0B18	0x90000E  	MOV	[W14+0], W0
0x0B1A	0x90009E  	MOV	[W14+2], W1
0x0B1C	0xE10060  	CP	W0, #0
0x0B1E	0xE18860  	CPB	W1, #0
0x0B20	0xEF2004  	CLR	W2
0x0B22	0x340001  	BRA LE	L__HalfToFloat109
0x0B24	0xEEA004  	COM	W2
L__HalfToFloat109:
0x0B26	0xE1007F  	CP	W0, #31
0x0B28	0xE18860  	CPB	W1, #0
0x0B2A	0xEF2000  	CLR	W0
0x0B2C	0x3D0001  	BRA GE	L__HalfToFloat110
0x0B2E	0xEEA000  	COM	W0
L__HalfToFloat110:
0x0B30	0x610000  	AND	W2, W0, W0
0x0B32	0x320022  	BRA Z	L__HalfToFloat6
L__HalfToFloat111:
;Float16.mpas,77 :: 		Exp := Exp + (127 - 15);
0x0B34	0x200702  	MOV	#112, W2
0x0B36	0x200003  	MOV	#0, W3
0x0B38	0x4700E0  	ADD	W14, #0, W1
0x0B3A	0x470060  	ADD	W14, #0, W0
0x0B3C	0x411831  	ADD	W2, [W1++], [W0++]
0x0B3E	0x499021  	ADDC	W3, [W1--], [W0--]
;Float16.mpas,78 :: 		Mantissa := Mantissa shl 13;
0x0B40	0x2000D0  	MOV	#13, W0
0x0B42	0x78030B  	MOV	W11, W6
0x0B44	0x78038C  	MOV	W12, W7
L__HalfToFloat112:
0x0B46	0xE90000  	DEC	W0, W0
0x0B48	0x350003  	BRA LT	L__HalfToFloat113
0x0B4A	0xD00306  	SL	W6, W6
0x0B4C	0xD28387  	RLC	W7, W7
0x0B4E	0x37FFFB  	BRA	L__HalfToFloat112
L__HalfToFloat113:
; Mantissa end address is: 22 (W11)
;Float16.mpas,79 :: 		Dst := (Sign shl 31) or (DWord(Exp) shl 23) or Mantissa;
0x0B50	0x2001F0  	MOV	#31, W0
0x0B52	0xBE0208  	MOV.D	W8, W4
L__HalfToFloat114:
0x0B54	0xE90000  	DEC	W0, W0
0x0B56	0x350003  	BRA LT	L__HalfToFloat115
0x0B58	0xD00204  	SL	W4, W4
0x0B5A	0xD28285  	RLC	W5, W5
0x0B5C	0x37FFFB  	BRA	L__HalfToFloat114
L__HalfToFloat115:
; Sign end address is: 16 (W8)
0x0B5E	0x200173  	MOV	#23, W3
0x0B60	0x470160  	ADD	W14, #0, W2
0x0B62	0xBE0012  	MOV.D	[W2], W0
L__HalfToFloat116:
0x0B64	0xE90183  	DEC	W3, W3
0x0B66	0x350003  	BRA LT	L__HalfToFloat117
0x0B68	0xD00000  	SL	W0, W0
0x0B6A	0xD28081  	RLC	W1, W1
0x0B6C	0x37FFFB  	BRA	L__HalfToFloat116
L__HalfToFloat117:
0x0B6E	0x720000  	IOR	W4, W0, W0
0x0B70	0x728081  	IOR	W5, W1, W1
; Dst start address is: 0 (W0)
0x0B72	0x700006  	IOR	W0, W6, W0
0x0B74	0x708087  	IOR	W1, W7, W1
;Float16.mpas,81 :: 		end
; Dst end address is: 0 (W0)
0x0B76	0x370095  	BRA	L__HalfToFloat7
;Float16.mpas,82 :: 		else if (Exp = 0) and (Mantissa = 0) then
L__HalfToFloat6:
; Sign start address is: 16 (W8)
; Mantissa start address is: 22 (W11)
0x0B78	0x90000E  	MOV	[W14+0], W0
0x0B7A	0x90009E  	MOV	[W14+2], W1
0x0B7C	0xE10060  	CP	W0, #0
0x0B7E	0xE18860  	CPB	W1, #0
0x0B80	0xEF2004  	CLR	W2
0x0B82	0x3A0001  	BRA NZ	L__HalfToFloat118
0x0B84	0xEEA004  	COM	W2
L__HalfToFloat118:
0x0B86	0xE15860  	CP	W11, #0
0x0B88	0xE1E060  	CPB	W12, #0
0x0B8A	0xEF2000  	CLR	W0
0x0B8C	0x3A0001  	BRA NZ	L__HalfToFloat119
0x0B8E	0xEEA000  	COM	W0
L__HalfToFloat119:
0x0B90	0x610000  	AND	W2, W0, W0
0x0B92	0xE20000  	CP0	W0
0x0B94	0x32000B  	BRA Z	L__HalfToFloat9
L__HalfToFloat120:
; Mantissa end address is: 22 (W11)
;Float16.mpas,85 :: 		Dst := Sign shl 31;
0x0B96	0x2001F0  	MOV	#31, W0
; Dst start address is: 2 (W1)
0x0B98	0x780088  	MOV	W8, W1
0x0B9A	0x780109  	MOV	W9, W2
L__HalfToFloat121:
0x0B9C	0xE90000  	DEC	W0, W0
0x0B9E	0x350003  	BRA LT	L__HalfToFloat122
0x0BA0	0xD00081  	SL	W1, W1
0x0BA2	0xD28102  	RLC	W2, W2
0x0BA4	0x37FFFB  	BRA	L__HalfToFloat121
L__HalfToFloat122:
; Sign end address is: 16 (W8)
;Float16.mpas,86 :: 		end
0x0BA6	0x780001  	MOV	W1, W0
0x0BA8	0x780082  	MOV	W2, W1
; Dst end address is: 2 (W1)
0x0BAA	0x37007B  	BRA	L__HalfToFloat10
;Float16.mpas,87 :: 		else if (Exp = 0) and (Mantissa <> 0) then
L__HalfToFloat9:
; Sign start address is: 16 (W8)
; Mantissa start address is: 22 (W11)
0x0BAC	0x90000E  	MOV	[W14+0], W0
0x0BAE	0x90009E  	MOV	[W14+2], W1
0x0BB0	0xE10060  	CP	W0, #0
0x0BB2	0xE18860  	CPB	W1, #0
0x0BB4	0xEF2004  	CLR	W2
0x0BB6	0x3A0001  	BRA NZ	L__HalfToFloat123
0x0BB8	0xEEA004  	COM	W2
L__HalfToFloat123:
0x0BBA	0xE15860  	CP	W11, #0
0x0BBC	0xE1E060  	CPB	W12, #0
0x0BBE	0xEF2000  	CLR	W0
0x0BC0	0x320001  	BRA Z	L__HalfToFloat124
0x0BC2	0xEEA000  	COM	W0
L__HalfToFloat124:
0x0BC4	0x610000  	AND	W2, W0, W0
0x0BC6	0xE20000  	CP0	W0
0x0BC8	0x32003C  	BRA Z	L__HalfToFloat12
L__HalfToFloat125:
; Mantissa end address is: 22 (W11)
; Sign end address is: 16 (W8)
;Float16.mpas,90 :: 		while (Mantissa and $00000400) = 0 do
L__HalfToFloat15:
; Mantissa start address is: 22 (W11)
; Sign start address is: 16 (W8)
0x0BCA	0x204000  	MOV	#1024, W0
0x0BCC	0x200001  	MOV	#0, W1
0x0BCE	0x658000  	AND	W11, W0, W0
0x0BD0	0x660081  	AND	W12, W1, W1
0x0BD2	0xE10060  	CP	W0, #0
0x0BD4	0xE18860  	CPB	W1, #0
0x0BD6	0x3A000C  	BRA NZ	L__HalfToFloat16
L__HalfToFloat126:
;Float16.mpas,92 :: 		Mantissa := Mantissa shl 1;
; Mantissa start address is: 6 (W3)
0x0BD8	0x78018B  	MOV	W11, W3
0x0BDA	0x78020C  	MOV	W12, W4
0x0BDC	0xD00183  	SL	W3, W3
0x0BDE	0xD28204  	RLC	W4, W4
; Mantissa end address is: 22 (W11)
;Float16.mpas,93 :: 		Dec(Exp);
0x0BE0	0x90008E  	MOV	[W14+0], W1
0x0BE2	0x90011E  	MOV	[W14+2], W2
0x0BE4	0x470060  	ADD	W14, #0, W0
0x0BE6	0x509861  	SUB	W1, #1, [W0++]
0x0BE8	0x591060  	SUBB	W2, #0, [W0--]
;Float16.mpas,94 :: 		end;
; Mantissa end address is: 6 (W3)
0x0BEA	0x780583  	MOV	W3, W11
0x0BEC	0x780604  	MOV	W4, W12
0x0BEE	0x37FFED  	BRA	L__HalfToFloat15
L__HalfToFloat16:
;Float16.mpas,95 :: 		Inc(Exp);
; Mantissa start address is: 22 (W11)
0x0BF0	0x90000E  	MOV	[W14+0], W0
0x0BF2	0x90009E  	MOV	[W14+2], W1
0x0BF4	0x4002E1  	ADD	W0, #1, W5
0x0BF6	0x488360  	ADDC	W1, #0, W6
;Float16.mpas,96 :: 		Mantissa := Mantissa and not $00000400;
0x0BF8	0x2FBFF0  	MOV	#64511, W0
0x0BFA	0x200001  	MOV	#0, W1
0x0BFC	0x658180  	AND	W11, W0, W3
0x0BFE	0x660201  	AND	W12, W1, W4
; Mantissa end address is: 22 (W11)
;Float16.mpas,98 :: 		Exp := Exp + (127 - 15);
0x0C00	0x200701  	MOV	#112, W1
0x0C02	0x200002  	MOV	#0, W2
0x0C04	0x470060  	ADD	W14, #0, W0
0x0C06	0x429801  	ADD	W5, W1, [W0++]
0x0C08	0x4B1002  	ADDC	W6, W2, [W0--]
;Float16.mpas,99 :: 		Mantissa := Mantissa shl 13;
0x0C0A	0x2000D0  	MOV	#13, W0
0x0C0C	0x780303  	MOV	W3, W6
0x0C0E	0x780384  	MOV	W4, W7
L__HalfToFloat127:
0x0C10	0xE90000  	DEC	W0, W0
0x0C12	0x350003  	BRA LT	L__HalfToFloat128
0x0C14	0xD00306  	SL	W6, W6
0x0C16	0xD28387  	RLC	W7, W7
0x0C18	0x37FFFB  	BRA	L__HalfToFloat127
L__HalfToFloat128:
;Float16.mpas,100 :: 		Dst := (Sign shl 31) or (DWord(Exp) shl 23) or Mantissa;
0x0C1A	0x2001F0  	MOV	#31, W0
0x0C1C	0xBE0208  	MOV.D	W8, W4
L__HalfToFloat129:
0x0C1E	0xE90000  	DEC	W0, W0
0x0C20	0x350003  	BRA LT	L__HalfToFloat130
0x0C22	0xD00204  	SL	W4, W4
0x0C24	0xD28285  	RLC	W5, W5
0x0C26	0x37FFFB  	BRA	L__HalfToFloat129
L__HalfToFloat130:
; Sign end address is: 16 (W8)
0x0C28	0x200173  	MOV	#23, W3
0x0C2A	0x470160  	ADD	W14, #0, W2
0x0C2C	0xBE0012  	MOV.D	[W2], W0
L__HalfToFloat131:
0x0C2E	0xE90183  	DEC	W3, W3
0x0C30	0x350003  	BRA LT	L__HalfToFloat132
0x0C32	0xD00000  	SL	W0, W0
0x0C34	0xD28081  	RLC	W1, W1
0x0C36	0x37FFFB  	BRA	L__HalfToFloat131
L__HalfToFloat132:
0x0C38	0x720000  	IOR	W4, W0, W0
0x0C3A	0x728081  	IOR	W5, W1, W1
; Dst start address is: 0 (W0)
0x0C3C	0x700006  	IOR	W0, W6, W0
0x0C3E	0x708087  	IOR	W1, W7, W1
;Float16.mpas,102 :: 		end
; Dst end address is: 0 (W0)
0x0C40	0x370030  	BRA	L__HalfToFloat13
;Float16.mpas,103 :: 		else if (Exp = 31) and (Mantissa = 0) then
L__HalfToFloat12:
; Sign start address is: 16 (W8)
; Mantissa start address is: 22 (W11)
0x0C42	0x90000E  	MOV	[W14+0], W0
0x0C44	0x90009E  	MOV	[W14+2], W1
0x0C46	0xE1007F  	CP	W0, #31
0x0C48	0xE18860  	CPB	W1, #0
0x0C4A	0xEF2004  	CLR	W2
0x0C4C	0x3A0001  	BRA NZ	L__HalfToFloat133
0x0C4E	0xEEA004  	COM	W2
L__HalfToFloat133:
0x0C50	0xE15860  	CP	W11, #0
0x0C52	0xE1E060  	CPB	W12, #0
0x0C54	0xEF2000  	CLR	W0
0x0C56	0x3A0001  	BRA NZ	L__HalfToFloat134
0x0C58	0xEEA000  	COM	W0
L__HalfToFloat134:
0x0C5A	0x610000  	AND	W2, W0, W0
0x0C5C	0xE20000  	CP0	W0
0x0C5E	0x32000C  	BRA Z	L__HalfToFloat20
L__HalfToFloat135:
; Mantissa end address is: 22 (W11)
;Float16.mpas,106 :: 		Dst := (Sign shl 31) or $7F800000;
0x0C60	0x2001F0  	MOV	#31, W0
0x0C62	0xBE0108  	MOV.D	W8, W2
L__HalfToFloat136:
0x0C64	0xE90000  	DEC	W0, W0
0x0C66	0x350003  	BRA LT	L__HalfToFloat137
0x0C68	0xD00102  	SL	W2, W2
0x0C6A	0xD28183  	RLC	W3, W3
0x0C6C	0x37FFFB  	BRA	L__HalfToFloat136
L__HalfToFloat137:
; Sign end address is: 16 (W8)
0x0C6E	0x200000  	MOV	#0, W0
0x0C70	0x27F801  	MOV	#32640, W1
; Dst start address is: 0 (W0)
0x0C72	0x710000  	IOR	W2, W0, W0
0x0C74	0x718081  	IOR	W3, W1, W1
;Float16.mpas,107 :: 		end
; Dst end address is: 0 (W0)
0x0C76	0x370015  	BRA	L__HalfToFloat21
;Float16.mpas,108 :: 		else //if (Exp = 31) and (Mantisa <> 0) then
L__HalfToFloat20:
;Float16.mpas,111 :: 		Dst := (Sign shl 31) or $7F800000 or (Mantissa shl 13);
; Sign start address is: 16 (W8)
; Mantissa start address is: 22 (W11)
0x0C78	0x2001F0  	MOV	#31, W0
0x0C7A	0xBE0108  	MOV.D	W8, W2
L__HalfToFloat138:
0x0C7C	0xE90000  	DEC	W0, W0
0x0C7E	0x350003  	BRA LT	L__HalfToFloat139
0x0C80	0xD00102  	SL	W2, W2
0x0C82	0xD28183  	RLC	W3, W3
0x0C84	0x37FFFB  	BRA	L__HalfToFloat138
L__HalfToFloat139:
; Sign end address is: 16 (W8)
0x0C86	0x200000  	MOV	#0, W0
0x0C88	0x27F801  	MOV	#32640, W1
0x0C8A	0x710200  	IOR	W2, W0, W4
0x0C8C	0x718281  	IOR	W3, W1, W5
0x0C8E	0x2000D2  	MOV	#13, W2
0x0C90	0x78000B  	MOV	W11, W0
0x0C92	0x78008C  	MOV	W12, W1
L__HalfToFloat140:
0x0C94	0xE90102  	DEC	W2, W2
0x0C96	0x350003  	BRA LT	L__HalfToFloat141
0x0C98	0xD00000  	SL	W0, W0
0x0C9A	0xD28081  	RLC	W1, W1
0x0C9C	0x37FFFB  	BRA	L__HalfToFloat140
L__HalfToFloat141:
; Mantissa end address is: 22 (W11)
; Dst start address is: 0 (W0)
0x0C9E	0x720000  	IOR	W4, W0, W0
0x0CA0	0x728081  	IOR	W5, W1, W1
; Dst end address is: 0 (W0)
;Float16.mpas,112 :: 		end;
L__HalfToFloat21:
; Dst start address is: 0 (W0)
; Dst end address is: 0 (W0)
L__HalfToFloat13:
; Dst start address is: 0 (W0)
; Dst end address is: 0 (W0)
L__HalfToFloat10:
; Dst start address is: 0 (W0)
; Dst end address is: 0 (W0)
L__HalfToFloat7:
;Float16.mpas,115 :: 		Result := PReal(@Dst)^;
; Dst start address is: 0 (W0)
; Result start address is: 4 (W2)
0x0CA2	0xBE0100  	MOV.D	W0, W2
; Dst end address is: 0 (W0)
;Float16.mpas,116 :: 		end;
0x0CA4	0xBE0002  	MOV.D	W2, W0
; Result end address is: 4 (W2)
L_end_HalfToFloat:
0x0CA6	0xFA8000  	ULNK
0x0CA8	0x060000  	RETURN
; end of _HalfToFloat
_StartCANHighPriorityMessageEngine:
;dsPIC33_CAN.mpas,320 :: 		begin
;dsPIC33_CAN.mpas,321 :: 		Buffer := CANStorage_NextHighPriorityToSend;                                  // Pull the next item to send out of the list
0x2066	0x781F8A  	PUSH	W10
0x2068	0x781F8B  	PUSH	W11
0x206A	0x781F8C  	PUSH	W12
0x206C	0x07F534  	RCALL	_CANStorage_NextHighPriorityToSend
; Buffer start address is: 14 (W7)
0x206E	0x780380  	MOV	W0, W7
;dsPIC33_CAN.mpas,323 :: 		if Buffer <> nil then
0x2070	0xE10060  	CP	W0, #0
0x2072	0x32000B  	BRA Z	L__StartCANHighPriorityMessageEngine6
L__StartCANHighPriorityMessageEngine292:
;dsPIC33_CAN.mpas,362 :: 		dsPIC33_DMA_Style_Buffer(CAN_DIRECTION_WRITE, @TX_Main_RawBufferArray[CAN_TX_1_BUFFER].Word0, Buffer^);      // Convert it into a version that matches the registers
0x2074	0x780607  	MOV	W7, W12
0x2076	0x21010B  	MOV	#lo_addr(_TX_Main_RawBufferArray+16), W11
0x2078	0xEF2014  	CLR	W10
0x207A	0x070C60  	RCALL	dsPIC33_CAN_dsPIC33_DMA_Style_Buffer
;dsPIC33_CAN.mpas,400 :: 		dsPIC33_CAN_RequestTransmit(CAN_TX_1_BUFFER);                             // Set the Flag to start the transmission
0x207C	0x20001A  	MOV	#1, W10
0x207E	0x070C55  	RCALL	_dsPIC33_CAN_RequestTransmit
;dsPIC33_CAN.mpas,401 :: 		Buffer^.State := Buffer^.State and not BS_ALLOCATED;                           // Release the Buffer from the List
0x2080	0x43816D  	ADD	W7, #13, W2
; Buffer end address is: 14 (W7)
0x2082	0xFB8092  	ZE	[W2], W1
0x2084	0x200FD0  	MOV	#253, W0
0x2086	0x608000  	AND	W1, W0, W0
0x2088	0x784900  	MOV.B	W0, [W2]
;dsPIC33_CAN.mpas,402 :: 		end
L__StartCANHighPriorityMessageEngine6:
;dsPIC33_CAN.mpas,403 :: 		end;
L_end_StartCANHighPriorityMessageEngine:
0x208A	0x78064F  	POP	W12
0x208C	0x7805CF  	POP	W11
0x208E	0x78054F  	POP	W10
0x2090	0x060000  	RETURN
; end of _StartCANHighPriorityMessageEngine
_CANStorage_NextHighPriorityToSend:
;CANStorage.mpas,167 :: 		begin
;CANStorage.mpas,168 :: 		if CAN_Engine.TX_AddressedErrorBuffer.State and BS_ALLOCATED = BS_ALLOCATED then
0x0AD6	0x226050  	MOV	#lo_addr(_CAN_Engine+43), W0
0x0AD8	0xFB8010  	ZE	[W0], W0
0x0ADA	0x600062  	AND	W0, #2, W0
0x0ADC	0xE10062  	CP	W0, #2
0x0ADE	0x3A0002  	BRA NZ	L__CANStorage_NextHighPriorityToSend26
L__CANStorage_NextHighPriorityToSend42:
;CANStorage.mpas,169 :: 		Result := @CAN_Engine.TX_AddressedErrorBuffer
; Result start address is: 2 (W1)
0x0AE0	0x225F81  	MOV	#lo_addr(_CAN_Engine+30), W1
; Result end address is: 2 (W1)
0x0AE2	0x37000A  	BRA	L__CANStorage_NextHighPriorityToSend27
;CANStorage.mpas,170 :: 		else
L__CANStorage_NextHighPriorityToSend26:
;CANStorage.mpas,171 :: 		if CAN_Engine.TX_DatagramRejected.State and BS_ALLOCATED = BS_ALLOCATED then
0x0AE4	0x226130  	MOV	#lo_addr(_CAN_Engine+57), W0
0x0AE6	0xFB8010  	ZE	[W0], W0
0x0AE8	0x600062  	AND	W0, #2, W0
0x0AEA	0xE10062  	CP	W0, #2
0x0AEC	0x3A0003  	BRA NZ	L__CANStorage_NextHighPriorityToSend29
L__CANStorage_NextHighPriorityToSend43:
;CANStorage.mpas,172 :: 		Result := @CAN_Engine.TX_DatagramRejected
; Result start address is: 0 (W0)
0x0AEE	0x226060  	MOV	#lo_addr(_CAN_Engine+44), W0
0x0AF0	0x780080  	MOV	W0, W1
; Result end address is: 0 (W0)
0x0AF2	0x370002  	BRA	L__CANStorage_NextHighPriorityToSend30
;CANStorage.mpas,173 :: 		else
L__CANStorage_NextHighPriorityToSend29:
;CANStorage.mpas,174 :: 		Result := PCANBuffer( nil);
; Result start address is: 0 (W0)
0x0AF4	0x200000  	MOV	#0, W0
; Result end address is: 0 (W0)
0x0AF6	0x780080  	MOV	W0, W1
L__CANStorage_NextHighPriorityToSend30:
; Result start address is: 2 (W1)
; Result end address is: 2 (W1)
L__CANStorage_NextHighPriorityToSend27:
;CANStorage.mpas,175 :: 		end;
; Result start address is: 2 (W1)
0x0AF8	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_CANStorage_NextHighPriorityToSend:
0x0AFA	0x060000  	RETURN
; end of _CANStorage_NextHighPriorityToSend
_NMRAnetUtilities_CANBufferBytesToNodeID:
;NMRAnetUtilities.mpas,251 :: 		begin
;NMRAnetUtilities.mpas,252 :: 		NodeID[1] := DataBytes^[iStartByte+2];
0x1AC4	0x458164  	ADD	W11, #4, W2
0x1AC6	0xFB800C  	ZE	W12, W0
0x1AC8	0xECA000  	INC2	W0
0x1ACA	0x450000  	ADD	W10, W0, W0
0x1ACC	0xFB8010  	ZE	[W0], W0
0x1ACE	0xEB0080  	CLR	W1
0x1AD0	0xBE8900  	MOV.D	W0, [W2]
;NMRAnetUtilities.mpas,253 :: 		NodeID[1] := NodeID[1] or DataBytes^[iStartByte+1] shl 8;
0x1AD2	0x458364  	ADD	W11, #4, W6
0x1AD4	0x4582E4  	ADD	W11, #4, W5
0x1AD6	0xFB800C  	ZE	W12, W0
0x1AD8	0xEC2000  	INC	W0
0x1ADA	0x450000  	ADD	W10, W0, W0
0x1ADC	0xFB8190  	ZE	[W0], W3
0x1ADE	0xEB0200  	CLR	W4
0x1AE0	0x200082  	MOV	#8, W2
0x1AE2	0x780003  	MOV	W3, W0
0x1AE4	0x780084  	MOV	W4, W1
L__NMRAnetUtilities_CANBufferBytesToNodeID286:
0x1AE6	0xE90102  	DEC	W2, W2
0x1AE8	0x350003  	BRA LT	L__NMRAnetUtilities_CANBufferBytesToNodeID287
0x1AEA	0xD00000  	SL	W0, W0
0x1AEC	0xD28081  	RLC	W1, W1
0x1AEE	0x37FFFB  	BRA	L__NMRAnetUtilities_CANBufferBytesToNodeID286
L__NMRAnetUtilities_CANBufferBytesToNodeID287:
0x1AF0	0x701B35  	IOR	W0, [W5++], [W6++]
0x1AF2	0x709325  	IOR	W1, [W5--], [W6--]
;NMRAnetUtilities.mpas,254 :: 		NodeID[1] := NodeID[1] or DataBytes^[iStartByte] shl 16;
0x1AF4	0x4581E4  	ADD	W11, #4, W3
0x1AF6	0x458164  	ADD	W11, #4, W2
0x1AF8	0xFB800C  	ZE	W12, W0
0x1AFA	0x450000  	ADD	W10, W0, W0
0x1AFC	0xFB8010  	ZE	[W0], W0
0x1AFE	0xEB0080  	CLR	W1
0x1B00	0x780080  	MOV	W0, W1
0x1B02	0xEB0000  	CLR	W0
0x1B04	0x7019B2  	IOR	W0, [W2++], [W3++]
0x1B06	0x7091A2  	IOR	W1, [W2--], [W3--]
;NMRAnetUtilities.mpas,255 :: 		NodeID[0] := DataBytes^[iStartByte+5];
0x1B08	0xFB800C  	ZE	W12, W0
0x1B0A	0x400065  	ADD	W0, #5, W0
0x1B0C	0x450000  	ADD	W10, W0, W0
0x1B0E	0xFB8010  	ZE	[W0], W0
0x1B10	0xEB0080  	CLR	W1
0x1B12	0xBE8D80  	MOV.D	W0, [W11]
;NMRAnetUtilities.mpas,256 :: 		NodeID[0] := NodeID[0] or DataBytes^[iStartByte+4] shl 8;
0x1B14	0xFB800C  	ZE	W12, W0
0x1B16	0x400064  	ADD	W0, #4, W0
0x1B18	0x450000  	ADD	W10, W0, W0
0x1B1A	0xFB8210  	ZE	[W0], W4
0x1B1C	0xEB0280  	CLR	W5
0x1B1E	0x200080  	MOV	#8, W0
0x1B20	0xBE0104  	MOV.D	W4, W2
L__NMRAnetUtilities_CANBufferBytesToNodeID288:
0x1B22	0xE90000  	DEC	W0, W0
0x1B24	0x350003  	BRA LT	L__NMRAnetUtilities_CANBufferBytesToNodeID289
0x1B26	0xD00102  	SL	W2, W2
0x1B28	0xD28183  	RLC	W3, W3
0x1B2A	0x37FFFB  	BRA	L__NMRAnetUtilities_CANBufferBytesToNodeID288
L__NMRAnetUtilities_CANBufferBytesToNodeID289:
0x1B2C	0xBE001B  	MOV.D	[W11], W0
0x1B2E	0x701D82  	IOR	W0, W2, [W11++]
0x1B30	0x709583  	IOR	W1, W3, [W11--]
;NMRAnetUtilities.mpas,257 :: 		NodeID[0] := NodeID[0] or DataBytes^[iStartByte+3] shl 16;
0x1B32	0xFB800C  	ZE	W12, W0
0x1B34	0x400063  	ADD	W0, #3, W0
0x1B36	0x450000  	ADD	W10, W0, W0
0x1B38	0xFB8010  	ZE	[W0], W0
0x1B3A	0xEB0080  	CLR	W1
0x1B3C	0x780180  	MOV	W0, W3
0x1B3E	0xEB0100  	CLR	W2
0x1B40	0xBE001B  	MOV.D	[W11], W0
0x1B42	0x701D82  	IOR	W0, W2, [W11++]
0x1B44	0x709583  	IOR	W1, W3, [W11--]
;NMRAnetUtilities.mpas,258 :: 		end;
L_end_NMRAnetUtilities_CANBufferBytesToNodeID:
0x1B46	0x060000  	RETURN
; end of _NMRAnetUtilities_CANBufferBytesToNodeID
_NMRAnetNode_FindByNodeID:
;NMRAnetNode.mpas,224 :: 		begin
;NMRAnetNode.mpas,225 :: 		Result := PNMRAnetNode( nil);
; Result start address is: 12 (W6)
0x1A68	0x200006  	MOV	#0, W6
;NMRAnetNode.mpas,226 :: 		for i := 0 to Nodes.AllocatedCount - 1 do
; i start address is: 14 (W7)
0x1A6A	0xEF200E  	CLR	W7
; Result end address is: 12 (W6)
; i end address is: 14 (W7)
L__NMRAnetNode_FindByNodeID31:
; i start address is: 14 (W7)
; Result start address is: 12 (W6)
0x1A6C	0x812780  	MOV	_Nodes+3120, W0
0x1A6E	0x5002E1  	SUB	W0, #1, W5
0x1A70	0xE13805  	CP	W7, W5
0x1A72	0x3C0020  	BRA GT	L__NMRAnetNode_FindByNodeID211
L__NMRAnetNode_FindByNodeID235:
;NMRAnetNode.mpas,228 :: 		if Nodes.AllocatedList[i]^.Info.ID[0] = NodeID[0] then
0x1A74	0xDD38C1  	SL	W7, #1, W1
0x1A76	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x1A78	0x400001  	ADD	W0, W1, W0
0x1A7A	0x780010  	MOV	[W0], W0
0x1A7C	0x400262  	ADD	W0, #2, W4
0x1A7E	0xBE011A  	MOV.D	[W10], W2
0x1A80	0xBE0014  	MOV.D	[W4], W0
0x1A82	0xE10002  	CP	W0, W2
0x1A84	0xE18803  	CPB	W1, W3
0x1A86	0x3A0012  	BRA NZ	L__NMRAnetNode_FindByNodeID37
L__NMRAnetNode_FindByNodeID236:
;NMRAnetNode.mpas,229 :: 		if Nodes.AllocatedList[i]^.Info.ID[1] = NodeID[1] then
0x1A88	0xDD38C1  	SL	W7, #1, W1
0x1A8A	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x1A8C	0x400001  	ADD	W0, W1, W0
0x1A8E	0x780010  	MOV	[W0], W0
0x1A90	0xECA000  	INC2	W0
0x1A92	0x400264  	ADD	W0, #4, W4
0x1A94	0x450064  	ADD	W10, #4, W0
0x1A96	0xBE0110  	MOV.D	[W0], W2
0x1A98	0xBE0014  	MOV.D	[W4], W0
0x1A9A	0xE10002  	CP	W0, W2
0x1A9C	0xE18803  	CPB	W1, W3
0x1A9E	0x3A0006  	BRA NZ	L__NMRAnetNode_FindByNodeID40
L__NMRAnetNode_FindByNodeID237:
; Result end address is: 12 (W6)
;NMRAnetNode.mpas,231 :: 		Result := Nodes.AllocatedList[i];
0x1AA0	0xDD38C1  	SL	W7, #1, W1
; i end address is: 14 (W7)
0x1AA2	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x1AA4	0x400001  	ADD	W0, W1, W0
; Result start address is: 0 (W0)
0x1AA6	0x780010  	MOV	[W0], W0
;NMRAnetNode.mpas,232 :: 		Break
0x1AA8	0x780080  	MOV	W0, W1
; Result end address is: 0 (W0)
0x1AAA	0x370007  	BRA	L__NMRAnetNode_FindByNodeID35
;NMRAnetNode.mpas,233 :: 		end;
L__NMRAnetNode_FindByNodeID40:
; i start address is: 14 (W7)
; Result start address is: 12 (W6)
L__NMRAnetNode_FindByNodeID37:
;NMRAnetNode.mpas,234 :: 		end
0x1AAC	0xE13805  	CP	W7, W5
0x1AAE	0x320004  	BRA Z	L__NMRAnetNode_FindByNodeID212
L__NMRAnetNode_FindByNodeID238:
; i start address is: 14 (W7)
0x1AB0	0xEC200E  	INC	W7
; i end address is: 14 (W7)
; Result end address is: 12 (W6)
; i end address is: 14 (W7)
0x1AB2	0x37FFDC  	BRA	L__NMRAnetNode_FindByNodeID31
L__NMRAnetNode_FindByNodeID211:
;NMRAnetNode.mpas,226 :: 		for i := 0 to Nodes.AllocatedCount - 1 do
0x1AB4	0x780086  	MOV	W6, W1
;NMRAnetNode.mpas,234 :: 		end
0x1AB6	0x370001  	BRA	L__NMRAnetNode_FindByNodeID35
L__NMRAnetNode_FindByNodeID212:
0x1AB8	0x780086  	MOV	W6, W1
L__NMRAnetNode_FindByNodeID35:
;NMRAnetNode.mpas,235 :: 		end;
; Result start address is: 2 (W1)
0x1ABA	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetNode_FindByNodeID:
0x1ABC	0x060000  	RETURN
; end of _NMRAnetNode_FindByNodeID
_AppCallback_ConsumerIdentify:
;NMRAnetAppCallbacks.mpas,311 :: 		begin
;NMRAnetAppCallbacks.mpas,312 :: 		Result := False;                                                              // Do the default
; Result start address is: 2 (W1)
0x1ABE	0xEF2002  	CLR	W1
;NMRAnetAppCallbacks.mpas,313 :: 		end;
0x1AC0	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_AppCallback_ConsumerIdentify:
0x1AC2	0x060000  	RETURN
; end of _AppCallback_ConsumerIdentify
_NMRAnetUtilities_SupportsVNodeEventAsConsumer:
;NMRAnetUtilities.mpas,663 :: 		begin
;NMRAnetUtilities.mpas,664 :: 		Result := False;
; Result start address is: 8 (W4)
0x1A34	0xEF2008  	CLR	W4
;NMRAnetUtilities.mpas,666 :: 		EventIndex := 0;
0x1A36	0xEF2000  	CLR	W0
0x1A38	0x780D80  	MOV	W0, [W11]
; Result end address is: 8 (W4)
;NMRAnetUtilities.mpas,667 :: 		while (EventIndex < MAX_VNODE_SUPPORTED_EVENTS_CONSUMED) do
L__NMRAnetUtilities_SupportsVNodeEventAsConsumer121:
; Result start address is: 8 (W4)
0x1A3A	0x78001B  	MOV	[W11], W0
0x1A3C	0xE10061  	CP	W0, #1
0x1A3E	0x3D0011  	BRA GE	L__NMRAnetUtilities_SupportsVNodeEventAsConsumer122
L__NMRAnetUtilities_SupportsVNodeEventAsConsumer364:
;NMRAnetUtilities.mpas,669 :: 		if NMRAnetUtilities_EqualEventID(@SUPPORTED_VNODE_EVENTS_CONSUMED[EventIndex], DataBytes) then
0x1A40	0x78001B  	MOV	[W11], W0
0x1A42	0xDD00C3  	SL	W0, #3, W1
0x1A44	0x28DA50  	MOV	#lo_addr(_SUPPORTED_VNODE_EVENTS_CONSUMED), W0
0x1A46	0x400001  	ADD	W0, W1, W0
0x1A48	0xBE9F8A  	PUSH.D	W10
0x1A4A	0x78058A  	MOV	W10, W11
0x1A4C	0x780500  	MOV	W0, W10
0x1A4E	0x07FB6C  	RCALL	_NMRAnetUtilities_EqualEventID
0x1A50	0xBE054F  	POP.D	W10
0x1A52	0xE20000  	CP0	W0
0x1A54	0x320002  	BRA Z	L__NMRAnetUtilities_SupportsVNodeEventAsConsumer126
L__NMRAnetUtilities_SupportsVNodeEventAsConsumer365:
; Result end address is: 8 (W4)
;NMRAnetUtilities.mpas,671 :: 		Result := True;
; Result start address is: 2 (W1)
0x1A56	0x2FFFF1  	MOV	#65535, W1
;NMRAnetUtilities.mpas,672 :: 		Exit
; Result end address is: 2 (W1)
0x1A58	0x370005  	BRA	L_end__NMRAnetUtilities_SupportsVNodeEventAsConsumer
;NMRAnetUtilities.mpas,673 :: 		end;
L__NMRAnetUtilities_SupportsVNodeEventAsConsumer126:
;NMRAnetUtilities.mpas,674 :: 		Inc(EventIndex)
; Result start address is: 8 (W4)
0x1A5A	0x78001B  	MOV	[W11], W0
0x1A5C	0xEC2000  	INC	W0
0x1A5E	0x780D80  	MOV	W0, [W11]
;NMRAnetUtilities.mpas,675 :: 		end;
0x1A60	0x37FFEC  	BRA	L__NMRAnetUtilities_SupportsVNodeEventAsConsumer121
L__NMRAnetUtilities_SupportsVNodeEventAsConsumer122:
;NMRAnetUtilities.mpas,677 :: 		end;
0x1A62	0x780084  	MOV	W4, W1
L_end__NMRAnetUtilities_SupportsVNodeEventAsConsumer:
; Result end address is: 8 (W4)
; Result start address is: 2 (W1)
0x1A64	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_SupportsVNodeEventAsConsumer:
0x1A66	0x060000  	RETURN
; end of _NMRAnetUtilities_SupportsVNodeEventAsConsumer
_NMRAnetUtilities_EqualEventID:
;NMRAnetUtilities.mpas,564 :: 		begin
;NMRAnetUtilities.mpas,565 :: 		Result := True;
; Result start address is: 4 (W2)
0x1128	0x2FFFF2  	MOV	#65535, W2
;NMRAnetUtilities.mpas,566 :: 		i := 0;
; i start address is: 6 (W3)
0x112A	0xEF2006  	CLR	W3
; Result end address is: 4 (W2)
; i end address is: 6 (W3)
;NMRAnetUtilities.mpas,567 :: 		while (i < 8) and Result do
L__NMRAnetUtilities_EqualEventID85:
; i start address is: 6 (W3)
; Result start address is: 4 (W2)
0x112C	0xE11868  	CP	W3, #8
0x112E	0xEF2000  	CLR	W0
0x1130	0x3D0001  	BRA GE	L__NMRAnetUtilities_EqualEventID351
0x1132	0xEEA000  	COM	W0
L__NMRAnetUtilities_EqualEventID351:
0x1134	0x600002  	AND	W0, W2, W0
0x1136	0x320009  	BRA Z	L__NMRAnetUtilities_EqualEventID240
L__NMRAnetUtilities_EqualEventID352:
;NMRAnetUtilities.mpas,569 :: 		if Event1^[i] <> Event2^[i] then
0x1138	0x450003  	ADD	W10, W3, W0
0x113A	0x458083  	ADD	W11, W3, W1
0x113C	0x784010  	MOV.B	[W0], W0
0x113E	0xE10411  	CP.B	W0, [W1]
0x1140	0x320002  	BRA Z	L__NMRAnetUtilities_EqualEventID90
L__NMRAnetUtilities_EqualEventID353:
; Result end address is: 4 (W2)
; i end address is: 6 (W3)
;NMRAnetUtilities.mpas,571 :: 		Result := False;
; Result start address is: 2 (W1)
0x1142	0xEF2002  	CLR	W1
;NMRAnetUtilities.mpas,572 :: 		Break
; Result end address is: 2 (W1)
0x1144	0x370003  	BRA	L__NMRAnetUtilities_EqualEventID86
;NMRAnetUtilities.mpas,573 :: 		end;
L__NMRAnetUtilities_EqualEventID90:
;NMRAnetUtilities.mpas,574 :: 		Inc(i);
; i start address is: 6 (W3)
; Result start address is: 4 (W2)
0x1146	0xEC2006  	INC	W3
;NMRAnetUtilities.mpas,575 :: 		end;
; Result end address is: 4 (W2)
; i end address is: 6 (W3)
0x1148	0x37FFF1  	BRA	L__NMRAnetUtilities_EqualEventID85
L__NMRAnetUtilities_EqualEventID240:
;NMRAnetUtilities.mpas,567 :: 		while (i < 8) and Result do
0x114A	0x780082  	MOV	W2, W1
;NMRAnetUtilities.mpas,575 :: 		end;
L__NMRAnetUtilities_EqualEventID86:
;NMRAnetUtilities.mpas,576 :: 		end;
; Result start address is: 2 (W1)
0x114C	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_EqualEventID:
0x114E	0x060000  	RETURN
; end of _NMRAnetUtilities_EqualEventID
_NMRAnetUtilities_SupportsEventAsConsumer:
;NMRAnetUtilities.mpas,613 :: 		begin
;NMRAnetUtilities.mpas,614 :: 		Result := False;
; Result start address is: 8 (W4)
0x3138	0xEF2008  	CLR	W4
;NMRAnetUtilities.mpas,616 :: 		EventIndex := 0;
0x313A	0xEF2000  	CLR	W0
0x313C	0x780D80  	MOV	W0, [W11]
; Result end address is: 8 (W4)
;NMRAnetUtilities.mpas,617 :: 		while (EventIndex < MAX_SUPPORTED_EVENTS_CONSUMED) do
L__NMRAnetUtilities_SupportsEventAsConsumer103:
; Result start address is: 8 (W4)
0x313E	0x78001B  	MOV	[W11], W0
0x3140	0xE10061  	CP	W0, #1
0x3142	0x3D0011  	BRA GE	L__NMRAnetUtilities_SupportsEventAsConsumer104
L__NMRAnetUtilities_SupportsEventAsConsumer358:
;NMRAnetUtilities.mpas,619 :: 		if NMRAnetUtilities_EqualEventID(@SUPPORTED_EVENTS_CONSUMED[EventIndex], DataBytes) then
0x3144	0x78001B  	MOV	[W11], W0
0x3146	0xDD00C3  	SL	W0, #3, W1
0x3148	0x28D9D0  	MOV	#lo_addr(_SUPPORTED_EVENTS_CONSUMED), W0
0x314A	0x400001  	ADD	W0, W1, W0
0x314C	0xBE9F8A  	PUSH.D	W10
0x314E	0x78058A  	MOV	W10, W11
0x3150	0x780500  	MOV	W0, W10
0x3152	0x07EFEA  	RCALL	_NMRAnetUtilities_EqualEventID
0x3154	0xBE054F  	POP.D	W10
0x3156	0xE20000  	CP0	W0
0x3158	0x320002  	BRA Z	L__NMRAnetUtilities_SupportsEventAsConsumer108
L__NMRAnetUtilities_SupportsEventAsConsumer359:
; Result end address is: 8 (W4)
;NMRAnetUtilities.mpas,621 :: 		Result := True;
; Result start address is: 2 (W1)
0x315A	0x2FFFF1  	MOV	#65535, W1
;NMRAnetUtilities.mpas,622 :: 		Exit
; Result end address is: 2 (W1)
0x315C	0x370005  	BRA	L_end__NMRAnetUtilities_SupportsEventAsConsumer
;NMRAnetUtilities.mpas,623 :: 		end;
L__NMRAnetUtilities_SupportsEventAsConsumer108:
;NMRAnetUtilities.mpas,624 :: 		Inc(EventIndex)
; Result start address is: 8 (W4)
0x315E	0x78001B  	MOV	[W11], W0
0x3160	0xEC2000  	INC	W0
0x3162	0x780D80  	MOV	W0, [W11]
;NMRAnetUtilities.mpas,625 :: 		end;
0x3164	0x37FFEC  	BRA	L__NMRAnetUtilities_SupportsEventAsConsumer103
L__NMRAnetUtilities_SupportsEventAsConsumer104:
;NMRAnetUtilities.mpas,627 :: 		end;
0x3166	0x780084  	MOV	W4, W1
L_end__NMRAnetUtilities_SupportsEventAsConsumer:
; Result end address is: 8 (W4)
; Result start address is: 2 (W1)
0x3168	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_SupportsEventAsConsumer:
0x316A	0x060000  	RETURN
; end of _NMRAnetUtilities_SupportsEventAsConsumer
_AppCallback_ProducerIdentify:
0x316C	0xFA0006  	LNK	#6
;NMRAnetAppCallbacks.mpas,286 :: 		begin
;NMRAnetAppCallbacks.mpas,287 :: 		Result := True;                                                               // We handle the message
0x316E	0x781F8A  	PUSH	W10
0x3170	0x781F8C  	PUSH	W12
; Result start address is: 16 (W8)
0x3172	0x2FFFF8  	MOV	#65535, W8
;NMRAnetAppCallbacks.mpas,288 :: 		VNodeEventIndex := -1;
0x3174	0x2FFFF0  	MOV	#65535, W0
0x3176	0x980700  	MOV	W0, [W14+0]
;NMRAnetAppCallbacks.mpas,289 :: 		NodeEventIndex := -1;
0x3178	0x2FFFF0  	MOV	#65535, W0
0x317A	0x980710  	MOV	W0, [W14+2]
;NMRAnetAppCallbacks.mpas,290 :: 		VNodeEvent := NMRAnetUtilities_SupportsVNodeEventAsProducer(Event, VNodeEventIndex);
0x317C	0x470060  	ADD	W14, #0, W0
0x317E	0x781F8B  	PUSH	W11
0x3180	0x78050B  	MOV	W11, W10
0x3182	0x780580  	MOV	W0, W11
0x3184	0x07EFF6  	RCALL	_NMRAnetUtilities_SupportsVNodeEventAsProducer
0x3186	0x7805CF  	POP	W11
; VNodeEvent start address is: 14 (W7)
0x3188	0x780380  	MOV	W0, W7
;NMRAnetAppCallbacks.mpas,291 :: 		NodeEvent := NMRAnetUtilities_SupportsEventAsProducer(Event, NodeEventIndex);
0x318A	0x470062  	ADD	W14, #2, W0
0x318C	0x781F8B  	PUSH	W11
0x318E	0x78050B  	MOV	W11, W10
0x3190	0x780580  	MOV	W0, W11
0x3192	0x07EE8C  	RCALL	_NMRAnetUtilities_SupportsEventAsProducer
0x3194	0x7805CF  	POP	W11
; NodeEvent start address is: 12 (W6)
0x3196	0x780300  	MOV	W0, W6
;NMRAnetAppCallbacks.mpas,292 :: 		for i := 0 to Nodes.AllocatedCount - 1 do
; i start address is: 18 (W9)
0x3198	0xEF2012  	CLR	W9
; Result end address is: 16 (W8)
; i end address is: 18 (W9)
L__AppCallback_ProducerIdentify61:
; i start address is: 18 (W9)
; NodeEvent start address is: 12 (W6)
; NodeEvent end address is: 12 (W6)
; VNodeEvent start address is: 14 (W7)
; VNodeEvent end address is: 14 (W7)
; Result start address is: 16 (W8)
0x319A	0x812780  	MOV	_Nodes+3120, W0
0x319C	0xED2000  	DEC	W0
0x319E	0x980720  	MOV	W0, [W14+4]
0x31A0	0xE14800  	CP	W9, W0
0x31A2	0x3C0029  	BRA GT	L__AppCallback_ProducerIdentify65
L__AppCallback_ProducerIdentify208:
; NodeEvent end address is: 12 (W6)
; VNodeEvent end address is: 14 (W7)
;NMRAnetAppCallbacks.mpas,294 :: 		if NMRAnetNode_TestStateFlag(Nodes.AllocatedList[i], NS_VIRTUAL) then
; VNodeEvent start address is: 14 (W7)
; NodeEvent start address is: 12 (W6)
0x31A4	0xDD48C1  	SL	W9, #1, W1
0x31A6	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x31A8	0x400001  	ADD	W0, W1, W0
0x31AA	0xBE9F8A  	PUSH.D	W10
0x31AC	0xB3C08B  	MOV.B	#8, W11
0x31AE	0x780510  	MOV	[W0], W10
0x31B0	0x07056F  	RCALL	_NMRAnetNode_TestStateFlag
0x31B2	0xBE054F  	POP.D	W10
0x31B4	0xE20000  	CP0	W0
0x31B6	0x320012  	BRA Z	L__AppCallback_ProducerIdentify67
L__AppCallback_ProducerIdentify209:
;NMRAnetAppCallbacks.mpas,296 :: 		if VNodeEvent then
0x31B8	0xE2000E  	CP0	W7
0x31BA	0x320008  	BRA Z	L__AppCallback_ProducerIdentify70
L__AppCallback_ProducerIdentify210:
;NMRAnetAppCallbacks.mpas,297 :: 		SetProxyNodeProducerFlags(Nodes.AllocatedList[i], VNodeEventIndex);
0x31BC	0xDD48C1  	SL	W9, #1, W1
0x31BE	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x31C0	0x400001  	ADD	W0, W1, W0
0x31C2	0xBE9F8A  	PUSH.D	W10
0x31C4	0x90058E  	MOV	[W14+0], W11
0x31C6	0x780510  	MOV	[W0], W10
0x31C8	0x07EDCC  	RCALL	NMRAnetAppCallbacks_SetProxyNodeProducerFlags
0x31CA	0xBE054F  	POP.D	W10
L__AppCallback_ProducerIdentify70:
;NMRAnetAppCallbacks.mpas,298 :: 		SetProxyNodeDccAddressFlags(Nodes.AllocatedList[i], Event);
0x31CC	0xDD48C1  	SL	W9, #1, W1
0x31CE	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x31D0	0x400001  	ADD	W0, W1, W0
0x31D2	0x781F8A  	PUSH	W10
0x31D4	0x780510  	MOV	[W0], W10
0x31D6	0x07EE2B  	RCALL	NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags
0x31D8	0x78054F  	POP	W10
;NMRAnetAppCallbacks.mpas,299 :: 		end else
0x31DA	0x370008  	BRA	L__AppCallback_ProducerIdentify68
L__AppCallback_ProducerIdentify67:
;NMRAnetAppCallbacks.mpas,301 :: 		if NodeEvent then
0x31DC	0xE2000C  	CP0	W6
0x31DE	0x320006  	BRA Z	L__AppCallback_ProducerIdentify73
L__AppCallback_ProducerIdentify211:
;NMRAnetAppCallbacks.mpas,302 :: 		NMRAnetNode_SetProducerEventFlag(Nodes.AllocatedList[0], NodeEventIndex, EVENT_STATE_UNKOWN);
0x31E0	0xBE9F8A  	PUSH.D	W10
0x31E2	0xB3C03C  	MOV.B	#3, W12
0x31E4	0x90059E  	MOV	[W14+2], W11
0x31E6	0x81237A  	MOV	_Nodes+2990, W10
0x31E8	0x07E941  	RCALL	_NMRAnetNode_SetProducerEventFlag
0x31EA	0xBE054F  	POP.D	W10
L__AppCallback_ProducerIdentify73:
;NMRAnetAppCallbacks.mpas,303 :: 		end
L__AppCallback_ProducerIdentify68:
;NMRAnetAppCallbacks.mpas,304 :: 		end;
0x31EC	0x90002E  	MOV	[W14+4], W0
0x31EE	0xE14800  	CP	W9, W0
0x31F0	0x320002  	BRA Z	L__AppCallback_ProducerIdentify65
L__AppCallback_ProducerIdentify212:
; i start address is: 18 (W9)
0x31F2	0xEC2012  	INC	W9
; i end address is: 18 (W9)
; NodeEvent end address is: 12 (W6)
; VNodeEvent end address is: 14 (W7)
; i end address is: 18 (W9)
0x31F4	0x37FFD2  	BRA	L__AppCallback_ProducerIdentify61
L__AppCallback_ProducerIdentify65:
;NMRAnetAppCallbacks.mpas,305 :: 		end;
0x31F6	0x780008  	MOV	W8, W0
; Result end address is: 16 (W8)
L_end_AppCallback_ProducerIdentify:
0x31F8	0x78064F  	POP	W12
0x31FA	0x78054F  	POP	W10
0x31FC	0xFA8000  	ULNK
0x31FE	0x060000  	RETURN
; end of _AppCallback_ProducerIdentify
_NMRAnetUtilities_SupportsVNodeEventAsProducer:
;NMRAnetUtilities.mpas,638 :: 		begin
;NMRAnetUtilities.mpas,639 :: 		Result := False;
; Result start address is: 8 (W4)
0x1172	0xEF2008  	CLR	W4
;NMRAnetUtilities.mpas,641 :: 		EventIndex := 0;
0x1174	0xEF2000  	CLR	W0
0x1176	0x780D80  	MOV	W0, [W11]
; Result end address is: 8 (W4)
;NMRAnetUtilities.mpas,642 :: 		while (EventIndex < MAX_VNODE_SUPPORTED_EVENTS_PRODUCED) do
L__NMRAnetUtilities_SupportsVNodeEventAsProducer112:
; Result start address is: 8 (W4)
0x1178	0x78001B  	MOV	[W11], W0
0x117A	0xE10063  	CP	W0, #3
0x117C	0x3D0011  	BRA GE	L__NMRAnetUtilities_SupportsVNodeEventAsProducer113
L__NMRAnetUtilities_SupportsVNodeEventAsProducer361:
;NMRAnetUtilities.mpas,644 :: 		if NMRAnetUtilities_EqualEventID(@SUPPORTED_VNODE_EVENTS_PRODUCED[EventIndex], DataBytes) then
0x117E	0x78001B  	MOV	[W11], W0
0x1180	0xDD00C3  	SL	W0, #3, W1
0x1182	0x28D6D0  	MOV	#lo_addr(_SUPPORTED_VNODE_EVENTS_PRODUCED), W0
0x1184	0x400001  	ADD	W0, W1, W0
0x1186	0xBE9F8A  	PUSH.D	W10
0x1188	0x78058A  	MOV	W10, W11
0x118A	0x780500  	MOV	W0, W10
0x118C	0x07FFCD  	RCALL	_NMRAnetUtilities_EqualEventID
0x118E	0xBE054F  	POP.D	W10
0x1190	0xE20000  	CP0	W0
0x1192	0x320002  	BRA Z	L__NMRAnetUtilities_SupportsVNodeEventAsProducer117
L__NMRAnetUtilities_SupportsVNodeEventAsProducer362:
; Result end address is: 8 (W4)
;NMRAnetUtilities.mpas,646 :: 		Result := True;
; Result start address is: 2 (W1)
0x1194	0x2FFFF1  	MOV	#65535, W1
;NMRAnetUtilities.mpas,647 :: 		Exit
; Result end address is: 2 (W1)
0x1196	0x370005  	BRA	L_end__NMRAnetUtilities_SupportsVNodeEventAsProducer
;NMRAnetUtilities.mpas,648 :: 		end;
L__NMRAnetUtilities_SupportsVNodeEventAsProducer117:
;NMRAnetUtilities.mpas,649 :: 		Inc(EventIndex)
; Result start address is: 8 (W4)
0x1198	0x78001B  	MOV	[W11], W0
0x119A	0xEC2000  	INC	W0
0x119C	0x780D80  	MOV	W0, [W11]
;NMRAnetUtilities.mpas,650 :: 		end;
0x119E	0x37FFEC  	BRA	L__NMRAnetUtilities_SupportsVNodeEventAsProducer112
L__NMRAnetUtilities_SupportsVNodeEventAsProducer113:
;NMRAnetUtilities.mpas,652 :: 		end;
0x11A0	0x780084  	MOV	W4, W1
L_end__NMRAnetUtilities_SupportsVNodeEventAsProducer:
; Result end address is: 8 (W4)
; Result start address is: 2 (W1)
0x11A2	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_SupportsVNodeEventAsProducer:
0x11A4	0x060000  	RETURN
; end of _NMRAnetUtilities_SupportsVNodeEventAsProducer
_NMRAnetUtilities_SupportsEventAsProducer:
;NMRAnetUtilities.mpas,588 :: 		begin
;NMRAnetUtilities.mpas,589 :: 		Result := False;
; Result start address is: 8 (W4)
0x0EAC	0xEF2008  	CLR	W4
;NMRAnetUtilities.mpas,591 :: 		EventIndex := 0;
0x0EAE	0xEF2000  	CLR	W0
0x0EB0	0x780D80  	MOV	W0, [W11]
; Result end address is: 8 (W4)
;NMRAnetUtilities.mpas,592 :: 		while (EventIndex < MAX_SUPPORTED_EVENTS_PRODUCED) do
L__NMRAnetUtilities_SupportsEventAsProducer94:
; Result start address is: 8 (W4)
0x0EB2	0x78001B  	MOV	[W11], W0
0x0EB4	0xE10062  	CP	W0, #2
0x0EB6	0x3D0011  	BRA GE	L__NMRAnetUtilities_SupportsEventAsProducer95
L__NMRAnetUtilities_SupportsEventAsProducer355:
;NMRAnetUtilities.mpas,594 :: 		if NMRAnetUtilities_EqualEventID(@SUPPORTED_EVENTS_PRODUCED[EventIndex], DataBytes) then
0x0EB8	0x78001B  	MOV	[W11], W0
0x0EBA	0xDD00C3  	SL	W0, #3, W1
0x0EBC	0x28D850  	MOV	#lo_addr(_SUPPORTED_EVENTS_PRODUCED), W0
0x0EBE	0x400001  	ADD	W0, W1, W0
0x0EC0	0xBE9F8A  	PUSH.D	W10
0x0EC2	0x78058A  	MOV	W10, W11
0x0EC4	0x780500  	MOV	W0, W10
0x0EC6	0x070130  	RCALL	_NMRAnetUtilities_EqualEventID
0x0EC8	0xBE054F  	POP.D	W10
0x0ECA	0xE20000  	CP0	W0
0x0ECC	0x320002  	BRA Z	L__NMRAnetUtilities_SupportsEventAsProducer99
L__NMRAnetUtilities_SupportsEventAsProducer356:
; Result end address is: 8 (W4)
;NMRAnetUtilities.mpas,596 :: 		Result := True;
; Result start address is: 2 (W1)
0x0ECE	0x2FFFF1  	MOV	#65535, W1
;NMRAnetUtilities.mpas,597 :: 		Exit
; Result end address is: 2 (W1)
0x0ED0	0x370005  	BRA	L_end__NMRAnetUtilities_SupportsEventAsProducer
;NMRAnetUtilities.mpas,598 :: 		end;
L__NMRAnetUtilities_SupportsEventAsProducer99:
;NMRAnetUtilities.mpas,599 :: 		Inc(EventIndex)
; Result start address is: 8 (W4)
0x0ED2	0x78001B  	MOV	[W11], W0
0x0ED4	0xEC2000  	INC	W0
0x0ED6	0x780D80  	MOV	W0, [W11]
;NMRAnetUtilities.mpas,600 :: 		end;
0x0ED8	0x37FFEC  	BRA	L__NMRAnetUtilities_SupportsEventAsProducer94
L__NMRAnetUtilities_SupportsEventAsProducer95:
;NMRAnetUtilities.mpas,602 :: 		end;
0x0EDA	0x780084  	MOV	W4, W1
L_end__NMRAnetUtilities_SupportsEventAsProducer:
; Result end address is: 8 (W4)
; Result start address is: 2 (W1)
0x0EDC	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_SupportsEventAsProducer:
0x0EDE	0x060000  	RETURN
; end of _NMRAnetUtilities_SupportsEventAsProducer
_AppCallback_EventsIdentify:
0x300C	0xFA000A  	LNK	#10
;NMRAnetAppCallbacks.mpas,319 :: 		begin
;NMRAnetAppCallbacks.mpas,320 :: 		Result := True;                                                               // We handled it
0x300E	0x781F8A  	PUSH	W10
0x3010	0x781F8B  	PUSH	W11
0x3012	0x2FFFF0  	MOV	#65535, W0
0x3014	0x980700  	MOV	W0, [W14+0]
;NMRAnetAppCallbacks.mpas,321 :: 		for j := 0 to Nodes.AllocatedCount - 1 do
; j start address is: 14 (W7)
0x3016	0xEF200E  	CLR	W7
; j end address is: 14 (W7)
L__AppCallback_EventsIdentify77:
; j start address is: 14 (W7)
0x3018	0x812780  	MOV	_Nodes+3120, W0
0x301A	0xED2000  	DEC	W0
0x301C	0x980740  	MOV	W0, [W14+8]
0x301E	0xE13800  	CP	W7, W0
0x3020	0x3C002B  	BRA GT	L__AppCallback_EventsIdentify81
L__AppCallback_EventsIdentify215:
;NMRAnetAppCallbacks.mpas,323 :: 		Node := Nodes.AllocatedList[j];
0x3022	0xDD38C1  	SL	W7, #1, W1
0x3024	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x3026	0x400001  	ADD	W0, W1, W0
0x3028	0x780010  	MOV	[W0], W0
0x302A	0x980720  	MOV	W0, [W14+4]
;NMRAnetAppCallbacks.mpas,324 :: 		if NMRAnetNode_TestStateFlag(Node, NS_VIRTUAL) then
0x302C	0xB3C08B  	MOV.B	#8, W11
0x302E	0x780500  	MOV	W0, W10
0x3030	0x07062F  	RCALL	_NMRAnetNode_TestStateFlag
0x3032	0xE20000  	CP0	W0
0x3034	0x320015  	BRA Z	L__AppCallback_EventsIdentify83
L__AppCallback_EventsIdentify216:
;NMRAnetAppCallbacks.mpas,326 :: 		NMRAnetNode_SetConsumerEventFlags(Node, EVENT_STATE_UNKOWN);              // Consumers are eaay.
0x3036	0xB3C03B  	MOV.B	#3, W11
0x3038	0x90052E  	MOV	[W14+4], W10
0x303A	0x07EEB9  	RCALL	_NMRAnetNode_SetConsumerEventFlags
;NMRAnetAppCallbacks.mpas,327 :: 		for ProducerIndex := 0 to MAX_VNODE_SUPPORTED_EVENTS_PRODUCED - 1 do      // Producers take some work
0x303C	0xEF2000  	CLR	W0
0x303E	0x980710  	MOV	W0, [W14+2]
; j end address is: 14 (W7)
0x3040	0x780307  	MOV	W7, W6
L__AppCallback_EventsIdentify86:
;NMRAnetAppCallbacks.mpas,329 :: 		SetProxyNodeProducerFlags(Node, ProducerIndex);
; j start address is: 12 (W6)
0x3042	0x90059E  	MOV	[W14+2], W11
0x3044	0x90052E  	MOV	[W14+4], W10
0x3046	0x07EE8D  	RCALL	NMRAnetAppCallbacks_SetProxyNodeProducerFlags
;NMRAnetAppCallbacks.mpas,330 :: 		SetProxyNodeDccAddressFlags(Node, nil);
0x3048	0xEF2016  	CLR	W11
0x304A	0x90052E  	MOV	[W14+4], W10
0x304C	0x07EEF0  	RCALL	NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags
;NMRAnetAppCallbacks.mpas,331 :: 		end
0x304E	0x90001E  	MOV	[W14+2], W0
0x3050	0xE10062  	CP	W0, #2
0x3052	0x320004  	BRA Z	L__AppCallback_EventsIdentify89
L__AppCallback_EventsIdentify217:
0x3054	0x200011  	MOV	#1, W1
0x3056	0x470062  	ADD	W14, #2, W0
0x3058	0x408810  	ADD	W1, [W0], [W0]
0x305A	0x37FFF3  	BRA	L__AppCallback_EventsIdentify86
L__AppCallback_EventsIdentify89:
;NMRAnetAppCallbacks.mpas,332 :: 		end else
0x305C	0x780086  	MOV	W6, W1
; j end address is: 12 (W6)
0x305E	0x370007  	BRA	L__AppCallback_EventsIdentify84
L__AppCallback_EventsIdentify83:
;NMRAnetAppCallbacks.mpas,334 :: 		NMRAnetNode_SetProducerEventFlags(Node, EVENT_STATE_UNKOWN);
; j start address is: 14 (W7)
0x3060	0xB3C03B  	MOV.B	#3, W11
0x3062	0x90052E  	MOV	[W14+4], W10
0x3064	0x07EEC4  	RCALL	_NMRAnetNode_SetProducerEventFlags
;NMRAnetAppCallbacks.mpas,335 :: 		NMRAnetNode_SetConsumerEventFlags(Node, EVENT_STATE_UNKOWN);
0x3066	0xB3C03B  	MOV.B	#3, W11
0x3068	0x90052E  	MOV	[W14+4], W10
0x306A	0x07EEA1  	RCALL	_NMRAnetNode_SetConsumerEventFlags
; j end address is: 14 (W7)
0x306C	0x780087  	MOV	W7, W1
;NMRAnetAppCallbacks.mpas,336 :: 		end
L__AppCallback_EventsIdentify84:
;NMRAnetAppCallbacks.mpas,337 :: 		end;
; j start address is: 2 (W1)
0x306E	0x90004E  	MOV	[W14+8], W0
0x3070	0xE10800  	CP	W1, W0
0x3072	0x320002  	BRA Z	L__AppCallback_EventsIdentify81
L__AppCallback_EventsIdentify218:
; j start address is: 14 (W7)
0x3074	0x4083E1  	ADD	W1, #1, W7
; j end address is: 2 (W1)
; j end address is: 14 (W7)
0x3076	0x37FFD0  	BRA	L__AppCallback_EventsIdentify77
L__AppCallback_EventsIdentify81:
;NMRAnetAppCallbacks.mpas,338 :: 		end;
0x3078	0x90000E  	MOV	[W14+0], W0
L_end_AppCallback_EventsIdentify:
0x307A	0x7805CF  	POP	W11
0x307C	0x78054F  	POP	W10
0x307E	0xFA8000  	ULNK
0x3080	0x060000  	RETURN
; end of _AppCallback_EventsIdentify
_NMRAnetUtilities_ExtractDestinationCodedInMTIAlias:
0x32B2	0xFA0002  	LNK	#2
;NMRAnetUtilities.mpas,222 :: 		begin
;NMRAnetUtilities.mpas,223 :: 		Result := 0;
0x32B4	0xEF2000  	CLR	W0
0x32B6	0x980700  	MOV	W0, [W14+0]
;NMRAnetUtilities.mpas,224 :: 		if NMRAnetUtilities_IsDatagramMsg(CANBuffer) then
0x32B8	0x07EDE3  	RCALL	_NMRAnetUtilities_IsDatagramMsg
0x32BA	0xE20000  	CP0	W0
0x32BC	0x32000D  	BRA Z	L__NMRAnetUtilities_ExtractDestinationCodedInMTIAlias46
L__NMRAnetUtilities_ExtractDestinationCodedInMTIAlias281:
;NMRAnetUtilities.mpas,225 :: 		Result := (CANBuffer^.ID and $00FFF000) shr 12
0x32BE	0xBE011A  	MOV.D	[W10], W2
0x32C0	0x2F0000  	MOV	#61440, W0
0x32C2	0x200FF1  	MOV	#255, W1
0x32C4	0x610200  	AND	W2, W0, W4
0x32C6	0x618281  	AND	W3, W1, W5
0x32C8	0x2000C2  	MOV	#12, W2
0x32CA	0xBE0004  	MOV.D	W4, W0
L__NMRAnetUtilities_ExtractDestinationCodedInMTIAlias282:
0x32CC	0xE90102  	DEC	W2, W2
0x32CE	0x350003  	BRA LT	L__NMRAnetUtilities_ExtractDestinationCodedInMTIAlias283
0x32D0	0xD18081  	ASR	W1, W1
0x32D2	0xD38000  	RRC	W0, W0
0x32D4	0x37FFFB  	BRA	L__NMRAnetUtilities_ExtractDestinationCodedInMTIAlias282
L__NMRAnetUtilities_ExtractDestinationCodedInMTIAlias283:
0x32D6	0x980700  	MOV	W0, [W14+0]
L__NMRAnetUtilities_ExtractDestinationCodedInMTIAlias46:
;NMRAnetUtilities.mpas,226 :: 		end;
0x32D8	0x90000E  	MOV	[W14+0], W0
L_end_NMRAnetUtilities_ExtractDestinationCodedInMTIAlias:
0x32DA	0xFA8000  	ULNK
0x32DC	0x060000  	RETURN
; end of _NMRAnetUtilities_ExtractDestinationCodedInMTIAlias
_NMRAnetUtilities_IsDatagramMsg:
;NMRAnetUtilities.mpas,446 :: 		begin
;NMRAnetUtilities.mpas,447 :: 		Result := ((CANBuffer^.ID and MTI_FRAME_TYPE_MASK) >= MTI_FRAME_TYPE_DATAGRAM_ONLY_FRAME) and ((CANBuffer^.ID and MTI_FRAME_TYPE_MASK) <= MTI_FRAME_TYPE_DATAGRAM_FRAME_END)
0x0E80	0xBE011A  	MOV.D	[W10], W2
0x0E82	0x200000  	MOV	#0, W0
0x0E84	0x20F001  	MOV	#3840, W1
0x0E86	0x610200  	AND	W2, W0, W4
0x0E88	0x618281  	AND	W3, W1, W5
0x0E8A	0x200000  	MOV	#0, W0
0x0E8C	0x20A001  	MOV	#2560, W1
0x0E8E	0xE12000  	CP	W4, W0
0x0E90	0xE1A801  	CPB	W5, W1
0x0E92	0xEF2004  	CLR	W2
0x0E94	0x350001  	BRA LT	L__NMRAnetUtilities_IsDatagramMsg325
0x0E96	0xEEA004  	COM	W2
L__NMRAnetUtilities_IsDatagramMsg325:
0x0E98	0x200000  	MOV	#0, W0
0x0E9A	0x20D001  	MOV	#3328, W1
0x0E9C	0xE12000  	CP	W4, W0
0x0E9E	0xE1A801  	CPB	W5, W1
0x0EA0	0xEF2000  	CLR	W0
0x0EA2	0x3C0001  	BRA GT	L__NMRAnetUtilities_IsDatagramMsg326
0x0EA4	0xEEA000  	COM	W0
L__NMRAnetUtilities_IsDatagramMsg326:
; Result start address is: 2 (W1)
0x0EA6	0x610080  	AND	W2, W0, W1
;NMRAnetUtilities.mpas,448 :: 		end;
0x0EA8	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_IsDatagramMsg:
0x0EAA	0x060000  	RETURN
; end of _NMRAnetUtilities_IsDatagramMsg
_NMRAnetBufferPools_AllocateDatagramBuffer:
;NMRAnetBufferPools.mpas,226 :: 		begin
;NMRAnetBufferPools.mpas,227 :: 		Result := False;
; Result start address is: 2 (W1)
0x32DE	0xEF2002  	CLR	W1
;NMRAnetBufferPools.mpas,228 :: 		for i := 0 to MAX_DATAGRAM_BUFFER_POOL - 1 do
; i start address is: 8 (W4)
0x32E0	0xEF2008  	CLR	W4
; i end address is: 8 (W4)
L__NMRAnetBufferPools_AllocateDatagramBuffer42:
;NMRAnetBufferPools.mpas,230 :: 		if DatagramPool.Pool[i].State = 0 then
; i start address is: 8 (W4)
; Result start address is: 2 (W1)
; Result end address is: 2 (W1)
0x32E2	0x2005C0  	MOV	#92, W0
0x32E4	0xB80104  	MUL.UU	W0, W4, W2
0x32E6	0x215560  	MOV	#lo_addr(_DatagramPool), W0
0x32E8	0x400002  	ADD	W0, W2, W0
0x32EA	0x784010  	MOV.B	[W0], W0
0x32EC	0xE10460  	CP.B	W0, #0
0x32EE	0x3A0021  	BRA NZ	L__NMRAnetBufferPools_AllocateDatagramBuffer47
L__NMRAnetBufferPools_AllocateDatagramBuffer77:
; Result end address is: 2 (W1)
;NMRAnetBufferPools.mpas,232 :: 		Buffer := @DatagramPool.Pool[i];
0x32F0	0x2005C0  	MOV	#92, W0
0x32F2	0xB80104  	MUL.UU	W0, W4, W2
; i end address is: 8 (W4)
0x32F4	0x215560  	MOV	#lo_addr(_DatagramPool), W0
0x32F6	0x400D02  	ADD	W0, W2, [W10]
;NMRAnetBufferPools.mpas,234 :: 		NMRAnetDatagrams_InitializeDatagramBuffer(Buffer);
0x32F8	0xBE9F8A  	PUSH.D	W10
0x32FA	0x78051A  	MOV	[W10], W10
0x32FC	0x07F268  	RCALL	_NMRAnetDatagrams_InitializeDatagramBuffer
0x32FE	0xBE054F  	POP.D	W10
;NMRAnetBufferPools.mpas,235 :: 		Buffer^.State := CBS_ALLOCATED;
0x3300	0x78009A  	MOV	[W10], W1
0x3302	0xB3C010  	MOV.B	#1, W0
0x3304	0x784880  	MOV.B	W0, [W1]
;NMRAnetBufferPools.mpas,236 :: 		if ForTransmit then
0x3306	0xE20016  	CP0	W11
0x3308	0x320005  	BRA Z	L__NMRAnetBufferPools_AllocateDatagramBuffer50
L__NMRAnetBufferPools_AllocateDatagramBuffer78:
;NMRAnetBufferPools.mpas,237 :: 		Buffer^.State := Buffer^.State or CBS_OUTGOING;
0x330A	0x78009A  	MOV	[W10], W1
0x330C	0x784011  	MOV.B	[W1], W0
0x330E	0xFB8000  	ZE	W0, W0
0x3310	0x700064  	IOR	W0, #4, W0
0x3312	0x784880  	MOV.B	W0, [W1]
L__NMRAnetBufferPools_AllocateDatagramBuffer50:
;NMRAnetBufferPools.mpas,238 :: 		Inc(DatagramPool.Count);
0x3314	0x2160F0  	MOV	#lo_addr(_DatagramPool+185), W0
0x3316	0xFB8010  	ZE	[W0], W0
0x3318	0x4000E1  	ADD	W0, #1, W1
0x331A	0x2160F0  	MOV	#lo_addr(_DatagramPool+185), W0
0x331C	0x784801  	MOV.B	W1, [W0]
;NMRAnetBufferPools.mpas,239 :: 		if DatagramPool.Count >= DatagramPool.MaxCount then
0x331E	0x2160F0  	MOV	#lo_addr(_DatagramPool+185), W0
0x3320	0x784090  	MOV.B	[W0], W1
0x3322	0x2160E0  	MOV	#lo_addr(_DatagramPool+184), W0
0x3324	0xE10C10  	CP.B	W1, [W0]
0x3326	0x390003  	BRA LTU	L__NMRAnetBufferPools_AllocateDatagramBuffer53
L__NMRAnetBufferPools_AllocateDatagramBuffer79:
;NMRAnetBufferPools.mpas,240 :: 		DatagramPool.MaxCount := DatagramPool.Count;
0x3328	0x2160E1  	MOV	#lo_addr(_DatagramPool+184), W1
0x332A	0x2160F0  	MOV	#lo_addr(_DatagramPool+185), W0
0x332C	0x784890  	MOV.B	[W0], [W1]
L__NMRAnetBufferPools_AllocateDatagramBuffer53:
;NMRAnetBufferPools.mpas,242 :: 		Result := True;
; Result start address is: 2 (W1)
0x332E	0x2FFFF1  	MOV	#65535, W1
;NMRAnetBufferPools.mpas,243 :: 		Break
0x3330	0x370004  	BRA	L__NMRAnetBufferPools_AllocateDatagramBuffer45
;NMRAnetBufferPools.mpas,244 :: 		end
L__NMRAnetBufferPools_AllocateDatagramBuffer47:
;NMRAnetBufferPools.mpas,245 :: 		end;
; i start address is: 8 (W4)
0x3332	0xE12061  	CP	W4, #1
0x3334	0x320002  	BRA Z	L__NMRAnetBufferPools_AllocateDatagramBuffer60
L__NMRAnetBufferPools_AllocateDatagramBuffer80:
; i start address is: 8 (W4)
0x3336	0xEC2008  	INC	W4
; i end address is: 8 (W4)
; i end address is: 8 (W4)
; Result end address is: 2 (W1)
0x3338	0x37FFD4  	BRA	L__NMRAnetBufferPools_AllocateDatagramBuffer42
L__NMRAnetBufferPools_AllocateDatagramBuffer60:
L__NMRAnetBufferPools_AllocateDatagramBuffer45:
;NMRAnetBufferPools.mpas,247 :: 		end;
; Result start address is: 2 (W1)
0x333A	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetBufferPools_AllocateDatagramBuffer:
0x333C	0x060000  	RETURN
; end of _NMRAnetBufferPools_AllocateDatagramBuffer
_NMRAnetUtilities_DatagramBufferLink:
;NMRAnetUtilities.mpas,763 :: 		begin
;NMRAnetUtilities.mpas,764 :: 		if Node^.DatagramBuffers = nil then
0x328C	0x45007C  	ADD	W10, #28, W0
0x328E	0x780010  	MOV	[W0], W0
0x3290	0xE10060  	CP	W0, #0
0x3292	0x3A0003  	BRA NZ	L__NMRAnetUtilities_DatagramBufferLink158
L__NMRAnetUtilities_DatagramBufferLink379:
;NMRAnetUtilities.mpas,765 :: 		Node^.DatagramBuffers := Buffer
0x3294	0x45007C  	ADD	W10, #28, W0
0x3296	0x78080B  	MOV	W11, [W0]
0x3298	0x37000B  	BRA	L__NMRAnetUtilities_DatagramBufferLink159
;NMRAnetUtilities.mpas,766 :: 		else begin                                  // Tack it to the end of the chain
L__NMRAnetUtilities_DatagramBufferLink158:
;NMRAnetUtilities.mpas,767 :: 		Temp := Node^.DatagramBuffers;
0x329A	0x45007C  	ADD	W10, #28, W0
; Temp start address is: 2 (W1)
0x329C	0x780090  	MOV	[W0], W1
; Temp end address is: 2 (W1)
;NMRAnetUtilities.mpas,768 :: 		while Temp^.Next <> nil do
L__NMRAnetUtilities_DatagramBufferLink161:
; Temp start address is: 2 (W1)
0x329E	0x408064  	ADD	W1, #4, W0
0x32A0	0x780010  	MOV	[W0], W0
0x32A2	0xE10060  	CP	W0, #0
0x32A4	0x320003  	BRA Z	L__NMRAnetUtilities_DatagramBufferLink162
L__NMRAnetUtilities_DatagramBufferLink380:
;NMRAnetUtilities.mpas,769 :: 		Temp := Temp^.Next;
0x32A6	0x408064  	ADD	W1, #4, W0
0x32A8	0x780090  	MOV	[W0], W1
0x32AA	0x37FFF9  	BRA	L__NMRAnetUtilities_DatagramBufferLink161
L__NMRAnetUtilities_DatagramBufferLink162:
;NMRAnetUtilities.mpas,770 :: 		Temp^.Next := Buffer
0x32AC	0x408064  	ADD	W1, #4, W0
; Temp end address is: 2 (W1)
0x32AE	0x78080B  	MOV	W11, [W0]
;NMRAnetUtilities.mpas,771 :: 		end
L__NMRAnetUtilities_DatagramBufferLink159:
;NMRAnetUtilities.mpas,772 :: 		end;
L_end_NMRAnetUtilities_DatagramBufferLink:
0x32B0	0x060000  	RETURN
; end of _NMRAnetUtilities_DatagramBufferLink
_NMRAnetUtilities_FindInProcessDatagram:
;NMRAnetUtilities.mpas,854 :: 		begin
;NMRAnetUtilities.mpas,855 :: 		Result := NMRAnetUtilities_FindInDatagramByState(Node, Alias, Buffer, CBS_PROCESSING, False);
0x3200	0x781F8D  	PUSH	W13
0x3202	0xB3C02D  	MOV.B	#2, W13
0x3204	0xEF2000  	CLR	W0
0x3206	0x781F80  	PUSH	W0
0x3208	0x07F52C  	RCALL	_NMRAnetUtilities_FindInDatagramByState
0x320A	0xB1002F  	SUB	#2, W15
; Result start address is: 2 (W1)
0x320C	0x780080  	MOV	W0, W1
;NMRAnetUtilities.mpas,856 :: 		end;
0x320E	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_FindInProcessDatagram:
0x3210	0x7806CF  	POP	W13
0x3212	0x060000  	RETURN
; end of _NMRAnetUtilities_FindInProcessDatagram
NMRAnetStateMachine_ProcessNode:
0x20FC	0xFA0044  	LNK	#68
;NMRAnetStateMachine.mpas,530 :: 		begin
;NMRAnetStateMachine.mpas,534 :: 		if Node^.MsgFlags <> 0 then
0x20FE	0x781F8B  	PUSH	W11
0x2100	0x781F8C  	PUSH	W12
0x2102	0x781F8D  	PUSH	W13
0x2104	0x450076  	ADD	W10, #22, W0
0x2106	0x784010  	MOV.B	[W0], W0
0x2108	0xE10460  	CP.B	W0, #0
0x210A	0x320055  	BRA Z	L_NMRAnetStateMachine_ProcessNode121
L_NMRAnetStateMachine_ProcessNode635:
;NMRAnetStateMachine.mpas,536 :: 		if Node^.MsgFlags and CRITICAL_MSG_MASK <> 0 then                           // Subdivide to Critical vs. Noncritical messages
0x210C	0x450076  	ADD	W10, #22, W0
0x210E	0xFB8010  	ZE	[W0], W0
0x2110	0x600067  	AND	W0, #7, W0
0x2112	0xE10060  	CP	W0, #0
0x2114	0x320026  	BRA Z	L_NMRAnetStateMachine_ProcessNode124
L_NMRAnetStateMachine_ProcessNode636:
;NMRAnetStateMachine.mpas,539 :: 		if NMRAnetNode_TestMsgFlags(Node, MF_DUPLICATE_NODE_ID, True) then        // Jump Statemachine here
0x2116	0x781F8B  	PUSH	W11
0x2118	0x2FFFFC  	MOV	#65535, W12
0x211A	0x20001B  	MOV	#1, W11
0x211C	0x070CFE  	RCALL	_NMRAnetNode_TestMsgFlags
0x211E	0x7805CF  	POP	W11
0x2120	0xE20000  	CP0	W0
0x2122	0x320004  	BRA Z	L_NMRAnetStateMachine_ProcessNode127
L_NMRAnetStateMachine_ProcessNode637:
;NMRAnetStateMachine.mpas,540 :: 		Node^.iStateMachine := STATE_NMRABUS_DUPLICATE_FULL_ID
0x2124	0x4500F9  	ADD	W10, #25, W1
0x2126	0xB3C0D0  	MOV.B	#13, W0
0x2128	0x784880  	MOV.B	W0, [W1]
0x212A	0x37001A  	BRA	L_NMRAnetStateMachine_ProcessNode128
;NMRAnetStateMachine.mpas,541 :: 		else
L_NMRAnetStateMachine_ProcessNode127:
;NMRAnetStateMachine.mpas,542 :: 		if NMRAnetNode_TestMsgFlags(Node, MF_DUPLICATE_ALIAS, True) then          // Jump Statemachine here
0x212C	0x781F8B  	PUSH	W11
0x212E	0x2FFFFC  	MOV	#65535, W12
0x2130	0x20002B  	MOV	#2, W11
0x2132	0x070CF3  	RCALL	_NMRAnetNode_TestMsgFlags
0x2134	0x7805CF  	POP	W11
0x2136	0xE20000  	CP0	W0
0x2138	0x320004  	BRA Z	L_NMRAnetStateMachine_ProcessNode130
L_NMRAnetStateMachine_ProcessNode638:
;NMRAnetStateMachine.mpas,543 :: 		Node^.iStateMachine := STATE_NMRABUS_INHIBITED
0x213A	0x4500F9  	ADD	W10, #25, W1
0x213C	0xB3C0C0  	MOV.B	#12, W0
0x213E	0x784880  	MOV.B	W0, [W1]
0x2140	0x37000F  	BRA	L_NMRAnetStateMachine_ProcessNode131
;NMRAnetStateMachine.mpas,544 :: 		else
L_NMRAnetStateMachine_ProcessNode130:
;NMRAnetStateMachine.mpas,545 :: 		if NMRAnetNode_TestMsgFlags(Node, MF_DUPLICATE_ALIAS_RID, False) then     // Tell the node that is our Alias
0x2142	0x781F8B  	PUSH	W11
0x2144	0xEF2018  	CLR	W12
0x2146	0x20004B  	MOV	#4, W11
0x2148	0x070CE8  	RCALL	_NMRAnetNode_TestMsgFlags
0x214A	0x7805CF  	POP	W11
0x214C	0xE20000  	CP0	W0
0x214E	0x320008  	BRA Z	L_NMRAnetStateMachine_ProcessNode133
L_NMRAnetStateMachine_ProcessNode639:
;NMRAnetStateMachine.mpas,547 :: 		if CANBusBufferAvailable then
0x2150	0x070EB6  	RCALL	NMRAnetStateMachine_CANBusBufferAvailable
0x2152	0xE20000  	CP0	W0
0x2154	0x320005  	BRA Z	L_NMRAnetStateMachine_ProcessNode136
L_NMRAnetStateMachine_ProcessNode640:
;NMRAnetStateMachine.mpas,549 :: 		TransmitCANLayerMsg(Node, CANBuffer, MTI_RID);
0x2156	0x20000C  	MOV	#0, W12
0x2158	0x20070D  	MOV	#112, W13
0x215A	0x070EBA  	RCALL	_TransmitCANLayerMsg
;NMRAnetStateMachine.mpas,550 :: 		NMRAnetNode_ClearMsgFlag(Node, MF_DUPLICATE_ALIAS_RID);
0x215C	0xB3C04B  	MOV.B	#4, W11
0x215E	0x07F7F8  	RCALL	_NMRAnetNode_ClearMsgFlag
;NMRAnetStateMachine.mpas,551 :: 		end
L_NMRAnetStateMachine_ProcessNode136:
;NMRAnetStateMachine.mpas,552 :: 		end;
L_NMRAnetStateMachine_ProcessNode133:
L_NMRAnetStateMachine_ProcessNode131:
L_NMRAnetStateMachine_ProcessNode128:
;NMRAnetStateMachine.mpas,553 :: 		Exit;                                                                     // Important things happened and were handled, exit
0x2160	0x3705DF  	BRA	L_end_NMRAnetStateMachine_ProcessNode
;NMRAnetStateMachine.mpas,554 :: 		end;
L_NMRAnetStateMachine_ProcessNode124:
;NMRAnetStateMachine.mpas,557 :: 		if NMRAnetNode_TestMsgFlags(Node, MF_ALIAS_MAP_ENQUIRY, False) then
0x2162	0x781F8B  	PUSH	W11
0x2164	0xEF2018  	CLR	W12
0x2166	0x20008B  	MOV	#8, W11
0x2168	0x070CD8  	RCALL	_NMRAnetNode_TestMsgFlags
0x216A	0x7805CF  	POP	W11
0x216C	0xE20000  	CP0	W0
0x216E	0x320009  	BRA Z	L_NMRAnetStateMachine_ProcessNode139
L_NMRAnetStateMachine_ProcessNode641:
;NMRAnetStateMachine.mpas,559 :: 		if CANBusBufferAvailable then
0x2170	0x070EA6  	RCALL	NMRAnetStateMachine_CANBusBufferAvailable
0x2172	0xE20000  	CP0	W0
0x2174	0x320005  	BRA Z	L_NMRAnetStateMachine_ProcessNode142
L_NMRAnetStateMachine_ProcessNode642:
;NMRAnetStateMachine.mpas,561 :: 		TransmitCANLayerMsg(Node, CANBuffer, MTI_AMD);
0x2176	0x21000C  	MOV	#4096, W12
0x2178	0x20070D  	MOV	#112, W13
0x217A	0x070EAA  	RCALL	_TransmitCANLayerMsg
;NMRAnetStateMachine.mpas,562 :: 		NMRAnetNode_ClearMsgFlag(Node, MF_ALIAS_MAP_ENQUIRY);
0x217C	0xB3C08B  	MOV.B	#8, W11
0x217E	0x07F7E8  	RCALL	_NMRAnetNode_ClearMsgFlag
;NMRAnetStateMachine.mpas,563 :: 		end
L_NMRAnetStateMachine_ProcessNode142:
;NMRAnetStateMachine.mpas,564 :: 		end else
0x2180	0x370019  	BRA	L_NMRAnetStateMachine_ProcessNode140
L_NMRAnetStateMachine_ProcessNode139:
;NMRAnetStateMachine.mpas,565 :: 		if NMRAnetNode_TestMsgFlags(Node, MF_VERIFY_NODE_ID, False) then
0x2182	0x781F8B  	PUSH	W11
0x2184	0xEF2018  	CLR	W12
0x2186	0x20010B  	MOV	#16, W11
0x2188	0x070CC8  	RCALL	_NMRAnetNode_TestMsgFlags
0x218A	0x7805CF  	POP	W11
0x218C	0xE20000  	CP0	W0
0x218E	0x320012  	BRA Z	L_NMRAnetStateMachine_ProcessNode145
L_NMRAnetStateMachine_ProcessNode643:
;NMRAnetStateMachine.mpas,567 :: 		if NMRABusBufferAvailable then
0x2190	0x070CBB  	RCALL	_NMRABusBufferAvailable
0x2192	0xE20000  	CP0	W0
0x2194	0x32000F  	BRA Z	L_NMRAnetStateMachine_ProcessNode148
L_NMRAnetStateMachine_ProcessNode644:
;NMRAnetStateMachine.mpas,569 :: 		NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID(Node, CANBuffer);
0x2196	0x07F23C  	RCALL	_NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID
;NMRAnetStateMachine.mpas,570 :: 		TransmitNMRABusLayerMsg(Node, CANBuffer, MTI_VERIFIED_NODE_ID_NUMBER, 0, 6, @CANBuffer^.DataBytes, False);
0x2198	0x4580E5  	ADD	W11, #5, W1
0x219A	0x20000C  	MOV	#0, W12
0x219C	0x20917D  	MOV	#2327, W13
0x219E	0xEF2000  	CLR	W0
0x21A0	0x781F80  	PUSH	W0
0x21A2	0x781F81  	PUSH	W1
0x21A4	0x200060  	MOV	#6, W0
0x21A6	0x781F80  	PUSH	W0
0x21A8	0xEF2000  	CLR	W0
0x21AA	0x781F80  	PUSH	W0
0x21AC	0x070B72  	RCALL	_TransmitNMRABusLayerMsg
0x21AE	0xB1008F  	SUB	#8, W15
;NMRAnetStateMachine.mpas,571 :: 		NMRAnetNode_ClearMsgFlag(Node, MF_VERIFY_NODE_ID);
0x21B0	0xB3C10B  	MOV.B	#16, W11
0x21B2	0x07F7CE  	RCALL	_NMRAnetNode_ClearMsgFlag
;NMRAnetStateMachine.mpas,572 :: 		end;
L_NMRAnetStateMachine_ProcessNode148:
;NMRAnetStateMachine.mpas,573 :: 		end;
L_NMRAnetStateMachine_ProcessNode145:
L_NMRAnetStateMachine_ProcessNode140:
;NMRAnetStateMachine.mpas,574 :: 		Exit;              // Don't interleave Buffer Replies...
0x21B4	0x3705B5  	BRA	L_end_NMRAnetStateMachine_ProcessNode
;NMRAnetStateMachine.mpas,575 :: 		end else
L_NMRAnetStateMachine_ProcessNode121:
;NMRAnetStateMachine.mpas,578 :: 		if AppCallback_StateMachine(Node, CANBuffer, @DataBytes) then
0x21B6	0x470060  	ADD	W14, #0, W0
0x21B8	0xBE9F8A  	PUSH.D	W10
0x21BA	0x780600  	MOV	W0, W12
0x21BC	0x07F288  	RCALL	_AppCallback_StateMachine
0x21BE	0xBE054F  	POP.D	W10
0x21C0	0xE20000  	CP0	W0
0x21C2	0x320001  	BRA Z	L_NMRAnetStateMachine_ProcessNode151
L_NMRAnetStateMachine_ProcessNode645:
;NMRAnetStateMachine.mpas,580 :: 		Exit
0x21C4	0x3705AD  	BRA	L_end_NMRAnetStateMachine_ProcessNode
;NMRAnetStateMachine.mpas,581 :: 		end;
L_NMRAnetStateMachine_ProcessNode151:
;NMRAnetStateMachine.mpas,583 :: 		BaseBuffer := NMRAnetUtilities_NextBaseBuffer(Node);
0x21C6	0x07F2E5  	RCALL	_NMRAnetUtilities_NextBaseBuffer
; BaseBuffer start address is: 8 (W4)
0x21C8	0x780200  	MOV	W0, W4
;NMRAnetStateMachine.mpas,584 :: 		if BaseBuffer <> nil then
0x21CA	0xE10060  	CP	W0, #0
0x21CC	0x320185  	BRA Z	L_NMRAnetStateMachine_ProcessNode575
L_NMRAnetStateMachine_ProcessNode646:
;NMRAnetStateMachine.mpas,587 :: 		case BaseBuffer^.mCode of
0x21CE	0x420066  	ADD	W4, #6, W0
0x21D0	0x784010  	MOV.B	[W0], W0
0x21D2	0x987F40  	MOV.B	W0, [W14+60]
;NMRAnetStateMachine.mpas,588 :: 		BMC_PROTOCOL_SUPPORT_QUERY :        begin
0x21D4	0xE10461  	CP.B	W0, #1
0x21D6	0x3A006F  	BRA NZ	L_NMRAnetStateMachine_ProcessNode159
L_NMRAnetStateMachine_ProcessNode647:
;NMRAnetStateMachine.mpas,589 :: 		if NMRABusBufferAvailable then
0x21D8	0x070C97  	RCALL	_NMRABusBufferAvailable
0x21DA	0xE20000  	CP0	W0
0x21DC	0x32006A  	BRA Z	L_NMRAnetStateMachine_ProcessNode573
L_NMRAnetStateMachine_ProcessNode648:
;NMRAnetStateMachine.mpas,591 :: 		NMRAnetUtilities_ZeroCANData(DataBytes);
0x21DE	0x470060  	ADD	W14, #0, W0
0x21E0	0x781F8A  	PUSH	W10
0x21E2	0x780500  	MOV	W0, W10
0x21E4	0x07F2CD  	RCALL	_NMRAnetUtilities_ZeroCANData
0x21E6	0x78054F  	POP	W10
;NMRAnetStateMachine.mpas,593 :: 		if NMRAnetNode_TestStateFlag(NOde, NS_VIRTUAL) then
0x21E8	0x781F8B  	PUSH	W11
0x21EA	0xB3C08B  	MOV.B	#8, W11
0x21EC	0x070D51  	RCALL	_NMRAnetNode_TestStateFlag
0x21EE	0x7805CF  	POP	W11
0x21F0	0xE20000  	CP0	W0
0x21F2	0x320025  	BRA Z	L_NMRAnetStateMachine_ProcessNode164
L_NMRAnetStateMachine_ProcessNode649:
;NMRAnetStateMachine.mpas,595 :: 		for i := 0 to LEN_PIV_PROTOCOL-1 do
0x21F4	0xEF2000  	CLR	W0
0x21F6	0x980740  	MOV	W0, [W14+8]
; BaseBuffer end address is: 8 (W4)
0x21F8	0x780304  	MOV	W4, W6
L_NMRAnetStateMachine_ProcessNode167:
;NMRAnetStateMachine.mpas,596 :: 		for j := 0 to PIV_VNODE_SUPPORTED_PROTOCOL_COUNT - 1 do
; BaseBuffer start address is: 12 (W6)
0x21FA	0xEF2000  	CLR	W0
0x21FC	0x980750  	MOV	W0, [W14+10]
; BaseBuffer end address is: 12 (W6)
L_NMRAnetStateMachine_ProcessNode172:
;NMRAnetStateMachine.mpas,597 :: 		DataBytes[i] := DataBytes[i] or PIV_VNODE_SUPPORTED_PROTOCOLS[j][i];
; BaseBuffer start address is: 12 (W6)
0x21FE	0x4700E0  	ADD	W14, #0, W1
0x2200	0x470068  	ADD	W14, #8, W0
0x2202	0x408290  	ADD	W1, [W0], W5
0x2204	0x780205  	MOV	W5, W4
0x2206	0x200061  	MOV	#6, W1
0x2208	0x47006A  	ADD	W14, #10, W0
0x220A	0xB80910  	MUL.UU	W1, [W0], W2
0x220C	0x28CD30  	MOV	#lo_addr(_PIV_VNODE_SUPPORTED_PROTOCOLS), W0
0x220E	0x400082  	ADD	W0, W2, W1
0x2210	0x470068  	ADD	W14, #8, W0
0x2212	0x408090  	ADD	W1, [W0], W1
0x2214	0x784011  	MOV.B	[W1], W0
0x2216	0xFB8094  	ZE	[W4], W1
0x2218	0xFB8000  	ZE	W0, W0
0x221A	0x708000  	IOR	W1, W0, W0
0x221C	0x784A80  	MOV.B	W0, [W5]
0x221E	0x90005E  	MOV	[W14+10], W0
0x2220	0xE10068  	CP	W0, #8
0x2222	0x320004  	BRA Z	L_NMRAnetStateMachine_ProcessNode175
L_NMRAnetStateMachine_ProcessNode650:
0x2224	0x200011  	MOV	#1, W1
0x2226	0x47006A  	ADD	W14, #10, W0
0x2228	0x408810  	ADD	W1, [W0], [W0]
0x222A	0x37FFE9  	BRA	L_NMRAnetStateMachine_ProcessNode172
L_NMRAnetStateMachine_ProcessNode175:
0x222C	0x90004E  	MOV	[W14+8], W0
0x222E	0xE10065  	CP	W0, #5
0x2230	0x320004  	BRA Z	L_NMRAnetStateMachine_ProcessNode170
L_NMRAnetStateMachine_ProcessNode651:
0x2232	0x200011  	MOV	#1, W1
0x2234	0x470068  	ADD	W14, #8, W0
0x2236	0x408810  	ADD	W1, [W0], [W0]
0x2238	0x37FFE0  	BRA	L_NMRAnetStateMachine_ProcessNode167
L_NMRAnetStateMachine_ProcessNode170:
;NMRAnetStateMachine.mpas,598 :: 		end else
0x223A	0x780486  	MOV	W6, W9
; BaseBuffer end address is: 12 (W6)
0x223C	0x370024  	BRA	L_NMRAnetStateMachine_ProcessNode165
L_NMRAnetStateMachine_ProcessNode164:
;NMRAnetStateMachine.mpas,601 :: 		for i := 0 to LEN_PIV_PROTOCOL-1 do
; BaseBuffer start address is: 8 (W4)
0x223E	0xEF2000  	CLR	W0
0x2240	0x980740  	MOV	W0, [W14+8]
; BaseBuffer end address is: 8 (W4)
0x2242	0x780304  	MOV	W4, W6
L_NMRAnetStateMachine_ProcessNode177:
;NMRAnetStateMachine.mpas,602 :: 		for j := 0 to PIV_SUPPORTED_PROTOCOL_COUNT - 1 do
; BaseBuffer start address is: 12 (W6)
0x2244	0xEF2000  	CLR	W0
0x2246	0x980750  	MOV	W0, [W14+10]
; BaseBuffer end address is: 12 (W6)
L_NMRAnetStateMachine_ProcessNode182:
;NMRAnetStateMachine.mpas,603 :: 		DataBytes[i] := DataBytes[i] or PIV_SUPPORTED_PROTOCOLS[j][i];
; BaseBuffer start address is: 12 (W6)
0x2248	0x4700E0  	ADD	W14, #0, W1
0x224A	0x470068  	ADD	W14, #8, W0
0x224C	0x408290  	ADD	W1, [W0], W5
0x224E	0x780205  	MOV	W5, W4
0x2250	0x200061  	MOV	#6, W1
0x2252	0x47006A  	ADD	W14, #10, W0
0x2254	0xB80910  	MUL.UU	W1, [W0], W2
0x2256	0x28D090  	MOV	#lo_addr(_PIV_SUPPORTED_PROTOCOLS), W0
0x2258	0x400082  	ADD	W0, W2, W1
0x225A	0x470068  	ADD	W14, #8, W0
0x225C	0x408090  	ADD	W1, [W0], W1
0x225E	0x784011  	MOV.B	[W1], W0
0x2260	0xFB8094  	ZE	[W4], W1
0x2262	0xFB8000  	ZE	W0, W0
0x2264	0x708000  	IOR	W1, W0, W0
0x2266	0x784A80  	MOV.B	W0, [W5]
0x2268	0x90005E  	MOV	[W14+10], W0
0x226A	0xE10067  	CP	W0, #7
0x226C	0x320004  	BRA Z	L_NMRAnetStateMachine_ProcessNode185
L_NMRAnetStateMachine_ProcessNode652:
0x226E	0x200011  	MOV	#1, W1
0x2270	0x47006A  	ADD	W14, #10, W0
0x2272	0x408810  	ADD	W1, [W0], [W0]
0x2274	0x37FFE9  	BRA	L_NMRAnetStateMachine_ProcessNode182
L_NMRAnetStateMachine_ProcessNode185:
0x2276	0x90004E  	MOV	[W14+8], W0
0x2278	0xE10065  	CP	W0, #5
0x227A	0x320004  	BRA Z	L_NMRAnetStateMachine_ProcessNode180
L_NMRAnetStateMachine_ProcessNode653:
0x227C	0x200011  	MOV	#1, W1
0x227E	0x470068  	ADD	W14, #8, W0
0x2280	0x408810  	ADD	W1, [W0], [W0]
0x2282	0x37FFE0  	BRA	L_NMRAnetStateMachine_ProcessNode177
L_NMRAnetStateMachine_ProcessNode180:
;NMRAnetStateMachine.mpas,604 :: 		end;
0x2284	0x780486  	MOV	W6, W9
L_NMRAnetStateMachine_ProcessNode165:
; BaseBuffer end address is: 12 (W6)
;NMRAnetStateMachine.mpas,605 :: 		TransmitNMRABusLayerMsg(Node, CANBuffer, MTI_PROTOCOL_SUPPORT_REPLY, BaseBuffer^.Alias, 6, @DataBytes, False);
; BaseBuffer start address is: 18 (W9)
0x2286	0x448162  	ADD	W9, #2, W2
0x2288	0x4700E0  	ADD	W14, #0, W1
0x228A	0x781F8B  	PUSH	W11
0x228C	0x28000C  	MOV	#32768, W12
0x228E	0x20966D  	MOV	#2406, W13
0x2290	0xEF2000  	CLR	W0
0x2292	0x781F80  	PUSH	W0
0x2294	0x781F81  	PUSH	W1
0x2296	0x200060  	MOV	#6, W0
0x2298	0x781F80  	PUSH	W0
0x229A	0x781F92  	PUSH	[W2]
0x229C	0x070AFA  	RCALL	_TransmitNMRABusLayerMsg
0x229E	0xB1008F  	SUB	#8, W15
;NMRAnetStateMachine.mpas,606 :: 		NMRAnetUtilities_BaseBufferUnLink(Node, BaseBuffer);
0x22A0	0x780589  	MOV	W9, W11
0x22A2	0x07F379  	RCALL	_NMRAnetUtilities_BaseBufferUnLink
0x22A4	0x7805CF  	POP	W11
;NMRAnetStateMachine.mpas,607 :: 		NMRAnetBufferPools_ReleaseBaseBuffer(BaseBuffer);
0x22A6	0x781F8A  	PUSH	W10
0x22A8	0x780509  	MOV	W9, W10
0x22AA	0x07F3BB  	RCALL	_NMRAnetBufferPools_ReleaseBaseBuffer
; BaseBuffer end address is: 18 (W9)
0x22AC	0x78054F  	POP	W10
0x22AE	0x780009  	MOV	W9, W0
;NMRAnetStateMachine.mpas,608 :: 		end;
0x22B0	0x370001  	BRA	L_NMRAnetStateMachine_ProcessNode161
L_NMRAnetStateMachine_ProcessNode573:
;NMRAnetStateMachine.mpas,589 :: 		if NMRABusBufferAvailable then
0x22B2	0x780004  	MOV	W4, W0
;NMRAnetStateMachine.mpas,608 :: 		end;
L_NMRAnetStateMachine_ProcessNode161:
;NMRAnetStateMachine.mpas,609 :: 		end;
; BaseBuffer start address is: 0 (W0)
; BaseBuffer end address is: 0 (W0)
0x22B4	0x370110  	BRA	L_NMRAnetStateMachine_ProcessNode156
L_NMRAnetStateMachine_ProcessNode159:
;NMRAnetStateMachine.mpas,611 :: 		BMC_SIMPLE_NODE_INFO_REQEUST :      begin
; BaseBuffer start address is: 8 (W4)
0x22B6	0x90784E  	MOV.B	[W14+60], W0
0x22B8	0xE10465  	CP.B	W0, #5
0x22BA	0x3A010C  	BRA NZ	L_NMRAnetStateMachine_ProcessNode188
L_NMRAnetStateMachine_ProcessNode654:
;NMRAnetStateMachine.mpas,612 :: 		if NMRABusBufferAvailable then
0x22BC	0x070C25  	RCALL	_NMRABusBufferAvailable
0x22BE	0xE20000  	CP0	W0
0x22C0	0x320107  	BRA Z	L_NMRAnetStateMachine_ProcessNode574
L_NMRAnetStateMachine_ProcessNode655:
;NMRAnetStateMachine.mpas,614 :: 		i := 0;
0x22C2	0xEF2000  	CLR	W0
0x22C4	0x980740  	MOV	W0, [W14+8]
; BaseBuffer end address is: 8 (W4)
;NMRAnetStateMachine.mpas,615 :: 		while (BaseBuffer^.StateMachine <> STATE_ACDI_DONE) and (i < 6) do   // All messages have the Destination Alias as the first 2 bytes so only 6 left to use
L_NMRAnetStateMachine_ProcessNode193:
; BaseBuffer start address is: 8 (W4)
0x22C6	0x420067  	ADD	W4, #7, W0
0x22C8	0x784010  	MOV.B	[W0], W0
0x22CA	0xE10467  	CP.B	W0, #7
0x22CC	0xEF2002  	CLR	W1
0x22CE	0x320001  	BRA Z	L_NMRAnetStateMachine_ProcessNode656
0x22D0	0xEEA002  	COM	W1
L_NMRAnetStateMachine_ProcessNode656:
0x22D2	0x90004E  	MOV	[W14+8], W0
0x22D4	0xE10066  	CP	W0, #6
0x22D6	0xEF2000  	CLR	W0
0x22D8	0x3D0001  	BRA GE	L_NMRAnetStateMachine_ProcessNode657
0x22DA	0xEEA000  	COM	W0
L_NMRAnetStateMachine_ProcessNode657:
0x22DC	0x608000  	AND	W1, W0, W0
0x22DE	0x3200D7  	BRA Z	L_NMRAnetStateMachine_ProcessNode194
L_NMRAnetStateMachine_ProcessNode658:
;NMRAnetStateMachine.mpas,617 :: 		case BaseBuffer^.StateMachine of
0x22E0	0x420067  	ADD	W4, #7, W0
0x22E2	0x784190  	MOV.B	[W0], W3
0x22E4	0x987F43  	MOV.B	W3, [W14+60]
;NMRAnetStateMachine.mpas,618 :: 		STATE_ACDI_MFG_VERSION  : begin      {$IFDEF TRACE_SNIP}UART1_Write_Text('STATE_ACDI_MFG_VERSION'+LF); {$ENDIF}
0x22E6	0xE11C60  	CP.B	W3, #0
0x22E8	0x3A000F  	BRA NZ	L_NMRAnetStateMachine_ProcessNode200
L_NMRAnetStateMachine_ProcessNode659:
;NMRAnetStateMachine.mpas,619 :: 		DataBytes[i] := ACDI_MFG_VERSION;
0x22EA	0x4700E0  	ADD	W14, #0, W1
0x22EC	0x470068  	ADD	W14, #8, W0
0x22EE	0x408090  	ADD	W1, [W0], W1
0x22F0	0xB3C010  	MOV.B	#1, W0
0x22F2	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,620 :: 		Inc(i);
0x22F4	0x9000CE  	MOV	[W14+8], W1
0x22F6	0x470068  	ADD	W14, #8, W0
0x22F8	0x408861  	ADD	W1, #1, [W0]
;NMRAnetStateMachine.mpas,621 :: 		BaseBuffer^.Tag := 0;
0x22FA	0x4200E8  	ADD	W4, #8, W1
0x22FC	0xEF2000  	CLR	W0
0x22FE	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,622 :: 		BaseBuffer^.StateMachine := STATE_ACDI_MFG_INFO;
0x2300	0x4200E7  	ADD	W4, #7, W1
0x2302	0xB3C010  	MOV.B	#1, W0
0x2304	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,623 :: 		end;
0x2306	0x3700C2  	BRA	L_NMRAnetStateMachine_ProcessNode197
L_NMRAnetStateMachine_ProcessNode200:
;NMRAnetStateMachine.mpas,624 :: 		STATE_ACDI_MFG_INFO    :  begin  {$IFDEF TRACE_SNIP}UART1_Write_Text('STATE_ACDI_MFG_INFO'+LF); {$ENDIF}
0x2308	0xE11C61  	CP.B	W3, #1
0x230A	0x3A0035  	BRA NZ	L_NMRAnetStateMachine_ProcessNode203
L_NMRAnetStateMachine_ProcessNode660:
;NMRAnetStateMachine.mpas,626 :: 		if Node^.State and NS_VIRTUAL <> 0 then
0x230C	0x78401A  	MOV.B	[W10], W0
0x230E	0xFB8000  	ZE	W0, W0
0x2310	0x600068  	AND	W0, #8, W0
0x2312	0xE10060  	CP	W0, #0
0x2314	0x320018  	BRA Z	L_NMRAnetStateMachine_ProcessNode205
L_NMRAnetStateMachine_ProcessNode661:
;NMRAnetStateMachine.mpas,628 :: 		if BaseBuffer^.Tag < MAX_ACDI_MFG_ARRAY_VNODE then
0x2316	0x420068  	ADD	W4, #8, W0
0x2318	0x780010  	MOV	[W0], W0
0x231A	0xE1007A  	CP	W0, #26
0x231C	0x310010  	BRA GEU	L_NMRAnetStateMachine_ProcessNode208
L_NMRAnetStateMachine_ProcessNode662:
;NMRAnetStateMachine.mpas,630 :: 		DataBytes[i] := ACDI_MFG_STRINGS_VNODE[BaseBuffer^.Tag];
0x231E	0x4700E0  	ADD	W14, #0, W1
0x2320	0x470068  	ADD	W14, #8, W0
0x2322	0x408110  	ADD	W1, [W0], W2
0x2324	0x4200E8  	ADD	W4, #8, W1
0x2326	0x28D530  	MOV	#lo_addr(_ACDI_MFG_STRINGS_VNODE), W0
0x2328	0x400091  	ADD	W0, [W1], W1
0x232A	0x784011  	MOV.B	[W1], W0
0x232C	0x784900  	MOV.B	W0, [W2]
;NMRAnetStateMachine.mpas,631 :: 		Inc(BaseBuffer^.Tag);
0x232E	0x4200E8  	ADD	W4, #8, W1
0x2330	0x780011  	MOV	[W1], W0
0x2332	0xEC2000  	INC	W0
0x2334	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,632 :: 		Inc(i);
0x2336	0x9000CE  	MOV	[W14+8], W1
0x2338	0x470068  	ADD	W14, #8, W0
0x233A	0x408861  	ADD	W1, #1, [W0]
;NMRAnetStateMachine.mpas,633 :: 		end else
0x233C	0x370003  	BRA	L_NMRAnetStateMachine_ProcessNode209
L_NMRAnetStateMachine_ProcessNode208:
;NMRAnetStateMachine.mpas,634 :: 		BaseBuffer^.StateMachine := STATE_ACDI_USER_VERSION;
0x233E	0x4200E7  	ADD	W4, #7, W1
0x2340	0xB3C030  	MOV.B	#3, W0
0x2342	0x784880  	MOV.B	W0, [W1]
L_NMRAnetStateMachine_ProcessNode209:
;NMRAnetStateMachine.mpas,635 :: 		end else {$ENDIF}
0x2344	0x370017  	BRA	L_NMRAnetStateMachine_ProcessNode206
L_NMRAnetStateMachine_ProcessNode205:
;NMRAnetStateMachine.mpas,637 :: 		if BaseBuffer^.Tag < MAX_ACDI_MFG_ARRAY then
0x2346	0x420068  	ADD	W4, #8, W0
0x2348	0x780010  	MOV	[W0], W0
0x234A	0xE1007A  	CP	W0, #26
0x234C	0x310010  	BRA GEU	L_NMRAnetStateMachine_ProcessNode211
L_NMRAnetStateMachine_ProcessNode663:
;NMRAnetStateMachine.mpas,639 :: 		DataBytes[i] := ACDI_MFG_STRINGS[BaseBuffer^.Tag];
0x234E	0x4700E0  	ADD	W14, #0, W1
0x2350	0x470068  	ADD	W14, #8, W0
0x2352	0x408110  	ADD	W1, [W0], W2
0x2354	0x4200E8  	ADD	W4, #8, W1
0x2356	0x28D390  	MOV	#lo_addr(_ACDI_MFG_STRINGS), W0
0x2358	0x400091  	ADD	W0, [W1], W1
0x235A	0x784011  	MOV.B	[W1], W0
0x235C	0x784900  	MOV.B	W0, [W2]
;NMRAnetStateMachine.mpas,640 :: 		Inc(BaseBuffer^.Tag);
0x235E	0x4200E8  	ADD	W4, #8, W1
0x2360	0x780011  	MOV	[W1], W0
0x2362	0xEC2000  	INC	W0
0x2364	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,641 :: 		Inc(i);
0x2366	0x9000CE  	MOV	[W14+8], W1
0x2368	0x470068  	ADD	W14, #8, W0
0x236A	0x408861  	ADD	W1, #1, [W0]
;NMRAnetStateMachine.mpas,642 :: 		end else
0x236C	0x370003  	BRA	L_NMRAnetStateMachine_ProcessNode212
L_NMRAnetStateMachine_ProcessNode211:
;NMRAnetStateMachine.mpas,643 :: 		BaseBuffer^.StateMachine := STATE_ACDI_USER_VERSION;
0x236E	0x4200E7  	ADD	W4, #7, W1
0x2370	0xB3C030  	MOV.B	#3, W0
0x2372	0x784880  	MOV.B	W0, [W1]
L_NMRAnetStateMachine_ProcessNode212:
;NMRAnetStateMachine.mpas,644 :: 		end;
L_NMRAnetStateMachine_ProcessNode206:
;NMRAnetStateMachine.mpas,645 :: 		end;
0x2374	0x37008B  	BRA	L_NMRAnetStateMachine_ProcessNode197
L_NMRAnetStateMachine_ProcessNode203:
;NMRAnetStateMachine.mpas,646 :: 		STATE_ACDI_USER_VERSION : begin    {$IFDEF TRACE_SNIP}UART1_Write_Text('STATE_ACDI_USER_VERSION'+LF); {$ENDIF}
0x2376	0xE11C63  	CP.B	W3, #3
0x2378	0x3A000F  	BRA NZ	L_NMRAnetStateMachine_ProcessNode215
L_NMRAnetStateMachine_ProcessNode664:
;NMRAnetStateMachine.mpas,647 :: 		DataBytes[i] := ACDI_USER_VERSION;
0x237A	0x4700E0  	ADD	W14, #0, W1
0x237C	0x470068  	ADD	W14, #8, W0
0x237E	0x408090  	ADD	W1, [W0], W1
0x2380	0xB3C010  	MOV.B	#1, W0
0x2382	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,648 :: 		Inc(i);
0x2384	0x9000CE  	MOV	[W14+8], W1
0x2386	0x470068  	ADD	W14, #8, W0
0x2388	0x408861  	ADD	W1, #1, [W0]
;NMRAnetStateMachine.mpas,649 :: 		BaseBuffer^.StateMachine := STATE_ACDI_USER_NAME;
0x238A	0x4200E7  	ADD	W4, #7, W1
0x238C	0xB3C040  	MOV.B	#4, W0
0x238E	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,650 :: 		BaseBuffer^.Tag := 0;
0x2390	0x4200E8  	ADD	W4, #8, W1
0x2392	0xEF2000  	CLR	W0
0x2394	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,651 :: 		end;
0x2396	0x37007A  	BRA	L_NMRAnetStateMachine_ProcessNode197
L_NMRAnetStateMachine_ProcessNode215:
;NMRAnetStateMachine.mpas,652 :: 		STATE_ACDI_USER_NAME    : begin      {$IFDEF TRACE_SNIP}UART1_Write_Text('STATE_ACDI_USER_NAME'+LF); {$ENDIF}
0x2398	0xE11C64  	CP.B	W3, #4
0x239A	0x3A0033  	BRA NZ	L_NMRAnetStateMachine_ProcessNode218
L_NMRAnetStateMachine_ProcessNode665:
;NMRAnetStateMachine.mpas,653 :: 		if BaseBuffer^.Tag < MAX_USER_NAME then
0x239C	0x420068  	ADD	W4, #8, W0
0x239E	0x780010  	MOV	[W0], W0
0x23A0	0xE10074  	CP	W0, #20
0x23A2	0x31002B  	BRA GEU	L_NMRAnetStateMachine_ProcessNode220
L_NMRAnetStateMachine_ProcessNode666:
;NMRAnetStateMachine.mpas,656 :: 		AppCallback_ConfigurationRead(Node, @DataBytes[i], BaseBuffer^.Tag, 1);
0x23A4	0x4700E0  	ADD	W14, #0, W1
0x23A6	0x470068  	ADD	W14, #8, W0
0x23A8	0x408090  	ADD	W1, [W0], W1
0x23AA	0x420068  	ADD	W4, #8, W0
0x23AC	0x781F84  	PUSH	W4
0x23AE	0xBE9F8A  	PUSH.D	W10
0x23B0	0x780610  	MOV	[W0], W12
0x23B2	0xEB0680  	CLR	W13
0x23B4	0x780581  	MOV	W1, W11
0x23B6	0x200010  	MOV	#1, W0
0x23B8	0x781F80  	PUSH	W0
0x23BA	0x07F313  	RCALL	_AppCallback_ConfigurationRead
0x23BC	0xB1002F  	SUB	#2, W15
0x23BE	0xBE054F  	POP.D	W10
0x23C0	0x78024F  	POP	W4
;NMRAnetStateMachine.mpas,657 :: 		if DataBytes[i] = #0 then
0x23C2	0x4700E0  	ADD	W14, #0, W1
0x23C4	0x470068  	ADD	W14, #8, W0
0x23C6	0x408010  	ADD	W1, [W0], W0
0x23C8	0x784090  	MOV.B	[W0], W1
0x23CA	0xB3C000  	MOV.B	#0, W0
0x23CC	0xE10C00  	CP.B	W1, W0
0x23CE	0x3A0004  	BRA NZ	L_NMRAnetStateMachine_ProcessNode223
L_NMRAnetStateMachine_ProcessNode667:
;NMRAnetStateMachine.mpas,658 :: 		BaseBuffer^.StateMachine := STATE_ACDI_START_DESC
0x23D0	0x4200E7  	ADD	W4, #7, W1
0x23D2	0xB3C050  	MOV.B	#5, W0
0x23D4	0x784880  	MOV.B	W0, [W1]
0x23D6	0x370009  	BRA	L_NMRAnetStateMachine_ProcessNode224
;NMRAnetStateMachine.mpas,659 :: 		else
L_NMRAnetStateMachine_ProcessNode223:
;NMRAnetStateMachine.mpas,660 :: 		if BaseBuffer^.Tag = MAX_USER_NAME - 1 then
0x23D8	0x420068  	ADD	W4, #8, W0
0x23DA	0x780010  	MOV	[W0], W0
0x23DC	0xE10073  	CP	W0, #19
0x23DE	0x3A0005  	BRA NZ	L_NMRAnetStateMachine_ProcessNode226
L_NMRAnetStateMachine_ProcessNode668:
;NMRAnetStateMachine.mpas,661 :: 		DataBytes[i] := #0;
0x23E0	0x4700E0  	ADD	W14, #0, W1
0x23E2	0x470068  	ADD	W14, #8, W0
0x23E4	0x408090  	ADD	W1, [W0], W1
0x23E6	0xB3C000  	MOV.B	#0, W0
0x23E8	0x784880  	MOV.B	W0, [W1]
L_NMRAnetStateMachine_ProcessNode226:
L_NMRAnetStateMachine_ProcessNode224:
;NMRAnetStateMachine.mpas,662 :: 		Inc(i);
0x23EA	0x9000CE  	MOV	[W14+8], W1
0x23EC	0x470068  	ADD	W14, #8, W0
0x23EE	0x408861  	ADD	W1, #1, [W0]
;NMRAnetStateMachine.mpas,663 :: 		Inc(BaseBuffer^.Tag);
0x23F0	0x4200E8  	ADD	W4, #8, W1
0x23F2	0x780011  	MOV	[W1], W0
0x23F4	0xEC2000  	INC	W0
0x23F6	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,664 :: 		end else
0x23F8	0x370003  	BRA	L_NMRAnetStateMachine_ProcessNode221
L_NMRAnetStateMachine_ProcessNode220:
;NMRAnetStateMachine.mpas,665 :: 		BaseBuffer^.StateMachine := STATE_ACDI_START_DESC;
0x23FA	0x4200E7  	ADD	W4, #7, W1
0x23FC	0xB3C050  	MOV.B	#5, W0
0x23FE	0x784880  	MOV.B	W0, [W1]
L_NMRAnetStateMachine_ProcessNode221:
;NMRAnetStateMachine.mpas,666 :: 		end;
0x2400	0x370045  	BRA	L_NMRAnetStateMachine_ProcessNode197
L_NMRAnetStateMachine_ProcessNode218:
;NMRAnetStateMachine.mpas,667 :: 		STATE_ACDI_START_DESC   : begin      {$IFDEF TRACE_SNIP}UART1_Write_Text('STATE_ACDI_START_DESC'+LF); {$ENDIF}
0x2402	0x90794E  	MOV.B	[W14+60], W2
0x2404	0xE11465  	CP.B	W2, #5
0x2406	0x3A0007  	BRA NZ	L_NMRAnetStateMachine_ProcessNode230
L_NMRAnetStateMachine_ProcessNode669:
;NMRAnetStateMachine.mpas,668 :: 		BaseBuffer^.Tag := MAX_USER_NAME;
0x2408	0x4200E8  	ADD	W4, #8, W1
0x240A	0x200140  	MOV	#20, W0
0x240C	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,669 :: 		BaseBuffer^.StateMachine := STATE_ACDI_USER_DESC;
0x240E	0x4200E7  	ADD	W4, #7, W1
0x2410	0xB3C060  	MOV.B	#6, W0
0x2412	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,670 :: 		end;
0x2414	0x37003B  	BRA	L_NMRAnetStateMachine_ProcessNode197
L_NMRAnetStateMachine_ProcessNode230:
;NMRAnetStateMachine.mpas,671 :: 		STATE_ACDI_USER_DESC    : begin     {$IFDEF TRACE_SNIP}UART1_Write_Text('STATE_ACDI_USER_DESC'+LF); {$ENDIF}
0x2416	0xE11466  	CP.B	W2, #6
0x2418	0x3A0035  	BRA NZ	L_NMRAnetStateMachine_ProcessNode233
L_NMRAnetStateMachine_ProcessNode670:
;NMRAnetStateMachine.mpas,672 :: 		if BaseBuffer^.Tag < MAX_CONFIG_DATA then
0x241A	0x420068  	ADD	W4, #8, W0
0x241C	0x780090  	MOV	[W0], W1
0x241E	0x2003C0  	MOV	#60, W0
0x2420	0xE10800  	CP	W1, W0
0x2422	0x31002C  	BRA GEU	L_NMRAnetStateMachine_ProcessNode235
L_NMRAnetStateMachine_ProcessNode671:
;NMRAnetStateMachine.mpas,675 :: 		AppCallback_ConfigurationRead(Node, @DataBytes[i], BaseBuffer^.Tag, 1);
0x2424	0x4700E0  	ADD	W14, #0, W1
0x2426	0x470068  	ADD	W14, #8, W0
0x2428	0x408090  	ADD	W1, [W0], W1
0x242A	0x420068  	ADD	W4, #8, W0
0x242C	0x781F84  	PUSH	W4
0x242E	0xBE9F8A  	PUSH.D	W10
0x2430	0x780610  	MOV	[W0], W12
0x2432	0xEB0680  	CLR	W13
0x2434	0x780581  	MOV	W1, W11
0x2436	0x200010  	MOV	#1, W0
0x2438	0x781F80  	PUSH	W0
0x243A	0x07F2D3  	RCALL	_AppCallback_ConfigurationRead
0x243C	0xB1002F  	SUB	#2, W15
0x243E	0xBE054F  	POP.D	W10
0x2440	0x78024F  	POP	W4
;NMRAnetStateMachine.mpas,676 :: 		if DataBytes[i] = #0 then
0x2442	0x4700E0  	ADD	W14, #0, W1
0x2444	0x470068  	ADD	W14, #8, W0
0x2446	0x408010  	ADD	W1, [W0], W0
0x2448	0x784090  	MOV.B	[W0], W1
0x244A	0xB3C000  	MOV.B	#0, W0
0x244C	0xE10C00  	CP.B	W1, W0
0x244E	0x3A0004  	BRA NZ	L_NMRAnetStateMachine_ProcessNode238
L_NMRAnetStateMachine_ProcessNode672:
;NMRAnetStateMachine.mpas,677 :: 		BaseBuffer^.StateMachine := STATE_ACDI_DONE
0x2450	0x4200E7  	ADD	W4, #7, W1
0x2452	0xB3C070  	MOV.B	#7, W0
0x2454	0x784880  	MOV.B	W0, [W1]
0x2456	0x37000A  	BRA	L_NMRAnetStateMachine_ProcessNode239
;NMRAnetStateMachine.mpas,678 :: 		else
L_NMRAnetStateMachine_ProcessNode238:
;NMRAnetStateMachine.mpas,679 :: 		if BaseBuffer^.Tag = MAX_CONFIG_DATA - 1 then
0x2458	0x420068  	ADD	W4, #8, W0
0x245A	0x780090  	MOV	[W0], W1
0x245C	0x2003B0  	MOV	#59, W0
0x245E	0xE10800  	CP	W1, W0
0x2460	0x3A0005  	BRA NZ	L_NMRAnetStateMachine_ProcessNode241
L_NMRAnetStateMachine_ProcessNode673:
;NMRAnetStateMachine.mpas,680 :: 		DataBytes[i] := #0;
0x2462	0x4700E0  	ADD	W14, #0, W1
0x2464	0x470068  	ADD	W14, #8, W0
0x2466	0x408090  	ADD	W1, [W0], W1
0x2468	0xB3C000  	MOV.B	#0, W0
0x246A	0x784880  	MOV.B	W0, [W1]
L_NMRAnetStateMachine_ProcessNode241:
L_NMRAnetStateMachine_ProcessNode239:
;NMRAnetStateMachine.mpas,681 :: 		Inc(i);
0x246C	0x9000CE  	MOV	[W14+8], W1
0x246E	0x470068  	ADD	W14, #8, W0
0x2470	0x408861  	ADD	W1, #1, [W0]
;NMRAnetStateMachine.mpas,682 :: 		Inc(BaseBuffer^.Tag);
0x2472	0x4200E8  	ADD	W4, #8, W1
0x2474	0x780011  	MOV	[W1], W0
0x2476	0xEC2000  	INC	W0
0x2478	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,683 :: 		end else
0x247A	0x370003  	BRA	L_NMRAnetStateMachine_ProcessNode236
L_NMRAnetStateMachine_ProcessNode235:
;NMRAnetStateMachine.mpas,684 :: 		BaseBuffer^.StateMachine := STATE_ACDI_DONE;
0x247C	0x4200E7  	ADD	W4, #7, W1
0x247E	0xB3C070  	MOV.B	#7, W0
0x2480	0x784880  	MOV.B	W0, [W1]
L_NMRAnetStateMachine_ProcessNode236:
;NMRAnetStateMachine.mpas,685 :: 		end;
0x2482	0x370004  	BRA	L_NMRAnetStateMachine_ProcessNode197
L_NMRAnetStateMachine_ProcessNode233:
;NMRAnetStateMachine.mpas,686 :: 		STATE_ACDI_DONE         : begin      {$IFDEF TRACE_SNIP}UART1_Write_Text('STATE_ACDI_DONE'+LF); {$ENDIF}
0x2484	0x90784E  	MOV.B	[W14+60], W0
0x2486	0xE10467  	CP.B	W0, #7
0x2488	0x3A0001  	BRA NZ	L_NMRAnetStateMachine_ProcessNode245
L_NMRAnetStateMachine_ProcessNode674:
;NMRAnetStateMachine.mpas,690 :: 		end;
0x248A	0x370000  	BRA	L_NMRAnetStateMachine_ProcessNode197
L_NMRAnetStateMachine_ProcessNode245:
L_NMRAnetStateMachine_ProcessNode197:
;NMRAnetStateMachine.mpas,692 :: 		end;
0x248C	0x37FF1C  	BRA	L_NMRAnetStateMachine_ProcessNode193
L_NMRAnetStateMachine_ProcessNode194:
;NMRAnetStateMachine.mpas,694 :: 		if i > 0 then
0x248E	0x90004E  	MOV	[W14+8], W0
0x2490	0xE10060  	CP	W0, #0
0x2492	0x340010  	BRA LE	L_NMRAnetStateMachine_ProcessNode247
L_NMRAnetStateMachine_ProcessNode675:
;NMRAnetStateMachine.mpas,695 :: 		TransmitNMRABusLayerMsg(Node, CANBuffer, MTI_SIMPLE_NODE_INFO_REPLY, BaseBuffer^.Alias, i, @DataBytes, False);
0x2494	0x420162  	ADD	W4, #2, W2
0x2496	0x4700E0  	ADD	W14, #0, W1
0x2498	0x781F84  	PUSH	W4
0x249A	0x781F8B  	PUSH	W11
0x249C	0x28000C  	MOV	#32768, W12
0x249E	0x209A0D  	MOV	#2464, W13
0x24A0	0xEF2000  	CLR	W0
0x24A2	0x781F80  	PUSH	W0
0x24A4	0x781F81  	PUSH	W1
0x24A6	0x470068  	ADD	W14, #8, W0
0x24A8	0x781F90  	PUSH	[W0]
0x24AA	0x781F92  	PUSH	[W2]
0x24AC	0x0709F2  	RCALL	_TransmitNMRABusLayerMsg
0x24AE	0xB1008F  	SUB	#8, W15
0x24B0	0x7805CF  	POP	W11
0x24B2	0x78024F  	POP	W4
L_NMRAnetStateMachine_ProcessNode247:
;NMRAnetStateMachine.mpas,697 :: 		if BaseBuffer^.StateMachine >= STATE_ACDI_DONE then
0x24B4	0x420067  	ADD	W4, #7, W0
0x24B6	0x784010  	MOV.B	[W0], W0
0x24B8	0xE10467  	CP.B	W0, #7
0x24BA	0x390008  	BRA LTU	L_NMRAnetStateMachine_ProcessNode250
L_NMRAnetStateMachine_ProcessNode676:
;NMRAnetStateMachine.mpas,699 :: 		NMRAnetUtilities_BaseBufferUnLink(Node, BaseBuffer);
0x24BC	0x781F8B  	PUSH	W11
0x24BE	0x780584  	MOV	W4, W11
0x24C0	0x07F26A  	RCALL	_NMRAnetUtilities_BaseBufferUnLink
0x24C2	0x7805CF  	POP	W11
;NMRAnetStateMachine.mpas,700 :: 		NMRAnetBufferPools_ReleaseBaseBuffer(BaseBuffer);
0x24C4	0x781F8A  	PUSH	W10
0x24C6	0x780504  	MOV	W4, W10
0x24C8	0x07F2AC  	RCALL	_NMRAnetBufferPools_ReleaseBaseBuffer
0x24CA	0x78054F  	POP	W10
;NMRAnetStateMachine.mpas,701 :: 		end;
L_NMRAnetStateMachine_ProcessNode250:
;NMRAnetStateMachine.mpas,702 :: 		end
0x24CC	0x780004  	MOV	W4, W0
0x24CE	0x370001  	BRA	L_NMRAnetStateMachine_ProcessNode190
; BaseBuffer end address is: 8 (W4)
L_NMRAnetStateMachine_ProcessNode574:
;NMRAnetStateMachine.mpas,612 :: 		if NMRABusBufferAvailable then
0x24D0	0x780004  	MOV	W4, W0
;NMRAnetStateMachine.mpas,702 :: 		end
L_NMRAnetStateMachine_ProcessNode190:
;NMRAnetStateMachine.mpas,703 :: 		end;
; BaseBuffer start address is: 0 (W0)
; BaseBuffer end address is: 0 (W0)
0x24D2	0x370001  	BRA	L_NMRAnetStateMachine_ProcessNode156
L_NMRAnetStateMachine_ProcessNode188:
; BaseBuffer start address is: 8 (W4)
0x24D4	0x780004  	MOV	W4, W0
L_NMRAnetStateMachine_ProcessNode156:
; BaseBuffer end address is: 8 (W4)
;NMRAnetStateMachine.mpas,707 :: 		end;
; BaseBuffer start address is: 0 (W0)
; BaseBuffer end address is: 0 (W0)
0x24D6	0x370001  	BRA	L_NMRAnetStateMachine_ProcessNode154
L_NMRAnetStateMachine_ProcessNode575:
;NMRAnetStateMachine.mpas,584 :: 		if BaseBuffer <> nil then
0x24D8	0x780004  	MOV	W4, W0
;NMRAnetStateMachine.mpas,707 :: 		end;
L_NMRAnetStateMachine_ProcessNode154:
;NMRAnetStateMachine.mpas,709 :: 		if BaseBuffer <> nil then
; BaseBuffer start address is: 0 (W0)
0x24DA	0xE10060  	CP	W0, #0
0x24DC	0x320001  	BRA Z	L_NMRAnetStateMachine_ProcessNode253
L_NMRAnetStateMachine_ProcessNode677:
; BaseBuffer end address is: 0 (W0)
;NMRAnetStateMachine.mpas,710 :: 		Exit;              // Don't interleave Buffer Replies...
0x24DE	0x370420  	BRA	L_end_NMRAnetStateMachine_ProcessNode
L_NMRAnetStateMachine_ProcessNode253:
;NMRAnetStateMachine.mpas,713 :: 		if NMRABusBufferAvailable then
0x24E0	0x070B13  	RCALL	_NMRABusBufferAvailable
0x24E2	0xE20000  	CP0	W0
0x24E4	0x32009D  	BRA Z	L_NMRAnetStateMachine_ProcessNode256
L_NMRAnetStateMachine_ProcessNode678:
;NMRAnetStateMachine.mpas,715 :: 		if NMRAnetNode_IsAnyConsumerEventSet(Node) then
0x24E6	0x07F9AE  	RCALL	_NMRAnetNode_IsAnyConsumerEventSet
0x24E8	0xE20000  	CP0	W0
0x24EA	0x32004C  	BRA Z	L_NMRAnetStateMachine_ProcessNode259
L_NMRAnetStateMachine_ProcessNode679:
;NMRAnetStateMachine.mpas,717 :: 		EventIndex := NMRAnetNode_NextConsumerEventFlag(Node, State);
0x24EC	0x47006E  	ADD	W14, #14, W0
0x24EE	0x781F8B  	PUSH	W11
0x24F0	0x780580  	MOV	W0, W11
0x24F2	0x07F8D7  	RCALL	_NMRAnetNode_NextConsumerEventFlag
0x24F4	0x7805CF  	POP	W11
; EventIndex start address is: 4 (W2)
0x24F6	0x780100  	MOV	W0, W2
;NMRAnetStateMachine.mpas,718 :: 		if EventIndex > -1 then
0x24F8	0x2FFFF1  	MOV	#65535, W1
0x24FA	0xE10001  	CP	W0, W1
0x24FC	0x340042  	BRA LE	L_NMRAnetStateMachine_ProcessNode262
L_NMRAnetStateMachine_ProcessNode680:
;NMRAnetStateMachine.mpas,721 :: 		if NMRAnetNode_TestStateFlag(Node, NS_VIRTUAL) then
0x24FE	0x781F8B  	PUSH	W11
0x2500	0xB3C08B  	MOV.B	#8, W11
0x2502	0x070BC6  	RCALL	_NMRAnetNode_TestStateFlag
0x2504	0x7805CF  	POP	W11
0x2506	0xE20000  	CP0	W0
0x2508	0x320005  	BRA Z	L_NMRAnetStateMachine_ProcessNode265
L_NMRAnetStateMachine_ProcessNode681:
;NMRAnetStateMachine.mpas,722 :: 		DataBytesPtr := PCAN_DataBytes( @SUPPORTED_VNODE_EVENTS_CONSUMED[EventIndex])
0x250A	0xDD10C3  	SL	W2, #3, W1
; EventIndex end address is: 4 (W2)
0x250C	0x28DA50  	MOV	#lo_addr(_SUPPORTED_VNODE_EVENTS_CONSUMED), W0
0x250E	0x400001  	ADD	W0, W1, W0
; DataBytesPtr start address is: 18 (W9)
0x2510	0x780480  	MOV	W0, W9
; DataBytesPtr end address is: 18 (W9)
0x2512	0x370004  	BRA	L_NMRAnetStateMachine_ProcessNode266
;NMRAnetStateMachine.mpas,723 :: 		else
L_NMRAnetStateMachine_ProcessNode265:
;NMRAnetStateMachine.mpas,725 :: 		DataBytesPtr := PCAN_DataBytes( @SUPPORTED_EVENTS_CONSUMED[EventIndex]);
; EventIndex start address is: 4 (W2)
0x2514	0xDD10C3  	SL	W2, #3, W1
; EventIndex end address is: 4 (W2)
0x2516	0x28D9D0  	MOV	#lo_addr(_SUPPORTED_EVENTS_CONSUMED), W0
0x2518	0x400001  	ADD	W0, W1, W0
; DataBytesPtr start address is: 18 (W9)
0x251A	0x780480  	MOV	W0, W9
; DataBytesPtr end address is: 18 (W9)
L_NMRAnetStateMachine_ProcessNode266:
;NMRAnetStateMachine.mpas,727 :: 		EVENT_STATE_UNKOWN : TransmitNMRABusLayerMsg(Node, CANBuffer, MTI_CONSUMER_IDENTIFIED_UNKNOWN, 0, 8, DataBytesPtr, False);
; DataBytesPtr start address is: 18 (W9)
0x251C	0x90486E  	MOV.B	[W14+14], W0
0x251E	0xE10463  	CP.B	W0, #3
0x2520	0x3A000E  	BRA NZ	L_NMRAnetStateMachine_ProcessNode270
L_NMRAnetStateMachine_ProcessNode682:
0x2522	0x781F8B  	PUSH	W11
0x2524	0x27000C  	MOV	#28672, W12
0x2526	0x2094CD  	MOV	#2380, W13
0x2528	0xEF2000  	CLR	W0
0x252A	0x781F80  	PUSH	W0
0x252C	0x781F89  	PUSH	W9
; DataBytesPtr end address is: 18 (W9)
0x252E	0x200080  	MOV	#8, W0
0x2530	0x781F80  	PUSH	W0
0x2532	0xEF2000  	CLR	W0
0x2534	0x781F80  	PUSH	W0
0x2536	0x0709AD  	RCALL	_TransmitNMRABusLayerMsg
0x2538	0xB1008F  	SUB	#8, W15
0x253A	0x7805CF  	POP	W11
0x253C	0x370022  	BRA	L_NMRAnetStateMachine_ProcessNode267
L_NMRAnetStateMachine_ProcessNode270:
;NMRAnetStateMachine.mpas,728 :: 		EVENT_STATE_VALID : TransmitNMRABusLayerMsg(Node, CANBuffer, MTI_CONSUMER_IDENTIFIED_SET, 0, 8, DataBytesPtr, False);
; DataBytesPtr start address is: 18 (W9)
0x253E	0x90486E  	MOV.B	[W14+14], W0
0x2540	0xE10461  	CP.B	W0, #1
0x2542	0x3A000E  	BRA NZ	L_NMRAnetStateMachine_ProcessNode273
L_NMRAnetStateMachine_ProcessNode683:
0x2544	0x781F8B  	PUSH	W11
0x2546	0x24000C  	MOV	#16384, W12
0x2548	0x2094CD  	MOV	#2380, W13
0x254A	0xEF2000  	CLR	W0
0x254C	0x781F80  	PUSH	W0
0x254E	0x781F89  	PUSH	W9
; DataBytesPtr end address is: 18 (W9)
0x2550	0x200080  	MOV	#8, W0
0x2552	0x781F80  	PUSH	W0
0x2554	0xEF2000  	CLR	W0
0x2556	0x781F80  	PUSH	W0
0x2558	0x07099C  	RCALL	_TransmitNMRABusLayerMsg
0x255A	0xB1008F  	SUB	#8, W15
0x255C	0x7805CF  	POP	W11
0x255E	0x370011  	BRA	L_NMRAnetStateMachine_ProcessNode267
L_NMRAnetStateMachine_ProcessNode273:
;NMRAnetStateMachine.mpas,729 :: 		EVENT_STATE_INVALID : TransmitNMRABusLayerMsg(Node, CANBuffer, MTI_CONSUMER_IDENTIFIED_CLEAR, 0, 8, DataBytesPtr, False);
; DataBytesPtr start address is: 18 (W9)
0x2560	0x90486E  	MOV.B	[W14+14], W0
0x2562	0xE10462  	CP.B	W0, #2
0x2564	0x3A000E  	BRA NZ	L_NMRAnetStateMachine_ProcessNode276
L_NMRAnetStateMachine_ProcessNode684:
0x2566	0x781F8B  	PUSH	W11
0x2568	0x25000C  	MOV	#20480, W12
0x256A	0x2094CD  	MOV	#2380, W13
0x256C	0xEF2000  	CLR	W0
0x256E	0x781F80  	PUSH	W0
0x2570	0x781F89  	PUSH	W9
; DataBytesPtr end address is: 18 (W9)
0x2572	0x200080  	MOV	#8, W0
0x2574	0x781F80  	PUSH	W0
0x2576	0xEF2000  	CLR	W0
0x2578	0x781F80  	PUSH	W0
0x257A	0x07098B  	RCALL	_TransmitNMRABusLayerMsg
0x257C	0xB1008F  	SUB	#8, W15
0x257E	0x7805CF  	POP	W11
0x2580	0x370000  	BRA	L_NMRAnetStateMachine_ProcessNode267
L_NMRAnetStateMachine_ProcessNode276:
L_NMRAnetStateMachine_ProcessNode267:
;NMRAnetStateMachine.mpas,731 :: 		end
L_NMRAnetStateMachine_ProcessNode262:
;NMRAnetStateMachine.mpas,732 :: 		end else
0x2582	0x37004E  	BRA	L_NMRAnetStateMachine_ProcessNode260
L_NMRAnetStateMachine_ProcessNode259:
;NMRAnetStateMachine.mpas,733 :: 		if NMRAnetNode_IsAnyProducerEventSet(Node) then
0x2584	0x07F8C8  	RCALL	_NMRAnetNode_IsAnyProducerEventSet
0x2586	0xE20000  	CP0	W0
0x2588	0x32004B  	BRA Z	L_NMRAnetStateMachine_ProcessNode278
L_NMRAnetStateMachine_ProcessNode685:
;NMRAnetStateMachine.mpas,735 :: 		EventIndex := NMRAnetNode_NextProducerEventFlag(Node, State);
0x258A	0x47006E  	ADD	W14, #14, W0
0x258C	0x781F8B  	PUSH	W11
0x258E	0x780580  	MOV	W0, W11
0x2590	0x07F8D2  	RCALL	_NMRAnetNode_NextProducerEventFlag
0x2592	0x7805CF  	POP	W11
; EventIndex start address is: 4 (W2)
0x2594	0x780100  	MOV	W0, W2
;NMRAnetStateMachine.mpas,736 :: 		if EventIndex > -1 then
0x2596	0x2FFFF1  	MOV	#65535, W1
0x2598	0xE10001  	CP	W0, W1
0x259A	0x340042  	BRA LE	L_NMRAnetStateMachine_ProcessNode281
L_NMRAnetStateMachine_ProcessNode686:
;NMRAnetStateMachine.mpas,739 :: 		if NMRAnetNode_TestStateFlag(Node, NS_VIRTUAL) then
0x259C	0x781F8B  	PUSH	W11
0x259E	0xB3C08B  	MOV.B	#8, W11
0x25A0	0x070B77  	RCALL	_NMRAnetNode_TestStateFlag
0x25A2	0x7805CF  	POP	W11
0x25A4	0xE20000  	CP0	W0
0x25A6	0x320005  	BRA Z	L_NMRAnetStateMachine_ProcessNode284
L_NMRAnetStateMachine_ProcessNode687:
;NMRAnetStateMachine.mpas,740 :: 		DataBytesPtr := PCAN_DataBytes( @SUPPORTED_VNODE_EVENTS_PRODUCED[EventIndex])
0x25A8	0xDD10C3  	SL	W2, #3, W1
; EventIndex end address is: 4 (W2)
0x25AA	0x28D6D0  	MOV	#lo_addr(_SUPPORTED_VNODE_EVENTS_PRODUCED), W0
0x25AC	0x400001  	ADD	W0, W1, W0
; DataBytesPtr start address is: 18 (W9)
0x25AE	0x780480  	MOV	W0, W9
; DataBytesPtr end address is: 18 (W9)
0x25B0	0x370004  	BRA	L_NMRAnetStateMachine_ProcessNode285
;NMRAnetStateMachine.mpas,741 :: 		else
L_NMRAnetStateMachine_ProcessNode284:
;NMRAnetStateMachine.mpas,743 :: 		DataBytesPtr := PCAN_DataBytes( @SUPPORTED_EVENTS_PRODUCED[EventIndex]);
; EventIndex start address is: 4 (W2)
0x25B2	0xDD10C3  	SL	W2, #3, W1
; EventIndex end address is: 4 (W2)
0x25B4	0x28D850  	MOV	#lo_addr(_SUPPORTED_EVENTS_PRODUCED), W0
0x25B6	0x400001  	ADD	W0, W1, W0
; DataBytesPtr start address is: 18 (W9)
0x25B8	0x780480  	MOV	W0, W9
; DataBytesPtr end address is: 18 (W9)
L_NMRAnetStateMachine_ProcessNode285:
;NMRAnetStateMachine.mpas,745 :: 		EVENT_STATE_UNKOWN : TransmitNMRABusLayerMsg(Node, CANBuffer, MTI_PRODUCER_IDENTIFIED_UNKNOWN, 0, 8, DataBytesPtr, False);
; DataBytesPtr start address is: 18 (W9)
0x25BA	0x90486E  	MOV.B	[W14+14], W0
0x25BC	0xE10463  	CP.B	W0, #3
0x25BE	0x3A000E  	BRA NZ	L_NMRAnetStateMachine_ProcessNode289
L_NMRAnetStateMachine_ProcessNode688:
0x25C0	0x781F8B  	PUSH	W11
0x25C2	0x27000C  	MOV	#28672, W12
0x25C4	0x20954D  	MOV	#2388, W13
0x25C6	0xEF2000  	CLR	W0
0x25C8	0x781F80  	PUSH	W0
0x25CA	0x781F89  	PUSH	W9
; DataBytesPtr end address is: 18 (W9)
0x25CC	0x200080  	MOV	#8, W0
0x25CE	0x781F80  	PUSH	W0
0x25D0	0xEF2000  	CLR	W0
0x25D2	0x781F80  	PUSH	W0
0x25D4	0x07095E  	RCALL	_TransmitNMRABusLayerMsg
0x25D6	0xB1008F  	SUB	#8, W15
0x25D8	0x7805CF  	POP	W11
0x25DA	0x370022  	BRA	L_NMRAnetStateMachine_ProcessNode286
L_NMRAnetStateMachine_ProcessNode289:
;NMRAnetStateMachine.mpas,746 :: 		EVENT_STATE_VALID : TransmitNMRABusLayerMsg(Node, CANBuffer, MTI_PRODUCER_IDENTIFIED_SET, 0, 8, DataBytesPtr, False);
; DataBytesPtr start address is: 18 (W9)
0x25DC	0x90486E  	MOV.B	[W14+14], W0
0x25DE	0xE10461  	CP.B	W0, #1
0x25E0	0x3A000E  	BRA NZ	L_NMRAnetStateMachine_ProcessNode292
L_NMRAnetStateMachine_ProcessNode689:
0x25E2	0x781F8B  	PUSH	W11
0x25E4	0x24000C  	MOV	#16384, W12
0x25E6	0x20954D  	MOV	#2388, W13
0x25E8	0xEF2000  	CLR	W0
0x25EA	0x781F80  	PUSH	W0
0x25EC	0x781F89  	PUSH	W9
; DataBytesPtr end address is: 18 (W9)
0x25EE	0x200080  	MOV	#8, W0
0x25F0	0x781F80  	PUSH	W0
0x25F2	0xEF2000  	CLR	W0
0x25F4	0x781F80  	PUSH	W0
0x25F6	0x07094D  	RCALL	_TransmitNMRABusLayerMsg
0x25F8	0xB1008F  	SUB	#8, W15
0x25FA	0x7805CF  	POP	W11
0x25FC	0x370011  	BRA	L_NMRAnetStateMachine_ProcessNode286
L_NMRAnetStateMachine_ProcessNode292:
;NMRAnetStateMachine.mpas,747 :: 		EVENT_STATE_INVALID : TransmitNMRABusLayerMsg(Node, CANBuffer, MTI_PRODUCER_IDENTIFIED_CLEAR, 0, 8, DataBytesPtr, False);
; DataBytesPtr start address is: 18 (W9)
0x25FE	0x90486E  	MOV.B	[W14+14], W0
0x2600	0xE10462  	CP.B	W0, #2
0x2602	0x3A000E  	BRA NZ	L_NMRAnetStateMachine_ProcessNode295
L_NMRAnetStateMachine_ProcessNode690:
0x2604	0x781F8B  	PUSH	W11
0x2606	0x25000C  	MOV	#20480, W12
0x2608	0x20954D  	MOV	#2388, W13
0x260A	0xEF2000  	CLR	W0
0x260C	0x781F80  	PUSH	W0
0x260E	0x781F89  	PUSH	W9
; DataBytesPtr end address is: 18 (W9)
0x2610	0x200080  	MOV	#8, W0
0x2612	0x781F80  	PUSH	W0
0x2614	0xEF2000  	CLR	W0
0x2616	0x781F80  	PUSH	W0
0x2618	0x07093C  	RCALL	_TransmitNMRABusLayerMsg
0x261A	0xB1008F  	SUB	#8, W15
0x261C	0x7805CF  	POP	W11
0x261E	0x370000  	BRA	L_NMRAnetStateMachine_ProcessNode286
L_NMRAnetStateMachine_ProcessNode295:
L_NMRAnetStateMachine_ProcessNode286:
;NMRAnetStateMachine.mpas,749 :: 		end
L_NMRAnetStateMachine_ProcessNode281:
;NMRAnetStateMachine.mpas,750 :: 		end;
L_NMRAnetStateMachine_ProcessNode278:
L_NMRAnetStateMachine_ProcessNode260:
;NMRAnetStateMachine.mpas,751 :: 		end;
L_NMRAnetStateMachine_ProcessNode256:
;NMRAnetStateMachine.mpas,754 :: 		DatagramBuffer := NMRAnetUtilities_NextDatagramBuffer(Node);                // Grab the next completed Datagram to work on
0x2620	0x07F9E8  	RCALL	_NMRAnetUtilities_NextDatagramBuffer
; DatagramBuffer start address is: 16 (W8)
0x2622	0x780400  	MOV	W0, W8
;NMRAnetStateMachine.mpas,755 :: 		if DatagramBuffer <> nil then
0x2624	0xE10060  	CP	W0, #0
0x2626	0x32037C  	BRA Z	L_NMRAnetStateMachine_ProcessNode297
L_NMRAnetStateMachine_ProcessNode691:
;NMRAnetStateMachine.mpas,763 :: 		case DatagramBuffer^.mCode of
0x2628	0x440066  	ADD	W8, #6, W0
0x262A	0x784010  	MOV.B	[W0], W0
0x262C	0x98C720  	MOV.B	W0, [W14+66]
;NMRAnetStateMachine.mpas,769 :: 		BMC_DATAGRAM_MEMORY_CONFIG         : begin
0x262E	0xE10468  	CP.B	W0, #8
0x2630	0x3A0350  	BRA NZ	L_NMRAnetStateMachine_ProcessNode302
L_NMRAnetStateMachine_ProcessNode692:
;NMRAnetStateMachine.mpas,770 :: 		case DatagramBuffer^.StateMachine of
0x2632	0x440067  	ADD	W8, #7, W0
0x2634	0x784010  	MOV.B	[W0], W0
0x2636	0x98C700  	MOV.B	W0, [W14+64]
;NMRAnetStateMachine.mpas,771 :: 		STATE_MEM_CONFIG_SEND_REPLY           : begin  {$IFDEF TRACE_MEM_CONFIG_STATEMACHINE}  UART1_Write_Text('STATE_MEM_CONFIG_SEND_REPLY'+LF); {$ENDIF}
0x2638	0xE10460  	CP.B	W0, #0
0x263A	0x3A0049  	BRA NZ	L_NMRAnetStateMachine_ProcessNode306
L_NMRAnetStateMachine_ProcessNode693:
;NMRAnetStateMachine.mpas,772 :: 		if DatagramBuffer^.DataBytes[1] and $C0 = MCP_OPERATION then
0x263C	0x44006B  	ADD	W8, #11, W0
0x263E	0xEC2000  	INC	W0
0x2640	0xFB8090  	ZE	[W0], W1
0x2642	0x200C00  	MOV	#192, W0
0x2644	0x608080  	AND	W1, W0, W1
0x2646	0x200800  	MOV	#128, W0
0x2648	0xE10800  	CP	W1, W0
0x264A	0x3A0017  	BRA NZ	L_NMRAnetStateMachine_ProcessNode308
L_NMRAnetStateMachine_ProcessNode694:
;NMRAnetStateMachine.mpas,774 :: 		if NMRABusBufferAvailable then
0x264C	0x070A5D  	RCALL	_NMRABusBufferAvailable
0x264E	0xE20000  	CP0	W0
0x2650	0x320013  	BRA Z	L_NMRAnetStateMachine_ProcessNode311
L_NMRAnetStateMachine_ProcessNode695:
;NMRAnetStateMachine.mpas,776 :: 		TransmitNMRABusLayerMsg(Node, CANBuffer, MTI_DATAGRAM_OK_REPLY, DatagramBuffer^.Alias, 0, @DataBytes, False);
0x2652	0x440162  	ADD	W8, #2, W2
0x2654	0x4700E0  	ADD	W14, #0, W1
0x2656	0x781F88  	PUSH	W8
0x2658	0x781F8B  	PUSH	W11
0x265A	0x28000C  	MOV	#32768, W12
0x265C	0x209A2D  	MOV	#2466, W13
0x265E	0xEF2000  	CLR	W0
0x2660	0x781F80  	PUSH	W0
0x2662	0x781F81  	PUSH	W1
0x2664	0xEF2000  	CLR	W0
0x2666	0x781F80  	PUSH	W0
0x2668	0x781F92  	PUSH	[W2]
0x266A	0x070913  	RCALL	_TransmitNMRABusLayerMsg
0x266C	0xB1008F  	SUB	#8, W15
0x266E	0x7805CF  	POP	W11
0x2670	0x78044F  	POP	W8
;NMRAnetStateMachine.mpas,777 :: 		DatagramBuffer^.Statemachine := STATE_MEM_CONFIG_OPERATION_DATAGRAM
0x2672	0x4400E7  	ADD	W8, #7, W1
; DatagramBuffer end address is: 16 (W8)
0x2674	0xB3C010  	MOV.B	#1, W0
0x2676	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,778 :: 		end
L_NMRAnetStateMachine_ProcessNode311:
;NMRAnetStateMachine.mpas,779 :: 		end else
0x2678	0x370029  	BRA	L_NMRAnetStateMachine_ProcessNode309
L_NMRAnetStateMachine_ProcessNode308:
;NMRAnetStateMachine.mpas,780 :: 		if DatagramBuffer^.DataBytes[1] and $C0 = MCP_READ then
; DatagramBuffer start address is: 16 (W8)
0x267A	0x44006B  	ADD	W8, #11, W0
0x267C	0xEC2000  	INC	W0
0x267E	0xFB8090  	ZE	[W0], W1
0x2680	0x200C00  	MOV	#192, W0
0x2682	0x608080  	AND	W1, W0, W1
0x2684	0x200400  	MOV	#64, W0
0x2686	0xE10800  	CP	W1, W0
0x2688	0x3A0017  	BRA NZ	L_NMRAnetStateMachine_ProcessNode314
L_NMRAnetStateMachine_ProcessNode696:
;NMRAnetStateMachine.mpas,782 :: 		if NMRABusBufferAvailable then
0x268A	0x070A3E  	RCALL	_NMRABusBufferAvailable
0x268C	0xE20000  	CP0	W0
0x268E	0x320013  	BRA Z	L_NMRAnetStateMachine_ProcessNode317
L_NMRAnetStateMachine_ProcessNode697:
;NMRAnetStateMachine.mpas,784 :: 		TransmitNMRABusLayerMsg(Node, CANBuffer, MTI_DATAGRAM_OK_REPLY, DatagramBuffer^.Alias, 0, @DataBytes, False);
0x2690	0x440162  	ADD	W8, #2, W2
0x2692	0x4700E0  	ADD	W14, #0, W1
0x2694	0x781F88  	PUSH	W8
0x2696	0x781F8B  	PUSH	W11
0x2698	0x28000C  	MOV	#32768, W12
0x269A	0x209A2D  	MOV	#2466, W13
0x269C	0xEF2000  	CLR	W0
0x269E	0x781F80  	PUSH	W0
0x26A0	0x781F81  	PUSH	W1
0x26A2	0xEF2000  	CLR	W0
0x26A4	0x781F80  	PUSH	W0
0x26A6	0x781F92  	PUSH	[W2]
0x26A8	0x0708F4  	RCALL	_TransmitNMRABusLayerMsg
0x26AA	0xB1008F  	SUB	#8, W15
0x26AC	0x7805CF  	POP	W11
0x26AE	0x78044F  	POP	W8
;NMRAnetStateMachine.mpas,785 :: 		DatagramBuffer^.Statemachine := STATE_MEM_CONFIG_READ_DATAGRAM
0x26B0	0x4400E7  	ADD	W8, #7, W1
; DatagramBuffer end address is: 16 (W8)
0x26B2	0xB3C020  	MOV.B	#2, W0
0x26B4	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,786 :: 		end
L_NMRAnetStateMachine_ProcessNode317:
;NMRAnetStateMachine.mpas,787 :: 		end else
0x26B6	0x37000A  	BRA	L_NMRAnetStateMachine_ProcessNode315
L_NMRAnetStateMachine_ProcessNode314:
;NMRAnetStateMachine.mpas,788 :: 		if DatagramBuffer^.DataBytes[1] and $C0 = MCP_WRITE then
; DatagramBuffer start address is: 16 (W8)
0x26B8	0x44006B  	ADD	W8, #11, W0
0x26BA	0xEC2000  	INC	W0
0x26BC	0xFB8090  	ZE	[W0], W1
0x26BE	0x200C00  	MOV	#192, W0
0x26C0	0x608000  	AND	W1, W0, W0
0x26C2	0xE10060  	CP	W0, #0
0x26C4	0x3A0003  	BRA NZ	L_NMRAnetStateMachine_ProcessNode320
L_NMRAnetStateMachine_ProcessNode698:
;NMRAnetStateMachine.mpas,789 :: 		DatagramBuffer^.Statemachine := STATE_MEM_CONFIG_WRITE_DATAGRAM
0x26C6	0x4400E7  	ADD	W8, #7, W1
; DatagramBuffer end address is: 16 (W8)
0x26C8	0xB3C030  	MOV.B	#3, W0
0x26CA	0x784880  	MOV.B	W0, [W1]
L_NMRAnetStateMachine_ProcessNode320:
L_NMRAnetStateMachine_ProcessNode315:
L_NMRAnetStateMachine_ProcessNode309:
;NMRAnetStateMachine.mpas,790 :: 		end;
0x26CC	0x370301  	BRA	L_NMRAnetStateMachine_ProcessNode303
L_NMRAnetStateMachine_ProcessNode306:
;NMRAnetStateMachine.mpas,791 :: 		STATE_MEM_CONFIG_OPERATION_DATAGRAM   : begin {$IFDEF TRACE_MEM_CONFIG_STATEMACHINE} UART1_Write_Text('STATE_MEM_OPERATION_DATAGRAM'+LF);    {$ENDIF}
; DatagramBuffer start address is: 16 (W8)
0x26CE	0x90C00E  	MOV.B	[W14+64], W0
0x26D0	0xE10461  	CP.B	W0, #1
0x26D2	0x3A00A8  	BRA NZ	L_NMRAnetStateMachine_ProcessNode324
L_NMRAnetStateMachine_ProcessNode699:
;NMRAnetStateMachine.mpas,793 :: 		case DatagramBuffer^.DataBytes[1] of      // Mask off the upper 2 bits
0x26D4	0x44006B  	ADD	W8, #11, W0
0x26D6	0xEC2000  	INC	W0
0x26D8	0x784110  	MOV.B	[W0], W2
0x26DA	0x987F42  	MOV.B	W2, [W14+60]
;NMRAnetStateMachine.mpas,794 :: 		MCP_OP_GET_CONFIG         : begin
0x26DC	0xB3C800  	MOV.B	#128, W0
0x26DE	0xE11400  	CP.B	W2, W0
0x26E0	0x3A001F  	BRA NZ	L_NMRAnetStateMachine_ProcessNode328
L_NMRAnetStateMachine_ProcessNode700:
;NMRAnetStateMachine.mpas,795 :: 		DatagramBuffer^.DataBytes[0] := DATAGRAM_TYPE_MEMORY_CONFIGURATION;
0x26E2	0x4400EB  	ADD	W8, #11, W1
0x26E4	0xB3C200  	MOV.B	#32, W0
0x26E6	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,796 :: 		DatagramBuffer^.DataBytes[1] := MCP_OP_GET_CONFIG_REPLY;
0x26E8	0x44006B  	ADD	W8, #11, W0
0x26EA	0x4000E1  	ADD	W0, #1, W1
0x26EC	0xB3C820  	MOV.B	#130, W0
0x26EE	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,797 :: 		DatagramBuffer^.DataBytes[2] := Hi( MEMORY_CONFIG_OPTIONS.MemoryConfigOptions);
0x26F0	0x44006B  	ADD	W8, #11, W0
0x26F2	0x4000E2  	ADD	W0, #2, W1
0x26F4	0xB3C4E0  	MOV.B	#78, W0
0x26F6	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,798 :: 		DatagramBuffer^.DataBytes[3] := Lo( MEMORY_CONFIG_OPTIONS.MemoryConfigOptions);
0x26F8	0x44006B  	ADD	W8, #11, W0
0x26FA	0x4000E3  	ADD	W0, #3, W1
0x26FC	0xEF2000  	CLR	W0
0x26FE	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,799 :: 		DatagramBuffer^.DataBytes[4] := MEMORY_CONFIG_OPTIONS.MemoryConfigWriteLength;
0x2700	0x44006B  	ADD	W8, #11, W0
0x2702	0x4000E4  	ADD	W0, #4, W1
0x2704	0xB3CF20  	MOV.B	#242, W0
0x2706	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,800 :: 		DatagramBuffer^.DataBytes[5] := MEMORY_CONFIG_OPTIONS.MemoryConfigHighestSpace;
0x2708	0x44006B  	ADD	W8, #11, W0
0x270A	0x4000E5  	ADD	W0, #5, W1
0x270C	0xB3CFF0  	MOV.B	#255, W0
0x270E	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,801 :: 		DatagramBuffer^.DataBytes[6] := MEMORY_CONFIG_OPTIONS.MemoryConfigLowestSpace;
0x2710	0x44006B  	ADD	W8, #11, W0
0x2712	0x4000E6  	ADD	W0, #6, W1
0x2714	0xB3CFB0  	MOV.B	#251, W0
0x2716	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,802 :: 		DatagramBuffer^.iByteCount := 7;
0x2718	0x4400EA  	ADD	W8, #10, W1
0x271A	0xB3C070  	MOV.B	#7, W0
0x271C	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,803 :: 		end;
0x271E	0x37007E  	BRA	L_NMRAnetStateMachine_ProcessNode325
L_NMRAnetStateMachine_ProcessNode328:
;NMRAnetStateMachine.mpas,804 :: 		MCP_OP_GET_ADD_SPACE_INFO : begin
0x2720	0xB3C840  	MOV.B	#132, W0
0x2722	0xE11400  	CP.B	W2, W0
0x2724	0x3A0057  	BRA NZ	L_NMRAnetStateMachine_ProcessNode331
L_NMRAnetStateMachine_ProcessNode701:
;NMRAnetStateMachine.mpas,805 :: 		DatagramBuffer^.DataBytes[0] := DATAGRAM_TYPE_MEMORY_CONFIGURATION;
0x2726	0x4400EB  	ADD	W8, #11, W1
0x2728	0xB3C200  	MOV.B	#32, W0
0x272A	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,806 :: 		DatagramBuffer^.DataBytes[1] := MCP_OP_GET_ADD_SPACE_INFO_REPLY or MCP_OP_GET_ADD_SPACE_INFO_REPLY_PRESENT;  // assumption is we support ALL Address Spaces
0x272C	0x44006B  	ADD	W8, #11, W0
0x272E	0x4000E1  	ADD	W0, #1, W1
0x2730	0xB3C870  	MOV.B	#135, W0
0x2732	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,807 :: 		DatagramBuffer^.DataBytes[2] := DatagramBuffer^.DataBytes[2];
0x2734	0x44006B  	ADD	W8, #11, W0
0x2736	0xECA000  	INC2	W0
;NMRAnetStateMachine.mpas,809 :: 		MemorySpaceMaxAddress := MaxAddressByAddressSpace(Node, DatagramBuffer^.DataBytes[2]);
0x2738	0x44006B  	ADD	W8, #11, W0
0x273A	0xECA000  	INC2	W0
0x273C	0x781F88  	PUSH	W8
0x273E	0xBE9F8A  	PUSH.D	W10
0x2740	0x784590  	MOV.B	[W0], W11
0x2742	0x07F910  	RCALL	NMRAnetStateMachine_MaxAddressByAddressSpace
0x2744	0xBE054F  	POP.D	W10
0x2746	0x78044F  	POP	W8
; MemorySpaceMaxAddress start address is: 10 (W5)
0x2748	0x780280  	MOV	W0, W5
0x274A	0x780301  	MOV	W1, W6
;NMRAnetStateMachine.mpas,810 :: 		DatagramBuffer^.DataBytes[3] := (DWord(MemorySpaceMaxAddress) shr 24) and $000000FF;
0x274C	0x44006B  	ADD	W8, #11, W0
0x274E	0x400263  	ADD	W0, #3, W4
0x2750	0x200180  	MOV	#24, W0
0x2752	0x780105  	MOV	W5, W2
0x2754	0x780186  	MOV	W6, W3
L_NMRAnetStateMachine_ProcessNode702:
0x2756	0xE90000  	DEC	W0, W0
0x2758	0x350003  	BRA LT	L_NMRAnetStateMachine_ProcessNode703
0x275A	0xD10183  	LSR	W3, W3
0x275C	0xD38102  	RRC	W2, W2
0x275E	0x37FFFB  	BRA	L_NMRAnetStateMachine_ProcessNode702
L_NMRAnetStateMachine_ProcessNode703:
0x2760	0x200FF0  	MOV	#255, W0
0x2762	0x200001  	MOV	#0, W1
0x2764	0x610000  	AND	W2, W0, W0
0x2766	0x784A00  	MOV.B	W0, [W4]
;NMRAnetStateMachine.mpas,811 :: 		DatagramBuffer^.DataBytes[4] := (DWord(MemorySpaceMaxAddress) shr 16) and $000000FF;
0x2768	0x44006B  	ADD	W8, #11, W0
0x276A	0x400264  	ADD	W0, #4, W4
0x276C	0x780105  	MOV	W5, W2
0x276E	0x780186  	MOV	W6, W3
0x2770	0x780103  	MOV	W3, W2
0x2772	0xEB0180  	CLR	W3
0x2774	0x200FF0  	MOV	#255, W0
0x2776	0x200001  	MOV	#0, W1
0x2778	0x610000  	AND	W2, W0, W0
0x277A	0x784A00  	MOV.B	W0, [W4]
;NMRAnetStateMachine.mpas,812 :: 		DatagramBuffer^.DataBytes[5] := (DWord(MemorySpaceMaxAddress) shr 8) and $000000FF;
0x277C	0x44006B  	ADD	W8, #11, W0
0x277E	0x400265  	ADD	W0, #5, W4
0x2780	0x200080  	MOV	#8, W0
0x2782	0x780105  	MOV	W5, W2
0x2784	0x780186  	MOV	W6, W3
L_NMRAnetStateMachine_ProcessNode704:
0x2786	0xE90000  	DEC	W0, W0
0x2788	0x350003  	BRA LT	L_NMRAnetStateMachine_ProcessNode705
0x278A	0xD10183  	LSR	W3, W3
0x278C	0xD38102  	RRC	W2, W2
0x278E	0x37FFFB  	BRA	L_NMRAnetStateMachine_ProcessNode704
L_NMRAnetStateMachine_ProcessNode705:
0x2790	0x200FF0  	MOV	#255, W0
0x2792	0x200001  	MOV	#0, W1
0x2794	0x610000  	AND	W2, W0, W0
0x2796	0x784A00  	MOV.B	W0, [W4]
;NMRAnetStateMachine.mpas,813 :: 		DatagramBuffer^.DataBytes[6] := DWord(MemorySpaceMaxAddress) and $000000FF;
0x2798	0x44006B  	ADD	W8, #11, W0
0x279A	0x400166  	ADD	W0, #6, W2
0x279C	0x200FF0  	MOV	#255, W0
0x279E	0x200001  	MOV	#0, W1
0x27A0	0x628000  	AND	W5, W0, W0
; MemorySpaceMaxAddress end address is: 10 (W5)
0x27A2	0x784900  	MOV.B	W0, [W2]
;NMRAnetStateMachine.mpas,814 :: 		case DatagramBuffer^.DataBytes[2] of
0x27A4	0x44006B  	ADD	W8, #11, W0
0x27A6	0x400162  	ADD	W0, #2, W2
;NMRAnetStateMachine.mpas,815 :: 		MSI_CONFIG, MSI_ACDI_USER : DatagramBuffer^.DataBytes[7] := $00          // Read/Write
0x27A8	0x784092  	MOV.B	[W2], W1
0x27AA	0xB3CFD0  	MOV.B	#253, W0
0x27AC	0xE10C00  	CP.B	W1, W0
0x27AE	0x3A0001  	BRA NZ	L_NMRAnetStateMachine_ProcessNode335
L_NMRAnetStateMachine_ProcessNode706:
0x27B0	0x370004  	BRA	L_NMRAnetStateMachine_ProcessNode333
L_NMRAnetStateMachine_ProcessNode335:
0x27B2	0x784092  	MOV.B	[W2], W1
0x27B4	0xB3CFB0  	MOV.B	#251, W0
0x27B6	0xE10C00  	CP.B	W1, W0
0x27B8	0x3A0005  	BRA NZ	L_NMRAnetStateMachine_ProcessNode336
L_NMRAnetStateMachine_ProcessNode707:
L_NMRAnetStateMachine_ProcessNode333:
0x27BA	0x44006B  	ADD	W8, #11, W0
0x27BC	0x4000E7  	ADD	W0, #7, W1
0x27BE	0xEF2000  	CLR	W0
0x27C0	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,816 :: 		else
0x27C2	0x370004  	BRA	L_NMRAnetStateMachine_ProcessNode332
L_NMRAnetStateMachine_ProcessNode336:
;NMRAnetStateMachine.mpas,817 :: 		DatagramBuffer^.DataBytes[7] := $01;                                     // Read Only
0x27C4	0x44006B  	ADD	W8, #11, W0
0x27C6	0x4000E7  	ADD	W0, #7, W1
0x27C8	0xB3C010  	MOV.B	#1, W0
0x27CA	0x784880  	MOV.B	W0, [W1]
L_NMRAnetStateMachine_ProcessNode332:
;NMRAnetStateMachine.mpas,819 :: 		DatagramBuffer^.iByteCount := 8;
0x27CC	0x4400EA  	ADD	W8, #10, W1
0x27CE	0xB3C080  	MOV.B	#8, W0
0x27D0	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,820 :: 		end;
0x27D2	0x370024  	BRA	L_NMRAnetStateMachine_ProcessNode325
L_NMRAnetStateMachine_ProcessNode331:
;NMRAnetStateMachine.mpas,821 :: 		MCP_OP_LOCK               : begin
0x27D4	0xB3C880  	MOV.B	#136, W0
0x27D6	0x90794E  	MOV.B	[W14+60], W2
0x27D8	0xE11400  	CP.B	W2, W0
0x27DA	0x3A0004  	BRA NZ	L_NMRAnetStateMachine_ProcessNode339
L_NMRAnetStateMachine_ProcessNode708:
;NMRAnetStateMachine.mpas,822 :: 		DatagramBuffer^.Statemachine := STATE_MEM_CONFIG_WAITFOR_REPLY
0x27DC	0x4400E7  	ADD	W8, #7, W1
0x27DE	0xB3C060  	MOV.B	#6, W0
0x27E0	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,823 :: 		end;
0x27E2	0x37001C  	BRA	L_NMRAnetStateMachine_ProcessNode325
L_NMRAnetStateMachine_ProcessNode339:
;NMRAnetStateMachine.mpas,824 :: 		MCP_OP_GET_UNIQUEID       : begin
0x27E4	0xB3C8C0  	MOV.B	#140, W0
0x27E6	0xE11400  	CP.B	W2, W0
0x27E8	0x3A0004  	BRA NZ	L_NMRAnetStateMachine_ProcessNode342
L_NMRAnetStateMachine_ProcessNode709:
;NMRAnetStateMachine.mpas,825 :: 		DatagramBuffer^.Statemachine := STATE_MEM_CONFIG_WAITFOR_REPLY
0x27EA	0x4400E7  	ADD	W8, #7, W1
0x27EC	0xB3C060  	MOV.B	#6, W0
0x27EE	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,826 :: 		end;
0x27F0	0x370015  	BRA	L_NMRAnetStateMachine_ProcessNode325
L_NMRAnetStateMachine_ProcessNode342:
;NMRAnetStateMachine.mpas,827 :: 		MCP_OP_FREEZE             : begin
0x27F2	0xB3CA00  	MOV.B	#160, W0
0x27F4	0xE11400  	CP.B	W2, W0
0x27F6	0x3A0004  	BRA NZ	L_NMRAnetStateMachine_ProcessNode345
L_NMRAnetStateMachine_ProcessNode710:
;NMRAnetStateMachine.mpas,828 :: 		DatagramBuffer^.Statemachine := STATE_MEM_CONFIG_WAITFOR_REPLY
0x27F8	0x4400E7  	ADD	W8, #7, W1
0x27FA	0xB3C060  	MOV.B	#6, W0
0x27FC	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,829 :: 		end;
0x27FE	0x37000E  	BRA	L_NMRAnetStateMachine_ProcessNode325
L_NMRAnetStateMachine_ProcessNode345:
;NMRAnetStateMachine.mpas,830 :: 		MCP_OP_INDICATE           : begin
0x2800	0xB3CA40  	MOV.B	#164, W0
0x2802	0xE11400  	CP.B	W2, W0
0x2804	0x3A0004  	BRA NZ	L_NMRAnetStateMachine_ProcessNode348
L_NMRAnetStateMachine_ProcessNode711:
;NMRAnetStateMachine.mpas,831 :: 		DatagramBuffer^.Statemachine := STATE_MEM_CONFIG_WAITFOR_REPLY
0x2806	0x4400E7  	ADD	W8, #7, W1
0x2808	0xB3C060  	MOV.B	#6, W0
0x280A	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,832 :: 		end;
0x280C	0x370007  	BRA	L_NMRAnetStateMachine_ProcessNode325
L_NMRAnetStateMachine_ProcessNode348:
;NMRAnetStateMachine.mpas,833 :: 		MCP_OP_RESETS             : begin
0x280E	0xB3CA80  	MOV.B	#168, W0
0x2810	0xE11400  	CP.B	W2, W0
0x2812	0x3A0004  	BRA NZ	L_NMRAnetStateMachine_ProcessNode351
L_NMRAnetStateMachine_ProcessNode712:
;NMRAnetStateMachine.mpas,834 :: 		DatagramBuffer^.Statemachine := STATE_MEM_CONFIG_WAITFOR_REPLY
0x2814	0x4400E7  	ADD	W8, #7, W1
0x2816	0xB3C060  	MOV.B	#6, W0
0x2818	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,835 :: 		end;
0x281A	0x370000  	BRA	L_NMRAnetStateMachine_ProcessNode325
L_NMRAnetStateMachine_ProcessNode351:
L_NMRAnetStateMachine_ProcessNode325:
;NMRAnetStateMachine.mpas,837 :: 		DatagramBuffer^.Statemachine := STATE_MEM_CONFIG_SEND_RESUSED_DATAGRAM
0x281C	0x4400E7  	ADD	W8, #7, W1
; DatagramBuffer end address is: 16 (W8)
0x281E	0xB3C050  	MOV.B	#5, W0
0x2820	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,838 :: 		end;
0x2822	0x370256  	BRA	L_NMRAnetStateMachine_ProcessNode303
L_NMRAnetStateMachine_ProcessNode324:
;NMRAnetStateMachine.mpas,839 :: 		STATE_MEM_CONFIG_READ_DATAGRAM         : begin {$IFDEF TRACE_MEM_CONFIG_STATEMACHINE} UART1_Write_Text('STATE_MEM_CONFIG_READ_DATAGRAM'+LF);    {$ENDIF}
; DatagramBuffer start address is: 16 (W8)
0x2824	0x90C00E  	MOV.B	[W14+64], W0
0x2826	0xE10462  	CP.B	W0, #2
0x2828	0x3A015F  	BRA NZ	L_NMRAnetStateMachine_ProcessNode354
L_NMRAnetStateMachine_ProcessNode713:
;NMRAnetStateMachine.mpas,840 :: 		MemorySpace := 0;
0x282A	0xEF2000  	CLR	W0
0x282C	0x984F40  	MOV.B	W0, [W14+12]
;NMRAnetStateMachine.mpas,841 :: 		MemorySpaceAddress := 0;
0x282E	0xEF2000  	CLR	W0
0x2830	0xEF2002  	CLR	W1
0x2832	0x980F00  	MOV	W0, [W14+16]
0x2834	0x980F11  	MOV	W1, [W14+18]
;NMRAnetStateMachine.mpas,842 :: 		MemorySpaceCount := 0;
0x2836	0xEF2000  	CLR	W0
0x2838	0x984F50  	MOV.B	W0, [W14+13]
;NMRAnetStateMachine.mpas,843 :: 		DecodeMemoryConfigurationReadWrite(Node, @DatagramBuffer^.DataBytes, MemorySpace, MemorySpaceAddress, MemorySpaceCount);
0x283A	0x4401EB  	ADD	W8, #11, W3
0x283C	0x47016D  	ADD	W14, #13, W2
0x283E	0x4700F0  	ADD	W14, #16, W1
0x2840	0x47006C  	ADD	W14, #12, W0
0x2842	0x781F88  	PUSH	W8
0x2844	0xBE9F8A  	PUSH.D	W10
0x2846	0x780681  	MOV	W1, W13
0x2848	0x780600  	MOV	W0, W12
0x284A	0x780583  	MOV	W3, W11
0x284C	0x781F82  	PUSH	W2
0x284E	0x07F80A  	RCALL	NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite
0x2850	0xB1002F  	SUB	#2, W15
0x2852	0xBE054F  	POP.D	W10
0x2854	0x78044F  	POP	W8
;NMRAnetStateMachine.mpas,846 :: 		DatagramBuffer^.DataBytes[1] := MCP_READ_DATAGRAM_REPLY or DatagramBuffer^.DataBytes[1];
0x2856	0x44006B  	ADD	W8, #11, W0
0x2858	0x400161  	ADD	W0, #1, W2
0x285A	0x200501  	MOV	#80, W1
0x285C	0xFB8012  	ZE	[W2], W0
0x285E	0x708000  	IOR	W1, W0, W0
0x2860	0x784900  	MOV.B	W0, [W2]
;NMRAnetStateMachine.mpas,849 :: 		if DatagramBuffer^.DataBytes[1] and $03 = 0 then
0x2862	0x44006B  	ADD	W8, #11, W0
0x2864	0xEC2000  	INC	W0
0x2866	0xFB8010  	ZE	[W0], W0
0x2868	0x600063  	AND	W0, #3, W0
0x286A	0xE10060  	CP	W0, #0
0x286C	0x3A0002  	BRA NZ	L_NMRAnetStateMachine_ProcessNode356
L_NMRAnetStateMachine_ProcessNode714:
;NMRAnetStateMachine.mpas,850 :: 		DatagramAddress := 7
; DatagramAddress start address is: 6 (W3)
0x286E	0xB3C073  	MOV.B	#7, W3
; DatagramAddress end address is: 6 (W3)
0x2870	0x370001  	BRA	L_NMRAnetStateMachine_ProcessNode357
;NMRAnetStateMachine.mpas,851 :: 		else
L_NMRAnetStateMachine_ProcessNode356:
;NMRAnetStateMachine.mpas,852 :: 		DatagramAddress := 6;
; DatagramAddress start address is: 6 (W3)
0x2872	0xB3C063  	MOV.B	#6, W3
; DatagramAddress end address is: 6 (W3)
L_NMRAnetStateMachine_ProcessNode357:
;NMRAnetStateMachine.mpas,853 :: 		DatagramBuffer^.iByteCount := DatagramAddress;  // Start out with the 6 or 7 bytes for the header
; DatagramAddress start address is: 6 (W3)
0x2874	0x44006A  	ADD	W8, #10, W0
0x2876	0x784803  	MOV.B	W3, [W0]
;NMRAnetStateMachine.mpas,856 :: 		MSI_CDI       : begin {$IFDEF SUPPORT_VIRTUAL_NODES}
0x2878	0x9048CE  	MOV.B	[W14+12], W1
0x287A	0xB3CFF0  	MOV.B	#255, W0
0x287C	0xE10C00  	CP.B	W1, W0
0x287E	0x3A004A  	BRA NZ	L_NMRAnetStateMachine_ProcessNode361
L_NMRAnetStateMachine_ProcessNode715:
;NMRAnetStateMachine.mpas,857 :: 		if Node^.State and NS_VIRTUAL <> 0 then
0x2880	0x78401A  	MOV.B	[W10], W0
0x2882	0xFB8000  	ZE	W0, W0
0x2884	0x600068  	AND	W0, #8, W0
0x2886	0xE10060  	CP	W0, #0
0x2888	0x32001F  	BRA Z	L_NMRAnetStateMachine_ProcessNode363
L_NMRAnetStateMachine_ProcessNode716:
;NMRAnetStateMachine.mpas,859 :: 		for i := 0 to MemorySpaceCount - 1 do
0x288A	0xEF2000  	CLR	W0
0x288C	0x980740  	MOV	W0, [W14+8]
; DatagramAddress end address is: 6 (W3)
; DatagramBuffer end address is: 16 (W8)
0x288E	0x780288  	MOV	W8, W5
0x2890	0x784203  	MOV.B	W3, W4
L_NMRAnetStateMachine_ProcessNode365:
; DatagramAddress start address is: 8 (W4)
; DatagramAddress start address is: 8 (W4)
; DatagramAddress end address is: 8 (W4)
; DatagramBuffer start address is: 10 (W5)
0x2892	0x47006D  	ADD	W14, #13, W0
0x2894	0xFB0010  	SE	[W0], W0
0x2896	0x5001E1  	SUB	W0, #1, W3
0x2898	0x470068  	ADD	W14, #8, W0
0x289A	0xE11810  	CP	W3, [W0]
0x289C	0x350013  	BRA LT	L_NMRAnetStateMachine_ProcessNode369
L_NMRAnetStateMachine_ProcessNode717:
; DatagramAddress end address is: 8 (W4)
;NMRAnetStateMachine.mpas,860 :: 		DatagramBuffer^.DataBytes[i+DatagramAddress] := CDI_ARRAY_VNODE[i+MemorySpaceAddress]
; DatagramAddress start address is: 8 (W4)
0x289E	0x42816B  	ADD	W5, #11, W2
0x28A0	0xFB8084  	ZE	W4, W1
0x28A2	0x470068  	ADD	W14, #8, W0
0x28A4	0x408010  	ADD	W1, [W0], W0
0x28A6	0x410100  	ADD	W2, W0, W2
0x28A8	0x9000CE  	MOV	[W14+8], W1
0x28AA	0x470070  	ADD	W14, #16, W0
0x28AC	0x408090  	ADD	W1, [W0], W1
0x28AE	0x2866B0  	MOV	#lo_addr(_CDI_ARRAY_VNODE), W0
0x28B0	0x400081  	ADD	W0, W1, W1
0x28B2	0x784011  	MOV.B	[W1], W0
0x28B4	0x784900  	MOV.B	W0, [W2]
0x28B6	0x470068  	ADD	W14, #8, W0
0x28B8	0xE11810  	CP	W3, [W0]
0x28BA	0x320004  	BRA Z	L_NMRAnetStateMachine_ProcessNode369
L_NMRAnetStateMachine_ProcessNode718:
0x28BC	0x9000CE  	MOV	[W14+8], W1
0x28BE	0x470068  	ADD	W14, #8, W0
0x28C0	0x408861  	ADD	W1, #1, [W0]
; DatagramAddress end address is: 8 (W4)
0x28C2	0x37FFE7  	BRA	L_NMRAnetStateMachine_ProcessNode365
L_NMRAnetStateMachine_ProcessNode369:
;NMRAnetStateMachine.mpas,861 :: 		end else {$ENDIF}
0x28C4	0x780185  	MOV	W5, W3
; DatagramBuffer end address is: 10 (W5)
0x28C6	0x37001E  	BRA	L_NMRAnetStateMachine_ProcessNode364
L_NMRAnetStateMachine_ProcessNode363:
;NMRAnetStateMachine.mpas,863 :: 		for i := 0 to MemorySpaceCount - 1 do
; DatagramBuffer start address is: 16 (W8)
; DatagramAddress start address is: 6 (W3)
0x28C8	0xEF2000  	CLR	W0
0x28CA	0x980740  	MOV	W0, [W14+8]
; DatagramAddress end address is: 6 (W3)
; DatagramBuffer end address is: 16 (W8)
0x28CC	0x780288  	MOV	W8, W5
0x28CE	0x784203  	MOV.B	W3, W4
L_NMRAnetStateMachine_ProcessNode370:
; DatagramAddress start address is: 8 (W4)
; DatagramAddress start address is: 8 (W4)
; DatagramAddress end address is: 8 (W4)
; DatagramBuffer start address is: 10 (W5)
0x28D0	0x47006D  	ADD	W14, #13, W0
0x28D2	0xFB0010  	SE	[W0], W0
0x28D4	0x5001E1  	SUB	W0, #1, W3
0x28D6	0x470068  	ADD	W14, #8, W0
0x28D8	0xE11810  	CP	W3, [W0]
0x28DA	0x350013  	BRA LT	L_NMRAnetStateMachine_ProcessNode374
L_NMRAnetStateMachine_ProcessNode719:
; DatagramAddress end address is: 8 (W4)
;NMRAnetStateMachine.mpas,864 :: 		DatagramBuffer^.DataBytes[i+DatagramAddress] := CDI_ARRAY[i+MemorySpaceAddress]
; DatagramAddress start address is: 8 (W4)
0x28DC	0x42816B  	ADD	W5, #11, W2
0x28DE	0xFB8084  	ZE	W4, W1
0x28E0	0x470068  	ADD	W14, #8, W0
0x28E2	0x408010  	ADD	W1, [W0], W0
0x28E4	0x410100  	ADD	W2, W0, W2
0x28E6	0x9000CE  	MOV	[W14+8], W1
0x28E8	0x470070  	ADD	W14, #16, W0
0x28EA	0x408090  	ADD	W1, [W0], W1
0x28EC	0x280000  	MOV	#lo_addr(_CDI_ARRAY), W0
0x28EE	0x400081  	ADD	W0, W1, W1
0x28F0	0x784011  	MOV.B	[W1], W0
0x28F2	0x784900  	MOV.B	W0, [W2]
0x28F4	0x470068  	ADD	W14, #8, W0
0x28F6	0xE11810  	CP	W3, [W0]
0x28F8	0x320004  	BRA Z	L_NMRAnetStateMachine_ProcessNode374
L_NMRAnetStateMachine_ProcessNode720:
0x28FA	0x9000CE  	MOV	[W14+8], W1
0x28FC	0x470068  	ADD	W14, #8, W0
0x28FE	0x408861  	ADD	W1, #1, [W0]
; DatagramAddress end address is: 8 (W4)
0x2900	0x37FFE7  	BRA	L_NMRAnetStateMachine_ProcessNode370
L_NMRAnetStateMachine_ProcessNode374:
;NMRAnetStateMachine.mpas,865 :: 		end;
0x2902	0x780185  	MOV	W5, W3
L_NMRAnetStateMachine_ProcessNode364:
; DatagramBuffer end address is: 10 (W5)
;NMRAnetStateMachine.mpas,866 :: 		DatagramBuffer^.iByteCount := DatagramBuffer^.iByteCount + MemorySpaceCount;
; DatagramBuffer start address is: 6 (W3)
0x2904	0x41816A  	ADD	W3, #10, W2
0x2906	0xFB8092  	ZE	[W2], W1
0x2908	0x47006D  	ADD	W14, #13, W0
0x290A	0xFB0010  	SE	[W0], W0
0x290C	0x408000  	ADD	W1, W0, W0
0x290E	0x784900  	MOV.B	W0, [W2]
;NMRAnetStateMachine.mpas,867 :: 		end;
0x2910	0x780003  	MOV	W3, W0
; DatagramBuffer end address is: 6 (W3)
0x2912	0x3700E6  	BRA	L_NMRAnetStateMachine_ProcessNode358
L_NMRAnetStateMachine_ProcessNode361:
;NMRAnetStateMachine.mpas,868 :: 		MSI_ALL       : begin
; DatagramBuffer start address is: 16 (W8)
; DatagramAddress start address is: 6 (W3)
0x2914	0x9048CE  	MOV.B	[W14+12], W1
0x2916	0xB3CFE0  	MOV.B	#254, W0
0x2918	0xE10C00  	CP.B	W1, W0
0x291A	0x3A0024  	BRA NZ	L_NMRAnetStateMachine_ProcessNode377
L_NMRAnetStateMachine_ProcessNode721:
;NMRAnetStateMachine.mpas,869 :: 		ByteArray := PByteArray( ALL_MAP.LowMem);
; ByteArray start address is: 12 (W6)
0x291C	0x200006  	MOV	#0, W6
;NMRAnetStateMachine.mpas,870 :: 		for i := 0 to MemorySpaceCount - 1 do
0x291E	0xEF2000  	CLR	W0
0x2920	0x980740  	MOV	W0, [W14+8]
; DatagramAddress end address is: 6 (W3)
; DatagramBuffer end address is: 16 (W8)
0x2922	0x784383  	MOV.B	W3, W7
L_NMRAnetStateMachine_ProcessNode378:
; DatagramAddress start address is: 14 (W7)
; ByteArray start address is: 12 (W6)
; ByteArray end address is: 12 (W6)
; DatagramAddress start address is: 14 (W7)
; DatagramAddress end address is: 14 (W7)
; DatagramBuffer start address is: 16 (W8)
0x2924	0x47006D  	ADD	W14, #13, W0
0x2926	0xFB0010  	SE	[W0], W0
0x2928	0x5002E1  	SUB	W0, #1, W5
0x292A	0x470068  	ADD	W14, #8, W0
0x292C	0xE12810  	CP	W5, [W0]
0x292E	0x350012  	BRA LT	L_NMRAnetStateMachine_ProcessNode382
L_NMRAnetStateMachine_ProcessNode722:
; ByteArray end address is: 12 (W6)
; DatagramAddress end address is: 14 (W7)
;NMRAnetStateMachine.mpas,871 :: 		DatagramBuffer^.DataBytes[i+DatagramAddress] := ByteArray^[i+MemorySpaceAddress];
; DatagramAddress start address is: 14 (W7)
; ByteArray start address is: 12 (W6)
0x2930	0x44016B  	ADD	W8, #11, W2
0x2932	0xFB8087  	ZE	W7, W1
0x2934	0x470068  	ADD	W14, #8, W0
0x2936	0x408010  	ADD	W1, [W0], W0
0x2938	0x410200  	ADD	W2, W0, W4
0x293A	0x90014E  	MOV	[W14+8], W2
0x293C	0xDE91CF  	ASR	W2, #15, W3
0x293E	0x470070  	ADD	W14, #16, W0
0x2940	0x410010  	ADD	W2, [W0], W0
0x2942	0x430000  	ADD	W6, W0, W0
0x2944	0x784A10  	MOV.B	[W0], [W4]
0x2946	0x470068  	ADD	W14, #8, W0
0x2948	0xE12810  	CP	W5, [W0]
0x294A	0x320004  	BRA Z	L_NMRAnetStateMachine_ProcessNode382
L_NMRAnetStateMachine_ProcessNode723:
0x294C	0x9000CE  	MOV	[W14+8], W1
0x294E	0x470068  	ADD	W14, #8, W0
0x2950	0x408861  	ADD	W1, #1, [W0]
; ByteArray end address is: 12 (W6)
; DatagramAddress end address is: 14 (W7)
0x2952	0x37FFE8  	BRA	L_NMRAnetStateMachine_ProcessNode378
L_NMRAnetStateMachine_ProcessNode382:
;NMRAnetStateMachine.mpas,872 :: 		DatagramBuffer^.iByteCount := DatagramBuffer^.iByteCount + MemorySpaceCount;
0x2954	0x44016A  	ADD	W8, #10, W2
0x2956	0xFB8092  	ZE	[W2], W1
0x2958	0x47006D  	ADD	W14, #13, W0
0x295A	0xFB0010  	SE	[W0], W0
0x295C	0x408000  	ADD	W1, W0, W0
0x295E	0x784900  	MOV.B	W0, [W2]
;NMRAnetStateMachine.mpas,873 :: 		end;
0x2960	0x780008  	MOV	W8, W0
0x2962	0x3700BE  	BRA	L_NMRAnetStateMachine_ProcessNode358
L_NMRAnetStateMachine_ProcessNode377:
;NMRAnetStateMachine.mpas,874 :: 		MSI_CONFIG    : begin
; DatagramAddress start address is: 6 (W3)
0x2964	0x9048CE  	MOV.B	[W14+12], W1
0x2966	0xB3CFD0  	MOV.B	#253, W0
0x2968	0xE10C00  	CP.B	W1, W0
0x296A	0x3A001A  	BRA NZ	L_NMRAnetStateMachine_ProcessNode385
L_NMRAnetStateMachine_ProcessNode724:
;NMRAnetStateMachine.mpas,875 :: 		DatagramBuffer^.iByteCount := DatagramBuffer^.iByteCount + AppCallback_ConfigurationRead(Node, @DatagramBuffer^.DataBytes[DatagramAddress], MemorySpaceAddress, MemorySpaceCount);
0x296C	0x44006A  	ADD	W8, #10, W0
0x296E	0x981F70  	MOV	W0, [W14+62]
0x2970	0x981F60  	MOV	W0, [W14+60]
0x2972	0x4400EB  	ADD	W8, #11, W1
0x2974	0xFB8003  	ZE	W3, W0
; DatagramAddress end address is: 6 (W3)
0x2976	0x408000  	ADD	W1, W0, W0
0x2978	0x781F88  	PUSH	W8
0x297A	0xBE9F8A  	PUSH.D	W10
0x297C	0x900E0E  	MOV	[W14+16], W12
0x297E	0x900E9E  	MOV	[W14+18], W13
0x2980	0x780580  	MOV	W0, W11
0x2982	0x47006D  	ADD	W14, #13, W0
0x2984	0xFB0010  	SE	[W0], W0
0x2986	0x781F80  	PUSH	W0
0x2988	0x07F02C  	RCALL	_AppCallback_ConfigurationRead
0x298A	0xB1002F  	SUB	#2, W15
0x298C	0xBE054F  	POP.D	W10
0x298E	0x78044F  	POP	W8
0x2990	0x9018EE  	MOV	[W14+60], W1
0x2992	0xFB8091  	ZE	[W1], W1
0x2994	0xFB8000  	ZE	W0, W0
0x2996	0x408080  	ADD	W1, W0, W1
0x2998	0x90187E  	MOV	[W14+62], W0
0x299A	0x784801  	MOV.B	W1, [W0]
;NMRAnetStateMachine.mpas,876 :: 		end;
0x299C	0x780008  	MOV	W8, W0
0x299E	0x3700A0  	BRA	L_NMRAnetStateMachine_ProcessNode358
L_NMRAnetStateMachine_ProcessNode385:
;NMRAnetStateMachine.mpas,877 :: 		MSI_ACDI_MFG  : begin
; DatagramAddress start address is: 6 (W3)
0x29A0	0x9048CE  	MOV.B	[W14+12], W1
0x29A2	0xB3CFC0  	MOV.B	#252, W0
0x29A4	0xE10C00  	CP.B	W1, W0
0x29A6	0x3A0064  	BRA NZ	L_NMRAnetStateMachine_ProcessNode388
L_NMRAnetStateMachine_ProcessNode725:
;NMRAnetStateMachine.mpas,878 :: 		if MemorySpaceAddress = 0 then
0x29A8	0x90080E  	MOV	[W14+16], W0
0x29AA	0x90089E  	MOV	[W14+18], W1
0x29AC	0xE10060  	CP	W0, #0
0x29AE	0xE18860  	CPB	W1, #0
0x29B0	0x3A000F  	BRA NZ	L_NMRAnetStateMachine_ProcessNode390
L_NMRAnetStateMachine_ProcessNode726:
;NMRAnetStateMachine.mpas,880 :: 		DatagramBuffer^.DataBytes[DatagramAddress] := ACDI_MFG_VERSION;
0x29B2	0x4400EB  	ADD	W8, #11, W1
0x29B4	0xFB8003  	ZE	W3, W0
0x29B6	0x408080  	ADD	W1, W0, W1
0x29B8	0xB3C010  	MOV.B	#1, W0
0x29BA	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,881 :: 		Inc(DatagramAddress);
; DatagramAddress start address is: 4 (W2)
0x29BC	0x41C161  	ADD.B	W3, #1, W2
; DatagramAddress end address is: 6 (W3)
;NMRAnetStateMachine.mpas,882 :: 		Dec(MemorySpaceCount);
0x29BE	0xB3C011  	MOV.B	#1, W1
0x29C0	0x47006D  	ADD	W14, #13, W0
0x29C2	0x10C810  	SUBR.B	W1, [W0], [W0]
;NMRAnetStateMachine.mpas,883 :: 		Inc(DatagramBuffer^.iByteCount);
0x29C4	0x4400EA  	ADD	W8, #10, W1
0x29C6	0xFB8011  	ZE	[W1], W0
0x29C8	0xEC2000  	INC	W0
0x29CA	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,884 :: 		end else
0x29CC	0x784282  	MOV.B	W2, W5
; DatagramAddress end address is: 4 (W2)
0x29CE	0x370006  	BRA	L_NMRAnetStateMachine_ProcessNode391
L_NMRAnetStateMachine_ProcessNode390:
;NMRAnetStateMachine.mpas,885 :: 		Dec(MemorySpaceAddress);        // Need to adjust the Address Pointer in subsequent calls to account for the virtual Version Byte
; DatagramAddress start address is: 6 (W3)
0x29D0	0x200011  	MOV	#1, W1
0x29D2	0x200002  	MOV	#0, W2
0x29D4	0x470070  	ADD	W14, #16, W0
0x29D6	0x109810  	SUBR	W1, [W0], [W0++]
0x29D8	0x191010  	SUBBR	W2, [W0], [W0--]
0x29DA	0x784283  	MOV.B	W3, W5
; DatagramAddress end address is: 6 (W3)
L_NMRAnetStateMachine_ProcessNode391:
;NMRAnetStateMachine.mpas,888 :: 		if Node^.State and NS_VIRTUAL <> 0 then
; DatagramAddress start address is: 10 (W5)
0x29DC	0x78401A  	MOV.B	[W10], W0
0x29DE	0xFB8000  	ZE	W0, W0
0x29E0	0x600068  	AND	W0, #8, W0
0x29E2	0xE10060  	CP	W0, #0
0x29E4	0x32001F  	BRA Z	L_NMRAnetStateMachine_ProcessNode393
L_NMRAnetStateMachine_ProcessNode727:
;NMRAnetStateMachine.mpas,890 :: 		for i := 0 to MemorySpaceCount - 1 do
0x29E6	0xEF2000  	CLR	W0
0x29E8	0x980740  	MOV	W0, [W14+8]
; DatagramBuffer end address is: 16 (W8)
0x29EA	0x780308  	MOV	W8, W6
L_NMRAnetStateMachine_ProcessNode395:
; DatagramAddress start address is: 10 (W5)
; DatagramAddress end address is: 10 (W5)
; DatagramBuffer start address is: 12 (W6)
0x29EC	0x47006D  	ADD	W14, #13, W0
0x29EE	0xFB0010  	SE	[W0], W0
0x29F0	0x500261  	SUB	W0, #1, W4
0x29F2	0x470068  	ADD	W14, #8, W0
0x29F4	0xE12010  	CP	W4, [W0]
0x29F6	0x350014  	BRA LT	L_NMRAnetStateMachine_ProcessNode399
L_NMRAnetStateMachine_ProcessNode728:
; DatagramAddress end address is: 10 (W5)
;NMRAnetStateMachine.mpas,891 :: 		DatagramBuffer^.DataBytes[i+DatagramAddress] := ACDI_MFG_STRINGS_VNODE[i+MemorySpaceAddress]
; DatagramAddress start address is: 10 (W5)
0x29F8	0x43016B  	ADD	W6, #11, W2
0x29FA	0xFB8085  	ZE	W5, W1
0x29FC	0x470068  	ADD	W14, #8, W0
0x29FE	0x408010  	ADD	W1, [W0], W0
0x2A00	0x410180  	ADD	W2, W0, W3
0x2A02	0x9000CE  	MOV	[W14+8], W1
0x2A04	0xDE894F  	ASR	W1, #15, W2
0x2A06	0x470070  	ADD	W14, #16, W0
0x2A08	0x408090  	ADD	W1, [W0], W1
0x2A0A	0x28D530  	MOV	#lo_addr(_ACDI_MFG_STRINGS_VNODE), W0
0x2A0C	0x400081  	ADD	W0, W1, W1
0x2A0E	0x784011  	MOV.B	[W1], W0
0x2A10	0x784980  	MOV.B	W0, [W3]
0x2A12	0x470068  	ADD	W14, #8, W0
0x2A14	0xE12010  	CP	W4, [W0]
0x2A16	0x320004  	BRA Z	L_NMRAnetStateMachine_ProcessNode399
L_NMRAnetStateMachine_ProcessNode729:
0x2A18	0x9000CE  	MOV	[W14+8], W1
0x2A1A	0x470068  	ADD	W14, #8, W0
0x2A1C	0x408861  	ADD	W1, #1, [W0]
; DatagramAddress end address is: 10 (W5)
0x2A1E	0x37FFE6  	BRA	L_NMRAnetStateMachine_ProcessNode395
L_NMRAnetStateMachine_ProcessNode399:
;NMRAnetStateMachine.mpas,892 :: 		end else {$ENDIF}
0x2A20	0x780186  	MOV	W6, W3
; DatagramBuffer end address is: 12 (W6)
0x2A22	0x37001E  	BRA	L_NMRAnetStateMachine_ProcessNode394
L_NMRAnetStateMachine_ProcessNode393:
;NMRAnetStateMachine.mpas,894 :: 		for i := 0 to MemorySpaceCount - 1 do
; DatagramAddress start address is: 10 (W5)
; DatagramBuffer start address is: 16 (W8)
0x2A24	0xEF2000  	CLR	W0
0x2A26	0x980740  	MOV	W0, [W14+8]
; DatagramBuffer end address is: 16 (W8)
0x2A28	0x780308  	MOV	W8, W6
L_NMRAnetStateMachine_ProcessNode400:
; DatagramAddress start address is: 10 (W5)
; DatagramAddress end address is: 10 (W5)
; DatagramBuffer start address is: 12 (W6)
0x2A2A	0x47006D  	ADD	W14, #13, W0
0x2A2C	0xFB0010  	SE	[W0], W0
0x2A2E	0x500261  	SUB	W0, #1, W4
0x2A30	0x470068  	ADD	W14, #8, W0
0x2A32	0xE12010  	CP	W4, [W0]
0x2A34	0x350014  	BRA LT	L_NMRAnetStateMachine_ProcessNode404
L_NMRAnetStateMachine_ProcessNode730:
; DatagramAddress end address is: 10 (W5)
;NMRAnetStateMachine.mpas,895 :: 		DatagramBuffer^.DataBytes[i+DatagramAddress] := ACDI_MFG_STRINGS[i+MemorySpaceAddress]
; DatagramAddress start address is: 10 (W5)
0x2A36	0x43016B  	ADD	W6, #11, W2
0x2A38	0xFB8085  	ZE	W5, W1
0x2A3A	0x470068  	ADD	W14, #8, W0
0x2A3C	0x408010  	ADD	W1, [W0], W0
0x2A3E	0x410180  	ADD	W2, W0, W3
0x2A40	0x9000CE  	MOV	[W14+8], W1
0x2A42	0xDE894F  	ASR	W1, #15, W2
0x2A44	0x470070  	ADD	W14, #16, W0
0x2A46	0x408090  	ADD	W1, [W0], W1
0x2A48	0x28D390  	MOV	#lo_addr(_ACDI_MFG_STRINGS), W0
0x2A4A	0x400081  	ADD	W0, W1, W1
0x2A4C	0x784011  	MOV.B	[W1], W0
0x2A4E	0x784980  	MOV.B	W0, [W3]
0x2A50	0x470068  	ADD	W14, #8, W0
0x2A52	0xE12010  	CP	W4, [W0]
0x2A54	0x320004  	BRA Z	L_NMRAnetStateMachine_ProcessNode404
L_NMRAnetStateMachine_ProcessNode731:
0x2A56	0x9000CE  	MOV	[W14+8], W1
0x2A58	0x470068  	ADD	W14, #8, W0
0x2A5A	0x408861  	ADD	W1, #1, [W0]
; DatagramAddress end address is: 10 (W5)
0x2A5C	0x37FFE6  	BRA	L_NMRAnetStateMachine_ProcessNode400
L_NMRAnetStateMachine_ProcessNode404:
;NMRAnetStateMachine.mpas,896 :: 		end;
0x2A5E	0x780186  	MOV	W6, W3
L_NMRAnetStateMachine_ProcessNode394:
; DatagramBuffer end address is: 12 (W6)
;NMRAnetStateMachine.mpas,897 :: 		DatagramBuffer^.iByteCount := DatagramBuffer^.iByteCount + MemorySpaceCount;
; DatagramBuffer start address is: 6 (W3)
0x2A60	0x41816A  	ADD	W3, #10, W2
0x2A62	0xFB8092  	ZE	[W2], W1
0x2A64	0x47006D  	ADD	W14, #13, W0
0x2A66	0xFB0010  	SE	[W0], W0
0x2A68	0x408000  	ADD	W1, W0, W0
0x2A6A	0x784900  	MOV.B	W0, [W2]
;NMRAnetStateMachine.mpas,898 :: 		end;
0x2A6C	0x780003  	MOV	W3, W0
; DatagramBuffer end address is: 6 (W3)
0x2A6E	0x370038  	BRA	L_NMRAnetStateMachine_ProcessNode358
L_NMRAnetStateMachine_ProcessNode388:
;NMRAnetStateMachine.mpas,899 :: 		MSI_ACDI_USER : begin
; DatagramBuffer start address is: 16 (W8)
; DatagramAddress start address is: 6 (W3)
0x2A70	0x9048CE  	MOV.B	[W14+12], W1
0x2A72	0xB3CFB0  	MOV.B	#251, W0
0x2A74	0xE10C00  	CP.B	W1, W0
0x2A76	0x3A0033  	BRA NZ	L_NMRAnetStateMachine_ProcessNode407
L_NMRAnetStateMachine_ProcessNode732:
;NMRAnetStateMachine.mpas,900 :: 		if MemorySpaceAddress = 0 then
0x2A78	0x90080E  	MOV	[W14+16], W0
0x2A7A	0x90089E  	MOV	[W14+18], W1
0x2A7C	0xE10060  	CP	W0, #0
0x2A7E	0xE18860  	CPB	W1, #0
0x2A80	0x3A000E  	BRA NZ	L_NMRAnetStateMachine_ProcessNode409
L_NMRAnetStateMachine_ProcessNode733:
;NMRAnetStateMachine.mpas,902 :: 		DatagramBuffer^.DataBytes[DatagramAddress] := ACDI_USER_VERSION;
0x2A82	0x4400EB  	ADD	W8, #11, W1
0x2A84	0xFB8003  	ZE	W3, W0
0x2A86	0x408080  	ADD	W1, W0, W1
0x2A88	0xB3C010  	MOV.B	#1, W0
0x2A8A	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,903 :: 		Inc(DatagramAddress);
; DatagramAddress start address is: 4 (W2)
0x2A8C	0x41C161  	ADD.B	W3, #1, W2
; DatagramAddress end address is: 6 (W3)
;NMRAnetStateMachine.mpas,904 :: 		Dec(MemorySpaceCount);
0x2A8E	0xB3C011  	MOV.B	#1, W1
0x2A90	0x47006D  	ADD	W14, #13, W0
0x2A92	0x10C810  	SUBR.B	W1, [W0], [W0]
;NMRAnetStateMachine.mpas,905 :: 		Inc(DatagramBuffer^.iByteCount);
0x2A94	0x4400EA  	ADD	W8, #10, W1
0x2A96	0xFB8011  	ZE	[W1], W0
0x2A98	0xEC2000  	INC	W0
0x2A9A	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,906 :: 		end else
; DatagramAddress end address is: 4 (W2)
0x2A9C	0x370006  	BRA	L_NMRAnetStateMachine_ProcessNode410
L_NMRAnetStateMachine_ProcessNode409:
;NMRAnetStateMachine.mpas,907 :: 		Dec(MemorySpaceAddress);        // Need to adjust the Address Pointer in subsequent calls to account for the virtual Version Byte
; DatagramAddress start address is: 6 (W3)
0x2A9E	0x200011  	MOV	#1, W1
0x2AA0	0x200002  	MOV	#0, W2
0x2AA2	0x470070  	ADD	W14, #16, W0
0x2AA4	0x109810  	SUBR	W1, [W0], [W0++]
0x2AA6	0x191010  	SUBBR	W2, [W0], [W0--]
0x2AA8	0x784103  	MOV.B	W3, W2
; DatagramAddress end address is: 6 (W3)
L_NMRAnetStateMachine_ProcessNode410:
;NMRAnetStateMachine.mpas,909 :: 		DatagramBuffer^.iByteCount := DatagramBuffer^.iByteCount + AppCallback_ConfigurationRead(Node, @DatagramBuffer^.DataBytes[DatagramAddress], MemorySpaceAddress, MemorySpaceCount);
; DatagramAddress start address is: 4 (W2)
0x2AAA	0x44006A  	ADD	W8, #10, W0
0x2AAC	0x981F70  	MOV	W0, [W14+62]
0x2AAE	0x981F60  	MOV	W0, [W14+60]
0x2AB0	0x4400EB  	ADD	W8, #11, W1
0x2AB2	0xFB8002  	ZE	W2, W0
; DatagramAddress end address is: 4 (W2)
0x2AB4	0x408000  	ADD	W1, W0, W0
0x2AB6	0x781F88  	PUSH	W8
0x2AB8	0xBE9F8A  	PUSH.D	W10
0x2ABA	0x900E0E  	MOV	[W14+16], W12
0x2ABC	0x900E9E  	MOV	[W14+18], W13
0x2ABE	0x780580  	MOV	W0, W11
0x2AC0	0x47006D  	ADD	W14, #13, W0
0x2AC2	0xFB0010  	SE	[W0], W0
0x2AC4	0x781F80  	PUSH	W0
0x2AC6	0x07EF8D  	RCALL	_AppCallback_ConfigurationRead
0x2AC8	0xB1002F  	SUB	#2, W15
0x2ACA	0xBE054F  	POP.D	W10
0x2ACC	0x78044F  	POP	W8
0x2ACE	0x9018EE  	MOV	[W14+60], W1
0x2AD0	0xFB8091  	ZE	[W1], W1
0x2AD2	0xFB8000  	ZE	W0, W0
0x2AD4	0x408080  	ADD	W1, W0, W1
0x2AD6	0x90187E  	MOV	[W14+62], W0
0x2AD8	0x784801  	MOV.B	W1, [W0]
;NMRAnetStateMachine.mpas,910 :: 		end;
0x2ADA	0x780008  	MOV	W8, W0
0x2ADC	0x370001  	BRA	L_NMRAnetStateMachine_ProcessNode358
L_NMRAnetStateMachine_ProcessNode407:
0x2ADE	0x780008  	MOV	W8, W0
L_NMRAnetStateMachine_ProcessNode358:
; DatagramBuffer end address is: 16 (W8)
;NMRAnetStateMachine.mpas,912 :: 		DatagramBuffer^.Statemachine := STATE_MEM_CONFIG_SEND_RESUSED_DATAGRAM;
; DatagramBuffer start address is: 0 (W0)
0x2AE0	0x4000E7  	ADD	W0, #7, W1
; DatagramBuffer end address is: 0 (W0)
0x2AE2	0xB3C050  	MOV.B	#5, W0
0x2AE4	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,913 :: 		end;
0x2AE6	0x3700F4  	BRA	L_NMRAnetStateMachine_ProcessNode303
L_NMRAnetStateMachine_ProcessNode354:
;NMRAnetStateMachine.mpas,914 :: 		STATE_MEM_CONFIG_WRITE_DATAGRAM :        begin   {$IFDEF TRACE_MEM_CONFIG_STATEMACHINE} UART1_Write_Text('STATE_MEM_CONFIG_WRITE_DATAGRAM'+LF);    {$ENDIF}
; DatagramBuffer start address is: 16 (W8)
0x2AE8	0x90C00E  	MOV.B	[W14+64], W0
0x2AEA	0xE10463  	CP.B	W0, #3
0x2AEC	0x3A00B7  	BRA NZ	L_NMRAnetStateMachine_ProcessNode413
L_NMRAnetStateMachine_ProcessNode734:
;NMRAnetStateMachine.mpas,916 :: 		DatagramAddress := 6;
; DatagramAddress start address is: 18 (W9)
0x2AEE	0xB3C069  	MOV.B	#6, W9
;NMRAnetStateMachine.mpas,917 :: 		case DatagramBuffer^.DataBytes[1] and $03 of      // Strip off bottom two bits
0x2AF0	0x44006B  	ADD	W8, #11, W0
0x2AF2	0xEC2000  	INC	W0
0x2AF4	0xFB8010  	ZE	[W0], W0
0x2AF6	0x6000E3  	AND	W0, #3, W1
;NMRAnetStateMachine.mpas,918 :: 		MCP_CDI            : MemorySpace := MSI_CDI;
0x2AF8	0xE10863  	CP	W1, #3
0x2AFA	0x3A0003  	BRA NZ	L_NMRAnetStateMachine_ProcessNode417
L_NMRAnetStateMachine_ProcessNode735:
0x2AFC	0xB3CFF0  	MOV.B	#255, W0
0x2AFE	0x984F40  	MOV.B	W0, [W14+12]
0x2B00	0x370012  	BRA	L_NMRAnetStateMachine_ProcessNode414
L_NMRAnetStateMachine_ProcessNode417:
;NMRAnetStateMachine.mpas,919 :: 		MCP_ALL            : MemorySpace := MSI_ALL;
0x2B02	0xE10862  	CP	W1, #2
0x2B04	0x3A0003  	BRA NZ	L_NMRAnetStateMachine_ProcessNode420
L_NMRAnetStateMachine_ProcessNode736:
0x2B06	0xB3CFE0  	MOV.B	#254, W0
0x2B08	0x984F40  	MOV.B	W0, [W14+12]
0x2B0A	0x37000D  	BRA	L_NMRAnetStateMachine_ProcessNode414
L_NMRAnetStateMachine_ProcessNode420:
;NMRAnetStateMachine.mpas,920 :: 		MCP_CONFIGURATION  : MemorySpace := MSI_CONFIG;
0x2B0C	0xE10861  	CP	W1, #1
0x2B0E	0x3A0003  	BRA NZ	L_NMRAnetStateMachine_ProcessNode423
L_NMRAnetStateMachine_ProcessNode737:
0x2B10	0xB3CFD0  	MOV.B	#253, W0
0x2B12	0x984F40  	MOV.B	W0, [W14+12]
0x2B14	0x370008  	BRA	L_NMRAnetStateMachine_ProcessNode414
L_NMRAnetStateMachine_ProcessNode423:
;NMRAnetStateMachine.mpas,921 :: 		MCP_NONE           : begin
0x2B16	0xE10860  	CP	W1, #0
0x2B18	0x3A0006  	BRA NZ	L_NMRAnetStateMachine_ProcessNode426
L_NMRAnetStateMachine_ProcessNode738:
;NMRAnetStateMachine.mpas,922 :: 		DatagramAddress := 7;
0x2B1A	0xB3C079  	MOV.B	#7, W9
;NMRAnetStateMachine.mpas,923 :: 		MemorySpace := DatagramBuffer^.DataBytes[6];
0x2B1C	0x44006B  	ADD	W8, #11, W0
0x2B1E	0x400066  	ADD	W0, #6, W0
0x2B20	0x784010  	MOV.B	[W0], W0
0x2B22	0x984F40  	MOV.B	W0, [W14+12]
;NMRAnetStateMachine.mpas,924 :: 		end;
0x2B24	0x370000  	BRA	L_NMRAnetStateMachine_ProcessNode414
L_NMRAnetStateMachine_ProcessNode426:
L_NMRAnetStateMachine_ProcessNode414:
; DatagramAddress end address is: 18 (W9)
;NMRAnetStateMachine.mpas,926 :: 		MemorySpaceAddress := DWord( DatagramBuffer^.DataBytes[2] shl 24) or DWord( DatagramBuffer^.DataBytes[3] shl 16) or DWord( DatagramBuffer^.DataBytes[4] shl 8) or DWord( DatagramBuffer^.DataBytes[5]);
; DatagramAddress start address is: 18 (W9)
0x2B26	0x4403EB  	ADD	W8, #11, W7
0x2B28	0x438062  	ADD	W7, #2, W0
0x2B2A	0xFB8210  	ZE	[W0], W4
0x2B2C	0xEB0280  	CLR	W5
0x2B2E	0x200180  	MOV	#24, W0
0x2B30	0xBE0104  	MOV.D	W4, W2
L_NMRAnetStateMachine_ProcessNode739:
0x2B32	0xE90000  	DEC	W0, W0
0x2B34	0x350003  	BRA LT	L_NMRAnetStateMachine_ProcessNode740
0x2B36	0xD00102  	SL	W2, W2
0x2B38	0xD28183  	RLC	W3, W3
0x2B3A	0x37FFFB  	BRA	L_NMRAnetStateMachine_ProcessNode739
L_NMRAnetStateMachine_ProcessNode740:
0x2B3C	0x438063  	ADD	W7, #3, W0
0x2B3E	0xFB8010  	ZE	[W0], W0
0x2B40	0xEB0080  	CLR	W1
0x2B42	0x780080  	MOV	W0, W1
0x2B44	0xEB0000  	CLR	W0
0x2B46	0x710280  	IOR	W2, W0, W5
0x2B48	0x718301  	IOR	W3, W1, W6
0x2B4A	0x438064  	ADD	W7, #4, W0
0x2B4C	0xFB8190  	ZE	[W0], W3
0x2B4E	0xEB0200  	CLR	W4
0x2B50	0x200082  	MOV	#8, W2
0x2B52	0x780003  	MOV	W3, W0
0x2B54	0x780084  	MOV	W4, W1
L_NMRAnetStateMachine_ProcessNode741:
0x2B56	0xE90102  	DEC	W2, W2
0x2B58	0x350003  	BRA LT	L_NMRAnetStateMachine_ProcessNode742
0x2B5A	0xD00000  	SL	W0, W0
0x2B5C	0xD28081  	RLC	W1, W1
0x2B5E	0x37FFFB  	BRA	L_NMRAnetStateMachine_ProcessNode741
L_NMRAnetStateMachine_ProcessNode742:
0x2B60	0x728180  	IOR	W5, W0, W3
0x2B62	0x730201  	IOR	W6, W1, W4
0x2B64	0x438065  	ADD	W7, #5, W0
0x2B66	0xFB8090  	ZE	[W0], W1
0x2B68	0xEB0100  	CLR	W2
0x2B6A	0x470070  	ADD	W14, #16, W0
0x2B6C	0x719801  	IOR	W3, W1, [W0++]
0x2B6E	0x721002  	IOR	W4, W2, [W0--]
;NMRAnetStateMachine.mpas,927 :: 		MemorySpaceCount := DatagramBuffer^.iByteCount - DatagramAddress;
0x2B70	0x4400EA  	ADD	W8, #10, W1
0x2B72	0x47006D  	ADD	W14, #13, W0
0x2B74	0x14C811  	SUBR.B	W9, [W1], [W0]
;NMRAnetStateMachine.mpas,929 :: 		MSI_CONFIG    : begin
0x2B76	0x9048CE  	MOV.B	[W14+12], W1
0x2B78	0xB3CFD0  	MOV.B	#253, W0
0x2B7A	0xE10C00  	CP.B	W1, W0
0x2B7C	0x3A0010  	BRA NZ	L_NMRAnetStateMachine_ProcessNode430
L_NMRAnetStateMachine_ProcessNode743:
;NMRAnetStateMachine.mpas,930 :: 		AppCallback_ConfigurationWrite(Node, @DatagramBuffer^.DataBytes[DatagramAddress], MemorySpaceAddress, MemorySpaceCount);
0x2B7E	0x4400EB  	ADD	W8, #11, W1
0x2B80	0xFB8009  	ZE	W9, W0
; DatagramAddress end address is: 18 (W9)
0x2B82	0x408000  	ADD	W1, W0, W0
0x2B84	0x781F88  	PUSH	W8
0x2B86	0xBE9F8A  	PUSH.D	W10
0x2B88	0x900E0E  	MOV	[W14+16], W12
0x2B8A	0x900E9E  	MOV	[W14+18], W13
0x2B8C	0x780580  	MOV	W0, W11
0x2B8E	0x47006D  	ADD	W14, #13, W0
0x2B90	0xFB0010  	SE	[W0], W0
0x2B92	0x781F80  	PUSH	W0
0x2B94	0x07F6C9  	RCALL	_AppCallback_ConfigurationWrite
0x2B96	0xB1002F  	SUB	#2, W15
0x2B98	0xBE054F  	POP.D	W10
0x2B9A	0x78044F  	POP	W8
;NMRAnetStateMachine.mpas,931 :: 		end;
0x2B9C	0x37005B  	BRA	L_NMRAnetStateMachine_ProcessNode427
L_NMRAnetStateMachine_ProcessNode430:
;NMRAnetStateMachine.mpas,932 :: 		MSI_ACDI_USER : begin
0x2B9E	0x9048CE  	MOV.B	[W14+12], W1
0x2BA0	0xB3CFB0  	MOV.B	#251, W0
0x2BA2	0xE10C00  	CP.B	W1, W0
0x2BA4	0x3A0057  	BRA NZ	L_NMRAnetStateMachine_ProcessNode433
L_NMRAnetStateMachine_ProcessNode744:
;NMRAnetStateMachine.mpas,933 :: 		UART1_Write_Text('Unimplemented Configuration Mem write'+LF)
0x2BA6	0x4700F4  	ADD	W14, #20, W1
0x2BA8	0xB3C550  	MOV.B	#85, W0
0x2BAA	0x785880  	MOV.B	W0, [W1++]
0x2BAC	0xB3C6E0  	MOV.B	#110, W0
0x2BAE	0x785880  	MOV.B	W0, [W1++]
0x2BB0	0xB3C690  	MOV.B	#105, W0
0x2BB2	0x785880  	MOV.B	W0, [W1++]
0x2BB4	0xB3C6D0  	MOV.B	#109, W0
0x2BB6	0x785880  	MOV.B	W0, [W1++]
0x2BB8	0xB3C700  	MOV.B	#112, W0
0x2BBA	0x785880  	MOV.B	W0, [W1++]
0x2BBC	0xB3C6C0  	MOV.B	#108, W0
0x2BBE	0x785880  	MOV.B	W0, [W1++]
0x2BC0	0xB3C650  	MOV.B	#101, W0
0x2BC2	0x785880  	MOV.B	W0, [W1++]
0x2BC4	0xB3C6D0  	MOV.B	#109, W0
0x2BC6	0x785880  	MOV.B	W0, [W1++]
0x2BC8	0xB3C650  	MOV.B	#101, W0
0x2BCA	0x785880  	MOV.B	W0, [W1++]
0x2BCC	0xB3C6E0  	MOV.B	#110, W0
0x2BCE	0x785880  	MOV.B	W0, [W1++]
0x2BD0	0xB3C740  	MOV.B	#116, W0
0x2BD2	0x785880  	MOV.B	W0, [W1++]
0x2BD4	0xB3C650  	MOV.B	#101, W0
0x2BD6	0x785880  	MOV.B	W0, [W1++]
0x2BD8	0xB3C640  	MOV.B	#100, W0
0x2BDA	0x785880  	MOV.B	W0, [W1++]
0x2BDC	0xB3C200  	MOV.B	#32, W0
0x2BDE	0x785880  	MOV.B	W0, [W1++]
0x2BE0	0xB3C430  	MOV.B	#67, W0
0x2BE2	0x785880  	MOV.B	W0, [W1++]
0x2BE4	0xB3C6F0  	MOV.B	#111, W0
0x2BE6	0x785880  	MOV.B	W0, [W1++]
0x2BE8	0xB3C6E0  	MOV.B	#110, W0
0x2BEA	0x785880  	MOV.B	W0, [W1++]
0x2BEC	0xB3C660  	MOV.B	#102, W0
0x2BEE	0x785880  	MOV.B	W0, [W1++]
0x2BF0	0xB3C690  	MOV.B	#105, W0
0x2BF2	0x785880  	MOV.B	W0, [W1++]
0x2BF4	0xB3C670  	MOV.B	#103, W0
0x2BF6	0x785880  	MOV.B	W0, [W1++]
0x2BF8	0xB3C750  	MOV.B	#117, W0
0x2BFA	0x785880  	MOV.B	W0, [W1++]
0x2BFC	0xB3C720  	MOV.B	#114, W0
0x2BFE	0x785880  	MOV.B	W0, [W1++]
0x2C00	0xB3C610  	MOV.B	#97, W0
0x2C02	0x785880  	MOV.B	W0, [W1++]
0x2C04	0xB3C740  	MOV.B	#116, W0
0x2C06	0x785880  	MOV.B	W0, [W1++]
0x2C08	0xB3C690  	MOV.B	#105, W0
0x2C0A	0x785880  	MOV.B	W0, [W1++]
0x2C0C	0xB3C6F0  	MOV.B	#111, W0
0x2C0E	0x785880  	MOV.B	W0, [W1++]
0x2C10	0xB3C6E0  	MOV.B	#110, W0
0x2C12	0x785880  	MOV.B	W0, [W1++]
0x2C14	0xB3C200  	MOV.B	#32, W0
0x2C16	0x785880  	MOV.B	W0, [W1++]
0x2C18	0xB3C4D0  	MOV.B	#77, W0
0x2C1A	0x785880  	MOV.B	W0, [W1++]
0x2C1C	0xB3C650  	MOV.B	#101, W0
0x2C1E	0x785880  	MOV.B	W0, [W1++]
0x2C20	0xB3C6D0  	MOV.B	#109, W0
0x2C22	0x785880  	MOV.B	W0, [W1++]
0x2C24	0xB3C200  	MOV.B	#32, W0
0x2C26	0x785880  	MOV.B	W0, [W1++]
0x2C28	0xB3C770  	MOV.B	#119, W0
0x2C2A	0x785880  	MOV.B	W0, [W1++]
0x2C2C	0xB3C720  	MOV.B	#114, W0
0x2C2E	0x785880  	MOV.B	W0, [W1++]
0x2C30	0xB3C690  	MOV.B	#105, W0
0x2C32	0x785880  	MOV.B	W0, [W1++]
0x2C34	0xB3C740  	MOV.B	#116, W0
0x2C36	0x785880  	MOV.B	W0, [W1++]
0x2C38	0xB3C650  	MOV.B	#101, W0
0x2C3A	0x785880  	MOV.B	W0, [W1++]
0x2C3C	0xB3C0D0  	MOV.B	#13, W0
0x2C3E	0x785880  	MOV.B	W0, [W1++]
0x2C40	0xB3C0A0  	MOV.B	#10, W0
0x2C42	0x785880  	MOV.B	W0, [W1++]
0x2C44	0xB3C000  	MOV.B	#0, W0
0x2C46	0x785880  	MOV.B	W0, [W1++]
0x2C48	0x470074  	ADD	W14, #20, W0
0x2C4A	0x781F8A  	PUSH	W10
0x2C4C	0x780500  	MOV	W0, W10
0x2C4E	0x07F1E2  	RCALL	_UART1_Write_Text
0x2C50	0x78054F  	POP	W10
;NMRAnetStateMachine.mpas,934 :: 		end;
0x2C52	0x370000  	BRA	L_NMRAnetStateMachine_ProcessNode427
L_NMRAnetStateMachine_ProcessNode433:
L_NMRAnetStateMachine_ProcessNode427:
;NMRAnetStateMachine.mpas,936 :: 		DatagramBuffer^.Statemachine := STATE_MEM_CONFIG_REPLY_TO_WRITE_DATAGRAM;
0x2C54	0x4400E7  	ADD	W8, #7, W1
; DatagramBuffer end address is: 16 (W8)
0x2C56	0xB3C040  	MOV.B	#4, W0
0x2C58	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,937 :: 		end;
0x2C5A	0x37003A  	BRA	L_NMRAnetStateMachine_ProcessNode303
L_NMRAnetStateMachine_ProcessNode413:
;NMRAnetStateMachine.mpas,938 :: 		STATE_MEM_CONFIG_REPLY_TO_WRITE_DATAGRAM : begin  {$IFDEF TRACE_MEM_CONFIG_STATEMACHINE} UART1_Write_Text('STATE_MEM_CONFIG_REPLY_TO_WRITE_DATAGRAM'+LF);    {$ENDIF}
; DatagramBuffer start address is: 16 (W8)
0x2C5C	0x90C00E  	MOV.B	[W14+64], W0
0x2C5E	0xE10464  	CP.B	W0, #4
0x2C60	0x3A001C  	BRA NZ	L_NMRAnetStateMachine_ProcessNode436
L_NMRAnetStateMachine_ProcessNode745:
;NMRAnetStateMachine.mpas,939 :: 		if NMRABusBufferAvailable then
0x2C62	0x070752  	RCALL	_NMRABusBufferAvailable
0x2C64	0xE20000  	CP0	W0
0x2C66	0x320018  	BRA Z	L_NMRAnetStateMachine_ProcessNode438
L_NMRAnetStateMachine_ProcessNode746:
;NMRAnetStateMachine.mpas,941 :: 		TransmitNMRABusLayerMsg(Node, CANBuffer, MTI_DATAGRAM_OK_REPLY, DatagramBuffer^.Alias, 0, @DataBytes, False);
0x2C68	0x440162  	ADD	W8, #2, W2
0x2C6A	0x4700E0  	ADD	W14, #0, W1
0x2C6C	0x781F88  	PUSH	W8
0x2C6E	0x781F8B  	PUSH	W11
0x2C70	0x28000C  	MOV	#32768, W12
0x2C72	0x209A2D  	MOV	#2466, W13
0x2C74	0xEF2000  	CLR	W0
0x2C76	0x781F80  	PUSH	W0
0x2C78	0x781F81  	PUSH	W1
0x2C7A	0xEF2000  	CLR	W0
0x2C7C	0x781F80  	PUSH	W0
0x2C7E	0x781F92  	PUSH	[W2]
0x2C80	0x070608  	RCALL	_TransmitNMRABusLayerMsg
0x2C82	0xB1008F  	SUB	#8, W15
0x2C84	0x7805CF  	POP	W11
0x2C86	0x78044F  	POP	W8
;NMRAnetStateMachine.mpas,942 :: 		NMRAnetUtilities_DatagramBufferUnLink(Node, DatagramBuffer);
0x2C88	0x781F8B  	PUSH	W11
0x2C8A	0x780588  	MOV	W8, W11
0x2C8C	0x07FA02  	RCALL	_NMRAnetUtilities_DatagramBufferUnLink
0x2C8E	0x7805CF  	POP	W11
;NMRAnetStateMachine.mpas,943 :: 		NMRAnetBufferPools_ReleaseDatagramBuffer(DatagramBuffer)
0x2C90	0x781F8A  	PUSH	W10
; DatagramBuffer end address is: 16 (W8)
0x2C92	0x780508  	MOV	W8, W10
0x2C94	0x07FA24  	RCALL	_NMRAnetBufferPools_ReleaseDatagramBuffer
0x2C96	0x78054F  	POP	W10
;NMRAnetStateMachine.mpas,944 :: 		end
L_NMRAnetStateMachine_ProcessNode438:
;NMRAnetStateMachine.mpas,945 :: 		end;
0x2C98	0x37001B  	BRA	L_NMRAnetStateMachine_ProcessNode303
L_NMRAnetStateMachine_ProcessNode436:
;NMRAnetStateMachine.mpas,946 :: 		STATE_MEM_CONFIG_SEND_RESUSED_DATAGRAM : begin  {$IFDEF TRACE_MEM_CONFIG_STATEMACHINE} UART1_Write_Text('STATE_MEM_CONFIG_SEND_RESUSED_DATAGRAM'+LF);    {$ENDIF}
; DatagramBuffer start address is: 16 (W8)
0x2C9A	0x90C10E  	MOV.B	[W14+64], W2
0x2C9C	0xE11465  	CP.B	W2, #5
0x2C9E	0x3A0015  	BRA NZ	L_NMRAnetStateMachine_ProcessNode442
L_NMRAnetStateMachine_ProcessNode747:
;NMRAnetStateMachine.mpas,948 :: 		DatagramBuffer^.State := (DatagramBuffer^.State or CBS_OUTGOING or CBS_PROCESSING) and not CBS_TRANSFER_COMPLETE;  // Turn it into an outgoing Datagram
0x2CA0	0x784018  	MOV.B	[W8], W0
0x2CA2	0xFB8000  	ZE	W0, W0
0x2CA4	0x700064  	IOR	W0, #4, W0
0x2CA6	0x7000E2  	IOR	W0, #2, W1
0x2CA8	0x200F70  	MOV	#247, W0
0x2CAA	0x608000  	AND	W1, W0, W0
0x2CAC	0x784C00  	MOV.B	W0, [W8]
;NMRAnetStateMachine.mpas,949 :: 		DatagramBuffer^.Tag := 0;                                                          // Reset for the Transmit side
0x2CAE	0x4400E8  	ADD	W8, #8, W1
0x2CB0	0xEF2000  	CLR	W0
0x2CB2	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,950 :: 		DatagramBuffer^.iWatchdog := 0;
0x2CB4	0x200580  	MOV	#88, W0
0x2CB6	0x440080  	ADD	W8, W0, W1
0x2CB8	0xEF2000  	CLR	W0
0x2CBA	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,951 :: 		DatagramBuffer^.SourceNodePtr := Generic16BitPointer( Node);                       // So the Transmit Engine knows what source Node and Alias to associate the Datagram to
0x2CBC	0x200560  	MOV	#86, W0
0x2CBE	0x440000  	ADD	W8, W0, W0
0x2CC0	0x78080A  	MOV	W10, [W0]
;NMRAnetStateMachine.mpas,952 :: 		DatagramBuffer^.Statemachine := STATE_MEM_CONFIG_WAITFOR_REPLY;
0x2CC2	0x4400E7  	ADD	W8, #7, W1
; DatagramBuffer end address is: 16 (W8)
0x2CC4	0xB3C060  	MOV.B	#6, W0
0x2CC6	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,953 :: 		end;
0x2CC8	0x370003  	BRA	L_NMRAnetStateMachine_ProcessNode303
L_NMRAnetStateMachine_ProcessNode442:
;NMRAnetStateMachine.mpas,954 :: 		STATE_MEM_CONFIG_WAITFOR_REPLY :         begin   {$IFDEF TRACE_MEM_CONFIG_STATEMACHINE} UART1_Write_Text('STATE_MEM_CONFIG_WAITFOR_REPLY'+LF);   {$ENDIF}
0x2CCA	0xE11466  	CP.B	W2, #6
0x2CCC	0x3A0001  	BRA NZ	L_NMRAnetStateMachine_ProcessNode445
L_NMRAnetStateMachine_ProcessNode748:
;NMRAnetStateMachine.mpas,963 :: 		end;
0x2CCE	0x370000  	BRA	L_NMRAnetStateMachine_ProcessNode303
L_NMRAnetStateMachine_ProcessNode445:
L_NMRAnetStateMachine_ProcessNode303:
;NMRAnetStateMachine.mpas,965 :: 		end;
0x2CD0	0x370027  	BRA	L_NMRAnetStateMachine_ProcessNode299
L_NMRAnetStateMachine_ProcessNode302:
;NMRAnetStateMachine.mpas,966 :: 		BMC_DATAGRAM_TRACTION_CONTROL      : begin
; DatagramBuffer start address is: 16 (W8)
0x2CD2	0x90C02E  	MOV.B	[W14+66], W0
0x2CD4	0xE10469  	CP.B	W0, #9
0x2CD6	0x3A0024  	BRA NZ	L_NMRAnetStateMachine_ProcessNode448
L_NMRAnetStateMachine_ProcessNode749:
;NMRAnetStateMachine.mpas,967 :: 		if DatagramTrainControlCallbackFunc <> PDatagramTaskCallbackFunc( nil) then
0x2CD8	0x812AB1  	MOV	_DatagramTrainControlCallbackFunc, W1
0x2CDA	0x200000  	MOV	#0, W0
0x2CDC	0xE10800  	CP	W1, W0
0x2CDE	0x320007  	BRA Z	L_NMRAnetStateMachine_ProcessNode450
L_NMRAnetStateMachine_ProcessNode750:
;NMRAnetStateMachine.mpas,968 :: 		DatagramTrainControlCallbackFunc(Node, DatagramBuffer);
0x2CE0	0x781F88  	PUSH	W8
0x2CE2	0xBE9F8A  	PUSH.D	W10
0x2CE4	0x780588  	MOV	W8, W11
0x2CE6	0x812AB0  	MOV	_DatagramTrainControlCallbackFunc, W0
0x2CE8	0x010000  	CALL	W0
0x2CEA	0xBE054F  	POP.D	W10
0x2CEC	0x78044F  	POP	W8
L_NMRAnetStateMachine_ProcessNode450:
;NMRAnetStateMachine.mpas,969 :: 		TransmitNMRABusLayerMsg(Node, CANBuffer, MTI_DATAGRAM_OK_REPLY, DatagramBuffer^.Alias, 0, @DataBytes, False);
0x2CEE	0x440162  	ADD	W8, #2, W2
0x2CF0	0x4700E0  	ADD	W14, #0, W1
0x2CF2	0x781F88  	PUSH	W8
0x2CF4	0x781F8B  	PUSH	W11
0x2CF6	0x28000C  	MOV	#32768, W12
0x2CF8	0x209A2D  	MOV	#2466, W13
0x2CFA	0xEF2000  	CLR	W0
0x2CFC	0x781F80  	PUSH	W0
0x2CFE	0x781F81  	PUSH	W1
0x2D00	0xEF2000  	CLR	W0
0x2D02	0x781F80  	PUSH	W0
0x2D04	0x781F92  	PUSH	[W2]
0x2D06	0x0705C5  	RCALL	_TransmitNMRABusLayerMsg
0x2D08	0xB1008F  	SUB	#8, W15
0x2D0A	0x7805CF  	POP	W11
0x2D0C	0x78044F  	POP	W8
;NMRAnetStateMachine.mpas,970 :: 		NMRAnetUtilities_DatagramBufferUnLink(Node, DatagramBuffer);
0x2D0E	0x781F8B  	PUSH	W11
0x2D10	0x780588  	MOV	W8, W11
0x2D12	0x07F9BF  	RCALL	_NMRAnetUtilities_DatagramBufferUnLink
0x2D14	0x7805CF  	POP	W11
;NMRAnetStateMachine.mpas,971 :: 		NMRAnetBufferPools_ReleaseDatagramBuffer(DatagramBuffer)
0x2D16	0x781F8A  	PUSH	W10
; DatagramBuffer end address is: 16 (W8)
0x2D18	0x780508  	MOV	W8, W10
0x2D1A	0x07F9E1  	RCALL	_NMRAnetBufferPools_ReleaseDatagramBuffer
0x2D1C	0x78054F  	POP	W10
;NMRAnetStateMachine.mpas,972 :: 		end;
0x2D1E	0x370000  	BRA	L_NMRAnetStateMachine_ProcessNode299
L_NMRAnetStateMachine_ProcessNode448:
L_NMRAnetStateMachine_ProcessNode299:
;NMRAnetStateMachine.mpas,974 :: 		end;
L_NMRAnetStateMachine_ProcessNode297:
;NMRAnetStateMachine.mpas,976 :: 		end;
L_end_NMRAnetStateMachine_ProcessNode:
L_end_ProcessNode:
0x2D20	0x7806CF  	POP	W13
0x2D22	0x78064F  	POP	W12
0x2D24	0x7805CF  	POP	W11
0x2D26	0xFA8000  	ULNK
0x2D28	0x060000  	RETURN
; end of NMRAnetStateMachine_ProcessNode
_AppCallback_StateMachine:
0x06CE	0xFA0002  	LNK	#2
;NMRAnetAppCallbacks.mpas,516 :: 		begin
;NMRAnetAppCallbacks.mpas,518 :: 		Result := False;
0x06D0	0x781F8C  	PUSH	W12
0x06D2	0x781F8D  	PUSH	W13
0x06D4	0xEF2000  	CLR	W0
0x06D6	0x980700  	MOV	W0, [W14+0]
;NMRAnetAppCallbacks.mpas,519 :: 		ProxyData := GetProxyData(Node);
0x06D8	0x07FEA4  	RCALL	_GetProxyData
; ProxyData start address is: 6 (W3)
0x06DA	0x780180  	MOV	W0, W3
;NMRAnetAppCallbacks.mpas,520 :: 		if ProxyData^.MsgFlags and MSG_DCC_ADDRESS_ALLOCATED = MSG_DCC_ADDRESS_ALLOCATED then
0x06DC	0xEC2000  	INC	W0
0x06DE	0xFB8010  	ZE	[W0], W0
0x06E0	0x600061  	AND	W0, #1, W0
0x06E2	0xE10061  	CP	W0, #1
0x06E4	0x3A0033  	BRA NZ	L__AppCallback_StateMachine173
L__AppCallback_StateMachine256:
;NMRAnetAppCallbacks.mpas,522 :: 		DataBytesPtr^[0] := $06;
0x06E6	0xB3C060  	MOV.B	#6, W0
0x06E8	0x784E00  	MOV.B	W0, [W12]
;NMRAnetAppCallbacks.mpas,523 :: 		DataBytesPtr^[1] := $01;
0x06EA	0x4600E1  	ADD	W12, #1, W1
0x06EC	0xB3C010  	MOV.B	#1, W0
0x06EE	0x784880  	MOV.B	W0, [W1]
;NMRAnetAppCallbacks.mpas,524 :: 		DataBytesPtr^[2] := $00;
0x06F0	0x4600E2  	ADD	W12, #2, W1
0x06F2	0xEF2000  	CLR	W0
0x06F4	0x784880  	MOV.B	W0, [W1]
;NMRAnetAppCallbacks.mpas,525 :: 		DataBytesPtr^[3] := $00;
0x06F6	0x4600E3  	ADD	W12, #3, W1
0x06F8	0xEF2000  	CLR	W0
0x06FA	0x784880  	MOV.B	W0, [W1]
;NMRAnetAppCallbacks.mpas,526 :: 		DataBytesPtr^[4] := (ProxyData^.Address shr 8) and $00FF;
0x06FC	0x460164  	ADD	W12, #4, W2
0x06FE	0x418068  	ADD	W3, #8, W0
0x0700	0x780010  	MOV	[W0], W0
0x0702	0xDE00C8  	LSR	W0, #8, W1
0x0704	0x200FF0  	MOV	#255, W0
0x0706	0x608000  	AND	W1, W0, W0
0x0708	0x784900  	MOV.B	W0, [W2]
;NMRAnetAppCallbacks.mpas,527 :: 		DataBytesPtr^[5] := ProxyData^.Address and $00FF;
0x070A	0x460165  	ADD	W12, #5, W2
0x070C	0x4180E8  	ADD	W3, #8, W1
0x070E	0x200FF0  	MOV	#255, W0
0x0710	0x600011  	AND	W0, [W1], W0
0x0712	0x784900  	MOV.B	W0, [W2]
;NMRAnetAppCallbacks.mpas,528 :: 		DataBytesPtr^[6] := $00;
0x0714	0x4600E6  	ADD	W12, #6, W1
0x0716	0xEF2000  	CLR	W0
0x0718	0x784880  	MOV.B	W0, [W1]
;NMRAnetAppCallbacks.mpas,529 :: 		DataBytesPtr^[7] := $01;
0x071A	0x4600E7  	ADD	W12, #7, W1
0x071C	0xB3C010  	MOV.B	#1, W0
0x071E	0x784880  	MOV.B	W0, [W1]
;NMRAnetAppCallbacks.mpas,530 :: 		if TransmitNMRABusLayerMsg(Node, CANBUffer, MTI_PRODUCER_IDENTIFIED_SET, 0, 8, DataBytesPtr, False) then
0x0720	0x781F83  	PUSH	W3
0x0722	0xEF2000  	CLR	W0
0x0724	0x781F80  	PUSH	W0
0x0726	0x781F8C  	PUSH	W12
0x0728	0x200080  	MOV	#8, W0
0x072A	0x781F80  	PUSH	W0
0x072C	0xEF2000  	CLR	W0
0x072E	0x781F80  	PUSH	W0
0x0730	0x24000C  	MOV	#16384, W12
0x0732	0x20954D  	MOV	#2388, W13
0x0734	0x0718AE  	RCALL	_TransmitNMRABusLayerMsg
0x0736	0xB1008F  	SUB	#8, W15
0x0738	0x7801CF  	POP	W3
0x073A	0xE20000  	CP0	W0
0x073C	0x320007  	BRA Z	L__AppCallback_StateMachine176
L__AppCallback_StateMachine257:
;NMRAnetAppCallbacks.mpas,532 :: 		ProxyData^.MsgFlags := ProxyData^.MsgFlags and not MSG_DCC_ADDRESS_ALLOCATED;
0x073E	0x418161  	ADD	W3, #1, W2
; ProxyData end address is: 6 (W3)
0x0740	0xFB8092  	ZE	[W2], W1
0x0742	0x200FE0  	MOV	#254, W0
0x0744	0x608000  	AND	W1, W0, W0
0x0746	0x784900  	MOV.B	W0, [W2]
;NMRAnetAppCallbacks.mpas,533 :: 		Result := True;
0x0748	0x2FFFF0  	MOV	#65535, W0
0x074A	0x980700  	MOV	W0, [W14+0]
;NMRAnetAppCallbacks.mpas,534 :: 		end
L__AppCallback_StateMachine176:
;NMRAnetAppCallbacks.mpas,535 :: 		end;
L__AppCallback_StateMachine173:
;NMRAnetAppCallbacks.mpas,536 :: 		end;
0x074C	0x90000E  	MOV	[W14+0], W0
L_end_AppCallback_StateMachine:
0x074E	0x7806CF  	POP	W13
0x0750	0x78064F  	POP	W12
0x0752	0xFA8000  	ULNK
0x0754	0x060000  	RETURN
; end of _AppCallback_StateMachine
_NMRAnetUtilities_NextBaseBuffer:
;NMRAnetUtilities.mpas,912 :: 		begin
;NMRAnetUtilities.mpas,913 :: 		Result := Node^.BaseBuffers;
0x0792	0x45007A  	ADD	W10, #26, W0
; Result start address is: 2 (W1)
0x0794	0x780090  	MOV	[W0], W1
;NMRAnetUtilities.mpas,914 :: 		if Result <> nil then
0x0796	0xE10860  	CP	W1, #0
0x0798	0x320010  	BRA Z	L__NMRAnetUtilities_NextBaseBuffer245
L__NMRAnetUtilities_NextBaseBuffer401:
; Result end address is: 2 (W1)
;NMRAnetUtilities.mpas,916 :: 		while Result^.State and CBS_PROCESSING <> 0 do      // Skip over any In Process Buffers
L__NMRAnetUtilities_NextBaseBuffer217:
; Result start address is: 2 (W1)
0x079A	0x780001  	MOV	W1, W0
0x079C	0x784010  	MOV.B	[W0], W0
0x079E	0xFB8000  	ZE	W0, W0
0x07A0	0x600062  	AND	W0, #2, W0
0x07A2	0xE10060  	CP	W0, #0
0x07A4	0x320009  	BRA Z	L__NMRAnetUtilities_NextBaseBuffer244
L__NMRAnetUtilities_NextBaseBuffer402:
;NMRAnetUtilities.mpas,918 :: 		Result := Result^.Next;
0x07A6	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
0x07A8	0x400064  	ADD	W0, #4, W0
; Result start address is: 0 (W0)
0x07AA	0x780010  	MOV	[W0], W0
;NMRAnetUtilities.mpas,919 :: 		if Result = nil then
0x07AC	0xE10060  	CP	W0, #0
0x07AE	0x3A0002  	BRA NZ	L__NMRAnetUtilities_NextBaseBuffer222
L__NMRAnetUtilities_NextBaseBuffer403:
;NMRAnetUtilities.mpas,920 :: 		Break
0x07B0	0x780080  	MOV	W0, W1
0x07B2	0x370002  	BRA	L__NMRAnetUtilities_NextBaseBuffer218
L__NMRAnetUtilities_NextBaseBuffer222:
;NMRAnetUtilities.mpas,921 :: 		end
0x07B4	0x780080  	MOV	W0, W1
; Result end address is: 0 (W0)
0x07B6	0x37FFF1  	BRA	L__NMRAnetUtilities_NextBaseBuffer217
L__NMRAnetUtilities_NextBaseBuffer244:
;NMRAnetUtilities.mpas,916 :: 		while Result^.State and CBS_PROCESSING <> 0 do      // Skip over any In Process Buffers
;NMRAnetUtilities.mpas,921 :: 		end
L__NMRAnetUtilities_NextBaseBuffer218:
;NMRAnetUtilities.mpas,922 :: 		end
; Result start address is: 2 (W1)
; Result end address is: 2 (W1)
0x07B8	0x370000  	BRA	L__NMRAnetUtilities_NextBaseBuffer214
L__NMRAnetUtilities_NextBaseBuffer245:
;NMRAnetUtilities.mpas,914 :: 		if Result <> nil then
;NMRAnetUtilities.mpas,922 :: 		end
L__NMRAnetUtilities_NextBaseBuffer214:
;NMRAnetUtilities.mpas,923 :: 		end;
; Result start address is: 2 (W1)
0x07BA	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_NextBaseBuffer:
0x07BC	0x060000  	RETURN
; end of _NMRAnetUtilities_NextBaseBuffer
_NMRAnetUtilities_ZeroCANData:
;NMRAnetUtilities.mpas,508 :: 		begin
;NMRAnetUtilities.mpas,509 :: 		for i := 0 to CAN_DATA_LEN - 1 do
; i start address is: 4 (W2)
0x0780	0xEF2004  	CLR	W2
; i end address is: 4 (W2)
L__NMRAnetUtilities_ZeroCANData77:
;NMRAnetUtilities.mpas,510 :: 		DataBytes[i] := 0;
; i start address is: 4 (W2)
0x0782	0x450082  	ADD	W10, W2, W1
0x0784	0xEF2000  	CLR	W0
0x0786	0x784880  	MOV.B	W0, [W1]
0x0788	0xE11067  	CP	W2, #7
0x078A	0x320002  	BRA Z	L__NMRAnetUtilities_ZeroCANData80
L__NMRAnetUtilities_ZeroCANData331:
; i start address is: 4 (W2)
0x078C	0xEC2004  	INC	W2
; i end address is: 4 (W2)
; i end address is: 4 (W2)
0x078E	0x37FFF9  	BRA	L__NMRAnetUtilities_ZeroCANData77
L__NMRAnetUtilities_ZeroCANData80:
;NMRAnetUtilities.mpas,511 :: 		end;
L_end_NMRAnetUtilities_ZeroCANData:
0x0790	0x060000  	RETURN
; end of _NMRAnetUtilities_ZeroCANData
_NMRAnetUtilities_BaseBufferUnLink:
;NMRAnetUtilities.mpas,733 :: 		begin
;NMRAnetUtilities.mpas,734 :: 		if Node^.BaseBuffers <> nil then
0x0996	0x45007A  	ADD	W10, #26, W0
0x0998	0x780010  	MOV	[W0], W0
0x099A	0xE10060  	CP	W0, #0
0x099C	0x320021  	BRA Z	L__NMRAnetUtilities_BaseBufferUnLink143
L__NMRAnetUtilities_BaseBufferUnLink372:
;NMRAnetUtilities.mpas,736 :: 		if Node^.BaseBuffers = Buffer then           // Root Buffer match case is easy
0x099E	0x45007A  	ADD	W10, #26, W0
0x09A0	0x780010  	MOV	[W0], W0
0x09A2	0xE1000B  	CP	W0, W11
0x09A4	0x3A0005  	BRA NZ	L__NMRAnetUtilities_BaseBufferUnLink146
L__NMRAnetUtilities_BaseBufferUnLink373:
;NMRAnetUtilities.mpas,737 :: 		Node^.BaseBuffers := Node^.BaseBuffers^.Next
0x09A6	0x4500FA  	ADD	W10, #26, W1
0x09A8	0x780011  	MOV	[W1], W0
0x09AA	0x400064  	ADD	W0, #4, W0
0x09AC	0x780890  	MOV	[W0], [W1]
0x09AE	0x370018  	BRA	L__NMRAnetUtilities_BaseBufferUnLink147
;NMRAnetUtilities.mpas,738 :: 		else begin
L__NMRAnetUtilities_BaseBufferUnLink146:
;NMRAnetUtilities.mpas,739 :: 		Parent := Node^.BaseBuffers;                // Already know it is not the root buffer so setup for the first level down
0x09B0	0x45007A  	ADD	W10, #26, W0
; Parent start address is: 6 (W3)
0x09B2	0x780190  	MOV	[W0], W3
;NMRAnetUtilities.mpas,740 :: 		Temp := Node^.BaseBuffers^.Next;
0x09B4	0x780010  	MOV	[W0], W0
0x09B6	0x400064  	ADD	W0, #4, W0
; Temp start address is: 4 (W2)
0x09B8	0x780110  	MOV	[W0], W2
; Parent end address is: 6 (W3)
; Temp end address is: 4 (W2)
;NMRAnetUtilities.mpas,741 :: 		while (Temp <> nil) and (Temp <> Buffer) do
L__NMRAnetUtilities_BaseBufferUnLink149:
; Temp start address is: 4 (W2)
; Parent start address is: 6 (W3)
0x09BA	0xE11060  	CP	W2, #0
0x09BC	0xEF2002  	CLR	W1
0x09BE	0x320001  	BRA Z	L__NMRAnetUtilities_BaseBufferUnLink374
0x09C0	0xEEA002  	COM	W1
L__NMRAnetUtilities_BaseBufferUnLink374:
0x09C2	0xE1100B  	CP	W2, W11
0x09C4	0xEF2000  	CLR	W0
0x09C6	0x320001  	BRA Z	L__NMRAnetUtilities_BaseBufferUnLink375
0x09C8	0xEEA000  	COM	W0
L__NMRAnetUtilities_BaseBufferUnLink375:
0x09CA	0x608000  	AND	W1, W0, W0
0x09CC	0x320004  	BRA Z	L__NMRAnetUtilities_BaseBufferUnLink150
L__NMRAnetUtilities_BaseBufferUnLink376:
;NMRAnetUtilities.mpas,743 :: 		Parent := Temp;
0x09CE	0x780182  	MOV	W2, W3
;NMRAnetUtilities.mpas,744 :: 		Temp := Temp^.Next
0x09D0	0x410064  	ADD	W2, #4, W0
0x09D2	0x780110  	MOV	[W0], W2
;NMRAnetUtilities.mpas,745 :: 		end;
0x09D4	0x37FFF2  	BRA	L__NMRAnetUtilities_BaseBufferUnLink149
L__NMRAnetUtilities_BaseBufferUnLink150:
;NMRAnetUtilities.mpas,746 :: 		if Temp <> nil then
0x09D6	0xE11060  	CP	W2, #0
0x09D8	0x320003  	BRA Z	L__NMRAnetUtilities_BaseBufferUnLink154
L__NMRAnetUtilities_BaseBufferUnLink377:
;NMRAnetUtilities.mpas,747 :: 		Parent^.Next := Temp^.Next
0x09DA	0x4180E4  	ADD	W3, #4, W1
; Parent end address is: 6 (W3)
0x09DC	0x410064  	ADD	W2, #4, W0
; Temp end address is: 4 (W2)
0x09DE	0x780890  	MOV	[W0], [W1]
L__NMRAnetUtilities_BaseBufferUnLink154:
;NMRAnetUtilities.mpas,748 :: 		end
L__NMRAnetUtilities_BaseBufferUnLink147:
;NMRAnetUtilities.mpas,749 :: 		end;
L__NMRAnetUtilities_BaseBufferUnLink143:
;NMRAnetUtilities.mpas,750 :: 		end;
L_end_NMRAnetUtilities_BaseBufferUnLink:
0x09E0	0x060000  	RETURN
; end of _NMRAnetUtilities_BaseBufferUnLink
_NMRAnetBufferPools_ReleaseBaseBuffer:
;NMRAnetBufferPools.mpas,205 :: 		begin
;NMRAnetBufferPools.mpas,206 :: 		if Buffer <> nil then
0x0A22	0xE15060  	CP	W10, #0
0x0A24	0x320007  	BRA Z	L__NMRAnetBufferPools_ReleaseBaseBuffer38
L__NMRAnetBufferPools_ReleaseBaseBuffer75:
;NMRAnetBufferPools.mpas,209 :: 		Buffer^.State := 0;
0x0A26	0xEF2000  	CLR	W0
0x0A28	0x784D00  	MOV.B	W0, [W10]
;NMRAnetBufferPools.mpas,210 :: 		Dec(BaseBufferPool.Count);
0x0A2A	0x215550  	MOV	#lo_addr(_BaseBufferPool+1301), W0
0x0A2C	0xFB8010  	ZE	[W0], W0
0x0A2E	0x5000E1  	SUB	W0, #1, W1
0x0A30	0x215550  	MOV	#lo_addr(_BaseBufferPool+1301), W0
0x0A32	0x784801  	MOV.B	W1, [W0]
;NMRAnetBufferPools.mpas,211 :: 		end;
L__NMRAnetBufferPools_ReleaseBaseBuffer38:
;NMRAnetBufferPools.mpas,212 :: 		end;
L_end_NMRAnetBufferPools_ReleaseBaseBuffer:
0x0A34	0x060000  	RETURN
; end of _NMRAnetBufferPools_ReleaseBaseBuffer
_AppCallback_ConfigurationRead:
0x09E2	0xFA0000  	LNK	#0
;NMRAnetAppCallbacks.mpas,167 :: 		begin
;NMRAnetAppCallbacks.mpas,168 :: 		while _25AAxxxx_Busy(EEPROM_BANK_0) do
; MaxCount start address is: 6 (W3)
0x09E4	0x97F98E  	MOV.B	[W14-8], W3
; MaxCount end address is: 6 (W3)
L__AppCallback_ConfigurationRead14:
; MaxCount start address is: 6 (W3)
0x09E6	0x781F8A  	PUSH	W10
0x09E8	0xEF2014  	CLR	W10
0x09EA	0x07FD2D  	RCALL	__25AAxxxx_Busy
0x09EC	0x78054F  	POP	W10
0x09EE	0xE20000  	CP0	W0
0x09F0	0x320006  	BRA Z	L__AppCallback_ConfigurationRead15
L__AppCallback_ConfigurationRead185:
;NMRAnetAppCallbacks.mpas,169 :: 		Delay_us(10);
0x09F2	0x200407  	MOV	#64, W7
L__AppCallback_ConfigurationRead18:
0x09F4	0xED200E  	DEC	W7
0x09F6	0x3AFFFE  	BRA NZ	L__AppCallback_ConfigurationRead18
0x09F8	0x000000  	NOP
0x09FA	0x000000  	NOP
0x09FC	0x37FFF4  	BRA	L__AppCallback_ConfigurationRead14
L__AppCallback_ConfigurationRead15:
;NMRAnetAppCallbacks.mpas,171 :: 		Result := MaxCount;
; Result start address is: 8 (W4)
0x09FE	0x784203  	MOV.B	W3, W4
;NMRAnetAppCallbacks.mpas,172 :: 		_25AAxxxx_Read(EEPROM_BANK_0, Node^.ConfigurationAddress + StartAddress, MaxCount, DataTarget);
0x0A00	0x45017E  	ADD	W10, #30, W2
0x0A02	0x460032  	ADD	W12, [W2++], W0
0x0A04	0x4E80A2  	ADDC	W13, [W2--], W1
0x0A06	0xBE9F8C  	PUSH.D	W12
; MaxCount end address is: 6 (W3)
0x0A08	0xBE9F8A  	PUSH.D	W10
0x0A0A	0x781F8B  	PUSH	W11
0x0A0C	0xFB8683  	ZE	W3, W13
0x0A0E	0xEF2014  	CLR	W10
0x0A10	0x780580  	MOV	W0, W11
0x0A12	0x780601  	MOV	W1, W12
0x0A14	0x07FD47  	RCALL	__25AAxxxx_Read
0x0A16	0xB1002F  	SUB	#2, W15
0x0A18	0xBE054F  	POP.D	W10
0x0A1A	0xBE064F  	POP.D	W12
;NMRAnetAppCallbacks.mpas,173 :: 		end;
0x0A1C	0x784004  	MOV.B	W4, W0
; Result end address is: 8 (W4)
L_end_AppCallback_ConfigurationRead:
0x0A1E	0xFA8000  	ULNK
0x0A20	0x060000  	RETURN
; end of _AppCallback_ConfigurationRead
__25AAxxxx_Busy:
;_25AAxxxx.mpas,253 :: 		begin
;_25AAxxxx.mpas,254 :: 		SetBank_CS(Bank, 0);
0x0446	0x781F8B  	PUSH	W11
0x0448	0xEF2016  	CLR	W11
0x044A	0x07FF59  	RCALL	_25AAxxxx_SetBank_CS
;_25AAxxxx.mpas,255 :: 		LocalSPI_Write($05);
0x044C	0x781F8A  	PUSH	W10
0x044E	0xB3C05A  	MOV.B	#5, W10
0x0450	0x07FF5D  	RCALL	_25AAxxxx_LocalSPI_Write
0x0452	0x78054F  	POP	W10
;_25AAxxxx.mpas,256 :: 		Result := LocalSPI_Read and $01 <> 0;
0x0454	0x07FF64  	RCALL	_25AAxxxx_LocalSPI_Read
0x0456	0xFB8000  	ZE	W0, W0
0x0458	0x600061  	AND	W0, #1, W0
; Result start address is: 2 (W1)
0x045A	0xE10060  	CP	W0, #0
0x045C	0xEF2002  	CLR	W1
0x045E	0x320001  	BRA Z	L___25AAxxxx_Busy51
0x0460	0xEEA002  	COM	W1
L___25AAxxxx_Busy51:
;_25AAxxxx.mpas,257 :: 		SetBank_CS(Bank, 1);
0x0462	0x20001B  	MOV	#1, W11
0x0464	0x07FF4C  	RCALL	_25AAxxxx_SetBank_CS
;_25AAxxxx.mpas,258 :: 		end;
0x0466	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end__25AAxxxx_Busy:
0x0468	0x7805CF  	POP	W11
0x046A	0x060000  	RETURN
; end of __25AAxxxx_Busy
_25AAxxxx_SetBank_CS:
;_25AAxxxx.mpas,148 :: 		begin
;_25AAxxxx.mpas,150 :: 		if Bank = EEPROM_BANK_0 then CS_Bank_0 := CS_State {$ENDIF}
0x02FE	0xE15060  	CP	W10, #0
0x0300	0x3A0004  	BRA NZ	L__25AAxxxx_SetBank_CS14
L__25AAxxxx_SetBank_CS42:
0x0302	0xAE0016  	BTSS	W11, #0
0x0304	0xA9CE14  	BCLR	CS_Bank_0, BitPos(CS_Bank_0+0)
0x0306	0xAF0016  	BTSC	W11, #0
0x0308	0xA8CE14  	BSET	CS_Bank_0, BitPos(CS_Bank_0+0)
L__25AAxxxx_SetBank_CS14:
;_25AAxxxx.mpas,161 :: 		end;
L_end_SetBank_CS:
0x030A	0x060000  	RETURN
; end of _25AAxxxx_SetBank_CS
_25AAxxxx_LocalSPI_Write:
;_25AAxxxx.mpas,132 :: 		begin
;_25AAxxxx.mpas,136 :: 		Result := SPI1BUF;       // Force the SPIRBF flag to clear
; Result start address is: 0 (W0)
0x030C	0xBFC248  	MOV.B	SPI1BUF, WREG
; Result end address is: 0 (W0)
;_25AAxxxx.mpas,137 :: 		nop;
0x030E	0x000000  	NOP
;_25AAxxxx.mpas,138 :: 		SPI1BUF := DataByte;   // This will set the SPITBF flag until the byte is written into the output latch to be sent.
0x0310	0xFB800A  	ZE	W10, W0
0x0312	0xB7A248  	MOV	WREG, SPI1BUF
;_25AAxxxx.mpas,139 :: 		while SPIRBF_bit = 0 do;
L__25AAxxxx_LocalSPI_Write8:
0x0314	0xAE0240  	BTSS	SPIRBF_bit, BitPos(SPIRBF_bit+0)
0x0316	0x37FFFE  	BRA	L__25AAxxxx_LocalSPI_Write8
;_25AAxxxx.mpas,140 :: 		Result := SPI1BUF;
; Result start address is: 2 (W1)
0x0318	0x801241  	MOV	SPI1BUF, W1
;_25AAxxxx.mpas,145 :: 		end;
0x031A	0x784001  	MOV.B	W1, W0
; Result end address is: 2 (W1)
L_end_LocalSPI_Write:
0x031C	0x060000  	RETURN
; end of _25AAxxxx_LocalSPI_Write
_25AAxxxx_LocalSPI_Read:
;_25AAxxxx.mpas,117 :: 		begin
;_25AAxxxx.mpas,121 :: 		Result := SPI1BUF;       // Force the SPIRBF flag to clear
; Result start address is: 0 (W0)
0x031E	0xBFC248  	MOV.B	SPI1BUF, WREG
; Result end address is: 0 (W0)
;_25AAxxxx.mpas,123 :: 		SPI1BUF := Dummy;   // This will set the SPITBF flag until the byte is written into the output latch to be sent.
0x0320	0xEF2248  	CLR	SPI1BUF
;_25AAxxxx.mpas,124 :: 		while SPIRBF_bit = 0 do;
L__25AAxxxx_LocalSPI_Read2:
0x0322	0xAE0240  	BTSS	SPIRBF_bit, BitPos(SPIRBF_bit+0)
0x0324	0x37FFFE  	BRA	L__25AAxxxx_LocalSPI_Read2
;_25AAxxxx.mpas,125 :: 		Result := SPI1BUF;
; Result start address is: 2 (W1)
0x0326	0x801241  	MOV	SPI1BUF, W1
;_25AAxxxx.mpas,129 :: 		end;
0x0328	0x784001  	MOV.B	W1, W0
; Result end address is: 2 (W1)
L_end_LocalSPI_Read:
0x032A	0x060000  	RETURN
; end of _25AAxxxx_LocalSPI_Read
__25AAxxxx_Read:
0x04A4	0xFA0000  	LNK	#0
;_25AAxxxx.mpas,187 :: 		begin
;_25AAxxxx.mpas,188 :: 		SetBank_CS(Bank, 0);
0x04A6	0x781F8B  	PUSH	W11
0x04A8	0x781F8C  	PUSH	W12
; Buffer start address is: 6 (W3)
0x04AA	0x97B9CE  	MOV	[W14-8], W3
0x04AC	0x781F8B  	PUSH	W11
0x04AE	0x781F8C  	PUSH	W12
0x04B0	0xEF2016  	CLR	W11
0x04B2	0x07FF25  	RCALL	_25AAxxxx_SetBank_CS
0x04B4	0x78064F  	POP	W12
0x04B6	0x7805CF  	POP	W11
;_25AAxxxx.mpas,189 :: 		LocalSPI_Write($03);           // Read Instruction
0x04B8	0x781F8A  	PUSH	W10
0x04BA	0xB3C03A  	MOV.B	#3, W10
0x04BC	0x07FF27  	RCALL	_25AAxxxx_LocalSPI_Write
;_25AAxxxx.mpas,190 :: 		WriteAddress(Address);
0x04BE	0x78050B  	MOV	W11, W10
0x04C0	0x78058C  	MOV	W12, W11
0x04C2	0x07FE9E  	RCALL	_25AAxxxx_WriteAddress
0x04C4	0x78054F  	POP	W10
;_25AAxxxx.mpas,191 :: 		i := 0;
; i start address is: 0 (W0)
0x04C6	0xEF2000  	CLR	W0
; Buffer end address is: 6 (W3)
; i end address is: 0 (W0)
0x04C8	0x780103  	MOV	W3, W2
0x04CA	0x780080  	MOV	W0, W1
;_25AAxxxx.mpas,192 :: 		while i < Count do
L___25AAxxxx_Read19:
; i start address is: 2 (W1)
; Buffer start address is: 4 (W2)
0x04CC	0xE1080D  	CP	W1, W13
0x04CE	0x3D000A  	BRA GE	L___25AAxxxx_Read20
L___25AAxxxx_Read47:
;_25AAxxxx.mpas,197 :: 		SPI1BUF := Dummy;          // This will set the SPITBF flag until the byte is written into the output latch to be sent.
0x04D0	0xEF2248  	CLR	SPI1BUF
;_25AAxxxx.mpas,198 :: 		while SPIRBF_bit = 0 do;
0x04D2	0x370000  	BRA	L___25AAxxxx_Read24
L___25AAxxxx_Read38:
L___25AAxxxx_Read24:
; Buffer start address is: 4 (W2)
; Buffer end address is: 4 (W2)
; i start address is: 2 (W1)
; i end address is: 2 (W1)
0x04D4	0xAE0240  	BTSS	SPIRBF_bit, BitPos(SPIRBF_bit+0)
0x04D6	0x37FFFE  	BRA	L___25AAxxxx_Read38
; Buffer end address is: 4 (W2)
; i end address is: 2 (W1)
;_25AAxxxx.mpas,199 :: 		Buffer^ := SPI1BUF;
; i start address is: 2 (W1)
; Buffer start address is: 4 (W2)
0x04D8	0xBFC248  	MOV.B	SPI1BUF, WREG
0x04DA	0x784900  	MOV.B	W0, [W2]
;_25AAxxxx.mpas,203 :: 		Inc(Buffer);
; Buffer start address is: 0 (W0)
0x04DC	0x410061  	ADD	W2, #1, W0
; Buffer end address is: 4 (W2)
;_25AAxxxx.mpas,204 :: 		Inc(i);
0x04DE	0xEC2002  	INC	W1
;_25AAxxxx.mpas,205 :: 		end;
0x04E0	0x780100  	MOV	W0, W2
; Buffer end address is: 0 (W0)
; i end address is: 2 (W1)
0x04E2	0x37FFF4  	BRA	L___25AAxxxx_Read19
L___25AAxxxx_Read20:
;_25AAxxxx.mpas,206 :: 		SetBank_CS(Bank, 1);
0x04E4	0x781F8B  	PUSH	W11
0x04E6	0x781F8C  	PUSH	W12
0x04E8	0x20001B  	MOV	#1, W11
0x04EA	0x07FF09  	RCALL	_25AAxxxx_SetBank_CS
0x04EC	0x78064F  	POP	W12
0x04EE	0x7805CF  	POP	W11
;_25AAxxxx.mpas,207 :: 		end;
L_end__25AAxxxx_Read:
0x04F0	0x78064F  	POP	W12
0x04F2	0x7805CF  	POP	W11
0x04F4	0xFA8000  	ULNK
0x04F6	0x060000  	RETURN
; end of __25AAxxxx_Read
_25AAxxxx_WriteAddress:
;_25AAxxxx.mpas,164 :: 		begin
;_25AAxxxx.mpas,165 :: 		LocalSPI_Write(Address shr 16);
0x0200	0xBE000A  	MOV.D	W10, W0
0x0202	0x780001  	MOV	W1, W0
0x0204	0xEB0080  	CLR	W1
0x0206	0xBE9F8A  	PUSH.D	W10
0x0208	0x784500  	MOV.B	W0, W10
0x020A	0x070080  	RCALL	_25AAxxxx_LocalSPI_Write
0x020C	0xBE054F  	POP.D	W10
;_25AAxxxx.mpas,166 :: 		LocalSPI_Write(Address shr 8);
0x020E	0x200082  	MOV	#8, W2
0x0210	0xBE000A  	MOV.D	W10, W0
L__25AAxxxx_WriteAddress44:
0x0212	0xE90102  	DEC	W2, W2
0x0214	0x350003  	BRA LT	L__25AAxxxx_WriteAddress45
0x0216	0xD10081  	LSR	W1, W1
0x0218	0xD38000  	RRC	W0, W0
0x021A	0x37FFFB  	BRA	L__25AAxxxx_WriteAddress44
L__25AAxxxx_WriteAddress45:
0x021C	0xBE9F8A  	PUSH.D	W10
0x021E	0x784500  	MOV.B	W0, W10
0x0220	0x070075  	RCALL	_25AAxxxx_LocalSPI_Write
0x0222	0xBE054F  	POP.D	W10
;_25AAxxxx.mpas,167 :: 		LocalSPI_Write(Address);
0x0224	0x070073  	RCALL	_25AAxxxx_LocalSPI_Write
;_25AAxxxx.mpas,168 :: 		end;
L_end_WriteAddress:
0x0226	0x060000  	RETURN
; end of _25AAxxxx_WriteAddress
_NMRAnetNode_IsAnyConsumerEventSet:
;NMRAnetNode.mpas,808 :: 		begin
;NMRAnetNode.mpas,809 :: 		Result := False;
; Result start address is: 2 (W1)
0x1844	0xEF2002  	CLR	W1
;NMRAnetNode.mpas,811 :: 		for i := 0 to MAX_EVENTS_CONSUMED_BIT_BYTES - 1 do
; i start address is: 0 (W0)
0x1846	0xEF2000  	CLR	W0
; i end address is: 0 (W0)
0x1848	0x780100  	MOV	W0, W2
L__NMRAnetNode_IsAnyConsumerEventSet203:
;NMRAnetNode.mpas,813 :: 		if Node^.EventsConsumedFlags[i] <> 0 then
; i start address is: 4 (W2)
; Result start address is: 2 (W1)
; Result end address is: 2 (W1)
0x184A	0x450078  	ADD	W10, #24, W0
0x184C	0x400002  	ADD	W0, W2, W0
0x184E	0x784010  	MOV.B	[W0], W0
0x1850	0xE10460  	CP.B	W0, #0
0x1852	0x320002  	BRA Z	L__NMRAnetNode_IsAnyConsumerEventSet208
L__NMRAnetNode_IsAnyConsumerEventSet300:
; i end address is: 4 (W2)
; Result end address is: 2 (W1)
;NMRAnetNode.mpas,815 :: 		Result := True;
; Result start address is: 2 (W1)
0x1854	0x2FFFF1  	MOV	#65535, W1
;NMRAnetNode.mpas,816 :: 		Exit
0x1856	0x370004  	BRA	L_end__NMRAnetNode_IsAnyConsumerEventSet
;NMRAnetNode.mpas,817 :: 		end
L__NMRAnetNode_IsAnyConsumerEventSet208:
;NMRAnetNode.mpas,818 :: 		end
; i start address is: 4 (W2)
0x1858	0xE11060  	CP	W2, #0
0x185A	0x320002  	BRA Z	L__NMRAnetNode_IsAnyConsumerEventSet206
L__NMRAnetNode_IsAnyConsumerEventSet301:
; i start address is: 4 (W2)
0x185C	0xEC2004  	INC	W2
; i end address is: 4 (W2)
; i end address is: 4 (W2)
0x185E	0x37FFF5  	BRA	L__NMRAnetNode_IsAnyConsumerEventSet203
L__NMRAnetNode_IsAnyConsumerEventSet206:
;NMRAnetNode.mpas,820 :: 		end;
L_end__NMRAnetNode_IsAnyConsumerEventSet:
; Result end address is: 2 (W1)
; Result start address is: 2 (W1)
0x1860	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetNode_IsAnyConsumerEventSet:
0x1862	0x060000  	RETURN
; end of _NMRAnetNode_IsAnyConsumerEventSet
_NMRAnetNode_NextConsumerEventFlag:
0x16A2	0xFA0004  	LNK	#4
;NMRAnetNode.mpas,771 :: 		begin
;NMRAnetNode.mpas,772 :: 		Result := -1;
0x16A4	0x781F8C  	PUSH	W12
; Result start address is: 4 (W2)
0x16A6	0x2FFFF2  	MOV	#65535, W2
;NMRAnetNode.mpas,774 :: 		for i := 0 to MAX_EVENTS_CONSUMED_BIT_BYTES - 1 do
; i start address is: 2 (W1)
0x16A8	0xEF2002  	CLR	W1
; Result end address is: 4 (W2)
; i end address is: 2 (W1)
L__NMRAnetNode_NextConsumerEventFlag186:
;NMRAnetNode.mpas,776 :: 		if Node^.EventsConsumedFlags[i] <> 0 then
; i start address is: 2 (W1)
; Result start address is: 4 (W2)
0x16AA	0x450078  	ADD	W10, #24, W0
0x16AC	0x400001  	ADD	W0, W1, W0
0x16AE	0x784010  	MOV.B	[W0], W0
0x16B0	0xE10460  	CP.B	W0, #0
0x16B2	0x320026  	BRA Z	L__NMRAnetNode_NextConsumerEventFlag218
L__NMRAnetNode_NextConsumerEventFlag295:
;NMRAnetNode.mpas,778 :: 		Temp := Node^.EventsConsumedFlags[i];
0x16B4	0x450078  	ADD	W10, #24, W0
0x16B6	0x400001  	ADD	W0, W1, W0
0x16B8	0x784010  	MOV.B	[W0], W0
0x16BA	0x984720  	MOV.B	W0, [W14+2]
;NMRAnetNode.mpas,779 :: 		for j := 0 to 3 do                                                      // Find the first non zero state in the byte
0x16BC	0xEF2000  	CLR	W0
0x16BE	0x980700  	MOV	W0, [W14+0]
; i end address is: 2 (W1)
0x16C0	0x780181  	MOV	W1, W3
L__NMRAnetNode_NextConsumerEventFlag194:
;NMRAnetNode.mpas,781 :: 		State := Temp and $03;
; i start address is: 6 (W3)
; Result start address is: 4 (W2)
; Result end address is: 4 (W2)
; i start address is: 6 (W3)
; i end address is: 6 (W3)
0x16C2	0x470062  	ADD	W14, #2, W0
0x16C4	0xFB8010  	ZE	[W0], W0
0x16C6	0x600063  	AND	W0, #3, W0
0x16C8	0x784D80  	MOV.B	W0, [W11]
;NMRAnetNode.mpas,782 :: 		if State <> 0 then
0x16CA	0x78401B  	MOV.B	[W11], W0
0x16CC	0xE10460  	CP.B	W0, #0
0x16CE	0x32000A  	BRA Z	L__NMRAnetNode_NextConsumerEventFlag199
L__NMRAnetNode_NextConsumerEventFlag296:
; Result end address is: 4 (W2)
; i end address is: 6 (W3)
;NMRAnetNode.mpas,784 :: 		Result := (i*4) + j;
; i start address is: 6 (W3)
0x16D0	0xDD18C2  	SL	W3, #2, W1
; i end address is: 6 (W3)
0x16D2	0x470060  	ADD	W14, #0, W0
; Result start address is: 12 (W6)
0x16D4	0x408310  	ADD	W1, [W0], W6
;NMRAnetNode.mpas,785 :: 		NMRAnetNode_SetConsumerEventFlag(Node, Result, EVENT_STATE_CLEAR); // Clear the flag
0x16D6	0x781F8B  	PUSH	W11
0x16D8	0xEF2018  	CLR	W12
0x16DA	0x780586  	MOV	W6, W11
0x16DC	0x07F70D  	RCALL	_NMRAnetNode_SetConsumerEventFlag
0x16DE	0x7805CF  	POP	W11
;NMRAnetNode.mpas,786 :: 		Exit;
0x16E0	0x780086  	MOV	W6, W1
; Result end address is: 12 (W6)
0x16E2	0x370015  	BRA	L_end__NMRAnetNode_NextConsumerEventFlag
;NMRAnetNode.mpas,787 :: 		end else
L__NMRAnetNode_NextConsumerEventFlag199:
;NMRAnetNode.mpas,788 :: 		Temp := Temp shr 2;
; i start address is: 6 (W3)
; Result start address is: 4 (W2)
0x16E4	0x470062  	ADD	W14, #2, W0
0x16E6	0xFB8010  	ZE	[W0], W0
0x16E8	0xDE0042  	LSR	W0, #2, W0
0x16EA	0x984720  	MOV.B	W0, [W14+2]
;NMRAnetNode.mpas,789 :: 		end
0x16EC	0x90000E  	MOV	[W14+0], W0
0x16EE	0xE10063  	CP	W0, #3
0x16F0	0x320004  	BRA Z	L__NMRAnetNode_NextConsumerEventFlag197
L__NMRAnetNode_NextConsumerEventFlag297:
0x16F2	0x200011  	MOV	#1, W1
0x16F4	0x470060  	ADD	W14, #0, W0
0x16F6	0x408810  	ADD	W1, [W0], [W0]
0x16F8	0x37FFE4  	BRA	L__NMRAnetNode_NextConsumerEventFlag194
L__NMRAnetNode_NextConsumerEventFlag197:
;NMRAnetNode.mpas,790 :: 		end
0x16FA	0x780083  	MOV	W3, W1
; i end address is: 6 (W3)
0x16FC	0x780002  	MOV	W2, W0
0x16FE	0x370001  	BRA	L__NMRAnetNode_NextConsumerEventFlag191
; Result end address is: 4 (W2)
L__NMRAnetNode_NextConsumerEventFlag218:
;NMRAnetNode.mpas,776 :: 		if Node^.EventsConsumedFlags[i] <> 0 then
0x1700	0x780002  	MOV	W2, W0
;NMRAnetNode.mpas,790 :: 		end
L__NMRAnetNode_NextConsumerEventFlag191:
;NMRAnetNode.mpas,791 :: 		end
; Result start address is: 0 (W0)
; i start address is: 2 (W1)
0x1702	0xE10860  	CP	W1, #0
0x1704	0x320003  	BRA Z	L__NMRAnetNode_NextConsumerEventFlag189
L__NMRAnetNode_NextConsumerEventFlag298:
; i start address is: 2 (W1)
0x1706	0xEC2002  	INC	W1
; i end address is: 2 (W1)
0x1708	0x780100  	MOV	W0, W2
; i end address is: 2 (W1)
0x170A	0x37FFCF  	BRA	L__NMRAnetNode_NextConsumerEventFlag186
L__NMRAnetNode_NextConsumerEventFlag189:
;NMRAnetNode.mpas,793 :: 		end;
0x170C	0x780080  	MOV	W0, W1
L_end__NMRAnetNode_NextConsumerEventFlag:
; Result end address is: 0 (W0)
; Result start address is: 2 (W1)
0x170E	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetNode_NextConsumerEventFlag:
0x1710	0x78064F  	POP	W12
0x1712	0xFA8000  	ULNK
0x1714	0x060000  	RETURN
; end of _NMRAnetNode_NextConsumerEventFlag
_NMRAnetNode_IsAnyProducerEventSet:
;NMRAnetNode.mpas,667 :: 		begin
;NMRAnetNode.mpas,668 :: 		Result := False;
; Result start address is: 2 (W1)
0x1716	0xEF2002  	CLR	W1
;NMRAnetNode.mpas,670 :: 		for i := 0 to MAX_EVENTS_PRODUCED_BIT_BYTES - 1 do                          // Shortcut to see if any bits are set in any event
; i start address is: 0 (W0)
0x1718	0xEF2000  	CLR	W0
; i end address is: 0 (W0)
0x171A	0x780100  	MOV	W0, W2
L__NMRAnetNode_IsAnyProducerEventSet156:
;NMRAnetNode.mpas,672 :: 		if Node^.EventsProducedFlags[i] <> 0 then
; i start address is: 4 (W2)
; Result start address is: 2 (W1)
; Result end address is: 2 (W1)
0x171C	0x450077  	ADD	W10, #23, W0
0x171E	0x400002  	ADD	W0, W2, W0
0x1720	0x784010  	MOV.B	[W0], W0
0x1722	0xE10460  	CP.B	W0, #0
0x1724	0x320002  	BRA Z	L__NMRAnetNode_IsAnyProducerEventSet161
L__NMRAnetNode_IsAnyProducerEventSet285:
; i end address is: 4 (W2)
; Result end address is: 2 (W1)
;NMRAnetNode.mpas,674 :: 		Result := True;
; Result start address is: 2 (W1)
0x1726	0x2FFFF1  	MOV	#65535, W1
;NMRAnetNode.mpas,675 :: 		Exit
0x1728	0x370004  	BRA	L_end__NMRAnetNode_IsAnyProducerEventSet
;NMRAnetNode.mpas,676 :: 		end
L__NMRAnetNode_IsAnyProducerEventSet161:
;NMRAnetNode.mpas,677 :: 		end
; i start address is: 4 (W2)
0x172A	0xE11060  	CP	W2, #0
0x172C	0x320002  	BRA Z	L__NMRAnetNode_IsAnyProducerEventSet159
L__NMRAnetNode_IsAnyProducerEventSet286:
; i start address is: 4 (W2)
0x172E	0xEC2004  	INC	W2
; i end address is: 4 (W2)
; i end address is: 4 (W2)
0x1730	0x37FFF5  	BRA	L__NMRAnetNode_IsAnyProducerEventSet156
L__NMRAnetNode_IsAnyProducerEventSet159:
;NMRAnetNode.mpas,679 :: 		end;
L_end__NMRAnetNode_IsAnyProducerEventSet:
; Result end address is: 2 (W1)
; Result start address is: 2 (W1)
0x1732	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetNode_IsAnyProducerEventSet:
0x1734	0x060000  	RETURN
; end of _NMRAnetNode_IsAnyProducerEventSet
_NMRAnetNode_NextProducerEventFlag:
0x1736	0xFA0004  	LNK	#4
;NMRAnetNode.mpas,630 :: 		begin
;NMRAnetNode.mpas,631 :: 		Result := -1;
0x1738	0x781F8C  	PUSH	W12
; Result start address is: 4 (W2)
0x173A	0x2FFFF2  	MOV	#65535, W2
;NMRAnetNode.mpas,633 :: 		for i := 0 to MAX_EVENTS_PRODUCED_BIT_BYTES - 1 do
; i start address is: 2 (W1)
0x173C	0xEF2002  	CLR	W1
; Result end address is: 4 (W2)
; i end address is: 2 (W1)
L__NMRAnetNode_NextProducerEventFlag139:
;NMRAnetNode.mpas,635 :: 		if Node^.EventsProducedFlags[i] <> 0 then
; i start address is: 2 (W1)
; Result start address is: 4 (W2)
0x173E	0x450077  	ADD	W10, #23, W0
0x1740	0x400001  	ADD	W0, W1, W0
0x1742	0x784010  	MOV.B	[W0], W0
0x1744	0xE10460  	CP.B	W0, #0
0x1746	0x320026  	BRA Z	L__NMRAnetNode_NextProducerEventFlag217
L__NMRAnetNode_NextProducerEventFlag280:
;NMRAnetNode.mpas,637 :: 		Temp := Node^.EventsProducedFlags[i];
0x1748	0x450077  	ADD	W10, #23, W0
0x174A	0x400001  	ADD	W0, W1, W0
0x174C	0x784010  	MOV.B	[W0], W0
0x174E	0x984720  	MOV.B	W0, [W14+2]
;NMRAnetNode.mpas,638 :: 		for j := 0 to 3 do                                                      // Find the first non zero state in the byte
0x1750	0xEF2000  	CLR	W0
0x1752	0x980700  	MOV	W0, [W14+0]
; i end address is: 2 (W1)
0x1754	0x780181  	MOV	W1, W3
L__NMRAnetNode_NextProducerEventFlag147:
;NMRAnetNode.mpas,640 :: 		State := Temp and $03;
; i start address is: 6 (W3)
; Result start address is: 4 (W2)
; Result end address is: 4 (W2)
; i start address is: 6 (W3)
; i end address is: 6 (W3)
0x1756	0x470062  	ADD	W14, #2, W0
0x1758	0xFB8010  	ZE	[W0], W0
0x175A	0x600063  	AND	W0, #3, W0
0x175C	0x784D80  	MOV.B	W0, [W11]
;NMRAnetNode.mpas,641 :: 		if State <> 0 then
0x175E	0x78401B  	MOV.B	[W11], W0
0x1760	0xE10460  	CP.B	W0, #0
0x1762	0x32000A  	BRA Z	L__NMRAnetNode_NextProducerEventFlag152
L__NMRAnetNode_NextProducerEventFlag281:
; Result end address is: 4 (W2)
; i end address is: 6 (W3)
;NMRAnetNode.mpas,643 :: 		Result := (i*4) + j;
; i start address is: 6 (W3)
0x1764	0xDD18C2  	SL	W3, #2, W1
; i end address is: 6 (W3)
0x1766	0x470060  	ADD	W14, #0, W0
; Result start address is: 12 (W6)
0x1768	0x408310  	ADD	W1, [W0], W6
;NMRAnetNode.mpas,644 :: 		NMRAnetNode_SetProducerEventFlag(Node, Result, EVENT_STATE_CLEAR); // Clear the flag
0x176A	0x781F8B  	PUSH	W11
0x176C	0xEF2018  	CLR	W12
0x176E	0x780586  	MOV	W6, W11
0x1770	0x07F67D  	RCALL	_NMRAnetNode_SetProducerEventFlag
0x1772	0x7805CF  	POP	W11
;NMRAnetNode.mpas,645 :: 		Exit;
0x1774	0x780086  	MOV	W6, W1
; Result end address is: 12 (W6)
0x1776	0x370015  	BRA	L_end__NMRAnetNode_NextProducerEventFlag
;NMRAnetNode.mpas,646 :: 		end else
L__NMRAnetNode_NextProducerEventFlag152:
;NMRAnetNode.mpas,647 :: 		Temp := Temp shr 2;
; i start address is: 6 (W3)
; Result start address is: 4 (W2)
0x1778	0x470062  	ADD	W14, #2, W0
0x177A	0xFB8010  	ZE	[W0], W0
0x177C	0xDE0042  	LSR	W0, #2, W0
0x177E	0x984720  	MOV.B	W0, [W14+2]
;NMRAnetNode.mpas,648 :: 		end
0x1780	0x90000E  	MOV	[W14+0], W0
0x1782	0xE10063  	CP	W0, #3
0x1784	0x320004  	BRA Z	L__NMRAnetNode_NextProducerEventFlag150
L__NMRAnetNode_NextProducerEventFlag282:
0x1786	0x200011  	MOV	#1, W1
0x1788	0x470060  	ADD	W14, #0, W0
0x178A	0x408810  	ADD	W1, [W0], [W0]
0x178C	0x37FFE4  	BRA	L__NMRAnetNode_NextProducerEventFlag147
L__NMRAnetNode_NextProducerEventFlag150:
;NMRAnetNode.mpas,649 :: 		end
0x178E	0x780083  	MOV	W3, W1
; i end address is: 6 (W3)
0x1790	0x780002  	MOV	W2, W0
0x1792	0x370001  	BRA	L__NMRAnetNode_NextProducerEventFlag144
; Result end address is: 4 (W2)
L__NMRAnetNode_NextProducerEventFlag217:
;NMRAnetNode.mpas,635 :: 		if Node^.EventsProducedFlags[i] <> 0 then
0x1794	0x780002  	MOV	W2, W0
;NMRAnetNode.mpas,649 :: 		end
L__NMRAnetNode_NextProducerEventFlag144:
;NMRAnetNode.mpas,650 :: 		end
; Result start address is: 0 (W0)
; i start address is: 2 (W1)
0x1796	0xE10860  	CP	W1, #0
0x1798	0x320003  	BRA Z	L__NMRAnetNode_NextProducerEventFlag142
L__NMRAnetNode_NextProducerEventFlag283:
; i start address is: 2 (W1)
0x179A	0xEC2002  	INC	W1
; i end address is: 2 (W1)
0x179C	0x780100  	MOV	W0, W2
; i end address is: 2 (W1)
0x179E	0x37FFCF  	BRA	L__NMRAnetNode_NextProducerEventFlag139
L__NMRAnetNode_NextProducerEventFlag142:
;NMRAnetNode.mpas,652 :: 		end;
0x17A0	0x780080  	MOV	W0, W1
L_end__NMRAnetNode_NextProducerEventFlag:
; Result end address is: 0 (W0)
; Result start address is: 2 (W1)
0x17A2	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetNode_NextProducerEventFlag:
0x17A4	0x78064F  	POP	W12
0x17A6	0xFA8000  	ULNK
0x17A8	0x060000  	RETURN
; end of _NMRAnetNode_NextProducerEventFlag
_NMRAnetUtilities_NextDatagramBuffer:
;NMRAnetUtilities.mpas,934 :: 		begin
;NMRAnetUtilities.mpas,935 :: 		Result := Node^.DatagramBuffers;
0x19F2	0x45007C  	ADD	W10, #28, W0
; Result start address is: 2 (W1)
0x19F4	0x780090  	MOV	[W0], W1
;NMRAnetUtilities.mpas,936 :: 		if Result <> nil then
0x19F6	0xE10860  	CP	W1, #0
0x19F8	0x320010  	BRA Z	L__NMRAnetUtilities_NextDatagramBuffer247
L__NMRAnetUtilities_NextDatagramBuffer405:
; Result end address is: 2 (W1)
;NMRAnetUtilities.mpas,938 :: 		while Result^.State and CBS_TRANSFER_COMPLETE = 0 do    // Use only Complete Transfers
L__NMRAnetUtilities_NextDatagramBuffer229:
; Result start address is: 2 (W1)
0x19FA	0x780001  	MOV	W1, W0
0x19FC	0x784010  	MOV.B	[W0], W0
0x19FE	0xFB8000  	ZE	W0, W0
0x1A00	0x600068  	AND	W0, #8, W0
0x1A02	0xE10060  	CP	W0, #0
0x1A04	0x3A0009  	BRA NZ	L__NMRAnetUtilities_NextDatagramBuffer246
L__NMRAnetUtilities_NextDatagramBuffer406:
;NMRAnetUtilities.mpas,940 :: 		Result := Result^.Next;
0x1A06	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
0x1A08	0x400064  	ADD	W0, #4, W0
; Result start address is: 0 (W0)
0x1A0A	0x780010  	MOV	[W0], W0
;NMRAnetUtilities.mpas,941 :: 		if Result = nil then
0x1A0C	0xE10060  	CP	W0, #0
0x1A0E	0x3A0002  	BRA NZ	L__NMRAnetUtilities_NextDatagramBuffer234
L__NMRAnetUtilities_NextDatagramBuffer407:
;NMRAnetUtilities.mpas,942 :: 		Break
0x1A10	0x780080  	MOV	W0, W1
0x1A12	0x370002  	BRA	L__NMRAnetUtilities_NextDatagramBuffer230
L__NMRAnetUtilities_NextDatagramBuffer234:
;NMRAnetUtilities.mpas,943 :: 		end
0x1A14	0x780080  	MOV	W0, W1
; Result end address is: 0 (W0)
0x1A16	0x37FFF1  	BRA	L__NMRAnetUtilities_NextDatagramBuffer229
L__NMRAnetUtilities_NextDatagramBuffer246:
;NMRAnetUtilities.mpas,938 :: 		while Result^.State and CBS_TRANSFER_COMPLETE = 0 do    // Use only Complete Transfers
;NMRAnetUtilities.mpas,943 :: 		end
L__NMRAnetUtilities_NextDatagramBuffer230:
;NMRAnetUtilities.mpas,944 :: 		end
; Result start address is: 2 (W1)
; Result end address is: 2 (W1)
0x1A18	0x370000  	BRA	L__NMRAnetUtilities_NextDatagramBuffer226
L__NMRAnetUtilities_NextDatagramBuffer247:
;NMRAnetUtilities.mpas,936 :: 		if Result <> nil then
;NMRAnetUtilities.mpas,944 :: 		end
L__NMRAnetUtilities_NextDatagramBuffer226:
;NMRAnetUtilities.mpas,945 :: 		end;
; Result start address is: 2 (W1)
0x1A1A	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_NextDatagramBuffer:
0x1A1C	0x060000  	RETURN
; end of _NMRAnetUtilities_NextDatagramBuffer
NMRAnetStateMachine_MaxAddressByAddressSpace:
0x1964	0xFA0004  	LNK	#4
;NMRAnetStateMachine.mpas,439 :: 		begin
;NMRAnetStateMachine.mpas,441 :: 		MSI_CDI       : begin
0x1966	0xB3CFF0  	MOV.B	#255, W0
0x1968	0xE15C00  	CP.B	W11, W0
0x196A	0x3A000F  	BRA NZ	L_NMRAnetStateMachine_MaxAddressByAddressSpace77
L_NMRAnetStateMachine_MaxAddressByAddressSpace615:
;NMRAnetStateMachine.mpas,443 :: 		if Node^.State and NS_VIRTUAL <> 0 then
0x196C	0x78401A  	MOV.B	[W10], W0
0x196E	0xFB8000  	ZE	W0, W0
0x1970	0x600068  	AND	W0, #8, W0
0x1972	0xE10060  	CP	W0, #0
0x1974	0x320005  	BRA Z	L_NMRAnetStateMachine_MaxAddressByAddressSpace79
L_NMRAnetStateMachine_MaxAddressByAddressSpace616:
;NMRAnetStateMachine.mpas,444 :: 		Result := MAX_CDI_ARRAY_VNODE
0x1976	0x206680  	MOV	#1640, W0
0x1978	0x200001  	MOV	#0, W1
0x197A	0x980700  	MOV	W0, [W14+0]
0x197C	0x980711  	MOV	W1, [W14+2]
0x197E	0x370004  	BRA	L_NMRAnetStateMachine_MaxAddressByAddressSpace80
;NMRAnetStateMachine.mpas,445 :: 		else {$ENDIF}
L_NMRAnetStateMachine_MaxAddressByAddressSpace79:
;NMRAnetStateMachine.mpas,446 :: 		Result := MAX_CDI_ARRAY;
0x1980	0x2066B0  	MOV	#1643, W0
0x1982	0x200001  	MOV	#0, W1
0x1984	0x980700  	MOV	W0, [W14+0]
0x1986	0x980711  	MOV	W1, [W14+2]
L_NMRAnetStateMachine_MaxAddressByAddressSpace80:
;NMRAnetStateMachine.mpas,447 :: 		end;
0x1988	0x370030  	BRA	L_NMRAnetStateMachine_MaxAddressByAddressSpace74
L_NMRAnetStateMachine_MaxAddressByAddressSpace77:
;NMRAnetStateMachine.mpas,448 :: 		MSI_ALL       : Result := ALL_MAP.HighMem;
0x198A	0xB3CFE0  	MOV.B	#254, W0
0x198C	0xE15C00  	CP.B	W11, W0
0x198E	0x3A0005  	BRA NZ	L_NMRAnetStateMachine_MaxAddressByAddressSpace83
L_NMRAnetStateMachine_MaxAddressByAddressSpace617:
0x1990	0x27FFF0  	MOV	#32767, W0
0x1992	0x200001  	MOV	#0, W1
0x1994	0x980700  	MOV	W0, [W14+0]
0x1996	0x980711  	MOV	W1, [W14+2]
0x1998	0x370028  	BRA	L_NMRAnetStateMachine_MaxAddressByAddressSpace74
L_NMRAnetStateMachine_MaxAddressByAddressSpace83:
;NMRAnetStateMachine.mpas,449 :: 		MSI_CONFIG    : Result := AppCallback_ConfigurationSize(Node);
0x199A	0xB3CFD0  	MOV.B	#253, W0
0x199C	0xE15C00  	CP.B	W11, W0
0x199E	0x3A0005  	BRA NZ	L_NMRAnetStateMachine_MaxAddressByAddressSpace86
L_NMRAnetStateMachine_MaxAddressByAddressSpace618:
0x19A0	0x07F4E3  	RCALL	_AppCallback_ConfigurationSize
0x19A2	0xEB0080  	CLR	W1
0x19A4	0x980700  	MOV	W0, [W14+0]
0x19A6	0x980711  	MOV	W1, [W14+2]
0x19A8	0x370020  	BRA	L_NMRAnetStateMachine_MaxAddressByAddressSpace74
L_NMRAnetStateMachine_MaxAddressByAddressSpace86:
;NMRAnetStateMachine.mpas,450 :: 		MSI_ACDI_MFG  : begin
0x19AA	0xB3CFC0  	MOV.B	#252, W0
0x19AC	0xE15C00  	CP.B	W11, W0
0x19AE	0x3A000F  	BRA NZ	L_NMRAnetStateMachine_MaxAddressByAddressSpace89
L_NMRAnetStateMachine_MaxAddressByAddressSpace619:
;NMRAnetStateMachine.mpas,452 :: 		if Node^.State and NS_VIRTUAL <> 0 then
0x19B0	0x78401A  	MOV.B	[W10], W0
0x19B2	0xFB8000  	ZE	W0, W0
0x19B4	0x600068  	AND	W0, #8, W0
0x19B6	0xE10060  	CP	W0, #0
0x19B8	0x320005  	BRA Z	L_NMRAnetStateMachine_MaxAddressByAddressSpace91
L_NMRAnetStateMachine_MaxAddressByAddressSpace620:
;NMRAnetStateMachine.mpas,453 :: 		Result := MAX_ACDI_MFG_ARRAY_VNODE + 1 // for the Version ID Byte
0x19BA	0x2001B0  	MOV	#27, W0
0x19BC	0x200001  	MOV	#0, W1
0x19BE	0x980700  	MOV	W0, [W14+0]
0x19C0	0x980711  	MOV	W1, [W14+2]
0x19C2	0x370004  	BRA	L_NMRAnetStateMachine_MaxAddressByAddressSpace92
;NMRAnetStateMachine.mpas,454 :: 		else {$ENDIF}
L_NMRAnetStateMachine_MaxAddressByAddressSpace91:
;NMRAnetStateMachine.mpas,455 :: 		Result := MAX_ACDI_MFG_ARRAY + 1 // for the Version ID Byte
0x19C4	0x2001B0  	MOV	#27, W0
0x19C6	0x200001  	MOV	#0, W1
0x19C8	0x980700  	MOV	W0, [W14+0]
0x19CA	0x980711  	MOV	W1, [W14+2]
L_NMRAnetStateMachine_MaxAddressByAddressSpace92:
;NMRAnetStateMachine.mpas,456 :: 		end;
0x19CC	0x37000E  	BRA	L_NMRAnetStateMachine_MaxAddressByAddressSpace74
L_NMRAnetStateMachine_MaxAddressByAddressSpace89:
;NMRAnetStateMachine.mpas,457 :: 		MSI_ACDI_USER : Result := AppCallback_ConfigurationSize(Node) + 1  // for the Version ID Byte
0x19CE	0xB3CFB0  	MOV.B	#251, W0
0x19D0	0xE15C00  	CP.B	W11, W0
0x19D2	0x3A0007  	BRA NZ	L_NMRAnetStateMachine_MaxAddressByAddressSpace95
L_NMRAnetStateMachine_MaxAddressByAddressSpace621:
0x19D4	0x07F4C9  	RCALL	_AppCallback_ConfigurationSize
0x19D6	0x780080  	MOV	W0, W1
0x19D8	0xEB0100  	CLR	W2
0x19DA	0x470060  	ADD	W14, #0, W0
0x19DC	0x409861  	ADD	W1, #1, [W0++]
0x19DE	0x491060  	ADDC	W2, #0, [W0--]
;NMRAnetStateMachine.mpas,458 :: 		else
0x19E0	0x370004  	BRA	L_NMRAnetStateMachine_MaxAddressByAddressSpace74
L_NMRAnetStateMachine_MaxAddressByAddressSpace95:
;NMRAnetStateMachine.mpas,459 :: 		Result := 0;
0x19E2	0xEF2000  	CLR	W0
0x19E4	0xEF2002  	CLR	W1
0x19E6	0x980700  	MOV	W0, [W14+0]
0x19E8	0x980711  	MOV	W1, [W14+2]
L_NMRAnetStateMachine_MaxAddressByAddressSpace74:
;NMRAnetStateMachine.mpas,461 :: 		end;
0x19EA	0x90000E  	MOV	[W14+0], W0
0x19EC	0x90009E  	MOV	[W14+2], W1
L_end_MaxAddressByAddressSpace:
0x19EE	0xFA8000  	ULNK
0x19F0	0x060000  	RETURN
; end of NMRAnetStateMachine_MaxAddressByAddressSpace
_AppCallback_ConfigurationSize:
;NMRAnetAppCallbacks.mpas,179 :: 		begin
;NMRAnetAppCallbacks.mpas,180 :: 		Result := MAX_CONFIG_DATA;
; Result start address is: 2 (W1)
0x0368	0x2003C1  	MOV	#60, W1
;NMRAnetAppCallbacks.mpas,181 :: 		end;
0x036A	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_AppCallback_ConfigurationSize:
0x036C	0x060000  	RETURN
; end of _AppCallback_ConfigurationSize
NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite:
0x1864	0xFA0000  	LNK	#0
;NMRAnetStateMachine.mpas,475 :: 		begin
;NMRAnetStateMachine.mpas,476 :: 		MemorySpaceCount := DataBytes^[6];
0x1866	0x781F8B  	PUSH	W11
; MemorySpaceCount start address is: 14 (W7)
0x1868	0x97BBCE  	MOV	[W14-8], W7
0x186A	0x458066  	ADD	W11, #6, W0
0x186C	0x784B90  	MOV.B	[W0], [W7]
;NMRAnetStateMachine.mpas,477 :: 		case DataBytes^[1] and $03 of      // Strip off bottom two bits
0x186E	0x458061  	ADD	W11, #1, W0
0x1870	0xFB8010  	ZE	[W0], W0
0x1872	0x6000E3  	AND	W0, #3, W1
;NMRAnetStateMachine.mpas,478 :: 		MCP_CDI            : MemorySpace := MSI_CDI;
0x1874	0xE10863  	CP	W1, #3
0x1876	0x3A0003  	BRA NZ	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite100
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite623:
0x1878	0xB3CFF0  	MOV.B	#255, W0
0x187A	0x784E00  	MOV.B	W0, [W12]
0x187C	0x370011  	BRA	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite97
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite100:
;NMRAnetStateMachine.mpas,479 :: 		MCP_ALL            : MemorySpace := MSI_ALL;
0x187E	0xE10862  	CP	W1, #2
0x1880	0x3A0003  	BRA NZ	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite103
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite624:
0x1882	0xB3CFE0  	MOV.B	#254, W0
0x1884	0x784E00  	MOV.B	W0, [W12]
0x1886	0x37000C  	BRA	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite97
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite103:
;NMRAnetStateMachine.mpas,480 :: 		MCP_CONFIGURATION  : MemorySpace := MSI_CONFIG;
0x1888	0xE10861  	CP	W1, #1
0x188A	0x3A0003  	BRA NZ	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite106
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite625:
0x188C	0xB3CFD0  	MOV.B	#253, W0
0x188E	0x784E00  	MOV.B	W0, [W12]
0x1890	0x370007  	BRA	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite97
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite106:
;NMRAnetStateMachine.mpas,481 :: 		MCP_NONE           : begin
0x1892	0xE10860  	CP	W1, #0
0x1894	0x3A0005  	BRA NZ	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite109
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite626:
;NMRAnetStateMachine.mpas,482 :: 		MemorySpace := DataBytes^[6];
0x1896	0x458066  	ADD	W11, #6, W0
0x1898	0x784E10  	MOV.B	[W0], [W12]
;NMRAnetStateMachine.mpas,483 :: 		MemorySpaceCount := DataBytes^[7]       // Should not be larger than 64 bytes
0x189A	0x458067  	ADD	W11, #7, W0
0x189C	0x784B90  	MOV.B	[W0], [W7]
;NMRAnetStateMachine.mpas,484 :: 		end;
0x189E	0x370000  	BRA	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite97
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite109:
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite97:
;NMRAnetStateMachine.mpas,486 :: 		MemorySpaceAddress := DWord( DataBytes^[2] shl 24) or DWord( DataBytes^[3] shl 16) or DWord( DataBytes^[4] shl 8) or DWord( DataBytes^[5]);
0x18A0	0x458062  	ADD	W11, #2, W0
0x18A2	0xFB8210  	ZE	[W0], W4
0x18A4	0xEB0280  	CLR	W5
0x18A6	0x200180  	MOV	#24, W0
0x18A8	0xBE0104  	MOV.D	W4, W2
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite627:
0x18AA	0xE90000  	DEC	W0, W0
0x18AC	0x350003  	BRA LT	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite628
0x18AE	0xD00102  	SL	W2, W2
0x18B0	0xD28183  	RLC	W3, W3
0x18B2	0x37FFFB  	BRA	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite627
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite628:
0x18B4	0x458063  	ADD	W11, #3, W0
0x18B6	0xFB8010  	ZE	[W0], W0
0x18B8	0xEB0080  	CLR	W1
0x18BA	0x780080  	MOV	W0, W1
0x18BC	0xEB0000  	CLR	W0
0x18BE	0x710280  	IOR	W2, W0, W5
0x18C0	0x718301  	IOR	W3, W1, W6
0x18C2	0x458064  	ADD	W11, #4, W0
0x18C4	0xFB8190  	ZE	[W0], W3
0x18C6	0xEB0200  	CLR	W4
0x18C8	0x200082  	MOV	#8, W2
0x18CA	0x780003  	MOV	W3, W0
0x18CC	0x780084  	MOV	W4, W1
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite629:
0x18CE	0xE90102  	DEC	W2, W2
0x18D0	0x350003  	BRA LT	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite630
0x18D2	0xD00000  	SL	W0, W0
0x18D4	0xD28081  	RLC	W1, W1
0x18D6	0x37FFFB  	BRA	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite629
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite630:
0x18D8	0x728100  	IOR	W5, W0, W2
0x18DA	0x730181  	IOR	W6, W1, W3
0x18DC	0x458065  	ADD	W11, #5, W0
0x18DE	0xFB8010  	ZE	[W0], W0
0x18E0	0xEB0080  	CLR	W1
0x18E2	0x711E80  	IOR	W2, W0, [W13++]
0x18E4	0x719681  	IOR	W3, W1, [W13--]
;NMRAnetStateMachine.mpas,488 :: 		MemorySpaceMaxAddress := MaxAddressByAddressSpace(Node, MemorySpace);
0x18E6	0x781F87  	PUSH	W7
0x18E8	0x781F8D  	PUSH	W13
0x18EA	0x78459C  	MOV.B	[W12], W11
0x18EC	0x07003B  	RCALL	NMRAnetStateMachine_MaxAddressByAddressSpace
0x18EE	0x7806CF  	POP	W13
0x18F0	0x7803CF  	POP	W7
; MemorySpaceMaxAddress start address is: 8 (W4)
0x18F2	0xBE0200  	MOV.D	W0, W4
;NMRAnetStateMachine.mpas,490 :: 		if MemorySpaceAddress >= MemorySpaceMaxAddress then
0x18F4	0xBE011D  	MOV.D	[W13], W2
0x18F6	0xE11000  	CP	W2, W0
0x18F8	0xE19801  	CPB	W3, W1
0x18FA	0x390003  	BRA LTU	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite111
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite631:
; MemorySpaceMaxAddress end address is: 8 (W4)
;NMRAnetStateMachine.mpas,491 :: 		MemorySpaceCount := 0
0x18FC	0xEF2000  	CLR	W0
0x18FE	0x784B80  	MOV.B	W0, [W7]
0x1900	0x37000A  	BRA	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite112
;NMRAnetStateMachine.mpas,492 :: 		else begin
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite111:
;NMRAnetStateMachine.mpas,493 :: 		if MemorySpaceAddress + MemorySpaceCount >= MemorySpaceMaxAddress then
; MemorySpaceMaxAddress start address is: 8 (W4)
0x1902	0x784017  	MOV.B	[W7], W0
0x1904	0xFB0100  	SE	W0, W2
0x1906	0xDE91CF  	ASR	W2, #15, W3
0x1908	0x41003D  	ADD	W2, [W13++], W0
0x190A	0x4980AD  	ADDC	W3, [W13--], W1
0x190C	0xE10004  	CP	W0, W4
0x190E	0xE18805  	CPB	W1, W5
0x1910	0x350002  	BRA LT	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite114
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite632:
;NMRAnetStateMachine.mpas,494 :: 		MemorySpaceCount := MemorySpaceMaxAddress - MemorySpaceAddress
0x1912	0x52001D  	SUB	W4, [W13], W0
; MemorySpaceMaxAddress end address is: 8 (W4)
0x1914	0x784B80  	MOV.B	W0, [W7]
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite114:
;NMRAnetStateMachine.mpas,495 :: 		end;
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite112:
;NMRAnetStateMachine.mpas,496 :: 		if MemorySpaceCount > 64 then
0x1916	0x784097  	MOV.B	[W7], W1
0x1918	0xB3C400  	MOV.B	#64, W0
0x191A	0xE10C00  	CP.B	W1, W0
0x191C	0x340002  	BRA LE	L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite117
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite633:
;NMRAnetStateMachine.mpas,497 :: 		MemorySpaceCount := 64;       // By the spec the requestor can NOT send a request for more than 64 Bytes
0x191E	0xB3C400  	MOV.B	#64, W0
0x1920	0x784B80  	MOV.B	W0, [W7]
; MemorySpaceCount end address is: 14 (W7)
L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite117:
;NMRAnetStateMachine.mpas,498 :: 		end;
L_end_DecodeMemoryConfigurationReadWrite:
0x1922	0x7805CF  	POP	W11
0x1924	0xFA8000  	ULNK
0x1926	0x060000  	RETURN
; end of NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite
_AppCallback_ConfigurationWrite:
0x1928	0xFA0000  	LNK	#0
;NMRAnetAppCallbacks.mpas,151 :: 		begin
;NMRAnetAppCallbacks.mpas,152 :: 		while _25AAxxxx_Busy(EEPROM_BANK_0) do
; MaxCount start address is: 6 (W3)
0x192A	0x97F98E  	MOV.B	[W14-8], W3
; MaxCount end address is: 6 (W3)
L__AppCallback_ConfigurationWrite6:
; MaxCount start address is: 6 (W3)
0x192C	0x781F8A  	PUSH	W10
0x192E	0xEF2014  	CLR	W10
0x1930	0x07F58A  	RCALL	__25AAxxxx_Busy
0x1932	0x78054F  	POP	W10
0x1934	0xE20000  	CP0	W0
0x1936	0x320006  	BRA Z	L__AppCallback_ConfigurationWrite7
L__AppCallback_ConfigurationWrite183:
;NMRAnetAppCallbacks.mpas,153 :: 		Delay_us(10);
0x1938	0x200407  	MOV	#64, W7
L__AppCallback_ConfigurationWrite10:
0x193A	0xED200E  	DEC	W7
0x193C	0x3AFFFE  	BRA NZ	L__AppCallback_ConfigurationWrite10
0x193E	0x000000  	NOP
0x1940	0x000000  	NOP
0x1942	0x37FFF4  	BRA	L__AppCallback_ConfigurationWrite6
L__AppCallback_ConfigurationWrite7:
;NMRAnetAppCallbacks.mpas,154 :: 		_25AAxxxx_Write(EEPROM_BANK_0, Node^.ConfigurationAddress + StartAddress, MaxCount, DataTarget);
0x1944	0x45017E  	ADD	W10, #30, W2
0x1946	0x460032  	ADD	W12, [W2++], W0
0x1948	0x4E80A2  	ADDC	W13, [W2--], W1
0x194A	0xBE9F8C  	PUSH.D	W12
; MaxCount end address is: 6 (W3)
0x194C	0xBE9F8A  	PUSH.D	W10
0x194E	0x781F8B  	PUSH	W11
0x1950	0xFB8683  	ZE	W3, W13
0x1952	0xEF2014  	CLR	W10
0x1954	0x780580  	MOV	W0, W11
0x1956	0x780601  	MOV	W1, W12
0x1958	0x07F5EB  	RCALL	__25AAxxxx_Write
0x195A	0xB1002F  	SUB	#2, W15
0x195C	0xBE054F  	POP.D	W10
0x195E	0xBE064F  	POP.D	W12
;NMRAnetAppCallbacks.mpas,155 :: 		end;
L_end_AppCallback_ConfigurationWrite:
0x1960	0xFA8000  	ULNK
0x1962	0x060000  	RETURN
; end of _AppCallback_ConfigurationWrite
__25AAxxxx_Write:
0x0530	0xFA0000  	LNK	#0
;_25AAxxxx.mpas,225 :: 		begin
;_25AAxxxx.mpas,226 :: 		SetBank_CS(Bank, 0);
0x0532	0x781F8B  	PUSH	W11
0x0534	0x781F8C  	PUSH	W12
; Buffer start address is: 6 (W3)
0x0536	0x97B9CE  	MOV	[W14-8], W3
0x0538	0x781F8B  	PUSH	W11
0x053A	0x781F8C  	PUSH	W12
0x053C	0xEF2016  	CLR	W11
0x053E	0x07FEDF  	RCALL	_25AAxxxx_SetBank_CS
0x0540	0x78064F  	POP	W12
0x0542	0x7805CF  	POP	W11
;_25AAxxxx.mpas,227 :: 		LocalSPI_Write($06);           //  WREN (Write Enable) Instruction
0x0544	0x781F8A  	PUSH	W10
0x0546	0xB3C06A  	MOV.B	#6, W10
0x0548	0x07FEE1  	RCALL	_25AAxxxx_LocalSPI_Write
0x054A	0x78054F  	POP	W10
;_25AAxxxx.mpas,228 :: 		SetBank_CS(Bank, 1);
0x054C	0x781F8B  	PUSH	W11
0x054E	0x781F8C  	PUSH	W12
0x0550	0x20001B  	MOV	#1, W11
0x0552	0x07FED5  	RCALL	_25AAxxxx_SetBank_CS
;_25AAxxxx.mpas,229 :: 		SetBank_CS(Bank, 0);
0x0554	0xEF2016  	CLR	W11
0x0556	0x07FED3  	RCALL	_25AAxxxx_SetBank_CS
0x0558	0x78064F  	POP	W12
0x055A	0x7805CF  	POP	W11
;_25AAxxxx.mpas,230 :: 		LocalSPI_Write($02);           // Write Instruction
0x055C	0x781F8A  	PUSH	W10
0x055E	0xB3C02A  	MOV.B	#2, W10
0x0560	0x07FED5  	RCALL	_25AAxxxx_LocalSPI_Write
;_25AAxxxx.mpas,231 :: 		WriteAddress(Address);         // Can not check for Write Enabled in the Status here!
0x0562	0x78050B  	MOV	W11, W10
0x0564	0x78058C  	MOV	W12, W11
0x0566	0x07FE4C  	RCALL	_25AAxxxx_WriteAddress
0x0568	0x78054F  	POP	W10
;_25AAxxxx.mpas,232 :: 		i := 0;
; i start address is: 4 (W2)
0x056A	0xEF2004  	CLR	W2
; Buffer end address is: 6 (W3)
; i end address is: 4 (W2)
;_25AAxxxx.mpas,233 :: 		while i < Count do
L___25AAxxxx_Write30:
; i start address is: 4 (W2)
; Buffer start address is: 6 (W3)
0x056C	0xE1100D  	CP	W2, W13
0x056E	0x3D0008  	BRA GE	L___25AAxxxx_Write31
L___25AAxxxx_Write49:
;_25AAxxxx.mpas,235 :: 		LocalSPI_Write(Buffer^);
0x0570	0x781F8A  	PUSH	W10
0x0572	0x784513  	MOV.B	[W3], W10
0x0574	0x07FECB  	RCALL	_25AAxxxx_LocalSPI_Write
0x0576	0x78054F  	POP	W10
;_25AAxxxx.mpas,236 :: 		Inc(Buffer);
; Buffer start address is: 0 (W0)
0x0578	0x418061  	ADD	W3, #1, W0
; Buffer end address is: 6 (W3)
;_25AAxxxx.mpas,237 :: 		Inc(i);
0x057A	0xEC2004  	INC	W2
;_25AAxxxx.mpas,238 :: 		end;
0x057C	0x780180  	MOV	W0, W3
; Buffer end address is: 0 (W0)
; i end address is: 4 (W2)
0x057E	0x37FFF6  	BRA	L___25AAxxxx_Write30
L___25AAxxxx_Write31:
;_25AAxxxx.mpas,239 :: 		SetBank_CS(Bank, 1);
0x0580	0x781F8B  	PUSH	W11
0x0582	0x781F8C  	PUSH	W12
0x0584	0x20001B  	MOV	#1, W11
0x0586	0x07FEBB  	RCALL	_25AAxxxx_SetBank_CS
0x0588	0x78064F  	POP	W12
0x058A	0x7805CF  	POP	W11
;_25AAxxxx.mpas,240 :: 		end;
L_end__25AAxxxx_Write:
0x058C	0x78064F  	POP	W12
0x058E	0x7805CF  	POP	W11
0x0590	0xFA8000  	ULNK
0x0592	0x060000  	RETURN
; end of __25AAxxxx_Write
NMRAnetStateMachine_ProcessOutgoingNode:
0x2E80	0xFA0002  	LNK	#2
;NMRAnetStateMachine.mpas,992 :: 		begin
;NMRAnetStateMachine.mpas,994 :: 		DatagramBuffer := nil;
0x2E82	0x781F8A  	PUSH	W10
0x2E84	0x781F8C  	PUSH	W12
0x2E86	0xEF2000  	CLR	W0
0x2E88	0x980700  	MOV	W0, [W14+0]
;NMRAnetStateMachine.mpas,995 :: 		if NMRAnetUtilities_FindOutgoingDatagram(Node, DatagramBuffer, True) then
0x2E8A	0x470060  	ADD	W14, #0, W0
0x2E8C	0x781F8B  	PUSH	W11
0x2E8E	0x2FFFFC  	MOV	#65535, W12
0x2E90	0x780580  	MOV	W0, W11
0x2E92	0x07F27A  	RCALL	_NMRAnetUtilities_FindOutgoingDatagram
0x2E94	0x7805CF  	POP	W11
0x2E96	0xE20000  	CP0	W0
0x2E98	0x320010  	BRA Z	L_NMRAnetStateMachine_ProcessOutgoingNode454
L_NMRAnetStateMachine_ProcessOutgoingNode752:
;NMRAnetStateMachine.mpas,1000 :: 		if NMRAnetStateMachine_TrySendDatagram(PNMRAnetNode( DatagramBuffer^.SourceNodePtr), CANBuffer, DatagramBuffer) then
0x2E9A	0x200561  	MOV	#86, W1
0x2E9C	0x470060  	ADD	W14, #0, W0
0x2E9E	0x408010  	ADD	W1, [W0], W0
0x2EA0	0x90060E  	MOV	[W14+0], W12
0x2EA2	0x780510  	MOV	[W0], W10
0x2EA4	0x07F28B  	RCALL	_NMRAnetStateMachine_TrySendDatagram
0x2EA6	0xE20000  	CP0	W0
0x2EA8	0x320008  	BRA Z	L_NMRAnetStateMachine_ProcessOutgoingNode457
L_NMRAnetStateMachine_ProcessOutgoingNode753:
;NMRAnetStateMachine.mpas,1003 :: 		DatagramBuffer^.State := (DatagramBuffer^.State and not CBS_PROCESSING) or CBS_TRANSFER_COMPLETE;    // Flag as complete so the caller and unlink and free
0x2EAA	0x90000E  	MOV	[W14+0], W0
0x2EAC	0x784010  	MOV.B	[W0], W0
0x2EAE	0xFB8080  	ZE	W0, W1
0x2EB0	0x200FD0  	MOV	#253, W0
0x2EB2	0x608000  	AND	W1, W0, W0
0x2EB4	0x7000E8  	IOR	W0, #8, W1
0x2EB6	0x90000E  	MOV	[W14+0], W0
0x2EB8	0x784801  	MOV.B	W1, [W0]
;NMRAnetStateMachine.mpas,1004 :: 		end;
L_NMRAnetStateMachine_ProcessOutgoingNode457:
;NMRAnetStateMachine.mpas,1005 :: 		end;
L_NMRAnetStateMachine_ProcessOutgoingNode454:
;NMRAnetStateMachine.mpas,1006 :: 		end;
L_end_ProcessOutgoingNode:
0x2EBA	0x78064F  	POP	W12
0x2EBC	0x78054F  	POP	W10
0x2EBE	0xFA8000  	ULNK
0x2EC0	0x060000  	RETURN
; end of NMRAnetStateMachine_ProcessOutgoingNode
_NMRAnetUtilities_FindOutgoingDatagram:
;NMRAnetUtilities.mpas,884 :: 		begin
;NMRAnetUtilities.mpas,885 :: 		Result := False;
; Result start address is: 6 (W3)
0x1388	0xEF2006  	CLR	W3
;NMRAnetUtilities.mpas,886 :: 		AState := CBS_OUTGOING;
; AState start address is: 4 (W2)
0x138A	0xB3C042  	MOV.B	#4, W2
;NMRAnetUtilities.mpas,887 :: 		if ProcessingOnly then
0x138C	0xE20018  	CP0	W12
0x138E	0x320002  	BRA Z	L__NMRAnetUtilities_FindOutgoingDatagram242
L__NMRAnetUtilities_FindOutgoingDatagram397:
;NMRAnetUtilities.mpas,888 :: 		AState := AState or CBS_PROCESSING;
; AState start address is: 4 (W2)
0x1390	0x714162  	IOR.B	W2, #2, W2
; AState end address is: 4 (W2)
; AState end address is: 4 (W2)
0x1392	0x370000  	BRA	L__NMRAnetUtilities_FindOutgoingDatagram202
L__NMRAnetUtilities_FindOutgoingDatagram242:
;NMRAnetUtilities.mpas,887 :: 		if ProcessingOnly then
;NMRAnetUtilities.mpas,888 :: 		AState := AState or CBS_PROCESSING;
L__NMRAnetUtilities_FindOutgoingDatagram202:
;NMRAnetUtilities.mpas,890 :: 		Temp := Node^.DatagramBuffers;
; AState start address is: 4 (W2)
0x1394	0x45007C  	ADD	W10, #28, W0
; Temp start address is: 8 (W4)
0x1396	0x780210  	MOV	[W0], W4
; Result end address is: 6 (W3)
; Temp end address is: 8 (W4)
;NMRAnetUtilities.mpas,891 :: 		while Temp <> nil do
L__NMRAnetUtilities_FindOutgoingDatagram205:
; Temp start address is: 8 (W4)
; AState start address is: 4 (W2)
; AState end address is: 4 (W2)
; Result start address is: 6 (W3)
0x1398	0xE12060  	CP	W4, #0
0x139A	0x32000D  	BRA Z	L__NMRAnetUtilities_FindOutgoingDatagram243
L__NMRAnetUtilities_FindOutgoingDatagram398:
; AState end address is: 4 (W2)
;NMRAnetUtilities.mpas,893 :: 		if Temp^.State and AState = AState then
; AState start address is: 4 (W2)
0x139C	0x784014  	MOV.B	[W4], W0
0x139E	0xFB8080  	ZE	W0, W1
0x13A0	0xFB8002  	ZE	W2, W0
0x13A2	0x608080  	AND	W1, W0, W1
0x13A4	0xFB8002  	ZE	W2, W0
0x13A6	0xE10800  	CP	W1, W0
0x13A8	0x3A0003  	BRA NZ	L__NMRAnetUtilities_FindOutgoingDatagram210
L__NMRAnetUtilities_FindOutgoingDatagram399:
; AState end address is: 4 (W2)
; Result end address is: 6 (W3)
;NMRAnetUtilities.mpas,895 :: 		Buffer := Temp;
0x13AA	0x780D84  	MOV	W4, [W11]
; Temp end address is: 8 (W4)
;NMRAnetUtilities.mpas,896 :: 		Result := True;
; Result start address is: 2 (W1)
0x13AC	0x2FFFF1  	MOV	#65535, W1
;NMRAnetUtilities.mpas,897 :: 		Break
; Result end address is: 2 (W1)
0x13AE	0x370004  	BRA	L__NMRAnetUtilities_FindOutgoingDatagram206
;NMRAnetUtilities.mpas,898 :: 		end;
L__NMRAnetUtilities_FindOutgoingDatagram210:
;NMRAnetUtilities.mpas,899 :: 		Temp := Temp^.Next
; Temp start address is: 8 (W4)
; Result start address is: 6 (W3)
; AState start address is: 4 (W2)
0x13B0	0x420064  	ADD	W4, #4, W0
0x13B2	0x780210  	MOV	[W0], W4
;NMRAnetUtilities.mpas,900 :: 		end;
; AState end address is: 4 (W2)
; Result end address is: 6 (W3)
; Temp end address is: 8 (W4)
0x13B4	0x37FFF1  	BRA	L__NMRAnetUtilities_FindOutgoingDatagram205
L__NMRAnetUtilities_FindOutgoingDatagram243:
;NMRAnetUtilities.mpas,891 :: 		while Temp <> nil do
0x13B6	0x780083  	MOV	W3, W1
;NMRAnetUtilities.mpas,900 :: 		end;
L__NMRAnetUtilities_FindOutgoingDatagram206:
;NMRAnetUtilities.mpas,901 :: 		end;
; Result start address is: 2 (W1)
0x13B8	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetUtilities_FindOutgoingDatagram:
0x13BA	0x060000  	RETURN
; end of _NMRAnetUtilities_FindOutgoingDatagram
_NMRAnetStateMachine_TrySendDatagram:
0x13BC	0xFA000A  	LNK	#10
;NMRAnetStateMachine.mpas,202 :: 		begin
;NMRAnetStateMachine.mpas,203 :: 		Result := False;
0x13BE	0x781F8D  	PUSH	W13
0x13C0	0xEF2000  	CLR	W0
0x13C2	0x980700  	MOV	W0, [W14+0]
;NMRAnetStateMachine.mpas,204 :: 		if NMRABusBufferAvailable then
0x13C4	0x0713A1  	RCALL	_NMRABusBufferAvailable
0x13C6	0xE20000  	CP0	W0
0x13C8	0x320069  	BRA Z	L__NMRAnetStateMachine_TrySendDatagram12
L__NMRAnetStateMachine_TrySendDatagram585:
;NMRAnetStateMachine.mpas,210 :: 		if Datagram^.iByteCount <= 8 then                                           // Single Frame Datagram
0x13CA	0x46006A  	ADD	W12, #10, W0
0x13CC	0x784010  	MOV.B	[W0], W0
0x13CE	0xE10468  	CP.B	W0, #8
0x13D0	0x3E0025  	BRA GTU	L__NMRAnetStateMachine_TrySendDatagram15
L__NMRAnetStateMachine_TrySendDatagram586:
;NMRAnetStateMachine.mpas,213 :: 		for i := 0 to Datagram^.iByteCount - 1 do
; i start address is: 6 (W3)
0x13D2	0xEF2006  	CLR	W3
; i end address is: 6 (W3)
L__NMRAnetStateMachine_TrySendDatagram17:
; i start address is: 6 (W3)
0x13D4	0x46006A  	ADD	W12, #10, W0
0x13D6	0xFB8010  	ZE	[W0], W0
0x13D8	0x500161  	SUB	W0, #1, W2
0x13DA	0xE11802  	CP	W3, W2
0x13DC	0x3C000A  	BRA GT	L__NMRAnetStateMachine_TrySendDatagram21
L__NMRAnetStateMachine_TrySendDatagram587:
;NMRAnetStateMachine.mpas,214 :: 		DataBytes[i] := Datagram^.DataBytes[i];
0x13DE	0x470062  	ADD	W14, #2, W0
0x13E0	0x400083  	ADD	W0, W3, W1
0x13E2	0x46006B  	ADD	W12, #11, W0
0x13E4	0x400003  	ADD	W0, W3, W0
0x13E6	0x784890  	MOV.B	[W0], [W1]
0x13E8	0xE11802  	CP	W3, W2
0x13EA	0x320003  	BRA Z	L__NMRAnetStateMachine_TrySendDatagram21
L__NMRAnetStateMachine_TrySendDatagram588:
; i start address is: 0 (W0)
0x13EC	0x418061  	ADD	W3, #1, W0
; i end address is: 6 (W3)
0x13EE	0x780180  	MOV	W0, W3
; i end address is: 0 (W0)
0x13F0	0x37FFF1  	BRA	L__NMRAnetStateMachine_TrySendDatagram17
L__NMRAnetStateMachine_TrySendDatagram21:
;NMRAnetStateMachine.mpas,215 :: 		TransmitNMRABusLayerMsg(Node, CANBuffer, MTI_FRAME_TYPE_DATAGRAM_ONLY_FRAME, Datagram^.Alias, Datagram^.iByteCount, @DataBytes, True);
0x13F2	0x4601E2  	ADD	W12, #2, W3
0x13F4	0x46006A  	ADD	W12, #10, W0
0x13F6	0x470162  	ADD	W14, #2, W2
0x13F8	0x784090  	MOV.B	[W0], W1
0x13FA	0x781F8C  	PUSH	W12
0x13FC	0x781F8B  	PUSH	W11
0x13FE	0x20000C  	MOV	#0, W12
0x1400	0x20A00D  	MOV	#2560, W13
0x1402	0x2FFFF0  	MOV	#65535, W0
0x1404	0x781F80  	PUSH	W0
0x1406	0x781F82  	PUSH	W2
0x1408	0xFB8001  	ZE	W1, W0
0x140A	0x781F80  	PUSH	W0
0x140C	0x781F93  	PUSH	[W3]
0x140E	0x071241  	RCALL	_TransmitNMRABusLayerMsg
0x1410	0xB1008F  	SUB	#8, W15
0x1412	0x7805CF  	POP	W11
0x1414	0x78064F  	POP	W12
;NMRAnetStateMachine.mpas,216 :: 		Result := True;
0x1416	0x2FFFF0  	MOV	#65535, W0
0x1418	0x980700  	MOV	W0, [W14+0]
;NMRAnetStateMachine.mpas,217 :: 		end else
0x141A	0x370040  	BRA	L__NMRAnetStateMachine_TrySendDatagram16
L__NMRAnetStateMachine_TrySendDatagram15:
;NMRAnetStateMachine.mpas,220 :: 		if Datagram^.Tag = 0 then
0x141C	0x460068  	ADD	W12, #8, W0
0x141E	0x780010  	MOV	[W0], W0
0x1420	0xE10060  	CP	W0, #0
0x1422	0x3A0003  	BRA NZ	L__NMRAnetStateMachine_TrySendDatagram23
L__NMRAnetStateMachine_TrySendDatagram589:
;NMRAnetStateMachine.mpas,222 :: 		MTI := MTI_FRAME_TYPE_DATAGRAM_FRAME_START  {$IFDEF TRACE_DATAGRAM_SEND};UART1_Write_Text('MTI_DATAGRAM_FRAME_START_SEND'+LF);{$ENDIF}
; MTI start address is: 8 (W4)
0x1424	0x200004  	MOV	#0, W4
0x1426	0x20B005  	MOV	#2816, W5
;NMRAnetStateMachine.mpas,223 :: 		end
; MTI end address is: 8 (W4)
0x1428	0x37000E  	BRA	L__NMRAnetStateMachine_TrySendDatagram24
;NMRAnetStateMachine.mpas,224 :: 		else
L__NMRAnetStateMachine_TrySendDatagram23:
;NMRAnetStateMachine.mpas,225 :: 		if Datagram^.iByteCount - Datagram^.Tag > 8 then
0x142A	0x46006A  	ADD	W12, #10, W0
0x142C	0x4600E8  	ADD	W12, #8, W1
0x142E	0x784010  	MOV.B	[W0], W0
0x1430	0xFB8000  	ZE	W0, W0
0x1432	0x500011  	SUB	W0, [W1], W0
0x1434	0xE10068  	CP	W0, #8
0x1436	0x360003  	BRA LEU	L__NMRAnetStateMachine_TrySendDatagram26
L__NMRAnetStateMachine_TrySendDatagram590:
;NMRAnetStateMachine.mpas,227 :: 		MTI := MTI_FRAME_TYPE_DATAGRAM_FRAME  {$IFDEF TRACE_DATAGRAM_SEND};UART1_Write_Text('MTI_DATAGRAM_FRAME_SEND'+LF);{$ENDIF}
; MTI start address is: 8 (W4)
0x1438	0x200004  	MOV	#0, W4
0x143A	0x20C005  	MOV	#3072, W5
;NMRAnetStateMachine.mpas,228 :: 		end
; MTI end address is: 8 (W4)
0x143C	0x370004  	BRA	L__NMRAnetStateMachine_TrySendDatagram27
;NMRAnetStateMachine.mpas,229 :: 		else begin
L__NMRAnetStateMachine_TrySendDatagram26:
;NMRAnetStateMachine.mpas,230 :: 		MTI := MTI_FRAME_TYPE_DATAGRAM_FRAME_END; {$IFDEF TRACE_DATAGRAM_SEND}UART1_Write_Text('MTI_DATAGRAM_FRAME_END_SEND'+LF);{$ENDIF}
; MTI start address is: 8 (W4)
0x143E	0x200004  	MOV	#0, W4
0x1440	0x20D005  	MOV	#3328, W5
;NMRAnetStateMachine.mpas,231 :: 		Result := True
0x1442	0x2FFFF0  	MOV	#65535, W0
0x1444	0x980700  	MOV	W0, [W14+0]
; MTI end address is: 8 (W4)
;NMRAnetStateMachine.mpas,232 :: 		end;
L__NMRAnetStateMachine_TrySendDatagram27:
; MTI start address is: 8 (W4)
; MTI end address is: 8 (W4)
L__NMRAnetStateMachine_TrySendDatagram24:
;NMRAnetStateMachine.mpas,234 :: 		i := 0;
; MTI start address is: 8 (W4)
; i start address is: 18 (W9)
0x1446	0xEF2012  	CLR	W9
; i end address is: 18 (W9)
; MTI end address is: 8 (W4)
;NMRAnetStateMachine.mpas,235 :: 		while (Datagram^.Tag < Datagram^.iByteCount) and (i < 8) do               // Copy 8 Data Byte, or as many that are left to the buffer
L__NMRAnetStateMachine_TrySendDatagram29:
; i start address is: 18 (W9)
; MTI start address is: 8 (W4)
0x1448	0x4600E8  	ADD	W12, #8, W1
0x144A	0x46006A  	ADD	W12, #10, W0
0x144C	0x784010  	MOV.B	[W0], W0
0x144E	0x780091  	MOV	[W1], W1
0x1450	0xFB8000  	ZE	W0, W0
0x1452	0xE10800  	CP	W1, W0
0x1454	0xEF2002  	CLR	W1
0x1456	0x310001  	BRA GEU	L__NMRAnetStateMachine_TrySendDatagram591
0x1458	0xEEA002  	COM	W1
L__NMRAnetStateMachine_TrySendDatagram591:
0x145A	0xE14868  	CP	W9, #8
0x145C	0xEF2000  	CLR	W0
0x145E	0x3D0001  	BRA GE	L__NMRAnetStateMachine_TrySendDatagram592
0x1460	0xEEA000  	COM	W0
L__NMRAnetStateMachine_TrySendDatagram592:
0x1462	0x608000  	AND	W1, W0, W0
0x1464	0x32000D  	BRA Z	L__NMRAnetStateMachine_TrySendDatagram30
L__NMRAnetStateMachine_TrySendDatagram593:
;NMRAnetStateMachine.mpas,237 :: 		DataBytes[i] := Datagram^.DataBytes[Datagram^.Tag];
0x1466	0x470062  	ADD	W14, #2, W0
0x1468	0x400109  	ADD	W0, W9, W2
0x146A	0x4600EB  	ADD	W12, #11, W1
0x146C	0x460068  	ADD	W12, #8, W0
0x146E	0x408010  	ADD	W1, [W0], W0
0x1470	0x784910  	MOV.B	[W0], [W2]
;NMRAnetStateMachine.mpas,238 :: 		Inc(i);
; i start address is: 4 (W2)
0x1472	0x448161  	ADD	W9, #1, W2
; i end address is: 18 (W9)
;NMRAnetStateMachine.mpas,239 :: 		Inc(Datagram^.Tag);
0x1474	0x4600E8  	ADD	W12, #8, W1
0x1476	0x780011  	MOV	[W1], W0
0x1478	0xEC2000  	INC	W0
0x147A	0x780880  	MOV	W0, [W1]
;NMRAnetStateMachine.mpas,240 :: 		end;
; i end address is: 4 (W2)
0x147C	0x780482  	MOV	W2, W9
0x147E	0x37FFE4  	BRA	L__NMRAnetStateMachine_TrySendDatagram29
L__NMRAnetStateMachine_TrySendDatagram30:
;NMRAnetStateMachine.mpas,242 :: 		TransmitNMRABusLayerMsg(Node, CANBuffer, MTI, Datagram^.Alias, i, @DataBytes, True);
; i start address is: 18 (W9)
0x1480	0x460162  	ADD	W12, #2, W2
0x1482	0x4700E2  	ADD	W14, #2, W1
0x1484	0x781F8C  	PUSH	W12
; MTI end address is: 8 (W4)
0x1486	0x781F8B  	PUSH	W11
0x1488	0xBE0604  	MOV.D	W4, W12
0x148A	0x2FFFF0  	MOV	#65535, W0
0x148C	0x781F80  	PUSH	W0
0x148E	0x781F81  	PUSH	W1
0x1490	0x781F89  	PUSH	W9
; i end address is: 18 (W9)
0x1492	0x781F92  	PUSH	[W2]
0x1494	0x0711FE  	RCALL	_TransmitNMRABusLayerMsg
0x1496	0xB1008F  	SUB	#8, W15
0x1498	0x7805CF  	POP	W11
0x149A	0x78064F  	POP	W12
;NMRAnetStateMachine.mpas,244 :: 		end;
L__NMRAnetStateMachine_TrySendDatagram16:
;NMRAnetStateMachine.mpas,245 :: 		end
L__NMRAnetStateMachine_TrySendDatagram12:
;NMRAnetStateMachine.mpas,246 :: 		end;
0x149C	0x90000E  	MOV	[W14+0], W0
L_end_NMRAnetStateMachine_TrySendDatagram:
0x149E	0x7806CF  	POP	W13
0x14A0	0xFA8000  	ULNK
0x14A2	0x060000  	RETURN
; end of _NMRAnetStateMachine_TrySendDatagram
NMRAnetStateMachine_ProcessAbandonBuffers:
;NMRAnetStateMachine.mpas,1011 :: 		begin
;NMRAnetStateMachine.mpas,1012 :: 		DatagramBuffer := Node^.DatagramBuffers;
0x2D2A	0x781F8A  	PUSH	W10
0x2D2C	0x781F8B  	PUSH	W11
0x2D2E	0x45007C  	ADD	W10, #28, W0
0x2D30	0x780010  	MOV	[W0], W0
; DatagramBuffer start address is: 8 (W4)
0x2D32	0x780200  	MOV	W0, W4
;NMRAnetStateMachine.mpas,1013 :: 		if DatagramBuffer <> nil then
0x2D34	0xE10060  	CP	W0, #0
0x2D36	0x320009  	BRA Z	L_NMRAnetStateMachine_ProcessAbandonBuffers461
L_NMRAnetStateMachine_ProcessAbandonBuffers755:
;NMRAnetStateMachine.mpas,1015 :: 		if DatagramBuffer^.iWatchdog >= DATAGRAM_WATCHDOG_MAX then
0x2D38	0x200580  	MOV	#88, W0
0x2D3A	0x420000  	ADD	W4, W0, W0
0x2D3C	0x780010  	MOV	[W0], W0
0x2D3E	0xE1007E  	CP	W0, #30
0x2D40	0x390004  	BRA LTU	L_NMRAnetStateMachine_ProcessAbandonBuffers464
L_NMRAnetStateMachine_ProcessAbandonBuffers756:
;NMRAnetStateMachine.mpas,1017 :: 		NMRAnetUtilities_DatagramBufferUnLink(Node, DatagramBuffer);
0x2D42	0x780584  	MOV	W4, W11
0x2D44	0x07F9A6  	RCALL	_NMRAnetUtilities_DatagramBufferUnLink
;NMRAnetStateMachine.mpas,1018 :: 		NMRAnetBufferPools_ReleaseDatagramBuffer(DatagramBuffer);
0x2D46	0x780504  	MOV	W4, W10
; DatagramBuffer end address is: 8 (W4)
0x2D48	0x07F9CA  	RCALL	_NMRAnetBufferPools_ReleaseDatagramBuffer
;NMRAnetStateMachine.mpas,1019 :: 		end
L_NMRAnetStateMachine_ProcessAbandonBuffers464:
;NMRAnetStateMachine.mpas,1020 :: 		end;
L_NMRAnetStateMachine_ProcessAbandonBuffers461:
;NMRAnetStateMachine.mpas,1021 :: 		end;
L_end_ProcessAbandonBuffers:
0x2D4A	0x7805CF  	POP	W11
0x2D4C	0x78054F  	POP	W10
0x2D4E	0x060000  	RETURN
; end of NMRAnetStateMachine_ProcessAbandonBuffers
NMRAnetStateMachine_ReleaseBuffers:
;NMRAnetStateMachine.mpas,260 :: 		begin
;NMRAnetStateMachine.mpas,261 :: 		while Node^.BaseBuffers <> nil do
0x2D50	0x781F8B  	PUSH	W11
L_NMRAnetStateMachine_ReleaseBuffers35:
0x2D52	0x45007A  	ADD	W10, #26, W0
0x2D54	0x780010  	MOV	[W0], W0
0x2D56	0xE10060  	CP	W0, #0
0x2D58	0x320009  	BRA Z	L_NMRAnetStateMachine_ReleaseBuffers36
L_NMRAnetStateMachine_ReleaseBuffers595:
;NMRAnetStateMachine.mpas,263 :: 		BaseTemp := Node^.BaseBuffers;
0x2D5A	0x45007A  	ADD	W10, #26, W0
; BaseTemp start address is: 8 (W4)
0x2D5C	0x780210  	MOV	[W0], W4
;NMRAnetStateMachine.mpas,264 :: 		NMRAnetUtilities_BaseBufferUnLink(Node, BaseTemp);
0x2D5E	0x780590  	MOV	[W0], W11
0x2D60	0x07EE1A  	RCALL	_NMRAnetUtilities_BaseBufferUnLink
;NMRAnetStateMachine.mpas,265 :: 		NMRAnetBufferPools_ReleaseBaseBuffer(BaseTemp);
0x2D62	0x781F8A  	PUSH	W10
; BaseTemp end address is: 8 (W4)
0x2D64	0x780504  	MOV	W4, W10
0x2D66	0x07EE5D  	RCALL	_NMRAnetBufferPools_ReleaseBaseBuffer
0x2D68	0x78054F  	POP	W10
;NMRAnetStateMachine.mpas,266 :: 		end;
0x2D6A	0x37FFF3  	BRA	L_NMRAnetStateMachine_ReleaseBuffers35
L_NMRAnetStateMachine_ReleaseBuffers36:
;NMRAnetStateMachine.mpas,267 :: 		while Node^.DatagramBuffers <> nil do
L_NMRAnetStateMachine_ReleaseBuffers40:
0x2D6C	0x45007C  	ADD	W10, #28, W0
0x2D6E	0x780010  	MOV	[W0], W0
0x2D70	0xE10060  	CP	W0, #0
0x2D72	0x320009  	BRA Z	L_NMRAnetStateMachine_ReleaseBuffers41
L_NMRAnetStateMachine_ReleaseBuffers596:
;NMRAnetStateMachine.mpas,269 :: 		DatagramTemp := Node^.DatagramBuffers;
0x2D74	0x45007C  	ADD	W10, #28, W0
; DatagramTemp start address is: 8 (W4)
0x2D76	0x780210  	MOV	[W0], W4
;NMRAnetStateMachine.mpas,270 :: 		NMRAnetUtilities_DatagramBufferUnLink(Node, DatagramTemp);
0x2D78	0x780590  	MOV	[W0], W11
0x2D7A	0x07F98B  	RCALL	_NMRAnetUtilities_DatagramBufferUnLink
;NMRAnetStateMachine.mpas,271 :: 		NMRAnetBufferPools_ReleaseDatagramBuffer(DatagramTemp);
0x2D7C	0x781F8A  	PUSH	W10
; DatagramTemp end address is: 8 (W4)
0x2D7E	0x780504  	MOV	W4, W10
0x2D80	0x07F9AE  	RCALL	_NMRAnetBufferPools_ReleaseDatagramBuffer
0x2D82	0x78054F  	POP	W10
;NMRAnetStateMachine.mpas,272 :: 		end;
0x2D84	0x37FFF3  	BRA	L_NMRAnetStateMachine_ReleaseBuffers40
L_NMRAnetStateMachine_ReleaseBuffers41:
;NMRAnetStateMachine.mpas,273 :: 		end;
L_end_ReleaseBuffers:
0x2D86	0x7805CF  	POP	W11
0x2D88	0x060000  	RETURN
; end of NMRAnetStateMachine_ReleaseBuffers
_NMRAnetNode_ClearStateFlag:
;NMRAnetNode.mpas,464 :: 		begin
;NMRAnetNode.mpas,465 :: 		Node^.State := Node^.State and not Flag;
0x2D92	0x78400B  	MOV.B	W11, W0
0x2D94	0xEAC100  	COM.B	W0, W2
0x2D96	0x78401A  	MOV.B	[W10], W0
0x2D98	0xFB8080  	ZE	W0, W1
0x2D9A	0xFB8002  	ZE	W2, W0
0x2D9C	0x608000  	AND	W1, W0, W0
0x2D9E	0x784D00  	MOV.B	W0, [W10]
;NMRAnetNode.mpas,466 :: 		end;
L_end_NMRAnetNode_ClearStateFlag:
0x2DA0	0x060000  	RETURN
; end of _NMRAnetNode_ClearStateFlag
_NMRAnetNode_ClearMsgFlags:
;NMRAnetNode.mpas,520 :: 		begin
;NMRAnetNode.mpas,521 :: 		Node^.MsgFlags := 0;
0x2D8A	0x4500F6  	ADD	W10, #22, W1
0x2D8C	0xEF2000  	CLR	W0
0x2D8E	0x784880  	MOV.B	W0, [W1]
;NMRAnetNode.mpas,522 :: 		end;
L_end_NMRAnetNode_ClearMsgFlags:
0x2D90	0x060000  	RETURN
; end of _NMRAnetNode_ClearMsgFlags
_FloatToStr:
0x4A08	0xFA0020  	LNK	#32
;__Lib_Conversions.mpas,537 :: 		
;__Lib_Conversions.mpas,538 :: 		
0x4A0A	0xEF2000  	CLR	W0
0x4A0C	0x980F50  	MOV	W0, [W14+26]
;__Lib_Conversions.mpas,540 :: 		
0x4A0E	0x781F8C  	PUSH	W12
0x4A10	0xBE9F8A  	PUSH.D	W10
0x4A12	0xBE000A  	MOV.D	W10, W0
0x4A14	0x07F3FF  	RCALL	__Float2Longint
0x4A16	0xBE054F  	POP.D	W10
0x4A18	0x78064F  	POP	W12
; tmpli start address is: 4 (W2)
0x4A1A	0xBE0100  	MOV.D	W0, W2
;__Lib_Conversions.mpas,541 :: 		
0x4A1C	0xBE9F82  	PUSH.D	W2
0x4A1E	0x781F8C  	PUSH	W12
0x4A20	0xBE9F8A  	PUSH.D	W10
0x4A22	0xEF2004  	CLR	W2
0x4A24	0xEF2006  	CLR	W3
0x4A26	0xBE000A  	MOV.D	W10, W0
0x4A28	0x07F2EC  	RCALL	__Compare_Le_Fp
0x4A2A	0xE00000  	CP0	W0
0x4A2C	0xEF2000  	CLR	W0
0x4A2E	0x3D0001  	BRA GE	L__FloatToStr259
0x4A30	0xEEA000  	COM	W0
L__FloatToStr259:
0x4A32	0xBE054F  	POP.D	W10
0x4A34	0x78064F  	POP	W12
0x4A36	0xBE014F  	POP.D	W2
0x4A38	0xE20000  	CP0	W0
0x4A3A	0x320002  	BRA Z	L__FloatToStr157
L__FloatToStr260:
;__Lib_Conversions.mpas,544 :: 		
0x4A3C	0x2FFFF0  	MOV	#65535, W0
0x4A3E	0x980F50  	MOV	W0, [W14+26]
;__Lib_Conversions.mpas,545 :: 		
L__FloatToStr157:
;__Lib_Conversions.mpas,547 :: 		
0x4A40	0x470062  	ADD	W14, #2, W0
0x4A42	0xBE9F82  	PUSH.D	W2
0x4A44	0x781F8C  	PUSH	W12
0x4A46	0xBE9F8A  	PUSH.D	W10
0x4A48	0x780600  	MOV	W0, W12
0x4A4A	0xBE0502  	MOV.D	W2, W10
0x4A4C	0x07F271  	RCALL	_LongIntToStr
0x4A4E	0xBE054F  	POP.D	W10
0x4A50	0x78064F  	POP	W12
0x4A52	0xBE014F  	POP.D	W2
;__Lib_Conversions.mpas,549 :: 		
0x4A54	0x781F8C  	PUSH	W12
; tmpli end address is: 4 (W2)
0x4A56	0xBE9F8A  	PUSH.D	W10
0x4A58	0xBE0002  	MOV.D	W2, W0
0x4A5A	0xEB8100  	SETM	W2
0x4A5C	0x07F312  	RCALL	__Long2Float
0x4A5E	0xBE054F  	POP.D	W10
;__Lib_Conversions.mpas,550 :: 		
0x4A60	0xBE9F8A  	PUSH.D	W10
0x4A62	0xBE0100  	MOV.D	W0, W2
0x4A64	0xBE000A  	MOV.D	W10, W0
0x4A66	0x07EB45  	RCALL	__Sub_FP
;__Lib_Conversions.mpas,551 :: 		
0x4A68	0x250002  	MOV	#20480, W2
0x4A6A	0x247C33  	MOV	#18371, W3
0x4A6C	0x07E86D  	RCALL	__Mul_FP
;__Lib_Conversions.mpas,552 :: 		
0x4A6E	0x07F3D2  	RCALL	__Float2Longint
0x4A70	0xBE054F  	POP.D	W10
0x4A72	0x78064F  	POP	W12
; tmpli start address is: 4 (W2)
0x4A74	0xBE0100  	MOV.D	W0, W2
;__Lib_Conversions.mpas,553 :: 		
0x4A76	0xE10060  	CP	W0, #0
0x4A78	0xE18860  	CPB	W1, #0
0x4A7A	0x3D0005  	BRA GE	L__FloatToStr196
L__FloatToStr261:
; tmpli start address is: 0 (W0)
0x4A7C	0x110060  	SUBR	W2, #0, W0
0x4A7E	0x1980E0  	SUBBR	W3, #0, W1
; tmpli end address is: 4 (W2)
0x4A80	0x780101  	MOV	W1, W2
0x4A82	0x780080  	MOV	W0, W1
; tmpli end address is: 0 (W0)
0x4A84	0x370002  	BRA	L__FloatToStr160
L__FloatToStr196:
0x4A86	0x780082  	MOV	W2, W1
0x4A88	0x780103  	MOV	W3, W2
L__FloatToStr160:
;__Lib_Conversions.mpas,554 :: 		
; tmpli start address is: 2 (W1)
0x4A8A	0x47006E  	ADD	W14, #14, W0
0x4A8C	0x781F8C  	PUSH	W12
0x4A8E	0xBE9F8A  	PUSH.D	W10
0x4A90	0x780600  	MOV	W0, W12
0x4A92	0x780501  	MOV	W1, W10
0x4A94	0x780582  	MOV	W2, W11
; tmpli end address is: 2 (W1)
0x4A96	0x07F24C  	RCALL	_LongIntToStr
0x4A98	0xBE054F  	POP.D	W10
0x4A9A	0x78064F  	POP	W12
;__Lib_Conversions.mpas,556 :: 		
; i start address is: 4 (W2)
0x4A9C	0xEF2004  	CLR	W2
;__Lib_Conversions.mpas,557 :: 		
0x4A9E	0xEF2000  	CLR	W0
0x4AA0	0x980700  	MOV	W0, [W14+0]
;__Lib_Conversions.mpas,559 :: 		
0x4AA2	0x78008C  	MOV	W12, W1
0x4AA4	0xB3C200  	MOV.B	#32, W0
0x4AA6	0x785880  	MOV.B	W0, [W1++]
0x4AA8	0xB3C200  	MOV.B	#32, W0
0x4AAA	0x785880  	MOV.B	W0, [W1++]
0x4AAC	0xB3C200  	MOV.B	#32, W0
0x4AAE	0x785880  	MOV.B	W0, [W1++]
0x4AB0	0xB3C200  	MOV.B	#32, W0
0x4AB2	0x785880  	MOV.B	W0, [W1++]
0x4AB4	0xB3C200  	MOV.B	#32, W0
0x4AB6	0x785880  	MOV.B	W0, [W1++]
0x4AB8	0xB3C200  	MOV.B	#32, W0
0x4ABA	0x785880  	MOV.B	W0, [W1++]
0x4ABC	0xB3C200  	MOV.B	#32, W0
0x4ABE	0x785880  	MOV.B	W0, [W1++]
0x4AC0	0xB3C200  	MOV.B	#32, W0
0x4AC2	0x785880  	MOV.B	W0, [W1++]
0x4AC4	0xB3C200  	MOV.B	#32, W0
0x4AC6	0x785880  	MOV.B	W0, [W1++]
0x4AC8	0xB3C200  	MOV.B	#32, W0
0x4ACA	0x785880  	MOV.B	W0, [W1++]
0x4ACC	0xB3C300  	MOV.B	#48, W0
0x4ACE	0x785880  	MOV.B	W0, [W1++]
0x4AD0	0xEF2000  	CLR	W0
0x4AD2	0x785880  	MOV.B	W0, [W1++]
;__Lib_Conversions.mpas,561 :: 		
0x4AD4	0x781F82  	PUSH	W2
0x4AD6	0x781F8C  	PUSH	W12
0x4AD8	0xBE9F8A  	PUSH.D	W10
0x4ADA	0xBE000A  	MOV.D	W10, W0
0x4ADC	0x07F39B  	RCALL	__Float2Longint
0x4ADE	0xBE054F  	POP.D	W10
;__Lib_Conversions.mpas,562 :: 		
0x4AE0	0xE10060  	CP	W0, #0
0x4AE2	0xE18860  	CPB	W1, #0
0x4AE4	0xEF2000  	CLR	W0
0x4AE6	0x3A0001  	BRA NZ	L__FloatToStr262
0x4AE8	0xEEA000  	COM	W0
L__FloatToStr262:
0x4AEA	0x980F70  	MOV	W0, [W14+30]
0x4AEC	0xEF2004  	CLR	W2
0x4AEE	0xEF2006  	CLR	W3
0x4AF0	0xBE000A  	MOV.D	W10, W0
0x4AF2	0x07F287  	RCALL	__Compare_Le_Fp
0x4AF4	0xE00000  	CP0	W0
0x4AF6	0xEF2000  	CLR	W0
0x4AF8	0x3D0001  	BRA GE	L__FloatToStr263
0x4AFA	0xEEA000  	COM	W0
L__FloatToStr263:
0x4AFC	0x78064F  	POP	W12
0x4AFE	0x78014F  	POP	W2
0x4B00	0x9008FE  	MOV	[W14+30], W1
0x4B02	0x608000  	AND	W1, W0, W0
0x4B04	0xE20000  	CP0	W0
0x4B06	0x320005  	BRA Z	L__FloatToStr197
L__FloatToStr264:
; i end address is: 4 (W2)
;__Lib_Conversions.mpas,564 :: 		
0x4B08	0xB3C2D0  	MOV.B	#45, W0
0x4B0A	0x784E00  	MOV.B	W0, [W12]
;__Lib_Conversions.mpas,565 :: 		
; i start address is: 2 (W1)
0x4B0C	0x200011  	MOV	#1, W1
; i end address is: 2 (W1)
0x4B0E	0x780101  	MOV	W1, W2
;__Lib_Conversions.mpas,566 :: 		
0x4B10	0x370000  	BRA	L__FloatToStr163
L__FloatToStr197:
;__Lib_Conversions.mpas,562 :: 		
;__Lib_Conversions.mpas,566 :: 		
L__FloatToStr163:
;__Lib_Conversions.mpas,579 :: 		
; i start address is: 4 (W2)
; ch start address is: 2 (W1)
0x4B12	0x9040AE  	MOV.B	[W14+2], W1
; i end address is: 4 (W2)
; ch end address is: 2 (W1)
;__Lib_Conversions.mpas,580 :: 		
L__FloatToStr166:
; ch start address is: 2 (W1)
; i start address is: 4 (W2)
0x4B14	0xB3C200  	MOV.B	#32, W0
0x4B16	0xE10C00  	CP.B	W1, W0
0x4B18	0x3A0007  	BRA NZ	L__FloatToStr167
L__FloatToStr265:
; ch end address is: 2 (W1)
;__Lib_Conversions.mpas,582 :: 		
0x4B1A	0x90000E  	MOV	[W14+0], W0
0x4B1C	0x4000E1  	ADD	W0, #1, W1
0x4B1E	0x980701  	MOV	W1, [W14+0]
;__Lib_Conversions.mpas,583 :: 		
0x4B20	0x470062  	ADD	W14, #2, W0
0x4B22	0x400001  	ADD	W0, W1, W0
; ch start address is: 2 (W1)
0x4B24	0x784090  	MOV.B	[W0], W1
;__Lib_Conversions.mpas,584 :: 		
0x4B26	0x37FFF6  	BRA	L__FloatToStr166
L__FloatToStr167:
;__Lib_Conversions.mpas,586 :: 		
; ch end address is: 2 (W1)
0x4B28	0x780182  	MOV	W2, W3
L__FloatToStr171:
; i end address is: 4 (W2)
; i start address is: 6 (W3)
; ch start address is: 2 (W1)
0x4B2A	0xE10C60  	CP.B	W1, #0
0x4B2C	0x32000C  	BRA Z	L__FloatToStr172
L__FloatToStr266:
;__Lib_Conversions.mpas,588 :: 		
0x4B2E	0x460003  	ADD	W12, W3, W0
0x4B30	0x784801  	MOV.B	W1, [W0]
; ch end address is: 2 (W1)
;__Lib_Conversions.mpas,589 :: 		
0x4B32	0x90000E  	MOV	[W14+0], W0
0x4B34	0x4000E1  	ADD	W0, #1, W1
0x4B36	0x980701  	MOV	W1, [W14+0]
;__Lib_Conversions.mpas,590 :: 		
; i start address is: 4 (W2)
0x4B38	0x418161  	ADD	W3, #1, W2
; i end address is: 6 (W3)
;__Lib_Conversions.mpas,591 :: 		
0x4B3A	0x470062  	ADD	W14, #2, W0
0x4B3C	0x400001  	ADD	W0, W1, W0
; ch start address is: 0 (W0)
0x4B3E	0x784010  	MOV.B	[W0], W0
;__Lib_Conversions.mpas,592 :: 		
0x4B40	0x784080  	MOV.B	W0, W1
; i end address is: 4 (W2)
; ch end address is: 0 (W0)
0x4B42	0x780182  	MOV	W2, W3
0x4B44	0x37FFF2  	BRA	L__FloatToStr171
L__FloatToStr172:
;__Lib_Conversions.mpas,594 :: 		
; i start address is: 6 (W3)
0x4B46	0x90085E  	MOV	[W14+26], W0
0x4B48	0xE10060  	CP	W0, #0
0x4B4A	0xEF2002  	CLR	W1
0x4B4C	0x3A0001  	BRA NZ	L__FloatToStr267
0x4B4E	0xEEA002  	COM	W1
L__FloatToStr267:
0x4B50	0xE11860  	CP	W3, #0
0x4B52	0xEF2000  	CLR	W0
0x4B54	0x3A0001  	BRA NZ	L__FloatToStr268
0x4B56	0xEEA000  	COM	W0
L__FloatToStr268:
0x4B58	0x608000  	AND	W1, W0, W0
0x4B5A	0x320006  	BRA Z	L__FloatToStr198
L__FloatToStr269:
;__Lib_Conversions.mpas,596 :: 		
0x4B5C	0x460083  	ADD	W12, W3, W1
0x4B5E	0xB3C300  	MOV.B	#48, W0
0x4B60	0x784880  	MOV.B	W0, [W1]
;__Lib_Conversions.mpas,597 :: 		
; i start address is: 0 (W0)
0x4B62	0x418061  	ADD	W3, #1, W0
; i end address is: 6 (W3)
0x4B64	0x780100  	MOV	W0, W2
; i end address is: 0 (W0)
;__Lib_Conversions.mpas,598 :: 		
0x4B66	0x370001  	BRA	L__FloatToStr176
L__FloatToStr198:
;__Lib_Conversions.mpas,594 :: 		
0x4B68	0x780103  	MOV	W3, W2
;__Lib_Conversions.mpas,598 :: 		
L__FloatToStr176:
;__Lib_Conversions.mpas,600 :: 		
; i start address is: 4 (W2)
0x4B6A	0xE11061  	CP	W2, #1
0x4B6C	0xEF2002  	CLR	W1
0x4B6E	0x3A0001  	BRA NZ	L__FloatToStr270
0x4B70	0xEEA002  	COM	W1
L__FloatToStr270:
0x4B72	0x47007A  	ADD	W14, #26, W0
0x4B74	0x608010  	AND	W1, [W0], W0
0x4B76	0x320006  	BRA Z	L__FloatToStr199
L__FloatToStr271:
;__Lib_Conversions.mpas,602 :: 		
0x4B78	0x460082  	ADD	W12, W2, W1
0x4B7A	0xB3C300  	MOV.B	#48, W0
0x4B7C	0x784880  	MOV.B	W0, [W1]
;__Lib_Conversions.mpas,603 :: 		
; i start address is: 0 (W0)
0x4B7E	0x410061  	ADD	W2, #1, W0
; i end address is: 4 (W2)
0x4B80	0x780100  	MOV	W0, W2
; i end address is: 0 (W0)
;__Lib_Conversions.mpas,604 :: 		
0x4B82	0x370000  	BRA	L__FloatToStr179
L__FloatToStr199:
;__Lib_Conversions.mpas,600 :: 		
;__Lib_Conversions.mpas,604 :: 		
L__FloatToStr179:
;__Lib_Conversions.mpas,606 :: 		
; i start address is: 4 (W2)
0x4B84	0x460082  	ADD	W12, W2, W1
0x4B86	0xB3C2E0  	MOV.B	#46, W0
0x4B88	0x784880  	MOV.B	W0, [W1]
;__Lib_Conversions.mpas,607 :: 		
0x4B8A	0xEC2004  	INC	W2
;__Lib_Conversions.mpas,609 :: 		
0x4B8C	0x200060  	MOV	#6, W0
0x4B8E	0x980700  	MOV	W0, [W14+0]
;__Lib_Conversions.mpas,610 :: 		
; ch start address is: 2 (W1)
0x4B90	0x9050CE  	MOV.B	[W14+20], W1
; i end address is: 4 (W2)
; ch end address is: 2 (W1)
;__Lib_Conversions.mpas,611 :: 		
L__FloatToStr182:
; ch start address is: 2 (W1)
; i start address is: 4 (W2)
0x4B92	0xE10C60  	CP.B	W1, #0
0x4B94	0x320011  	BRA Z	L__FloatToStr183
L__FloatToStr272:
;__Lib_Conversions.mpas,613 :: 		
0x4B96	0xB3C200  	MOV.B	#32, W0
0x4B98	0xE10C00  	CP.B	W1, W0
0x4B9A	0x3A0002  	BRA NZ	L__FloatToStr200
L__FloatToStr273:
;__Lib_Conversions.mpas,614 :: 		
0x4B9C	0xB3C301  	MOV.B	#48, W1
; ch end address is: 2 (W1)
0x4B9E	0x370000  	BRA	L__FloatToStr187
L__FloatToStr200:
;__Lib_Conversions.mpas,613 :: 		
;__Lib_Conversions.mpas,614 :: 		
L__FloatToStr187:
;__Lib_Conversions.mpas,615 :: 		
; ch start address is: 2 (W1)
0x4BA0	0x460002  	ADD	W12, W2, W0
0x4BA2	0x784801  	MOV.B	W1, [W0]
; ch end address is: 2 (W1)
;__Lib_Conversions.mpas,616 :: 		
0x4BA4	0x90000E  	MOV	[W14+0], W0
0x4BA6	0x4000E1  	ADD	W0, #1, W1
0x4BA8	0x980701  	MOV	W1, [W14+0]
;__Lib_Conversions.mpas,617 :: 		
; i start address is: 6 (W3)
0x4BAA	0x4101E1  	ADD	W2, #1, W3
; i end address is: 4 (W2)
;__Lib_Conversions.mpas,618 :: 		
0x4BAC	0x47006E  	ADD	W14, #14, W0
0x4BAE	0x400001  	ADD	W0, W1, W0
; ch start address is: 0 (W0)
0x4BB0	0x784010  	MOV.B	[W0], W0
;__Lib_Conversions.mpas,619 :: 		
0x4BB2	0x780103  	MOV	W3, W2
; i end address is: 6 (W3)
; ch end address is: 0 (W0)
0x4BB4	0x784080  	MOV.B	W0, W1
0x4BB6	0x37FFED  	BRA	L__FloatToStr182
L__FloatToStr183:
;__Lib_Conversions.mpas,621 :: 		
; i start address is: 4 (W2)
0x4BB8	0x460082  	ADD	W12, W2, W1
; i end address is: 4 (W2)
0x4BBA	0xEF2000  	CLR	W0
0x4BBC	0x784880  	MOV.B	W0, [W1]
;__Lib_Conversions.mpas,622 :: 		
L_end_FloatToStr:
0x4BBE	0xFA8000  	ULNK
0x4BC0	0x060000  	RETURN
; end of _FloatToStr
_LongIntToStr:
0x2F30	0xFA0000  	LNK	#0
;__Lib_Conversions.mpas,281 :: 		
;__Lib_Conversions.mpas,282 :: 		
0x2F32	0x200000  	MOV	#0, W0
0x2F34	0x280001  	MOV	#32768, W1
0x2F36	0xE15000  	CP	W10, W0
0x2F38	0xE1D801  	CPB	W11, W1
0x2F3A	0x3A001A  	BRA NZ	L__LongIntToStr83
L__LongIntToStr233:
;__Lib_Conversions.mpas,284 :: 		
0x2F3C	0x78008C  	MOV	W12, W1
0x2F3E	0xB3C2D0  	MOV.B	#45, W0
0x2F40	0x785880  	MOV.B	W0, [W1++]
0x2F42	0xB3C320  	MOV.B	#50, W0
0x2F44	0x785880  	MOV.B	W0, [W1++]
0x2F46	0xB3C310  	MOV.B	#49, W0
0x2F48	0x785880  	MOV.B	W0, [W1++]
0x2F4A	0xB3C340  	MOV.B	#52, W0
0x2F4C	0x785880  	MOV.B	W0, [W1++]
0x2F4E	0xB3C370  	MOV.B	#55, W0
0x2F50	0x785880  	MOV.B	W0, [W1++]
0x2F52	0xB3C340  	MOV.B	#52, W0
0x2F54	0x785880  	MOV.B	W0, [W1++]
0x2F56	0xB3C380  	MOV.B	#56, W0
0x2F58	0x785880  	MOV.B	W0, [W1++]
0x2F5A	0xB3C330  	MOV.B	#51, W0
0x2F5C	0x785880  	MOV.B	W0, [W1++]
0x2F5E	0xB3C360  	MOV.B	#54, W0
0x2F60	0x785880  	MOV.B	W0, [W1++]
0x2F62	0xB3C340  	MOV.B	#52, W0
0x2F64	0x785880  	MOV.B	W0, [W1++]
0x2F66	0xB3C380  	MOV.B	#56, W0
0x2F68	0x785880  	MOV.B	W0, [W1++]
0x2F6A	0xEF2000  	CLR	W0
0x2F6C	0x785880  	MOV.B	W0, [W1++]
;__Lib_Conversions.mpas,285 :: 		
0x2F6E	0x370047  	BRA	L_end__LongIntToStr
;__Lib_Conversions.mpas,286 :: 		
L__LongIntToStr83:
;__Lib_Conversions.mpas,288 :: 		
; negative start address is: 8 (W4)
0x2F70	0xEF2008  	CLR	W4
;__Lib_Conversions.mpas,289 :: 		
0x2F72	0xE15060  	CP	W10, #0
0x2F74	0xE1D860  	CPB	W11, #0
0x2F76	0x3D0005  	BRA GE	L__LongIntToStr192
L__LongIntToStr234:
;__Lib_Conversions.mpas,291 :: 		
0x2F78	0x2FFFF4  	MOV	#65535, W4
;__Lib_Conversions.mpas,292 :: 		
0x2F7A	0x150060  	SUBR	W10, #0, W0
0x2F7C	0x1D80E0  	SUBBR	W11, #0, W1
0x2F7E	0xBE0500  	MOV.D	W0, W10
; negative end address is: 8 (W4)
;__Lib_Conversions.mpas,293 :: 		
0x2F80	0x370000  	BRA	L__LongIntToStr86
L__LongIntToStr192:
;__Lib_Conversions.mpas,289 :: 		
;__Lib_Conversions.mpas,293 :: 		
L__LongIntToStr86:
;__Lib_Conversions.mpas,295 :: 		
; negative start address is: 8 (W4)
0x2F82	0x78008C  	MOV	W12, W1
0x2F84	0xB3C200  	MOV.B	#32, W0
0x2F86	0x785880  	MOV.B	W0, [W1++]
0x2F88	0xB3C200  	MOV.B	#32, W0
0x2F8A	0x785880  	MOV.B	W0, [W1++]
0x2F8C	0xB3C200  	MOV.B	#32, W0
0x2F8E	0x785880  	MOV.B	W0, [W1++]
0x2F90	0xB3C200  	MOV.B	#32, W0
0x2F92	0x785880  	MOV.B	W0, [W1++]
0x2F94	0xB3C200  	MOV.B	#32, W0
0x2F96	0x785880  	MOV.B	W0, [W1++]
0x2F98	0xB3C200  	MOV.B	#32, W0
0x2F9A	0x785880  	MOV.B	W0, [W1++]
0x2F9C	0xB3C200  	MOV.B	#32, W0
0x2F9E	0x785880  	MOV.B	W0, [W1++]
0x2FA0	0xB3C200  	MOV.B	#32, W0
0x2FA2	0x785880  	MOV.B	W0, [W1++]
0x2FA4	0xB3C200  	MOV.B	#32, W0
0x2FA6	0x785880  	MOV.B	W0, [W1++]
0x2FA8	0xB3C200  	MOV.B	#32, W0
0x2FAA	0x785880  	MOV.B	W0, [W1++]
0x2FAC	0xB3C300  	MOV.B	#48, W0
0x2FAE	0x785880  	MOV.B	W0, [W1++]
0x2FB0	0xEF2000  	CLR	W0
0x2FB2	0x785880  	MOV.B	W0, [W1++]
;__Lib_Conversions.mpas,296 :: 		
; ptr start address is: 10 (W5)
0x2FB4	0x4602EA  	ADD	W12, #10, W5
; negative end address is: 8 (W4)
; ptr end address is: 10 (W5)
;__Lib_Conversions.mpas,297 :: 		
L__LongIntToStr89:
; ptr start address is: 10 (W5)
; negative start address is: 8 (W4)
0x2FB6	0xE15060  	CP	W10, #0
0x2FB8	0xE1D860  	CPB	W11, #0
0x2FBA	0x32001D  	BRA Z	L__LongIntToStr90
L__LongIntToStr235:
;__Lib_Conversions.mpas,299 :: 		
0x2FBC	0xBE9F84  	PUSH.D	W4
0x2FBE	0x781F8C  	PUSH	W12
0x2FC0	0xBE9F8A  	PUSH.D	W10
0x2FC2	0x2000A2  	MOV	#10, W2
0x2FC4	0x200003  	MOV	#0, W3
0x2FC6	0xBE000A  	MOV.D	W10, W0
0x2FC8	0xEB8200  	SETM	W4
0x2FCA	0x07ED3E  	RCALL	__Modulus_32x32
0x2FCC	0xBE054F  	POP.D	W10
0x2FCE	0x78064F  	POP	W12
0x2FD0	0xBE024F  	POP.D	W4
0x2FD2	0x200302  	MOV	#48, W2
0x2FD4	0x200003  	MOV	#0, W3
0x2FD6	0x400002  	ADD	W0, W2, W0
0x2FD8	0x784A80  	MOV.B	W0, [W5]
;__Lib_Conversions.mpas,300 :: 		
0x2FDA	0xBE9F84  	PUSH.D	W4
0x2FDC	0x781F8C  	PUSH	W12
0x2FDE	0xBE9F8A  	PUSH.D	W10
0x2FE0	0x2000A2  	MOV	#10, W2
0x2FE2	0x200003  	MOV	#0, W3
0x2FE4	0xBE000A  	MOV.D	W10, W0
0x2FE6	0xEB8200  	SETM	W4
0x2FE8	0x07EB49  	RCALL	__Divide_32x32
0x2FEA	0xBE054F  	POP.D	W10
0x2FEC	0x78064F  	POP	W12
0x2FEE	0xBE024F  	POP.D	W4
0x2FF0	0xBE0500  	MOV.D	W0, W10
;__Lib_Conversions.mpas,301 :: 		
0x2FF2	0xED200A  	DEC	W5
;__Lib_Conversions.mpas,302 :: 		
0x2FF4	0x37FFE0  	BRA	L__LongIntToStr89
L__LongIntToStr90:
;__Lib_Conversions.mpas,304 :: 		
0x2FF6	0xE20008  	CP0	W4
0x2FF8	0x320002  	BRA Z	L__LongIntToStr94
L__LongIntToStr236:
; negative end address is: 8 (W4)
;__Lib_Conversions.mpas,306 :: 		
0x2FFA	0xB3C2D0  	MOV.B	#45, W0
0x2FFC	0x784A80  	MOV.B	W0, [W5]
; ptr end address is: 10 (W5)
;__Lib_Conversions.mpas,307 :: 		
L__LongIntToStr94:
;__Lib_Conversions.mpas,308 :: 		
L_end__LongIntToStr:
L_end_LongIntToStr:
0x2FFE	0xFA8000  	ULNK
0x3000	0x060000  	RETURN
; end of _LongIntToStr
__Float2Longint:
0x3214	0xFA0000  	LNK	#0
;__Lib_MathDouble.mpas,495 :: 		
;__Lib_MathDouble.mpas,497 :: 		
0x3216	0x070002  	RCALL	Float2Longint__fixsfsi
;__Lib_MathDouble.mpas,498 :: 		
0x3218	0x000000043288  	GOTO	the_end__Float2Longint
;__Lib_MathDouble.mpas,500 :: 		
Float2Longint__fixsfsi:
;__Lib_MathDouble.mpas,501 :: 		
0x321C	0xBE8100  	MOV.D	W0, W2
;__Lib_MathDouble.mpas,502 :: 		
0x321E	0x07001F  	RCALL	Float2Longint__funpack
;__Lib_MathDouble.mpas,503 :: 		
0x3220	0xA77004  	BTSC	W4, #7
;__Lib_MathDouble.mpas,504 :: 		
0x3222	0xA1F003  	BCLR	W3, #15
;__Lib_MathDouble.mpas,505 :: 		
0x3224	0xB10965  	SUB	#150, W5
;__Lib_MathDouble.mpas,506 :: 		
0x3226	0x320016  	BRA Z	Float2Longint_setsign
;__Lib_MathDouble.mpas,507 :: 		
0x3228	0x35000D  	BRA LT	Float2Longint_shiftright
;__Lib_MathDouble.mpas,508 :: 		
0x322A	0xE12868  	CP	W5, #8
;__Lib_MathDouble.mpas,509 :: 		
0x322C	0x350006  	BRA LT	Float2Longint_shiftleft
;__Lib_MathDouble.mpas,510 :: 		
0x322E	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.mpas,511 :: 		
0x3230	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.mpas,512 :: 		
0x3232	0xE20006  	CP0	W3
;__Lib_MathDouble.mpas,513 :: 		
0x3234	0x3B0013  	BRA NN	Float2Longint_exit
;__Lib_MathDouble.mpas,514 :: 		
0x3236	0x280001  	MOV	#32768, W1
;__Lib_MathDouble.mpas,515 :: 		
0x3238	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.mpas,516 :: 		
Float2Longint_shiftleft:
;__Lib_MathDouble.mpas,517 :: 		
0x323A	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.mpas,518 :: 		
0x323C	0x488081  	ADDC	W1, W1, W1
;__Lib_MathDouble.mpas,519 :: 		
0x323E	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.mpas,520 :: 		
0x3240	0x3AFFFC  	BRA NZ	Float2Longint_shiftleft
;__Lib_MathDouble.mpas,521 :: 		
0x3242	0x370008  	BRA	Float2Longint_setsign
;__Lib_MathDouble.mpas,522 :: 		
Float2Longint_shiftright:
;__Lib_MathDouble.mpas,523 :: 		
0x3244	0x428FF8  	ADD	W5, #24, [W15]
;__Lib_MathDouble.mpas,524 :: 		
0x3246	0x3C0002  	BRA GT	Float2Longint_shiftrightloop
;__Lib_MathDouble.mpas,525 :: 		
0x3248	0xEB0080  	CLR	W1
;__Lib_MathDouble.mpas,526 :: 		
0x324A	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.mpas,527 :: 		
Float2Longint_shiftrightloop:
;__Lib_MathDouble.mpas,528 :: 		
0x324C	0xD10081  	LSR	W1, W1
;__Lib_MathDouble.mpas,529 :: 		
0x324E	0xD38000  	RRC	W0, W0
;__Lib_MathDouble.mpas,530 :: 		
0x3250	0xE80285  	INC	W5, W5
;__Lib_MathDouble.mpas,531 :: 		
0x3252	0x3AFFFC  	BRA NZ	Float2Longint_shiftrightloop
;__Lib_MathDouble.mpas,532 :: 		
Float2Longint_setsign:
;__Lib_MathDouble.mpas,533 :: 		
0x3254	0xE20006  	CP0	W3
;__Lib_MathDouble.mpas,534 :: 		
0x3256	0x3B0002  	BRA NN	Float2Longint_exit
;__Lib_MathDouble.mpas,535 :: 		
0x3258	0x100060  	SUBR	W0, #0, W0
;__Lib_MathDouble.mpas,536 :: 		
0x325A	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_MathDouble.mpas,537 :: 		
Float2Longint_exit:
;__Lib_MathDouble.mpas,538 :: 		
0x325C	0x060000  	RETURN
;__Lib_MathDouble.mpas,539 :: 		
Float2Longint__funpack:
;__Lib_MathDouble.mpas,540 :: 		
0x325E	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.mpas,541 :: 		
0x3260	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.mpas,542 :: 		
0x3262	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.mpas,543 :: 		
0x3264	0x320008  	BRA Z	Float2Longint_zeroorsub
;__Lib_MathDouble.mpas,544 :: 		
0x3266	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.mpas,545 :: 		
0x3268	0x320002  	BRA Z	Float2Longint_nanorinf
;__Lib_MathDouble.mpas,546 :: 		
Float2Longint_finitereturn:
;__Lib_MathDouble.mpas,547 :: 		
0x326A	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.mpas,548 :: 		
0x326C	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.mpas,549 :: 		
Float2Longint_nanorinf:
;__Lib_MathDouble.mpas,550 :: 		
0x326E	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.mpas,551 :: 		
0x3270	0x320001  	BRA Z	Float2Longint_infinite
;__Lib_MathDouble.mpas,552 :: 		
0x3272	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.mpas,553 :: 		
Float2Longint_infinite:
;__Lib_MathDouble.mpas,554 :: 		
0x3274	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.mpas,555 :: 		
Float2Longint_zeroorsub:
;__Lib_MathDouble.mpas,556 :: 		
0x3276	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.mpas,557 :: 		
0x3278	0x3A0002  	BRA NZ	Float2Longint_subnormal
;__Lib_MathDouble.mpas,558 :: 		
0x327A	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.mpas,559 :: 		
Float2Longint_normalize:
;__Lib_MathDouble.mpas,560 :: 		
0x327C	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.mpas,561 :: 		
Float2Longint_subnormal:
;__Lib_MathDouble.mpas,562 :: 		
0x327E	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.mpas,563 :: 		
0x3280	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.mpas,564 :: 		
0x3282	0x3BFFFC  	BRA NN	Float2Longint_normalize
;__Lib_MathDouble.mpas,565 :: 		
0x3284	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.mpas,566 :: 		
0x3286	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.mpas,568 :: 		
the_end__Float2Longint:
;__Lib_MathDouble.mpas,571 :: 		
L_end__Float2Longint:
0x3288	0xFA8000  	ULNK
0x328A	0x060000  	RETURN
; end of __Float2Longint
__Compare_Le_Fp:
0x3002	0xFA0000  	LNK	#0
;__Lib_MathDouble.mpas,1365 :: 		
;__Lib_MathDouble.mpas,1367 :: 		
0x3004	0x200014  	MOV	#1, W4
;__Lib_MathDouble.mpas,1369 :: 		
0x3006	0x07F185  	RCALL	__Compare_Fp
;__Lib_MathDouble.mpas,1370 :: 		
L_end__Compare_Le_Fp:
0x3008	0xFA8000  	ULNK
0x300A	0x060000  	RETURN
; end of __Compare_Le_Fp
__Compare_Fp:
0x1312	0xFA0000  	LNK	#0
;__Lib_MathDouble.mpas,1288 :: 		
;__Lib_MathDouble.mpas,1290 :: 		
0x1314	0x070002  	RCALL	CompareFp__fcompare
;__Lib_MathDouble.mpas,1291 :: 		
0x1316	0x000000041380  	GOTO	the_end__Compare_Fp
;__Lib_MathDouble.mpas,1293 :: 		
CompareFp__fcompare:
;__Lib_MathDouble.mpas,1294 :: 		
0x131A	0x781F84  	MOV	W4, [W15++]
;__Lib_MathDouble.mpas,1295 :: 		
0x131C	0x070014  	RCALL	CompareFp__funpack2
;__Lib_MathDouble.mpas,1296 :: 		
0x131E	0x78004F  	MOV	[--W15], W0
;__Lib_MathDouble.mpas,1297 :: 		
0x1320	0x330011  	BRA N	CompareFp_exit
;__Lib_MathDouble.mpas,1298 :: 		
0x1322	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.mpas,1299 :: 		
0x1324	0x6C8F83  	XOR	W9, W3, [W15]
;__Lib_MathDouble.mpas,1300 :: 		
0x1326	0x3B0006  	BRA NN	CompareFp_comparemag
;__Lib_MathDouble.mpas,1301 :: 		
0x1328	0x650504  	AND	W10, W4, W10
;__Lib_MathDouble.mpas,1302 :: 		
0x132A	0xA7000A  	BTSC	W10, #0
;__Lib_MathDouble.mpas,1303 :: 		
0x132C	0x370008  	BRA	CompareFp_returnEqual
;__Lib_MathDouble.mpas,1304 :: 		
0x132E	0xA6F009  	BTSS	W9, #15
;__Lib_MathDouble.mpas,1305 :: 		
0x1330	0x200010  	MOV	#1, W0
;__Lib_MathDouble.mpas,1306 :: 		
0x1332	0x370008  	BRA	CompareFp_exit
;__Lib_MathDouble.mpas,1307 :: 		
CompareFp_comparemag:
;__Lib_MathDouble.mpas,1308 :: 		
0x1334	0x540F82  	SUB	W8, W2, [W15]
;__Lib_MathDouble.mpas,1309 :: 		
0x1336	0x5C8F83  	SUBB	W9, W3, [W15]
;__Lib_MathDouble.mpas,1310 :: 		
0x1338	0x390003  	BRA LTU	CompareFp_adjust
;__Lib_MathDouble.mpas,1311 :: 		
0x133A	0x200010  	MOV	#1, W0
;__Lib_MathDouble.mpas,1312 :: 		
0x133C	0x3E0001  	BRA GTU	CompareFp_adjust
;__Lib_MathDouble.mpas,1313 :: 		
CompareFp_returnEqual:
;__Lib_MathDouble.mpas,1314 :: 		
0x133E	0x200000  	MOV	#0, W0
;__Lib_MathDouble.mpas,1315 :: 		
CompareFp_adjust:
;__Lib_MathDouble.mpas,1316 :: 		
0x1340	0xA7F009  	BTSC	W9, #15
;__Lib_MathDouble.mpas,1317 :: 		
0x1342	0xEA0000  	NEG	W0, W0
;__Lib_MathDouble.mpas,1318 :: 		
CompareFp_exit:
;__Lib_MathDouble.mpas,1319 :: 		
0x1344	0x060000  	RETURN
;__Lib_MathDouble.mpas,1320 :: 		
CompareFp__funpack2:
;__Lib_MathDouble.mpas,1321 :: 		
0x1346	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.mpas,1322 :: 		
0x1348	0x070006  	RCALL	CompareFp__funpack
;__Lib_MathDouble.mpas,1323 :: 		
0x134A	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.mpas,1324 :: 		
0x134C	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.mpas,1325 :: 		
0x134E	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.mpas,1326 :: 		
0x1350	0x070002  	RCALL	CompareFp__funpack
;__Lib_MathDouble.mpas,1327 :: 		
0x1352	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.mpas,1328 :: 		
0x1354	0x060000  	RETURN
;__Lib_MathDouble.mpas,1329 :: 		
CompareFp__funpack:
;__Lib_MathDouble.mpas,1330 :: 		
0x1356	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.mpas,1331 :: 		
0x1358	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.mpas,1332 :: 		
0x135A	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.mpas,1333 :: 		
0x135C	0x320008  	BRA Z	CompareFp_zeroorsub
;__Lib_MathDouble.mpas,1334 :: 		
0x135E	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.mpas,1335 :: 		
0x1360	0x320002  	BRA Z	CompareFp_nanorinf
;__Lib_MathDouble.mpas,1336 :: 		
CompareFp_finitereturn:
;__Lib_MathDouble.mpas,1337 :: 		
0x1362	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.mpas,1338 :: 		
0x1364	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.mpas,1339 :: 		
CompareFp_nanorinf:
;__Lib_MathDouble.mpas,1340 :: 		
0x1366	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.mpas,1341 :: 		
0x1368	0x320001  	BRA Z	CompareFp_infinite
;__Lib_MathDouble.mpas,1342 :: 		
0x136A	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.mpas,1343 :: 		
CompareFp_infinite:
;__Lib_MathDouble.mpas,1344 :: 		
0x136C	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.mpas,1345 :: 		
CompareFp_zeroorsub:
;__Lib_MathDouble.mpas,1346 :: 		
0x136E	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.mpas,1347 :: 		
0x1370	0x3A0002  	BRA NZ	CompareFp_subnormal
;__Lib_MathDouble.mpas,1348 :: 		
0x1372	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.mpas,1349 :: 		
CompareFp_normalize:
;__Lib_MathDouble.mpas,1350 :: 		
0x1374	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.mpas,1351 :: 		
CompareFp_subnormal:
;__Lib_MathDouble.mpas,1352 :: 		
0x1376	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.mpas,1353 :: 		
0x1378	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.mpas,1354 :: 		
0x137A	0x3BFFFC  	BRA NN	CompareFp_normalize
;__Lib_MathDouble.mpas,1355 :: 		
0x137C	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.mpas,1356 :: 		
0x137E	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.mpas,1358 :: 		
the_end__Compare_Fp:
;__Lib_MathDouble.mpas,1361 :: 		
L_end__Compare_Fp:
0x1380	0xFA8000  	ULNK
0x1382	0x060000  	RETURN
; end of __Compare_Fp
__Long2Float:
0x3082	0xFA0000  	LNK	#0
;__Lib_MathDouble.mpas,118 :: 		
;__Lib_MathDouble.mpas,120 :: 		
0x3084	0x070002  	RCALL	LL_intro_Long2Float
;__Lib_MathDouble.mpas,121 :: 		
0x3086	0x000000043134  	GOTO	the_end__Long2Float
;__Lib_MathDouble.mpas,123 :: 		
LL_intro_Long2Float:
;__Lib_MathDouble.mpas,125 :: 		
0x308A	0xE20004  	CP0	W2
;__Lib_MathDouble.mpas,126 :: 		
0x308C	0x3A0006  	BRA NZ	Longint2Float__floatsisf
;__Lib_MathDouble.mpas,128 :: 		
Longword2Float__floatuisf:
;__Lib_MathDouble.mpas,129 :: 		
0x308E	0xEB0500  	CLR	W10
;__Lib_MathDouble.mpas,130 :: 		
0x3090	0xE20002  	CP0	W1
;__Lib_MathDouble.mpas,131 :: 		
0x3092	0x3E000F  	BRA GTU	Long2Float_notspecial
;__Lib_MathDouble.mpas,132 :: 		
0x3094	0xE20000  	CP0	W0
;__Lib_MathDouble.mpas,133 :: 		
0x3096	0x320027  	BRA Z	Long2Float_return0
;__Lib_MathDouble.mpas,134 :: 		
0x3098	0x37000C  	BRA	Long2Float_notspecial
;__Lib_MathDouble.mpas,136 :: 		
Longint2Float__floatsisf:
;__Lib_MathDouble.mpas,137 :: 		
0x309A	0x8800A1  	MOV	W1, W10
;__Lib_MathDouble.mpas,138 :: 		
0x309C	0xE20002  	CP0	W1
;__Lib_MathDouble.mpas,139 :: 		
0x309E	0x350004  	BRA LT	Longint2Float_negative
;__Lib_MathDouble.mpas,140 :: 		
0x30A0	0x3C0008  	BRA GT	Long2Float_notspecial
;__Lib_MathDouble.mpas,141 :: 		
0x30A2	0xE20000  	CP0	W0
;__Lib_MathDouble.mpas,142 :: 		
0x30A4	0x320020  	BRA Z	Long2Float_return0
;__Lib_MathDouble.mpas,143 :: 		
0x30A6	0x370005  	BRA	Long2Float_notspecial
;__Lib_MathDouble.mpas,144 :: 		
Longint2Float_negative:
;__Lib_MathDouble.mpas,145 :: 		
0x30A8	0x100060  	SUBR	W0, #0, W0
;__Lib_MathDouble.mpas,146 :: 		
0x30AA	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_MathDouble.mpas,147 :: 		
0x30AC	0x3B0002  	BRA NN	Long2Float_notspecial
;__Lib_MathDouble.mpas,148 :: 		
0x30AE	0x2CF001  	MOV	#52992, W1
;__Lib_MathDouble.mpas,149 :: 		
0x30B0	0x37001A  	BRA	Long2Float_return0
;__Lib_MathDouble.mpas,151 :: 		
Long2Float_notspecial:
;__Lib_MathDouble.mpas,152 :: 		
0x30B2	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.mpas,153 :: 		
0x30B4	0xB81160  	MUL.UU	W2, #0, W2
;__Lib_MathDouble.mpas,154 :: 		
0x30B6	0x20096B  	MOV	#150, W11
;__Lib_MathDouble.mpas,155 :: 		
0x30B8	0xCF8209  	FF1L	W9, W4
;__Lib_MathDouble.mpas,156 :: 		
0x30BA	0x390002  	BRA NC	Long2Float_fixshift
;__Lib_MathDouble.mpas,157 :: 		
0x30BC	0xCF8208  	FF1L	W8, W4
;__Lib_MathDouble.mpas,158 :: 		
0x30BE	0xB04104  	ADD.B	#16, W4
;__Lib_MathDouble.mpas,159 :: 		
Long2Float_fixshift:
;__Lib_MathDouble.mpas,160 :: 		
0x30C0	0x524269  	SUB.B	W4, #9, W4
;__Lib_MathDouble.mpas,161 :: 		
0x30C2	0x32000E  	BRA Z	Long2Float_round
;__Lib_MathDouble.mpas,162 :: 		
0x30C4	0x3B0008  	BRA NN	Long2Float_shiftleft
;__Lib_MathDouble.mpas,163 :: 		
Long2Float_shiftright:
;__Lib_MathDouble.mpas,164 :: 		
0x30C6	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.mpas,165 :: 		
0x30C8	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.mpas,166 :: 		
0x30CA	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.mpas,167 :: 		
0x30CC	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.mpas,168 :: 		
0x30CE	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.mpas,169 :: 		
0x30D0	0xE84204  	INC.B	W4, W4
;__Lib_MathDouble.mpas,170 :: 		
0x30D2	0x3AFFF9  	BRA NZ	Long2Float_shiftright
;__Lib_MathDouble.mpas,171 :: 		
0x30D4	0x370005  	BRA	Long2Float_round
;__Lib_MathDouble.mpas,172 :: 		
Long2Float_shiftleft:
;__Lib_MathDouble.mpas,173 :: 		
0x30D6	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.mpas,174 :: 		
0x30D8	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.mpas,175 :: 		
0x30DA	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.mpas,176 :: 		
0x30DC	0xE94204  	DEC.B	W4, W4
;__Lib_MathDouble.mpas,177 :: 		
0x30DE	0x3AFFFB  	BRA NZ	Long2Float_shiftleft
;__Lib_MathDouble.mpas,178 :: 		
Long2Float_round:
;__Lib_MathDouble.mpas,179 :: 		
0x30E0	0x070003  	RCALL	Long2Float__fpack
;__Lib_MathDouble.mpas,180 :: 		
0x30E2	0xA7F00A  	BTSC	W10, #15
;__Lib_MathDouble.mpas,181 :: 		
0x30E4	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.mpas,182 :: 		
Long2Float_return0:
;__Lib_MathDouble.mpas,183 :: 		
0x30E6	0x060000  	RETURN
;__Lib_MathDouble.mpas,184 :: 		
Long2Float__fpack:
;__Lib_MathDouble.mpas,185 :: 		
0x30E8	0x200081  	MOV	#8, W1
;__Lib_MathDouble.mpas,186 :: 		
0x30EA	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.mpas,187 :: 		
0x30EC	0x3D000B  	BRA GE	Long2Float_notsubnormal
;__Lib_MathDouble.mpas,188 :: 		
0x30EE	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.mpas,189 :: 		
0x30F0	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.mpas,190 :: 		
0x30F2	0xE10001  	CP	W0, W1
;__Lib_MathDouble.mpas,191 :: 		
0x30F4	0x34001D  	BRA LE	Long2Float_zerosig
;__Lib_MathDouble.mpas,192 :: 		
Long2Float_subnormal:
;__Lib_MathDouble.mpas,193 :: 		
0x30F6	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.mpas,194 :: 		
0x30F8	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.mpas,195 :: 		
0x30FA	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.mpas,196 :: 		
0x30FC	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.mpas,197 :: 		
0x30FE	0xE80000  	INC	W0, W0
;__Lib_MathDouble.mpas,198 :: 		
0x3100	0x3AFFFA  	BRA NZ	Long2Float_subnormal
;__Lib_MathDouble.mpas,199 :: 		
0x3102	0x200071  	MOV	#7, W1
;__Lib_MathDouble.mpas,200 :: 		
Long2Float_notsubnormal:
;__Lib_MathDouble.mpas,201 :: 		
0x3104	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.mpas,202 :: 		
0x3106	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.mpas,203 :: 		
0x3108	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.mpas,204 :: 		
0x310A	0x320009  	BRA Z	Long2Float_packupandgo
;__Lib_MathDouble.mpas,205 :: 		
0x310C	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.mpas,206 :: 		
0x310E	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.mpas,207 :: 		
0x3110	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.mpas,208 :: 		
0x3112	0x320005  	BRA Z	Long2Float_packupandgo
;__Lib_MathDouble.mpas,209 :: 		
0x3114	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.mpas,210 :: 		
0x3116	0xE10868  	CP	W1, #8
;__Lib_MathDouble.mpas,211 :: 		
0x3118	0x3A0002  	BRA NZ	Long2Float_packupandgo
;__Lib_MathDouble.mpas,212 :: 		
0x311A	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.mpas,213 :: 		
0x311C	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.mpas,214 :: 		
Long2Float_packupandgo:
;__Lib_MathDouble.mpas,215 :: 		
0x311E	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.mpas,216 :: 		
0x3120	0xE15802  	CP	W11, W2
;__Lib_MathDouble.mpas,217 :: 		
0x3122	0x3D0005  	BRA GE	Long2Float_overflow
;__Lib_MathDouble.mpas,218 :: 		
0x3124	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.mpas,219 :: 		
0x3126	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.mpas,220 :: 		
0x3128	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.mpas,221 :: 		
0x312A	0x880008  	MOV	W8, W0
;__Lib_MathDouble.mpas,222 :: 		
0x312C	0x060000  	RETURN
;__Lib_MathDouble.mpas,223 :: 		
Long2Float_overflow:
;__Lib_MathDouble.mpas,224 :: 		
0x312E	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.mpas,225 :: 		
Long2Float_zerosig:
;__Lib_MathDouble.mpas,226 :: 		
0x3130	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.mpas,227 :: 		
0x3132	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.mpas,229 :: 		
the_end__Long2Float:
;__Lib_MathDouble.mpas,232 :: 		
L_end__Long2Float:
0x3134	0xFA8000  	ULNK
0x3136	0x060000  	RETURN
; end of __Long2Float
__Sub_FP:
0x20F2	0xFA0000  	LNK	#0
;__Lib_MathDouble.mpas,844 :: 		
;__Lib_MathDouble.mpas,846 :: 		
0x20F4	0xAAE007  	BTG	W3, #15
;__Lib_MathDouble.mpas,848 :: 		
0x20F6	0x07F857  	RCALL	__AddSub_FP
;__Lib_MathDouble.mpas,849 :: 		
L_end__Sub_FP:
0x20F8	0xFA8000  	ULNK
0x20FA	0x060000  	RETURN
; end of __Sub_FP
__AddSub_FP:
0x11A6	0xFA0000  	LNK	#0
;__Lib_MathDouble.mpas,597 :: 		
;__Lib_MathDouble.mpas,599 :: 		
0x11A8	0x070002  	RCALL	AddSubFP__addsf3
;__Lib_MathDouble.mpas,600 :: 		
0x11AA	0x00000004130E  	GOTO	the_end__AddSub_FP
;__Lib_MathDouble.mpas,602 :: 		
AddSubFP__addsf3:
;__Lib_MathDouble.mpas,603 :: 		
0x11AE	0xBE9F88  	MOV.D	W8, [W15++]
;__Lib_MathDouble.mpas,604 :: 		
0x11B0	0xBE9F8A  	MOV.D	W10, [W15++]
;__Lib_MathDouble.mpas,605 :: 		
0x11B2	0x781F8C  	MOV	W12, [W15++]
;__Lib_MathDouble.mpas,606 :: 		
0x11B4	0x070059  	RCALL	AddSubFP__funpack2
;__Lib_MathDouble.mpas,607 :: 		
0x11B6	0x330060  	BRA N	AddSubFP__fPropagateNaN
;__Lib_MathDouble.mpas,608 :: 		
0x11B8	0xE15064  	CP	W10, #4
;__Lib_MathDouble.mpas,609 :: 		
0x11BA	0x32004F  	BRA Z	AddSubFP_aisinfinite
;__Lib_MathDouble.mpas,610 :: 		
AddSubFP_checkspecialb:
;__Lib_MathDouble.mpas,611 :: 		
0x11BC	0xE12064  	CP	W4, #4
;__Lib_MathDouble.mpas,612 :: 		
0x11BE	0x320052  	BRA Z	AddSubFP_return2_3
;__Lib_MathDouble.mpas,613 :: 		
0x11C0	0x6C8203  	XOR	W9, W3, W4
;__Lib_MathDouble.mpas,614 :: 		
0x11C2	0x3B0007  	BRA NN	AddSubFP_getsign
;__Lib_MathDouble.mpas,615 :: 		
0x11C4	0xD00509  	SL	W9, W10
;__Lib_MathDouble.mpas,616 :: 		
0x11C6	0xD00603  	SL	W3, W12
;__Lib_MathDouble.mpas,617 :: 		
0x11C8	0x540F82  	SUB	W8, W2, [W15]
;__Lib_MathDouble.mpas,618 :: 		
0x11CA	0x5D060C  	SUBB	W10, W12, W12
;__Lib_MathDouble.mpas,619 :: 		
0x11CC	0x390002  	BRA NC	AddSubFP_getsign
;__Lib_MathDouble.mpas,620 :: 		
0x11CE	0x320002  	BRA Z	AddSubFP_gotsign
;__Lib_MathDouble.mpas,621 :: 		
0x11D0	0x880039  	MOV	W9, W3
;__Lib_MathDouble.mpas,622 :: 		
AddSubFP_getsign:
;__Lib_MathDouble.mpas,623 :: 		
0x11D2	0x8800C3  	MOV	W3, W12
;__Lib_MathDouble.mpas,624 :: 		
AddSubFP_gotsign:
;__Lib_MathDouble.mpas,625 :: 		
0x11D4	0x558285  	SUB	W11, W5, W5
;__Lib_MathDouble.mpas,626 :: 		
0x11D6	0x3D0004  	BRA GE	AddSubFP_expcanonical
;__Lib_MathDouble.mpas,627 :: 		
0x11D8	0xFD0300  	EXCH	W0, W6
;__Lib_MathDouble.mpas,628 :: 		
0x11DA	0xFD0381  	EXCH	W1, W7
;__Lib_MathDouble.mpas,629 :: 		
0x11DC	0xEA0285  	NEG	W5, W5
;__Lib_MathDouble.mpas,630 :: 		
0x11DE	0x42858B  	ADD	W5, W11, W11
;__Lib_MathDouble.mpas,631 :: 		
AddSubFP_expcanonical:
;__Lib_MathDouble.mpas,632 :: 		
0x11E0	0x720F84  	IOR	W4, W4, [W15]
;__Lib_MathDouble.mpas,633 :: 		
0x11E2	0x3B0002  	BRA NN	AddSubFP_nonegate
;__Lib_MathDouble.mpas,634 :: 		
0x11E4	0x100060  	SUBR	W0, #0, W0
;__Lib_MathDouble.mpas,635 :: 		
0x11E6	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_MathDouble.mpas,636 :: 		
AddSubFP_nonegate:
;__Lib_MathDouble.mpas,637 :: 		
0x11E8	0xB81160  	MUL.UU	W2, #0, W2
;__Lib_MathDouble.mpas,638 :: 		
0x11EA	0xEB0500  	CLR	W10
;__Lib_MathDouble.mpas,639 :: 		
0x11EC	0xE1287A  	CP	W5, #26
;__Lib_MathDouble.mpas,640 :: 		
0x11EE	0x39000A  	BRA NC	AddSubFP_aligniter
;__Lib_MathDouble.mpas,641 :: 		
0x11F0	0x880006  	MOV	W6, W0
;__Lib_MathDouble.mpas,642 :: 		
0x11F2	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.mpas,643 :: 		
0x11F4	0xB207F7  	AND	#127, W7
;__Lib_MathDouble.mpas,644 :: 		
0x11F6	0x758087  	IOR	W11, W7, W1
;__Lib_MathDouble.mpas,645 :: 		
0x11F8	0x37002D  	BRA	AddSubFP_signoff
;__Lib_MathDouble.mpas,646 :: 		
AddSubFP_align:
;__Lib_MathDouble.mpas,647 :: 		
0x11FA	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.mpas,648 :: 		
0x11FC	0x88002A  	MOV	W10, W2
;__Lib_MathDouble.mpas,649 :: 		
0x11FE	0x600561  	AND	W0, #1, W10
;__Lib_MathDouble.mpas,650 :: 		
0x1200	0xD18081  	ASR	W1, W1
;__Lib_MathDouble.mpas,651 :: 		
0x1202	0xD38000  	RRC	W0, W0
;__Lib_MathDouble.mpas,652 :: 		
AddSubFP_aligniter:
;__Lib_MathDouble.mpas,653 :: 		
0x1204	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.mpas,654 :: 		
0x1206	0x3BFFF9  	BRA NN	AddSubFP_align
;__Lib_MathDouble.mpas,655 :: 		
AddSubFP_aligned:
;__Lib_MathDouble.mpas,656 :: 		
0x1208	0x400406  	ADD	W0, W6, W8
;__Lib_MathDouble.mpas,657 :: 		
0x120A	0x488487  	ADDC	W1, W7, W9
;__Lib_MathDouble.mpas,658 :: 		
0x120C	0x3B0002  	BRA NN	AddSubFP_normalizesum
;__Lib_MathDouble.mpas,659 :: 		
0x120E	0x140460  	SUBR	W8, #0, W8
;__Lib_MathDouble.mpas,660 :: 		
0x1210	0x1C84E0  	SUBBR	W9, #0, W9
;__Lib_MathDouble.mpas,661 :: 		
AddSubFP_normalizesum:
;__Lib_MathDouble.mpas,662 :: 		
0x1212	0xA38809  	BTST.Z	W9, #8
;__Lib_MathDouble.mpas,663 :: 		
0x1214	0x320007  	BRA Z	AddSubFP_checknormal
;__Lib_MathDouble.mpas,664 :: 		
0x1216	0x71818A  	IOR	W3, W10, W3
;__Lib_MathDouble.mpas,665 :: 		
0x1218	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.mpas,666 :: 		
0x121A	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.mpas,667 :: 		
0x121C	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.mpas,668 :: 		
0x121E	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.mpas,669 :: 		
0x1220	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.mpas,670 :: 		
0x1222	0x370017  	BRA	AddSubFP_round
;__Lib_MathDouble.mpas,671 :: 		
AddSubFP_checknormal:
;__Lib_MathDouble.mpas,672 :: 		
0x1224	0xA37809  	BTST.Z	W9, #7
;__Lib_MathDouble.mpas,673 :: 		
0x1226	0x3A0013  	BRA NZ	AddSubFP_discardguard
;__Lib_MathDouble.mpas,674 :: 		
AddSubFP_underflow:
;__Lib_MathDouble.mpas,675 :: 		
0x1228	0xE20016  	CP0	W11
;__Lib_MathDouble.mpas,676 :: 		
0x122A	0x340013  	BRA LE	AddSubFP_round
;__Lib_MathDouble.mpas,677 :: 		
0x122C	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.mpas,678 :: 		
0x122E	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.mpas,679 :: 		
0x1230	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.mpas,680 :: 		
0x1232	0x74440A  	IOR.B	W8, W10, W8
;__Lib_MathDouble.mpas,681 :: 		
0x1234	0xA37809  	BTST.Z	W9, #7
;__Lib_MathDouble.mpas,682 :: 		
0x1236	0x3A000D  	BRA NZ	AddSubFP_round
;__Lib_MathDouble.mpas,683 :: 		
AddSubFP_normalizeloop:
;__Lib_MathDouble.mpas,684 :: 		
0x1238	0xE20016  	CP0	W11
;__Lib_MathDouble.mpas,685 :: 		
0x123A	0x340007  	BRA LE	AddSubFP_normalizeexit
;__Lib_MathDouble.mpas,686 :: 		
0x123C	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.mpas,687 :: 		
0x123E	0x440408  	ADD	W8, W8, W8
;__Lib_MathDouble.mpas,688 :: 		
0x1240	0x4C8489  	ADDC	W9, W9, W9
;__Lib_MathDouble.mpas,689 :: 		
0x1242	0x3A0001  	BRA NZ	AddSubFP_normalizetest
;__Lib_MathDouble.mpas,690 :: 		
0x1244	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.mpas,691 :: 		
AddSubFP_normalizetest:
;__Lib_MathDouble.mpas,692 :: 		
0x1246	0xA37809  	BTST.Z	W9, #7
;__Lib_MathDouble.mpas,693 :: 		
0x1248	0x32FFF7  	BRA Z	AddSubFP_normalizeloop
;__Lib_MathDouble.mpas,694 :: 		
AddSubFP_normalizeexit:
;__Lib_MathDouble.mpas,695 :: 		
0x124A	0xEB0100  	CLR	W2
;__Lib_MathDouble.mpas,696 :: 		
0x124C	0x370002  	BRA	AddSubFP_round
;__Lib_MathDouble.mpas,697 :: 		
AddSubFP_discardguard:
;__Lib_MathDouble.mpas,698 :: 		
0x124E	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.mpas,699 :: 		
0x1250	0x88002A  	MOV	W10, W2
;__Lib_MathDouble.mpas,700 :: 		
AddSubFP_round:
;__Lib_MathDouble.mpas,701 :: 		
0x1252	0x070022  	RCALL	AddSubFP__fpack
;__Lib_MathDouble.mpas,702 :: 		
AddSubFP_signoff:
;__Lib_MathDouble.mpas,703 :: 		
0x1254	0xA7F00C  	BTSC	W12, #15
;__Lib_MathDouble.mpas,704 :: 		
0x1256	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.mpas,705 :: 		
0x1258	0x370018  	BRA	AddSubFP__fbopExit
;__Lib_MathDouble.mpas,706 :: 		
AddSubFP_aisinfinite:
;__Lib_MathDouble.mpas,707 :: 		
0x125A	0xE12064  	CP	W4, #4
;__Lib_MathDouble.mpas,708 :: 		
0x125C	0x3A0002  	BRA NZ	AddSubFP_return8_3
;__Lib_MathDouble.mpas,709 :: 		
0x125E	0x6C8F83  	XOR	W9, W3, [W15]
;__Lib_MathDouble.mpas,710 :: 		
0x1260	0x330018  	BRA N	AddSubFP__fbopReturnNaN
;__Lib_MathDouble.mpas,711 :: 		
AddSubFP_return8_3:
;__Lib_MathDouble.mpas,712 :: 		
0x1262	0xBE8108  	MOV.D	W8, W2
;__Lib_MathDouble.mpas,713 :: 		
AddSubFP_return2_3:
;__Lib_MathDouble.mpas,714 :: 		
0x1264	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.mpas,715 :: 		
0x1266	0x370011  	BRA	AddSubFP__fbopExit
;__Lib_MathDouble.mpas,716 :: 		
AddSubFP__funpack2:
;__Lib_MathDouble.mpas,717 :: 		
0x1268	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.mpas,718 :: 		
0x126A	0x07003C  	RCALL	AddSubFP__funpack
;__Lib_MathDouble.mpas,719 :: 		
0x126C	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.mpas,720 :: 		
0x126E	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.mpas,721 :: 		
0x1270	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.mpas,722 :: 		
0x1272	0x070038  	RCALL	AddSubFP__funpack
;__Lib_MathDouble.mpas,723 :: 		
0x1274	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.mpas,724 :: 		
0x1276	0x060000  	RETURN
;__Lib_MathDouble.mpas,725 :: 		
AddSubFP__fPropagateNaN:
;__Lib_MathDouble.mpas,726 :: 		
0x1278	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.mpas,727 :: 		
0x127A	0xE15064  	CP	W10, #4
;__Lib_MathDouble.mpas,728 :: 		
0x127C	0x360005  	BRA LEU	AddSubFP_return0_1
;__Lib_MathDouble.mpas,729 :: 		
0x127E	0xE12064  	CP	W4, #4
;__Lib_MathDouble.mpas,730 :: 		
0x1280	0x360002  	BRA LEU	AddSubFP_return8_1
;__Lib_MathDouble.mpas,731 :: 		
0x1282	0xA36809  	BTST.Z	W9, #6
;__Lib_MathDouble.mpas,732 :: 		
0x1284	0x3A0001  	BRA NZ	AddSubFP_return0_1
;__Lib_MathDouble.mpas,733 :: 		
AddSubFP_return8_1:
;__Lib_MathDouble.mpas,734 :: 		
0x1286	0xBE8008  	MOV.D	W8, W0
;__Lib_MathDouble.mpas,735 :: 		
AddSubFP_return0_1:
;__Lib_MathDouble.mpas,736 :: 		
0x1288	0xA8C002  	BSET	W1, #6
;__Lib_MathDouble.mpas,737 :: 		
AddSubFP__fbopExit:
;__Lib_MathDouble.mpas,738 :: 		
0x128A	0x78064F  	MOV	[--W15], W12
;__Lib_MathDouble.mpas,739 :: 		
0x128C	0xBE054F  	MOV.D	[--W15], W10
;__Lib_MathDouble.mpas,740 :: 		
0x128E	0xBE044F  	MOV.D	[--W15], W8
;__Lib_MathDouble.mpas,741 :: 		
0x1290	0x060000  	RETURN
;__Lib_MathDouble.mpas,742 :: 		
AddSubFP__fbopReturnNaN:
;__Lib_MathDouble.mpas,743 :: 		
0x1292	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.mpas,744 :: 		
0x1294	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.mpas,745 :: 		
0x1296	0x37FFF9  	BRA	AddSubFP__fbopExit
;__Lib_MathDouble.mpas,746 :: 		
AddSubFP__fpack:
;__Lib_MathDouble.mpas,747 :: 		
0x1298	0x200081  	MOV	#8, W1
;__Lib_MathDouble.mpas,748 :: 		
0x129A	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.mpas,749 :: 		
0x129C	0x3D000B  	BRA GE	AddSubFP_notsubnormal_1
;__Lib_MathDouble.mpas,750 :: 		
0x129E	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.mpas,751 :: 		
0x12A0	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.mpas,752 :: 		
0x12A2	0xE10001  	CP	W0, W1
;__Lib_MathDouble.mpas,753 :: 		
0x12A4	0x34001D  	BRA LE	AddSubFP_zerosig
;__Lib_MathDouble.mpas,754 :: 		
AddSubFP_subnormal_1:
;__Lib_MathDouble.mpas,755 :: 		
0x12A6	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.mpas,756 :: 		
0x12A8	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.mpas,757 :: 		
0x12AA	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.mpas,758 :: 		
0x12AC	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.mpas,759 :: 		
0x12AE	0xE80000  	INC	W0, W0
;__Lib_MathDouble.mpas,760 :: 		
0x12B0	0x3AFFFA  	BRA NZ	AddSubFP_subnormal_1
;__Lib_MathDouble.mpas,761 :: 		
0x12B2	0x200071  	MOV	#7, W1
;__Lib_MathDouble.mpas,762 :: 		
AddSubFP_notsubnormal_1:
;__Lib_MathDouble.mpas,763 :: 		
0x12B4	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.mpas,764 :: 		
0x12B6	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.mpas,765 :: 		
0x12B8	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.mpas,766 :: 		
0x12BA	0x320009  	BRA Z	AddSubFP_packupandgo
;__Lib_MathDouble.mpas,767 :: 		
0x12BC	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.mpas,768 :: 		
0x12BE	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.mpas,769 :: 		
0x12C0	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.mpas,770 :: 		
0x12C2	0x320005  	BRA Z	AddSubFP_packupandgo
;__Lib_MathDouble.mpas,771 :: 		
0x12C4	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.mpas,772 :: 		
0x12C6	0xE10868  	CP	W1, #8
;__Lib_MathDouble.mpas,773 :: 		
0x12C8	0x3A0002  	BRA NZ	AddSubFP_packupandgo
;__Lib_MathDouble.mpas,774 :: 		
0x12CA	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.mpas,775 :: 		
0x12CC	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.mpas,776 :: 		
AddSubFP_packupandgo:
;__Lib_MathDouble.mpas,777 :: 		
0x12CE	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.mpas,778 :: 		
0x12D0	0xE15802  	CP	W11, W2
;__Lib_MathDouble.mpas,779 :: 		
0x12D2	0x3D0005  	BRA GE	AddSubFP_overflow
;__Lib_MathDouble.mpas,780 :: 		
0x12D4	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.mpas,781 :: 		
0x12D6	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.mpas,782 :: 		
0x12D8	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.mpas,783 :: 		
0x12DA	0x880008  	MOV	W8, W0
;__Lib_MathDouble.mpas,784 :: 		
0x12DC	0x060000  	RETURN
;__Lib_MathDouble.mpas,785 :: 		
AddSubFP_overflow:
;__Lib_MathDouble.mpas,786 :: 		
0x12DE	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.mpas,787 :: 		
AddSubFP_zerosig:
;__Lib_MathDouble.mpas,788 :: 		
0x12E0	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.mpas,789 :: 		
0x12E2	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.mpas,790 :: 		
AddSubFP__funpack:
;__Lib_MathDouble.mpas,791 :: 		
0x12E4	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.mpas,792 :: 		
0x12E6	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.mpas,793 :: 		
0x12E8	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.mpas,794 :: 		
0x12EA	0x320008  	BRA Z	AddSubFP_zeroorsub
;__Lib_MathDouble.mpas,795 :: 		
0x12EC	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.mpas,796 :: 		
0x12EE	0x320002  	BRA Z	AddSubFP_nanorinf
;__Lib_MathDouble.mpas,797 :: 		
AddSubFP_finitereturn:
;__Lib_MathDouble.mpas,798 :: 		
0x12F0	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.mpas,799 :: 		
0x12F2	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.mpas,800 :: 		
AddSubFP_nanorinf:
;__Lib_MathDouble.mpas,801 :: 		
0x12F4	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.mpas,802 :: 		
0x12F6	0x320001  	BRA Z	AddSubFP_infinite
;__Lib_MathDouble.mpas,803 :: 		
0x12F8	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.mpas,804 :: 		
AddSubFP_infinite:
;__Lib_MathDouble.mpas,805 :: 		
0x12FA	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.mpas,806 :: 		
AddSubFP_zeroorsub:
;__Lib_MathDouble.mpas,807 :: 		
0x12FC	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.mpas,808 :: 		
0x12FE	0x3A0002  	BRA NZ	AddSubFP_subnormal_2
;__Lib_MathDouble.mpas,809 :: 		
0x1300	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.mpas,810 :: 		
AddSubFP_normalize:
;__Lib_MathDouble.mpas,811 :: 		
0x1302	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.mpas,812 :: 		
AddSubFP_subnormal_2:
;__Lib_MathDouble.mpas,813 :: 		
0x1304	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.mpas,814 :: 		
0x1306	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.mpas,815 :: 		
0x1308	0x3BFFFC  	BRA NN	AddSubFP_normalize
;__Lib_MathDouble.mpas,816 :: 		
0x130A	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.mpas,817 :: 		
0x130C	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.mpas,819 :: 		
the_end__AddSub_FP:
;__Lib_MathDouble.mpas,822 :: 		
L_end__AddSub_FP:
0x130E	0xFA8000  	ULNK
0x1310	0x060000  	RETURN
; end of __AddSub_FP
__Mul_FP:
0x1B48	0xFA0000  	LNK	#0
;__Lib_MathDouble.mpas,872 :: 		
;__Lib_MathDouble.mpas,874 :: 		
0x1B4A	0x070002  	RCALL	MulFP___mulsf3
;__Lib_MathDouble.mpas,875 :: 		
0x1B4C	0x000000041C5E  	GOTO	the_end__Mul_FP
;__Lib_MathDouble.mpas,877 :: 		
MulFP___mulsf3:
;__Lib_MathDouble.mpas,878 :: 		
0x1B50	0xBE9F88  	MOV.D	W8, [W15++]
;__Lib_MathDouble.mpas,879 :: 		
0x1B52	0xBE9F8A  	MOV.D	W10, [W15++]
;__Lib_MathDouble.mpas,880 :: 		
0x1B54	0x781F8C  	MOV	W12, [W15++]
;__Lib_MathDouble.mpas,881 :: 		
0x1B56	0x070030  	RCALL	MulFP__funpack2
;__Lib_MathDouble.mpas,882 :: 		
0x1B58	0x330037  	BRA N	MulFP__fPropagateNaN
;__Lib_MathDouble.mpas,883 :: 		
0x1B5A	0x6C8603  	XOR	W9, W3, W12
;__Lib_MathDouble.mpas,884 :: 		
0x1B5C	0xE15064  	CP	W10, #4
;__Lib_MathDouble.mpas,885 :: 		
0x1B5E	0x320024  	BRA Z	MulFP_aisinfinite
;__Lib_MathDouble.mpas,886 :: 		
0x1B60	0xE12064  	CP	W4, #4
;__Lib_MathDouble.mpas,887 :: 		
0x1B62	0x320027  	BRA Z	MulFP_bisinfinite
;__Lib_MathDouble.mpas,888 :: 		
0x1B64	0xE15061  	CP	W10, #1
;__Lib_MathDouble.mpas,889 :: 		
0x1B66	0x320022  	BRA Z	MulFP_return8_1
;__Lib_MathDouble.mpas,890 :: 		
0x1B68	0xE12061  	CP	W4, #1
;__Lib_MathDouble.mpas,891 :: 		
0x1B6A	0x320021  	BRA Z	MulFP_return2_1
;__Lib_MathDouble.mpas,892 :: 		
0x1B6C	0x42858B  	ADD	W5, W11, W11
;__Lib_MathDouble.mpas,893 :: 		
0x1B6E	0xB107EB  	SUB	#126, W11
;__Lib_MathDouble.mpas,894 :: 		
0x1B70	0xB83401  	MUL.UU	W6, W1, W8
;__Lib_MathDouble.mpas,895 :: 		
0x1B72	0xB83A00  	MUL.UU	W7, W0, W4
;__Lib_MathDouble.mpas,896 :: 		
0x1B74	0x420408  	ADD	W4, W8, W8
;__Lib_MathDouble.mpas,897 :: 		
0x1B76	0x4A8489  	ADDC	W5, W9, W9
;__Lib_MathDouble.mpas,898 :: 		
0x1B78	0xB83A01  	MUL.UU	W7, W1, W4
;__Lib_MathDouble.mpas,899 :: 		
0x1B7A	0xB83000  	MUL.UU	W6, W0, W0
;__Lib_MathDouble.mpas,900 :: 		
0x1B7C	0x408088  	ADD	W1, W8, W1
;__Lib_MathDouble.mpas,901 :: 		
0x1B7E	0x4A0109  	ADDC	W4, W9, W2
;__Lib_MathDouble.mpas,902 :: 		
0x1B80	0x330004  	BRA N	MulFP_formsticky
;__Lib_MathDouble.mpas,903 :: 		
0x1B82	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.mpas,904 :: 		
0x1B84	0x488081  	ADDC	W1, W1, W1
;__Lib_MathDouble.mpas,905 :: 		
0x1B86	0x490102  	ADDC	W2, W2, W2
;__Lib_MathDouble.mpas,906 :: 		
0x1B88	0xE9058B  	DEC	W11, W11
;__Lib_MathDouble.mpas,907 :: 		
MulFP_formsticky:
;__Lib_MathDouble.mpas,908 :: 		
0x1B8A	0xDD09C9  	SL	W1, #9, W3
;__Lib_MathDouble.mpas,909 :: 		
0x1B8C	0x700183  	IOR	W0, W3, W3
;__Lib_MathDouble.mpas,910 :: 		
0x1B8E	0x320001  	BRA Z	MulFP_formRandSig
;__Lib_MathDouble.mpas,911 :: 		
0x1B90	0x200013  	MOV	#1, W3
;__Lib_MathDouble.mpas,912 :: 		
MulFP_formRandSig:
;__Lib_MathDouble.mpas,913 :: 		
0x1B92	0xDE14C8  	LSR	W2, #8, W9
;__Lib_MathDouble.mpas,914 :: 		
0x1B94	0xDD1448  	SL	W2, #8, W8
;__Lib_MathDouble.mpas,915 :: 		
0x1B96	0xDE0947  	LSR	W1, #7, W2
;__Lib_MathDouble.mpas,916 :: 		
0x1B98	0xB20012  	AND	#1, W2
;__Lib_MathDouble.mpas,917 :: 		
0x1B9A	0xDE08C8  	LSR	W1, #8, W1
;__Lib_MathDouble.mpas,918 :: 		
0x1B9C	0x708408  	IOR	W1, W8, W8
;__Lib_MathDouble.mpas,919 :: 		
0x1B9E	0x070024  	RCALL	MulFP__fpack
;__Lib_MathDouble.mpas,920 :: 		
MulFP_return0_1:
;__Lib_MathDouble.mpas,921 :: 		
0x1BA0	0xA1F001  	BCLR	W1, #15
;__Lib_MathDouble.mpas,922 :: 		
0x1BA2	0xA7F00C  	BTSC	W12, #15
;__Lib_MathDouble.mpas,923 :: 		
0x1BA4	0xA8E003  	BSET	W1, #15
;__Lib_MathDouble.mpas,924 :: 		
0x1BA6	0x370019  	BRA	MulFP__fbopExit
;__Lib_MathDouble.mpas,925 :: 		
MulFP_aisinfinite:
;__Lib_MathDouble.mpas,926 :: 		
0x1BA8	0xE12061  	CP	W4, #1
;__Lib_MathDouble.mpas,927 :: 		
0x1BAA	0x32001B  	BRA Z	MulFP__fbopReturnNaN
;__Lib_MathDouble.mpas,928 :: 		
MulFP_return8_1:
;__Lib_MathDouble.mpas,929 :: 		
0x1BAC	0xBE8108  	MOV.D	W8, W2
;__Lib_MathDouble.mpas,930 :: 		
MulFP_return2_1:
;__Lib_MathDouble.mpas,931 :: 		
0x1BAE	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.mpas,932 :: 		
0x1BB0	0x37FFF7  	BRA	MulFP_return0_1
;__Lib_MathDouble.mpas,933 :: 		
MulFP_bisinfinite:
;__Lib_MathDouble.mpas,934 :: 		
0x1BB2	0xE15061  	CP	W10, #1
;__Lib_MathDouble.mpas,935 :: 		
0x1BB4	0x3AFFFC  	BRA NZ	MulFP_return2_1
;__Lib_MathDouble.mpas,936 :: 		
0x1BB6	0x370015  	BRA	MulFP__fbopReturnNaN
;__Lib_MathDouble.mpas,937 :: 		
MulFP__funpack2:
;__Lib_MathDouble.mpas,938 :: 		
0x1BB8	0xBE8400  	MOV.D	W0, W8
;__Lib_MathDouble.mpas,939 :: 		
0x1BBA	0x07003C  	RCALL	MulFP__funpack
;__Lib_MathDouble.mpas,940 :: 		
0x1BBC	0xBE8300  	MOV.D	W0, W6
;__Lib_MathDouble.mpas,941 :: 		
0x1BBE	0xBE8504  	MOV.D	W4, W10
;__Lib_MathDouble.mpas,942 :: 		
0x1BC0	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.mpas,943 :: 		
0x1BC2	0x070038  	RCALL	MulFP__funpack
;__Lib_MathDouble.mpas,944 :: 		
0x1BC4	0x754F84  	IOR.B	W10, W4, [W15]
;__Lib_MathDouble.mpas,945 :: 		
0x1BC6	0x060000  	RETURN
;__Lib_MathDouble.mpas,946 :: 		
MulFP__fPropagateNaN:
;__Lib_MathDouble.mpas,947 :: 		
0x1BC8	0xBE8002  	MOV.D	W2, W0
;__Lib_MathDouble.mpas,948 :: 		
0x1BCA	0xE15064  	CP	W10, #4
;__Lib_MathDouble.mpas,949 :: 		
0x1BCC	0x360005  	BRA LEU	MulFP_return0_2
;__Lib_MathDouble.mpas,950 :: 		
0x1BCE	0xE12064  	CP	W4, #4
;__Lib_MathDouble.mpas,951 :: 		
0x1BD0	0x360002  	BRA LEU	MulFP_return8_2
;__Lib_MathDouble.mpas,952 :: 		
0x1BD2	0xA36809  	BTST.Z	W9, #6
;__Lib_MathDouble.mpas,953 :: 		
0x1BD4	0x3A0001  	BRA NZ	MulFP_return0_2
;__Lib_MathDouble.mpas,954 :: 		
MulFP_return8_2:
;__Lib_MathDouble.mpas,955 :: 		
0x1BD6	0xBE8008  	MOV.D	W8, W0
;__Lib_MathDouble.mpas,956 :: 		
MulFP_return0_2:
;__Lib_MathDouble.mpas,957 :: 		
0x1BD8	0xA8C002  	BSET	W1, #6
;__Lib_MathDouble.mpas,958 :: 		
MulFP__fbopExit:
;__Lib_MathDouble.mpas,959 :: 		
0x1BDA	0x78064F  	MOV	[--W15], W12
;__Lib_MathDouble.mpas,960 :: 		
0x1BDC	0xBE054F  	MOV.D	[--W15], W10
;__Lib_MathDouble.mpas,961 :: 		
0x1BDE	0xBE044F  	MOV.D	[--W15], W8
;__Lib_MathDouble.mpas,962 :: 		
0x1BE0	0x060000  	RETURN
;__Lib_MathDouble.mpas,963 :: 		
MulFP__fbopReturnNaN:
;__Lib_MathDouble.mpas,964 :: 		
0x1BE2	0x2FFFF0  	MOV	#65535, W0
;__Lib_MathDouble.mpas,965 :: 		
0x1BE4	0x27FFF1  	MOV	#32767, W1
;__Lib_MathDouble.mpas,966 :: 		
0x1BE6	0x37FFF9  	BRA	MulFP__fbopExit
;__Lib_MathDouble.mpas,967 :: 		
MulFP__fpack:
;__Lib_MathDouble.mpas,968 :: 		
0x1BE8	0x200081  	MOV	#8, W1
;__Lib_MathDouble.mpas,969 :: 		
0x1BEA	0x558061  	SUB	W11, #1, W0
;__Lib_MathDouble.mpas,970 :: 		
0x1BEC	0x3D000B  	BRA GE	MulFP_notsubnormal
;__Lib_MathDouble.mpas,971 :: 		
0x1BEE	0x20000B  	MOV	#0, W11
;__Lib_MathDouble.mpas,972 :: 		
0x1BF0	0x2FFE61  	MOV	#65510, W1
;__Lib_MathDouble.mpas,973 :: 		
0x1BF2	0xE10001  	CP	W0, W1
;__Lib_MathDouble.mpas,974 :: 		
0x1BF4	0x34001D  	BRA LE	MulFP_zerosig
;__Lib_MathDouble.mpas,975 :: 		
MulFP_subnormal1:
;__Lib_MathDouble.mpas,976 :: 		
0x1BF6	0x718182  	IOR	W3, W2, W3
;__Lib_MathDouble.mpas,977 :: 		
0x1BF8	0x640161  	AND	W8, #1, W2
;__Lib_MathDouble.mpas,978 :: 		
0x1BFA	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.mpas,979 :: 		
0x1BFC	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.mpas,980 :: 		
0x1BFE	0xE80000  	INC	W0, W0
;__Lib_MathDouble.mpas,981 :: 		
0x1C00	0x3AFFFA  	BRA NZ	MulFP_subnormal1
;__Lib_MathDouble.mpas,982 :: 		
0x1C02	0x200071  	MOV	#7, W1
;__Lib_MathDouble.mpas,983 :: 		
MulFP_notsubnormal:
;__Lib_MathDouble.mpas,984 :: 		
0x1C04	0x640061  	AND	W8, #1, W0
;__Lib_MathDouble.mpas,985 :: 		
0x1C06	0x700003  	IOR	W0, W3, W0
;__Lib_MathDouble.mpas,986 :: 		
0x1C08	0x600002  	AND	W0, W2, W0
;__Lib_MathDouble.mpas,987 :: 		
0x1C0A	0x320009  	BRA Z	MulFP_packupandgo
;__Lib_MathDouble.mpas,988 :: 		
0x1C0C	0x440461  	ADD	W8, #1, W8
;__Lib_MathDouble.mpas,989 :: 		
0x1C0E	0x4C84E0  	ADDC	W9, #0, W9
;__Lib_MathDouble.mpas,990 :: 		
0x1C10	0xA58809  	BTST.Z	W9, W1
;__Lib_MathDouble.mpas,991 :: 		
0x1C12	0x320005  	BRA Z	MulFP_packupandgo
;__Lib_MathDouble.mpas,992 :: 		
0x1C14	0xE8058B  	INC	W11, W11
;__Lib_MathDouble.mpas,993 :: 		
0x1C16	0xE10868  	CP	W1, #8
;__Lib_MathDouble.mpas,994 :: 		
0x1C18	0x3A0002  	BRA NZ	MulFP_packupandgo
;__Lib_MathDouble.mpas,995 :: 		
0x1C1A	0xD10489  	LSR	W9, W9
;__Lib_MathDouble.mpas,996 :: 		
0x1C1C	0xD38408  	RRC	W8, W8
;__Lib_MathDouble.mpas,997 :: 		
MulFP_packupandgo:
;__Lib_MathDouble.mpas,998 :: 		
0x1C1E	0x200FF2  	MOV	#255, W2
;__Lib_MathDouble.mpas,999 :: 		
0x1C20	0xE15802  	CP	W11, W2
;__Lib_MathDouble.mpas,1000 :: 		
0x1C22	0x3D0005  	BRA GE	MulFP_overflow
;__Lib_MathDouble.mpas,1001 :: 		
0x1C24	0xDD5DC7  	SL	W11, #7, W11
;__Lib_MathDouble.mpas,1002 :: 		
0x1C26	0xB207F9  	AND	#127, W9
;__Lib_MathDouble.mpas,1003 :: 		
0x1C28	0x758089  	IOR	W11, W9, W1
;__Lib_MathDouble.mpas,1004 :: 		
0x1C2A	0x880008  	MOV	W8, W0
;__Lib_MathDouble.mpas,1005 :: 		
0x1C2C	0x060000  	RETURN
;__Lib_MathDouble.mpas,1006 :: 		
MulFP_overflow:
;__Lib_MathDouble.mpas,1007 :: 		
0x1C2E	0x27F80B  	MOV	#32640, W11
;__Lib_MathDouble.mpas,1008 :: 		
MulFP_zerosig:
;__Lib_MathDouble.mpas,1009 :: 		
0x1C30	0x88001B  	MOV	W11, W1
;__Lib_MathDouble.mpas,1010 :: 		
0x1C32	0x050000  	RETLW	#0, W0
;__Lib_MathDouble.mpas,1011 :: 		
MulFP__funpack:
;__Lib_MathDouble.mpas,1012 :: 		
0x1C34	0xDE0AC7  	LSR	W1, #7, W5
;__Lib_MathDouble.mpas,1013 :: 		
0x1C36	0xB207F1  	AND	#127, W1
;__Lib_MathDouble.mpas,1014 :: 		
0x1C38	0xB20FF5  	AND	#255, W5
;__Lib_MathDouble.mpas,1015 :: 		
0x1C3A	0x320008  	BRA Z	MulFP_zeroorsub
;__Lib_MathDouble.mpas,1016 :: 		
0x1C3C	0x42CFE1  	ADD.B	W5, #1, [W15]
;__Lib_MathDouble.mpas,1017 :: 		
0x1C3E	0x320002  	BRA Z	MulFP_nanorinf
;__Lib_MathDouble.mpas,1018 :: 		
MulFP_finitereturn:
;__Lib_MathDouble.mpas,1019 :: 		
0x1C40	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.mpas,1020 :: 		
0x1C42	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.mpas,1021 :: 		
MulFP_nanorinf:
;__Lib_MathDouble.mpas,1022 :: 		
0x1C44	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.mpas,1023 :: 		
0x1C46	0x320001  	BRA Z	MulFP_infinite
;__Lib_MathDouble.mpas,1024 :: 		
0x1C48	0x050804  	RETLW	#128, W4
;__Lib_MathDouble.mpas,1025 :: 		
MulFP_infinite:
;__Lib_MathDouble.mpas,1026 :: 		
0x1C4A	0x050044  	RETLW	#4, W4
;__Lib_MathDouble.mpas,1027 :: 		
MulFP_zeroorsub:
;__Lib_MathDouble.mpas,1028 :: 		
0x1C4C	0x700F81  	IOR	W0, W1, [W15]
;__Lib_MathDouble.mpas,1029 :: 		
0x1C4E	0x3A0002  	BRA NZ	MulFP_subnormal2
;__Lib_MathDouble.mpas,1030 :: 		
0x1C50	0x050014  	RETLW	#1, W4
;__Lib_MathDouble.mpas,1031 :: 		
MulFP_normalize:
;__Lib_MathDouble.mpas,1032 :: 		
0x1C52	0xE90285  	DEC	W5, W5
;__Lib_MathDouble.mpas,1033 :: 		
MulFP_subnormal2:
;__Lib_MathDouble.mpas,1034 :: 		
0x1C54	0x400000  	ADD	W0, W0, W0
;__Lib_MathDouble.mpas,1035 :: 		
0x1C56	0x48C081  	ADDC.B	W1, W1, W1
;__Lib_MathDouble.mpas,1036 :: 		
0x1C58	0x3BFFFC  	BRA NN	MulFP_normalize
;__Lib_MathDouble.mpas,1037 :: 		
0x1C5A	0xA8E002  	BSET	W1, #7
;__Lib_MathDouble.mpas,1038 :: 		
0x1C5C	0x050024  	RETLW	#2, W4
;__Lib_MathDouble.mpas,1040 :: 		
the_end__Mul_FP:
;__Lib_MathDouble.mpas,1043 :: 		
L_end__Mul_FP:
0x1C5E	0xFA8000  	ULNK
0x1C60	0x060000  	RETURN
; end of __Mul_FP
___CS2S:
0x556A	0xFA0000  	LNK	#0
;__Lib_System.mpas,26 :: 		
;__Lib_System.mpas,28 :: 		
L_loopCS2Ss:
;__Lib_System.mpas,29 :: 		
0x556C	0x784131  	MOV.B	[W1++], W2
;__Lib_System.mpas,30 :: 		
0x556E	0xE24004  	CP0.B	W2
;__Lib_System.mpas,31 :: 		
0x5570	0x320002  	BRA Z	L_CS2Send
;__Lib_System.mpas,32 :: 		
0x5572	0x785802  	MOV.B	W2, [W0++]
;__Lib_System.mpas,33 :: 		
0x5574	0x37FFFB  	BRA	L_loopCS2Ss
;__Lib_System.mpas,34 :: 		
L_CS2Send:
;__Lib_System.mpas,36 :: 		
L_end___CS2S:
0x5576	0xFA8000  	ULNK
0x5578	0x060000  	RETURN
; end of ___CS2S
_UART1_Data_Ready:
0x557A	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.mpas,271 :: 		
;__Lib_UART_12_p24_p33.mpas,272 :: 		
; Result start address is: 2 (W1)
0x557C	0xEF2002  	CLR	W1
0x557E	0xAF0222  	BTSC	U1STA, #0
0x5580	0xEC2002  	INC	W1
;__Lib_UART_12_p24_p33.mpas,273 :: 		
0x5582	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_UART1_Data_Ready:
0x5584	0xFA8000  	ULNK
0x5586	0x060000  	RETURN
; end of _UART1_Data_Ready
_UART1_Read:
0x5588	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.mpas,276 :: 		
;__Lib_UART_12_p24_p33.mpas,277 :: 		
; Result start address is: 2 (W1)
0x558A	0x801131  	MOV	U1RXREG, W1
;__Lib_UART_12_p24_p33.mpas,278 :: 		
0x558C	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_UART1_Read:
0x558E	0xFA8000  	ULNK
0x5590	0x060000  	RETURN
; end of _UART1_Read
_NMRAnetStateMachine_TrySendVerifyNodeID:
0x5462	0xFA0016  	LNK	#22
;NMRAnetStateMachine.mpas,180 :: 		begin
;NMRAnetStateMachine.mpas,181 :: 		if DestinationAliasID <> 0 then
0x5464	0x781F8B  	PUSH	W11
0x5466	0x781F8C  	PUSH	W12
0x5468	0x781F8D  	PUSH	W13
0x546A	0xE15860  	CP	W11, #0
0x546C	0x32000F  	BRA Z	L__NMRAnetStateMachine_TrySendVerifyNodeID8
L__NMRAnetStateMachine_TrySendVerifyNodeID583:
;NMRAnetStateMachine.mpas,182 :: 		Result := TransmitNMRABusLayerMsg(Node, @CANBuffer, MTI_VERIFY_NODE_ID_NUMBER_DEST, DestinationAliasID, 0, @DataBytes, False)
0x546E	0x470068  	ADD	W14, #8, W0
0x5470	0x4700E0  	ADD	W14, #0, W1
0x5472	0xEF2000  	CLR	W0
0x5474	0x781F80  	PUSH	W0
0x5476	0x781F81  	PUSH	W1
0x5478	0xEF2000  	CLR	W0
0x547A	0x781F80  	PUSH	W0
0x547C	0x781F8B  	PUSH	W11
0x547E	0x28000C  	MOV	#32768, W12
0x5480	0x20948D  	MOV	#2376, W13
0x5482	0x780580  	MOV	W0, W11
0x5484	0x07F206  	RCALL	_TransmitNMRABusLayerMsg
0x5486	0xB1008F  	SUB	#8, W15
; Result start address is: 2 (W1)
0x5488	0x780080  	MOV	W0, W1
; Result end address is: 2 (W1)
0x548A	0x37000F  	BRA	L__NMRAnetStateMachine_TrySendVerifyNodeID9
;NMRAnetStateMachine.mpas,183 :: 		else
L__NMRAnetStateMachine_TrySendVerifyNodeID8:
;NMRAnetStateMachine.mpas,184 :: 		Result := TransmitNMRABusLayerMsg(Node, @CANBuffer, MTI_VERIFY_NODE_ID_NUMBER, 0, 0, nil, False);
0x548C	0x470068  	ADD	W14, #8, W0
0x548E	0x20000C  	MOV	#0, W12
0x5490	0x20949D  	MOV	#2377, W13
0x5492	0x780580  	MOV	W0, W11
0x5494	0xEF2000  	CLR	W0
0x5496	0x781F80  	PUSH	W0
0x5498	0xEF2000  	CLR	W0
0x549A	0x781F80  	PUSH	W0
0x549C	0xEF2000  	CLR	W0
0x549E	0x781F80  	PUSH	W0
0x54A0	0xEF2000  	CLR	W0
0x54A2	0x781F80  	PUSH	W0
0x54A4	0x07F1F6  	RCALL	_TransmitNMRABusLayerMsg
0x54A6	0xB1008F  	SUB	#8, W15
; Result start address is: 2 (W1)
0x54A8	0x780080  	MOV	W0, W1
; Result end address is: 2 (W1)
L__NMRAnetStateMachine_TrySendVerifyNodeID9:
;NMRAnetStateMachine.mpas,185 :: 		end;
; Result start address is: 2 (W1)
0x54AA	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetStateMachine_TrySendVerifyNodeID:
0x54AC	0x7806CF  	POP	W13
0x54AE	0x78064F  	POP	W12
0x54B0	0x7805CF  	POP	W11
0x54B2	0xFA8000  	ULNK
0x54B4	0x060000  	RETURN
; end of _NMRAnetStateMachine_TrySendVerifyNodeID
_NMRAnetNode_FindFirstVirtualNode:
;NMRAnetNode.mpas,254 :: 		begin
;NMRAnetNode.mpas,255 :: 		Result := nil;
; Result start address is: 4 (W2)
0x5432	0xEF2004  	CLR	W2
;NMRAnetNode.mpas,256 :: 		i := 0;
; i start address is: 6 (W3)
0x5434	0xEF2006  	CLR	W3
; Result end address is: 4 (W2)
; i end address is: 6 (W3)
;NMRAnetNode.mpas,257 :: 		while (i < Nodes.AllocatedCount) do
L__NMRAnetNode_FindFirstVirtualNode44:
; i start address is: 6 (W3)
; Result start address is: 4 (W2)
0x5436	0x224F00  	MOV	#lo_addr(_Nodes+3120), W0
0x5438	0xE11810  	CP	W3, [W0]
0x543A	0x3D0010  	BRA GE	L__NMRAnetNode_FindFirstVirtualNode213
L__NMRAnetNode_FindFirstVirtualNode240:
;NMRAnetNode.mpas,259 :: 		if Nodes.AllocatedList[i]^.State and NS_VIRTUAL = NS_VIRTUAL then
0x543C	0xDD18C1  	SL	W3, #1, W1
0x543E	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x5440	0x400001  	ADD	W0, W1, W0
0x5442	0x780010  	MOV	[W0], W0
0x5444	0x784010  	MOV.B	[W0], W0
0x5446	0xFB8000  	ZE	W0, W0
0x5448	0x600068  	AND	W0, #8, W0
0x544A	0xE10068  	CP	W0, #8
0x544C	0x3A0005  	BRA NZ	L__NMRAnetNode_FindFirstVirtualNode49
L__NMRAnetNode_FindFirstVirtualNode241:
; Result end address is: 4 (W2)
;NMRAnetNode.mpas,261 :: 		Result := Nodes.AllocatedList[i];
0x544E	0xDD18C1  	SL	W3, #1, W1
; i end address is: 6 (W3)
0x5450	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x5452	0x400001  	ADD	W0, W1, W0
; Result start address is: 2 (W1)
0x5454	0x780090  	MOV	[W0], W1
;NMRAnetNode.mpas,262 :: 		Break;
; Result end address is: 2 (W1)
0x5456	0x370003  	BRA	L__NMRAnetNode_FindFirstVirtualNode45
;NMRAnetNode.mpas,263 :: 		end;
L__NMRAnetNode_FindFirstVirtualNode49:
;NMRAnetNode.mpas,264 :: 		Inc(i);
; i start address is: 6 (W3)
; Result start address is: 4 (W2)
0x5458	0xEC2006  	INC	W3
;NMRAnetNode.mpas,265 :: 		end;
; Result end address is: 4 (W2)
; i end address is: 6 (W3)
0x545A	0x37FFED  	BRA	L__NMRAnetNode_FindFirstVirtualNode44
L__NMRAnetNode_FindFirstVirtualNode213:
;NMRAnetNode.mpas,257 :: 		while (i < Nodes.AllocatedCount) do
0x545C	0x780082  	MOV	W2, W1
;NMRAnetNode.mpas,265 :: 		end;
L__NMRAnetNode_FindFirstVirtualNode45:
;NMRAnetNode.mpas,266 :: 		end;
; Result start address is: 2 (W1)
0x545E	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetNode_FindFirstVirtualNode:
0x5460	0x060000  	RETURN
; end of _NMRAnetNode_FindFirstVirtualNode
_NMRAnetStateMachine_TrySendAliasMapReset:
0x54B6	0xFA000E  	LNK	#14
;NMRAnetStateMachine.mpas,164 :: 		begin
;NMRAnetStateMachine.mpas,165 :: 		Result := TransmitCANLayerMsg(Node, @CANBuffer, MTI_AMR);
0x54B8	0x781F8B  	PUSH	W11
0x54BA	0x781F8C  	PUSH	W12
0x54BC	0x781F8D  	PUSH	W13
0x54BE	0x470060  	ADD	W14, #0, W0
0x54C0	0x23000C  	MOV	#12288, W12
0x54C2	0x20070D  	MOV	#112, W13
0x54C4	0x780580  	MOV	W0, W11
0x54C6	0x07F504  	RCALL	_TransmitCANLayerMsg
; Result start address is: 2 (W1)
0x54C8	0x780080  	MOV	W0, W1
;NMRAnetStateMachine.mpas,166 :: 		end;
0x54CA	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_NMRAnetStateMachine_TrySendAliasMapReset:
0x54CC	0x7806CF  	POP	W13
0x54CE	0x78064F  	POP	W12
0x54D0	0x7805CF  	POP	W11
0x54D2	0xFA8000  	ULNK
0x54D4	0x060000  	RETURN
; end of _NMRAnetStateMachine_TrySendAliasMapReset
_NMRAnetNode_Release:
0x54EE	0xFA0002  	LNK	#2
;NMRAnetNode.mpas,364 :: 		begin
;NMRAnetNode.mpas,365 :: 		if Node <> nil then
0x54F0	0xE15060  	CP	W10, #0
0x54F2	0x320039  	BRA Z	L__NMRAnetNode_Release72
L__NMRAnetNode_Release250:
;NMRAnetNode.mpas,367 :: 		if Node^.State and NS_VIRTUAL = NS_VIRTUAL then                                     // Only release Virtual Nodes
0x54F4	0x78401A  	MOV.B	[W10], W0
0x54F6	0xFB8000  	ZE	W0, W0
0x54F8	0x600068  	AND	W0, #8, W0
0x54FA	0xE10068  	CP	W0, #8
0x54FC	0x3A0034  	BRA NZ	L__NMRAnetNode_Release75
L__NMRAnetNode_Release251:
;NMRAnetNode.mpas,369 :: 		i := 0;
; i start address is: 4 (W2)
0x54FE	0xEF2004  	CLR	W2
; i end address is: 4 (W2)
;NMRAnetNode.mpas,370 :: 		while i < Nodes.AllocatedCount do
L__NMRAnetNode_Release78:
; i start address is: 4 (W2)
0x5500	0x224F00  	MOV	#lo_addr(_Nodes+3120), W0
0x5502	0xE11010  	CP	W2, [W0]
0x5504	0x3D002E  	BRA GE	L__NMRAnetNode_Release79
L__NMRAnetNode_Release252:
;NMRAnetNode.mpas,372 :: 		if Nodes.AllocatedList[i] = Node then
0x5506	0xDD10C1  	SL	W2, #1, W1
0x5508	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x550A	0x400001  	ADD	W0, W1, W0
0x550C	0x780010  	MOV	[W0], W0
0x550E	0xE1000A  	CP	W0, W10
0x5510	0x3A0025  	BRA NZ	L__NMRAnetNode_Release215
L__NMRAnetNode_Release253:
;NMRAnetNode.mpas,374 :: 		Nodes.AllocatedList[i] := PNMRAnetNode( nil);
0x5512	0xDD10C1  	SL	W2, #1, W1
0x5514	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x5516	0x400081  	ADD	W0, W1, W1
0x5518	0x200000  	MOV	#0, W0
0x551A	0x780880  	MOV	W0, [W1]
;NMRAnetNode.mpas,375 :: 		j := i;
0x551C	0x980702  	MOV	W2, [W14+0]
; i end address is: 4 (W2)
;NMRAnetNode.mpas,376 :: 		while j < Nodes.AllocatedCount - 1 do
L__NMRAnetNode_Release86:
0x551E	0x812780  	MOV	_Nodes+3120, W0
0x5520	0x5000E1  	SUB	W0, #1, W1
0x5522	0x470060  	ADD	W14, #0, W0
0x5524	0xE10810  	CP	W1, [W0]
0x5526	0x340015  	BRA LE	L__NMRAnetNode_Release87
L__NMRAnetNode_Release254:
;NMRAnetNode.mpas,378 :: 		Nodes.AllocatedList[j] := Nodes.AllocatedList[j + 1];
0x5528	0x90000E  	MOV	[W14+0], W0
0x552A	0xDD00C1  	SL	W0, #1, W1
0x552C	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x552E	0x400101  	ADD	W0, W1, W2
0x5530	0x90000E  	MOV	[W14+0], W0
0x5532	0xEC2000  	INC	W0
0x5534	0xDD00C1  	SL	W0, #1, W1
0x5536	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x5538	0x400001  	ADD	W0, W1, W0
0x553A	0x780910  	MOV	[W0], [W2]
;NMRAnetNode.mpas,379 :: 		Nodes.AllocatedList[j + 1] := PNMRAnetNode( nil);
0x553C	0x90000E  	MOV	[W14+0], W0
0x553E	0xEC2000  	INC	W0
0x5540	0xDD00C1  	SL	W0, #1, W1
0x5542	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x5544	0x400081  	ADD	W0, W1, W1
0x5546	0x200000  	MOV	#0, W0
0x5548	0x780880  	MOV	W0, [W1]
;NMRAnetNode.mpas,380 :: 		Inc(j);
0x554A	0x200011  	MOV	#1, W1
0x554C	0x470060  	ADD	W14, #0, W0
0x554E	0x408810  	ADD	W1, [W0], [W0]
;NMRAnetNode.mpas,381 :: 		end;
0x5550	0x37FFE6  	BRA	L__NMRAnetNode_Release86
L__NMRAnetNode_Release87:
;NMRAnetNode.mpas,382 :: 		Dec(Nodes.AllocatedCount);
0x5552	0x812780  	MOV	_Nodes+3120, W0
0x5554	0xED2000  	DEC	W0
0x5556	0x892780  	MOV	W0, _Nodes+3120
;NMRAnetNode.mpas,383 :: 		i := Nodes.AllocatedCount;                                                     // Done, break out
; i start address is: 0 (W0)
0x5558	0x812780  	MOV	_Nodes+3120, W0
; i end address is: 0 (W0)
;NMRAnetNode.mpas,384 :: 		end;
0x555A	0x370001  	BRA	L__NMRAnetNode_Release83
L__NMRAnetNode_Release215:
;NMRAnetNode.mpas,372 :: 		if Nodes.AllocatedList[i] = Node then
0x555C	0x780002  	MOV	W2, W0
;NMRAnetNode.mpas,384 :: 		end;
L__NMRAnetNode_Release83:
;NMRAnetNode.mpas,385 :: 		Inc(i);
; i start address is: 0 (W0)
; i start address is: 4 (W2)
0x555E	0x400161  	ADD	W0, #1, W2
; i end address is: 0 (W0)
;NMRAnetNode.mpas,386 :: 		end;
; i end address is: 4 (W2)
0x5560	0x37FFCF  	BRA	L__NMRAnetNode_Release78
L__NMRAnetNode_Release79:
;NMRAnetNode.mpas,387 :: 		Node^.State := NS_EMPTY;                                                  // Do this last so item is not allocated in an interrupt half way through this
0x5562	0xEF2000  	CLR	W0
0x5564	0x784D00  	MOV.B	W0, [W10]
;NMRAnetNode.mpas,388 :: 		end;
L__NMRAnetNode_Release75:
;NMRAnetNode.mpas,389 :: 		end;
L__NMRAnetNode_Release72:
;NMRAnetNode.mpas,390 :: 		end;
L_end_NMRAnetNode_Release:
0x5566	0xFA8000  	ULNK
0x5568	0x060000  	RETURN
; end of _NMRAnetNode_Release
dsPIC33_CAN_Interrupt_CAN_Event:
0x58C2	0xFA000E  	LNK	#14
0x58C4	0xF80034  	PUSH	DSWPAG
0x58C6	0xF80032  	PUSH	DSRPAG
0x58C8	0xF80036  	PUSH	RCOUNT
0x58CA	0x781F80  	PUSH	W0
0x58CC	0x200020  	MOV	#2, W0
0x58CE	0x09000C  	REPEAT	#12
0x58D0	0x781FB0  	PUSH	[W0++]
;dsPIC33_CAN.mpas,443 :: 		begin
;dsPIC33_CAN.mpas,444 :: 		dsPIC33_CAN_GlobalInterruptFlagCAN_Event(True);                               // Reset the Global CAN Event Interrupt Flag
0x58D2	0x781F8A  	PUSH	W10
0x58D4	0x781F8B  	PUSH	W11
0x58D6	0x781F8C  	PUSH	W12
0x58D8	0x2FFFFA  	MOV	#65535, W10
0x58DA	0x07FDFD  	RCALL	_dsPIC33_CAN_GlobalInterruptFlagCAN_Event
;dsPIC33_CAN.mpas,445 :: 		IntCode := dsPIC33_CAN_InterruptCode;
0x58DC	0x07F5B5  	RCALL	_dsPIC33_CAN_InterruptCode
; IntCode start address is: 2 (W1)
0x58DE	0x780080  	MOV	W0, W1
; IntCode end address is: 2 (W1)
;dsPIC33_CAN.mpas,446 :: 		while IntCode <> ICODE_NO_INTERRUPT do                                        // Use the Interrupt Code to decode the Events that are both Enabled and Flags are set
L_dsPIC33_CAN_Interrupt_CAN_Event18:
; IntCode start address is: 2 (W1)
0x58E0	0x200400  	MOV	#64, W0
0x58E2	0xE10800  	CP	W1, W0
0x58E4	0x320063  	BRA Z	L_dsPIC33_CAN_Interrupt_CAN_Event19
L_dsPIC33_CAN_Interrupt_CAN_Event298:
;dsPIC33_CAN.mpas,449 :: 		ICODE_TRB0 :                                                              // Tx Rx Buffer 0
0x58E6	0xE10860  	CP	W1, #0
0x58E8	0x3A000B  	BRA NZ	L_dsPIC33_CAN_Interrupt_CAN_Event25
L_dsPIC33_CAN_Interrupt_CAN_Event299:
; IntCode end address is: 2 (W1)
;dsPIC33_CAN.mpas,451 :: 		dsPIC33_CAN_InterruptFlagTXBuffer(True);                                // TX Interrupt Flag Reset
0x58EA	0x2FFFFA  	MOV	#65535, W10
0x58EC	0x07F6F4  	RCALL	_dsPIC33_CAN_InterruptFlagTXBuffer
;dsPIC33_CAN.mpas,452 :: 		if not StartTransmission then
0x58EE	0x07F86D  	RCALL	dsPIC33_CAN_StartTransmission
0x58F0	0xEEA000  	COM	W0
0x58F2	0x320005  	BRA Z	L_dsPIC33_CAN_Interrupt_CAN_Event27
L_dsPIC33_CAN_Interrupt_CAN_Event300:
;dsPIC33_CAN.mpas,453 :: 		CAN_Engine.State := CAN_Engine.State and not CES_TRANSMITTING;
0x58F4	0x225DA0  	MOV	#lo_addr(_CAN_Engine), W0
0x58F6	0x784110  	MOV.B	[W0], W2
0x58F8	0xB3CFE1  	MOV.B	#254, W1
0x58FA	0x225DA0  	MOV	#lo_addr(_CAN_Engine), W0
0x58FC	0x614801  	AND.B	W2, W1, [W0]
L_dsPIC33_CAN_Interrupt_CAN_Event27:
;dsPIC33_CAN.mpas,454 :: 		end;
0x58FE	0x370053  	BRA	L_dsPIC33_CAN_Interrupt_CAN_Event22
L_dsPIC33_CAN_Interrupt_CAN_Event25:
;dsPIC33_CAN.mpas,455 :: 		ICODE_TRB1 :                                                              // Tx Rx Buffer 0
; IntCode start address is: 2 (W1)
0x5900	0xE10861  	CP	W1, #1
0x5902	0x3A0003  	BRA NZ	L_dsPIC33_CAN_Interrupt_CAN_Event31
L_dsPIC33_CAN_Interrupt_CAN_Event301:
; IntCode end address is: 2 (W1)
;dsPIC33_CAN.mpas,457 :: 		dsPIC33_CAN_InterruptFlagTXBuffer(True);                                // TX Interrupt Flag Reset
0x5904	0x2FFFFA  	MOV	#65535, W10
0x5906	0x07F6E7  	RCALL	_dsPIC33_CAN_InterruptFlagTXBuffer
;dsPIC33_CAN.mpas,458 :: 		end;
0x5908	0x37004E  	BRA	L_dsPIC33_CAN_Interrupt_CAN_Event22
L_dsPIC33_CAN_Interrupt_CAN_Event31:
;dsPIC33_CAN.mpas,459 :: 		ICODE_TRB2 :                                                              // Tx Rx Buffer 0
; IntCode start address is: 2 (W1)
0x590A	0xE10862  	CP	W1, #2
0x590C	0x3A0046  	BRA NZ	L_dsPIC33_CAN_Interrupt_CAN_Event34
L_dsPIC33_CAN_Interrupt_CAN_Event302:
; IntCode end address is: 2 (W1)
;dsPIC33_CAN.mpas,479 :: 		dsPIC33_DMA_Style_Buffer(CAN_DIRECTION_READ, @RX_Main_RawBufferArray[0].Word0, Buffer);      // Convert it into a version that matches the registers
0x590E	0x470060  	ADD	W14, #0, W0
0x5910	0x780600  	MOV	W0, W12
0x5912	0x21020B  	MOV	#lo_addr(_RX_Main_RawBufferArray), W11
0x5914	0xB3C01A  	MOV.B	#1, W10
0x5916	0x07F012  	RCALL	dsPIC33_CAN_dsPIC33_DMA_Style_Buffer
;dsPIC33_CAN.mpas,481 :: 		0: ReceivedOnFilter0(@Buffer);
0x5918	0x2102F0  	MOV	#lo_addr(_RX_Main_RawBufferArray+15), W0
0x591A	0x784010  	MOV.B	[W0], W0
0x591C	0xE10460  	CP.B	W0, #0
0x591E	0x3A0004  	BRA NZ	L_dsPIC33_CAN_Interrupt_CAN_Event38
L_dsPIC33_CAN_Interrupt_CAN_Event303:
0x5920	0x470060  	ADD	W14, #0, W0
0x5922	0x780500  	MOV	W0, W10
0x5924	0x07F33C  	RCALL	_ReceivedOnFilter0
0x5926	0x370030  	BRA	L_dsPIC33_CAN_Interrupt_CAN_Event35
L_dsPIC33_CAN_Interrupt_CAN_Event38:
;dsPIC33_CAN.mpas,482 :: 		1: begin  ReceivedOnFilter1(@Buffer);  end;
0x5928	0x2102F0  	MOV	#lo_addr(_RX_Main_RawBufferArray+15), W0
0x592A	0x784010  	MOV.B	[W0], W0
0x592C	0xE10461  	CP.B	W0, #1
0x592E	0x3A0004  	BRA NZ	L_dsPIC33_CAN_Interrupt_CAN_Event41
L_dsPIC33_CAN_Interrupt_CAN_Event304:
0x5930	0x470060  	ADD	W14, #0, W0
0x5932	0x780500  	MOV	W0, W10
0x5934	0x07F960  	RCALL	_ReceivedOnFilter1
0x5936	0x370028  	BRA	L_dsPIC33_CAN_Interrupt_CAN_Event35
L_dsPIC33_CAN_Interrupt_CAN_Event41:
;dsPIC33_CAN.mpas,483 :: 		2: ReceivedOnFilter2(@Buffer);
0x5938	0x2102F0  	MOV	#lo_addr(_RX_Main_RawBufferArray+15), W0
0x593A	0x784010  	MOV.B	[W0], W0
0x593C	0xE10462  	CP.B	W0, #2
0x593E	0x3A0004  	BRA NZ	L_dsPIC33_CAN_Interrupt_CAN_Event44
L_dsPIC33_CAN_Interrupt_CAN_Event305:
0x5940	0x470060  	ADD	W14, #0, W0
0x5942	0x780500  	MOV	W0, W10
0x5944	0x07F41B  	RCALL	_ReceivedOnFilter2
0x5946	0x370020  	BRA	L_dsPIC33_CAN_Interrupt_CAN_Event35
L_dsPIC33_CAN_Interrupt_CAN_Event44:
;dsPIC33_CAN.mpas,484 :: 		3: ReceivedOnFilter3(@Buffer);
0x5948	0x2102F0  	MOV	#lo_addr(_RX_Main_RawBufferArray+15), W0
0x594A	0x784010  	MOV.B	[W0], W0
0x594C	0xE10463  	CP.B	W0, #3
0x594E	0x3A0004  	BRA NZ	L_dsPIC33_CAN_Interrupt_CAN_Event47
L_dsPIC33_CAN_Interrupt_CAN_Event306:
0x5950	0x470060  	ADD	W14, #0, W0
0x5952	0x780500  	MOV	W0, W10
0x5954	0x07F414  	RCALL	_ReceivedOnFilter3
0x5956	0x370018  	BRA	L_dsPIC33_CAN_Interrupt_CAN_Event35
L_dsPIC33_CAN_Interrupt_CAN_Event47:
;dsPIC33_CAN.mpas,485 :: 		4: ReceivedOnFilter4(@Buffer);
0x5958	0x2102F0  	MOV	#lo_addr(_RX_Main_RawBufferArray+15), W0
0x595A	0x784010  	MOV.B	[W0], W0
0x595C	0xE10464  	CP.B	W0, #4
0x595E	0x3A0004  	BRA NZ	L_dsPIC33_CAN_Interrupt_CAN_Event50
L_dsPIC33_CAN_Interrupt_CAN_Event307:
0x5960	0x470060  	ADD	W14, #0, W0
0x5962	0x780500  	MOV	W0, W10
0x5964	0x07F40D  	RCALL	_ReceivedOnFilter4
0x5966	0x370010  	BRA	L_dsPIC33_CAN_Interrupt_CAN_Event35
L_dsPIC33_CAN_Interrupt_CAN_Event50:
;dsPIC33_CAN.mpas,486 :: 		5: ReceivedOnFilter5(@Buffer);
0x5968	0x2102F0  	MOV	#lo_addr(_RX_Main_RawBufferArray+15), W0
0x596A	0x784010  	MOV.B	[W0], W0
0x596C	0xE10465  	CP.B	W0, #5
0x596E	0x3A0004  	BRA NZ	L_dsPIC33_CAN_Interrupt_CAN_Event53
L_dsPIC33_CAN_Interrupt_CAN_Event308:
0x5970	0x470060  	ADD	W14, #0, W0
0x5972	0x780500  	MOV	W0, W10
0x5974	0x07F402  	RCALL	_ReceivedOnFilter5
0x5976	0x370008  	BRA	L_dsPIC33_CAN_Interrupt_CAN_Event35
L_dsPIC33_CAN_Interrupt_CAN_Event53:
;dsPIC33_CAN.mpas,487 :: 		6: ReceivedOnFilter6(@Buffer);
0x5978	0x2102F0  	MOV	#lo_addr(_RX_Main_RawBufferArray+15), W0
0x597A	0x784010  	MOV.B	[W0], W0
0x597C	0xE10466  	CP.B	W0, #6
0x597E	0x3A0004  	BRA NZ	L_dsPIC33_CAN_Interrupt_CAN_Event56
L_dsPIC33_CAN_Interrupt_CAN_Event309:
0x5980	0x470060  	ADD	W14, #0, W0
0x5982	0x780500  	MOV	W0, W10
0x5984	0x07F2FD  	RCALL	_ReceivedOnFilter6
0x5986	0x370000  	BRA	L_dsPIC33_CAN_Interrupt_CAN_Event35
L_dsPIC33_CAN_Interrupt_CAN_Event56:
L_dsPIC33_CAN_Interrupt_CAN_Event35:
;dsPIC33_CAN.mpas,489 :: 		dsPIC33_CAN_RX_Full(CAN_RX_0_BUFFER, True);                             // Reset the Full Flag
0x5988	0x2FFFFB  	MOV	#65535, W11
0x598A	0x20002A  	MOV	#2, W10
0x598C	0x07F2FA  	RCALL	_dsPIC33_CAN_RX_Full
;dsPIC33_CAN.mpas,491 :: 		if RBOVIF_bit = 1 then
0x598E	0xAE440A  	BTSS	RBOVIF_bit, BitPos(RBOVIF_bit+0)
0x5990	0x370001  	BRA	L_dsPIC33_CAN_Interrupt_CAN_Event58
;dsPIC33_CAN.mpas,492 :: 		begin {LATA4_bit := 1; delay_us(7); LATA4_bit := 0; delay_us(7);} RBOVIF_bit := 0; end;
0x5992	0xA9440A  	BCLR	RBOVIF_bit, BitPos(RBOVIF_bit+0)
L_dsPIC33_CAN_Interrupt_CAN_Event58:
;dsPIC33_CAN.mpas,494 :: 		dsPIC33_CAN_InterruptFlagRXBuffer(True);                                // RX Interrupt Flag Reset
0x5994	0x2FFFFA  	MOV	#65535, W10
0x5996	0x07F55E  	RCALL	_dsPIC33_CAN_InterruptFlagRXBuffer
;dsPIC33_CAN.mpas,496 :: 		end;
0x5998	0x370006  	BRA	L_dsPIC33_CAN_Interrupt_CAN_Event22
L_dsPIC33_CAN_Interrupt_CAN_Event34:
;dsPIC33_CAN.mpas,497 :: 		ICODE_RX_OVERFLOW :
; IntCode start address is: 2 (W1)
0x599A	0x200430  	MOV	#67, W0
0x599C	0xE10800  	CP	W1, W0
0x599E	0x3A0003  	BRA NZ	L_dsPIC33_CAN_Interrupt_CAN_Event62
L_dsPIC33_CAN_Interrupt_CAN_Event310:
; IntCode end address is: 2 (W1)
;dsPIC33_CAN.mpas,500 :: 		dsPIC33_CAN_InterruptFlagRXBufferOverflow(True);
0x59A0	0x2FFFFA  	MOV	#65535, W10
0x59A2	0x07F565  	RCALL	_dsPIC33_CAN_InterruptFlagRXBufferOverflow
;dsPIC33_CAN.mpas,502 :: 		end else
0x59A4	0x370000  	BRA	L_dsPIC33_CAN_Interrupt_CAN_Event22
L_dsPIC33_CAN_Interrupt_CAN_Event62:
;dsPIC33_CAN.mpas,505 :: 		end;
L_dsPIC33_CAN_Interrupt_CAN_Event22:
;dsPIC33_CAN.mpas,507 :: 		IntCode := dsPIC33_CAN_InterruptCode;                                       // Get the next code (or no code) flag
0x59A6	0x07F550  	RCALL	_dsPIC33_CAN_InterruptCode
; IntCode start address is: 2 (W1)
0x59A8	0x780080  	MOV	W0, W1
;dsPIC33_CAN.mpas,508 :: 		end;
; IntCode end address is: 2 (W1)
0x59AA	0x37FF9A  	BRA	L_dsPIC33_CAN_Interrupt_CAN_Event18
L_dsPIC33_CAN_Interrupt_CAN_Event19:
;dsPIC33_CAN.mpas,511 :: 		end;
L_end_Interrupt_CAN_Event:
0x59AC	0x78064F  	POP	W12
0x59AE	0x7805CF  	POP	W11
0x59B0	0x78054F  	POP	W10
0x59B2	0x2001A0  	MOV	#26, W0
0x59B4	0x09000C  	REPEAT	#12
0x59B6	0x78104F  	POP	[W0--]
0x59B8	0x78004F  	POP	W0
0x59BA	0xF90036  	POP	RCOUNT
0x59BC	0xF90032  	POP	DSRPAG
0x59BE	0xF90034  	POP	DSWPAG
0x59C0	0xFA8000  	ULNK
0x59C2	0x064000  	RETFIE
; end of dsPIC33_CAN_Interrupt_CAN_Event
_dsPIC33_CAN_GlobalInterruptFlagCAN_Event:
;dsPIC33_CAN.mpas,1064 :: 		begin
;dsPIC33_CAN.mpas,1065 :: 		Result := C1IF_bit = 1;
0x54D6	0xEF6000  	CLR.B	W0
0x54D8	0xAF6804  	BTSC	C1IF_bit, BitPos(C1IF_bit+0)
0x54DA	0xEC6000  	INC.B	W0
; Result start address is: 2 (W1)
0x54DC	0xE10461  	CP.B	W0, #1
0x54DE	0xEF2002  	CLR	W1
0x54E0	0x3A0001  	BRA NZ	L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event362
0x54E2	0xEEA002  	COM	W1
L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event362:
;dsPIC33_CAN.mpas,1066 :: 		if DoReset then C1IF_Bit := 0
0x54E4	0xE20014  	CP0	W10
0x54E6	0x320001  	BRA Z	L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event143
L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event363:
0x54E8	0xA96804  	BCLR	C1IF_bit, BitPos(C1IF_bit+0)
L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event143:
;dsPIC33_CAN.mpas,1067 :: 		end;
0x54EA	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_dsPIC33_CAN_GlobalInterruptFlagCAN_Event:
0x54EC	0x060000  	RETURN
; end of _dsPIC33_CAN_GlobalInterruptFlagCAN_Event
_dsPIC33_CAN_InterruptCode:
;dsPIC33_CAN.mpas,1176 :: 		begin
;dsPIC33_CAN.mpas,1177 :: 		ClearWindowSelectBit;
0x4448	0x07F805  	RCALL	dsPIC33_CAN_ClearWindowSelectBit
;dsPIC33_CAN.mpas,1178 :: 		Result := C1VEC and $007F
0x444A	0x2007F1  	MOV	#127, W1
0x444C	0x204040  	MOV	#lo_addr(C1VEC), W0
; Result start address is: 2 (W1)
0x444E	0x608090  	AND	W1, [W0], W1
;dsPIC33_CAN.mpas,1179 :: 		end;
0x4450	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_dsPIC33_CAN_InterruptCode:
0x4452	0x060000  	RETURN
; end of _dsPIC33_CAN_InterruptCode
_ReceivedOnFilter0:
0x3F9E	0xFA0012  	LNK	#18
;NMRAnetCANReceive.mpas,120 :: 		begin
;NMRAnetCANReceive.mpas,122 :: 		DoDefault := True;
0x3FA0	0x781F8A  	PUSH	W10
0x3FA2	0x781F8B  	PUSH	W11
0x3FA4	0x781F8C  	PUSH	W12
0x3FA6	0x781F8D  	PUSH	W13
0x3FA8	0x2FFFF0  	MOV	#65535, W0
0x3FAA	0x980700  	MOV	W0, [W14+0]
;NMRAnetCANReceive.mpas,123 :: 		if CANLayerReceiveHook <> nil then
0x3FAC	0x8127A0  	MOV	NMRAnetCANReceive_CANLayerReceiveHook, W0
0x3FAE	0xE10060  	CP	W0, #0
0x3FB0	0x320006  	BRA Z	L__ReceivedOnFilter05
L__ReceivedOnFilter0294:
;NMRAnetCANReceive.mpas,124 :: 		CANLayerReceiveHook(CANBuffer, DoDefault);
0x3FB2	0x470060  	ADD	W14, #0, W0
0x3FB4	0x781F8A  	PUSH	W10
0x3FB6	0x780580  	MOV	W0, W11
0x3FB8	0x8127A0  	MOV	NMRAnetCANReceive_CANLayerReceiveHook, W0
0x3FBA	0x010000  	CALL	W0
0x3FBC	0x78054F  	POP	W10
L__ReceivedOnFilter05:
;NMRAnetCANReceive.mpas,126 :: 		if DoDefault then
0x3FBE	0x470060  	ADD	W14, #0, W0
0x3FC0	0xE00010  	CP0	[W0]
0x3FC2	0x3200D5  	BRA Z	L__ReceivedOnFilter08
L__ReceivedOnFilter0295:
;NMRAnetCANReceive.mpas,129 :: 		SourceAlias := NMRAnetUtilities_ExtractSourceAlias(CANBuffer);
0x3FC4	0x07FCAD  	RCALL	_NMRAnetUtilities_ExtractSourceAlias
; SourceAlias start address is: 16 (W8)
0x3FC6	0x780400  	MOV	W0, W8
;NMRAnetCANReceive.mpas,130 :: 		Node := NMRAnetNode_FindByAlias(SourceAlias);
0x3FC8	0x781F8A  	PUSH	W10
0x3FCA	0x780500  	MOV	W0, W10
0x3FCC	0x07FC8B  	RCALL	_NMRAnetNode_FindByAlias
0x3FCE	0x78054F  	POP	W10
; Node start address is: 12 (W6)
0x3FD0	0x780300  	MOV	W0, W6
;NMRAnetCANReceive.mpas,131 :: 		if Node <> nil then                                                         // Check for a Duplicate Alias
0x3FD2	0xE10060  	CP	W0, #0
0x3FD4	0x32002F  	BRA Z	L__ReceivedOnFilter011
L__ReceivedOnFilter0296:
; SourceAlias end address is: 16 (W8)
;NMRAnetCANReceive.mpas,133 :: 		if (CANBuffer^.ID and MTI_CID_MASK = MTI_CID0) or (CANBuffer^.ID and MTI_CID_MASK = MTI_CID1) or (CANBuffer^.ID and MTI_CID_MASK = MTI_CID2) or (CANBuffer^.ID and MTI_CID_MASK = MTI_CID3) then
0x3FD6	0xBE011A  	MOV.D	[W10], W2
0x3FD8	0x200000  	MOV	#0, W0
0x3FDA	0x207001  	MOV	#1792, W1
0x3FDC	0x610200  	AND	W2, W0, W4
0x3FDE	0x618281  	AND	W3, W1, W5
0x3FE0	0x200000  	MOV	#0, W0
0x3FE2	0x207001  	MOV	#1792, W1
0x3FE4	0xE12000  	CP	W4, W0
0x3FE6	0xE1A801  	CPB	W5, W1
0x3FE8	0xEF2004  	CLR	W2
0x3FEA	0x3A0001  	BRA NZ	L__ReceivedOnFilter0297
0x3FEC	0xEEA004  	COM	W2
L__ReceivedOnFilter0297:
0x3FEE	0x200000  	MOV	#0, W0
0x3FF0	0x206001  	MOV	#1536, W1
0x3FF2	0xE12000  	CP	W4, W0
0x3FF4	0xE1A801  	CPB	W5, W1
0x3FF6	0xEF2000  	CLR	W0
0x3FF8	0x3A0001  	BRA NZ	L__ReceivedOnFilter0298
0x3FFA	0xEEA000  	COM	W0
L__ReceivedOnFilter0298:
0x3FFC	0x710100  	IOR	W2, W0, W2
0x3FFE	0x200000  	MOV	#0, W0
0x4000	0x205001  	MOV	#1280, W1
0x4002	0xE12000  	CP	W4, W0
0x4004	0xE1A801  	CPB	W5, W1
0x4006	0xEF2000  	CLR	W0
0x4008	0x3A0001  	BRA NZ	L__ReceivedOnFilter0299
0x400A	0xEEA000  	COM	W0
L__ReceivedOnFilter0299:
0x400C	0x710100  	IOR	W2, W0, W2
0x400E	0x200000  	MOV	#0, W0
0x4010	0x204001  	MOV	#1024, W1
0x4012	0xE12000  	CP	W4, W0
0x4014	0xE1A801  	CPB	W5, W1
0x4016	0xEF2000  	CLR	W0
0x4018	0x3A0001  	BRA NZ	L__ReceivedOnFilter0300
0x401A	0xEEA000  	COM	W0
L__ReceivedOnFilter0300:
0x401C	0x710000  	IOR	W2, W0, W0
0x401E	0x320005  	BRA Z	L__ReceivedOnFilter014
L__ReceivedOnFilter0301:
;NMRAnetCANReceive.mpas,134 :: 		Node^.MsgFlags := Node^.MsgFlags or MF_DUPLICATE_ALIAS_RID              // A "good" duplicate Alias
0x4020	0x4300F6  	ADD	W6, #22, W1
; Node end address is: 12 (W6)
0x4022	0xFB8011  	ZE	[W1], W0
0x4024	0x700064  	IOR	W0, #4, W0
0x4026	0x784880  	MOV.B	W0, [W1]
0x4028	0x370004  	BRA	L__ReceivedOnFilter015
;NMRAnetCANReceive.mpas,135 :: 		else
L__ReceivedOnFilter014:
;NMRAnetCANReceive.mpas,136 :: 		Node^.MsgFlags := Node^.MsgFlags or MF_DUPLICATE_ALIAS;                 // A "bad" duplicate Alias
; Node start address is: 12 (W6)
0x402A	0x4300F6  	ADD	W6, #22, W1
; Node end address is: 12 (W6)
0x402C	0xFB8011  	ZE	[W1], W0
0x402E	0x700062  	IOR	W0, #2, W0
0x4030	0x784880  	MOV.B	W0, [W1]
L__ReceivedOnFilter015:
;NMRAnetCANReceive.mpas,137 :: 		end else
0x4032	0x37009D  	BRA	L__ReceivedOnFilter012
L__ReceivedOnFilter011:
;NMRAnetCANReceive.mpas,140 :: 		case CANBuffer^.ID and MTI_MASK of
; SourceAlias start address is: 16 (W8)
0x4034	0xBE011A  	MOV.D	[W10], W2
0x4036	0x2F0000  	MOV	#61440, W0
0x4038	0x20FFF1  	MOV	#4095, W1
0x403A	0x610100  	AND	W2, W0, W2
0x403C	0x618181  	AND	W3, W1, W3
0x403E	0x980772  	MOV	W2, [W14+14]
0x4040	0x980F03  	MOV	W3, [W14+16]
;NMRAnetCANReceive.mpas,141 :: 		MTI_AME  : begin                                                        // Alias Map Enquiry.....
0x4042	0x220000  	MOV	#8192, W0
0x4044	0x200701  	MOV	#112, W1
0x4046	0xE11000  	CP	W2, W0
0x4048	0xE19801  	CPB	W3, W1
0x404A	0x3A0020  	BRA NZ	L__ReceivedOnFilter019
L__ReceivedOnFilter0302:
; SourceAlias end address is: 16 (W8)
;NMRAnetCANReceive.mpas,142 :: 		if CANBuffer^.DataCount = 6 then                            // Does the data contain the correct number of bytes for a Node ID?
0x404C	0x450064  	ADD	W10, #4, W0
0x404E	0x784010  	MOV.B	[W0], W0
0x4050	0xE10466  	CP.B	W0, #6
0x4052	0x3A0015  	BRA NZ	L__ReceivedOnFilter021
L__ReceivedOnFilter0303:
;NMRAnetCANReceive.mpas,144 :: 		NMRAnetUtilities_CANBufferBytesToNodeID(@CANBuffer^.DataBytes, NodeID, 0);
0x4054	0x4500E5  	ADD	W10, #5, W1
0x4056	0x470062  	ADD	W14, #2, W0
0x4058	0xEF2018  	CLR	W12
0x405A	0x780580  	MOV	W0, W11
0x405C	0x780501  	MOV	W1, W10
0x405E	0x07ED32  	RCALL	_NMRAnetUtilities_CANBufferBytesToNodeID
;NMRAnetCANReceive.mpas,145 :: 		Node := NMRAnetNode_FindByNodeID(NodeID);
0x4060	0x470062  	ADD	W14, #2, W0
0x4062	0x780500  	MOV	W0, W10
0x4064	0x07ED01  	RCALL	_NMRAnetNode_FindByNodeID
; Node start address is: 4 (W2)
0x4066	0x780100  	MOV	W0, W2
;NMRAnetCANReceive.mpas,146 :: 		if Node <> nil then
0x4068	0xE10060  	CP	W0, #0
0x406A	0x320008  	BRA Z	L__ReceivedOnFilter024
L__ReceivedOnFilter0304:
;NMRAnetCANReceive.mpas,148 :: 		if NMRAnetNode_TestStateFlag(Node, NS_PERMITTED) then   // Only reply if node is in Permitted state
0x406C	0xB3C02B  	MOV.B	#2, W11
0x406E	0x780502  	MOV	W2, W10
0x4070	0x07FE0F  	RCALL	_NMRAnetNode_TestStateFlag
0x4072	0xE20000  	CP0	W0
0x4074	0x320003  	BRA Z	L__ReceivedOnFilter027
L__ReceivedOnFilter0305:
;NMRAnetCANReceive.mpas,149 :: 		NMRAnetNode_SetMsgFlag(Node, MF_ALIAS_MAP_ENQUIRY);
0x4076	0xB3C08B  	MOV.B	#8, W11
0x4078	0x780502  	MOV	W2, W10
; Node end address is: 4 (W2)
0x407A	0x07FE04  	RCALL	_NMRAnetNode_SetMsgFlag
L__ReceivedOnFilter027:
;NMRAnetCANReceive.mpas,150 :: 		end
L__ReceivedOnFilter024:
;NMRAnetCANReceive.mpas,151 :: 		end else
0x407C	0x370006  	BRA	L__ReceivedOnFilter022
L__ReceivedOnFilter021:
;NMRAnetCANReceive.mpas,153 :: 		if CANBuffer^.DataCount = 0 then                            // Is the message for all Nodes?
0x407E	0x450064  	ADD	W10, #4, W0
0x4080	0x784010  	MOV.B	[W0], W0
0x4082	0xE10460  	CP.B	W0, #0
0x4084	0x3A0002  	BRA NZ	L__ReceivedOnFilter030
L__ReceivedOnFilter0306:
;NMRAnetCANReceive.mpas,154 :: 		NMRAnetNode_SetMsgFlags(MF_ALIAS_MAP_ENQUIRY);
0x4086	0x20008A  	MOV	#8, W10
0x4088	0x07FD54  	RCALL	_NMRAnetNode_SetMsgFlags
L__ReceivedOnFilter030:
;NMRAnetCANReceive.mpas,155 :: 		end
L__ReceivedOnFilter022:
;NMRAnetCANReceive.mpas,156 :: 		end;
0x408A	0x370071  	BRA	L__ReceivedOnFilter016
L__ReceivedOnFilter019:
;NMRAnetCANReceive.mpas,157 :: 		MTI_AMD  : begin                                                        // Alias Map Definition....
; SourceAlias start address is: 16 (W8)
0x408C	0x210002  	MOV	#4096, W2
0x408E	0x200703  	MOV	#112, W3
0x4090	0x90007E  	MOV	[W14+14], W0
0x4092	0x90088E  	MOV	[W14+16], W1
0x4094	0xE10002  	CP	W0, W2
0x4096	0xE18803  	CPB	W1, W3
0x4098	0x3A003A  	BRA NZ	L__ReceivedOnFilter034
L__ReceivedOnFilter0307:
;NMRAnetCANReceive.mpas,158 :: 		if CANBuffer^.DataCount = 6 then                            // Does the data contain the correct number of bytes for a Node ID?
0x409A	0x450064  	ADD	W10, #4, W0
0x409C	0x784010  	MOV.B	[W0], W0
0x409E	0xE10466  	CP.B	W0, #6
0x40A0	0x3A000D  	BRA NZ	L__ReceivedOnFilter036
L__ReceivedOnFilter0308:
;NMRAnetCANReceive.mpas,160 :: 		NMRAnetUtilities_CANBufferBytesToNodeID(@CANBuffer^.DataBytes, NodeID, 0);
0x40A2	0x4500E5  	ADD	W10, #5, W1
0x40A4	0x470062  	ADD	W14, #2, W0
0x40A6	0xEF2018  	CLR	W12
0x40A8	0x780580  	MOV	W0, W11
0x40AA	0x780501  	MOV	W1, W10
0x40AC	0x07ED0B  	RCALL	_NMRAnetUtilities_CANBufferBytesToNodeID
;NMRAnetCANReceive.mpas,161 :: 		Node := NMRAnetNode_FindByNodeID(NodeID);                 // *************** Need to characterize how much time this may take with a large number of nodes
0x40AE	0x470062  	ADD	W14, #2, W0
0x40B0	0x780500  	MOV	W0, W10
0x40B2	0x07ECDA  	RCALL	_NMRAnetNode_FindByNodeID
;NMRAnetCANReceive.mpas,162 :: 		if Node <> nil then
0x40B4	0xE10060  	CP	W0, #0
0x40B6	0x320002  	BRA Z	L__ReceivedOnFilter039
L__ReceivedOnFilter0309:
;NMRAnetCANReceive.mpas,163 :: 		NMRAnetNode_SetMsgFlags(MF_DUPLICATE_NODE_ID);
0x40B8	0x20001A  	MOV	#1, W10
0x40BA	0x07FD3B  	RCALL	_NMRAnetNode_SetMsgFlags
L__ReceivedOnFilter039:
;NMRAnetCANReceive.mpas,164 :: 		end;
L__ReceivedOnFilter036:
;NMRAnetCANReceive.mpas,165 :: 		for i := 0 to Nodes.AllocatedCount - 1 do  // *************** Need to characterize how much time this may take with a large number of nodes
; i start address is: 10 (W5)
0x40BC	0xEF200A  	CLR	W5
; SourceAlias end address is: 16 (W8)
; i end address is: 10 (W5)
0x40BE	0x780308  	MOV	W8, W6
L__ReceivedOnFilter041:
; i start address is: 10 (W5)
; SourceAlias start address is: 12 (W6)
; SourceAlias start address is: 12 (W6)
; SourceAlias end address is: 12 (W6)
0x40C0	0x812780  	MOV	_Nodes+3120, W0
0x40C2	0xED2000  	DEC	W0
0x40C4	0x980760  	MOV	W0, [W14+12]
0x40C6	0xE12800  	CP	W5, W0
0x40C8	0x3C0021  	BRA GT	L__ReceivedOnFilter045
L__ReceivedOnFilter0310:
; SourceAlias end address is: 12 (W6)
;NMRAnetCANReceive.mpas,167 :: 		DatagramBuffer := nil;
; SourceAlias start address is: 12 (W6)
0x40CA	0xEF2000  	CLR	W0
0x40CC	0x980750  	MOV	W0, [W14+10]
;NMRAnetCANReceive.mpas,168 :: 		if NMRAnetUtilities_FindInDatagramByState(Nodes.AllocatedList[i], SourceAlias, DatagramBuffer, CBS_PROCESSING or CBS_TRANSFER_COMPLETE, True) then
0x40CE	0xDD28C1  	SL	W5, #1, W1
0x40D0	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x40D2	0x400081  	ADD	W0, W1, W1
0x40D4	0x47006A  	ADD	W14, #10, W0
0x40D6	0x781F8A  	PUSH	W10
0x40D8	0xB3C0AD  	MOV.B	#10, W13
0x40DA	0x780600  	MOV	W0, W12
0x40DC	0x780586  	MOV	W6, W11
0x40DE	0x780511  	MOV	[W1], W10
0x40E0	0x2FFFF0  	MOV	#65535, W0
0x40E2	0x781F80  	PUSH	W0
0x40E4	0x07EDBE  	RCALL	_NMRAnetUtilities_FindInDatagramByState
0x40E6	0xB1002F  	SUB	#2, W15
0x40E8	0x78054F  	POP	W10
0x40EA	0xE20000  	CP0	W0
0x40EC	0x32000A  	BRA Z	L__ReceivedOnFilter047
L__ReceivedOnFilter0311:
;NMRAnetCANReceive.mpas,170 :: 		NMRAnetUtilities_DatagramBufferUnLink(Nodes.AllocatedList[i], DatagramBuffer); // Alias is no longer valid for this Datagram (it was reset) so we need to throw it away
0x40EE	0xDD28C1  	SL	W5, #1, W1
0x40F0	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x40F2	0x400001  	ADD	W0, W1, W0
0x40F4	0x781F8A  	PUSH	W10
0x40F6	0x9005DE  	MOV	[W14+10], W11
0x40F8	0x780510  	MOV	[W0], W10
0x40FA	0x07EFCB  	RCALL	_NMRAnetUtilities_DatagramBufferUnLink
;NMRAnetCANReceive.mpas,171 :: 		NMRAnetBufferPools_ReleaseDatagramBuffer( DatagramBuffer);
0x40FC	0x90055E  	MOV	[W14+10], W10
0x40FE	0x07EFEF  	RCALL	_NMRAnetBufferPools_ReleaseDatagramBuffer
0x4100	0x78054F  	POP	W10
;NMRAnetCANReceive.mpas,173 :: 		end
L__ReceivedOnFilter047:
;NMRAnetCANReceive.mpas,174 :: 		end
0x4102	0x90006E  	MOV	[W14+12], W0
0x4104	0xE12800  	CP	W5, W0
0x4106	0x320002  	BRA Z	L__ReceivedOnFilter045
L__ReceivedOnFilter0312:
; i start address is: 10 (W5)
0x4108	0xEC200A  	INC	W5
; i end address is: 10 (W5)
; SourceAlias end address is: 12 (W6)
; i end address is: 10 (W5)
0x410A	0x37FFDA  	BRA	L__ReceivedOnFilter041
L__ReceivedOnFilter045:
;NMRAnetCANReceive.mpas,175 :: 		end;
0x410C	0x370030  	BRA	L__ReceivedOnFilter016
L__ReceivedOnFilter034:
;NMRAnetCANReceive.mpas,176 :: 		MTI_AMR  : begin                                                        // Alias Map Reset.....
; SourceAlias start address is: 16 (W8)
0x410E	0x230002  	MOV	#12288, W2
0x4110	0x200703  	MOV	#112, W3
0x4112	0x90007E  	MOV	[W14+14], W0
0x4114	0x90088E  	MOV	[W14+16], W1
0x4116	0xE10002  	CP	W0, W2
0x4118	0xE18803  	CPB	W1, W3
0x411A	0x3A0029  	BRA NZ	L__ReceivedOnFilter051
L__ReceivedOnFilter0313:
;NMRAnetCANReceive.mpas,178 :: 		for i := 0 to Nodes.AllocatedCount - 1 do  // *************** Need to characterize how much time this may take with a large number of nodes
; i start address is: 12 (W6)
0x411C	0xEF200C  	CLR	W6
; SourceAlias end address is: 16 (W8)
; i end address is: 12 (W6)
0x411E	0x780288  	MOV	W8, W5
L__ReceivedOnFilter052:
; i start address is: 12 (W6)
; SourceAlias start address is: 10 (W5)
; SourceAlias start address is: 10 (W5)
; SourceAlias end address is: 10 (W5)
0x4120	0x812780  	MOV	_Nodes+3120, W0
0x4122	0xED2000  	DEC	W0
0x4124	0x980760  	MOV	W0, [W14+12]
0x4126	0xE13000  	CP	W6, W0
0x4128	0x3C0021  	BRA GT	L__ReceivedOnFilter056
L__ReceivedOnFilter0314:
; SourceAlias end address is: 10 (W5)
;NMRAnetCANReceive.mpas,180 :: 		DatagramBuffer := nil;
; SourceAlias start address is: 10 (W5)
0x412A	0xEF2000  	CLR	W0
0x412C	0x980750  	MOV	W0, [W14+10]
;NMRAnetCANReceive.mpas,181 :: 		if NMRAnetUtilities_FindInDatagramByState(Nodes.AllocatedList[i], SourceAlias, DatagramBuffer, CBS_PROCESSING or CBS_TRANSFER_COMPLETE, True) then
0x412E	0xDD30C1  	SL	W6, #1, W1
0x4130	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x4132	0x400081  	ADD	W0, W1, W1
0x4134	0x47006A  	ADD	W14, #10, W0
0x4136	0x781F8A  	PUSH	W10
0x4138	0xB3C0AD  	MOV.B	#10, W13
0x413A	0x780600  	MOV	W0, W12
0x413C	0x780585  	MOV	W5, W11
0x413E	0x780511  	MOV	[W1], W10
0x4140	0x2FFFF0  	MOV	#65535, W0
0x4142	0x781F80  	PUSH	W0
0x4144	0x07ED8E  	RCALL	_NMRAnetUtilities_FindInDatagramByState
0x4146	0xB1002F  	SUB	#2, W15
0x4148	0x78054F  	POP	W10
0x414A	0xE20000  	CP0	W0
0x414C	0x32000A  	BRA Z	L__ReceivedOnFilter058
L__ReceivedOnFilter0315:
;NMRAnetCANReceive.mpas,183 :: 		NMRAnetUtilities_DatagramBufferUnLink(Nodes.AllocatedList[i], DatagramBuffer); // Alias is no longer valid for this Datagram (it was reset) so we need to throw it away
0x414E	0xDD30C1  	SL	W6, #1, W1
0x4150	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x4152	0x400001  	ADD	W0, W1, W0
0x4154	0x781F8A  	PUSH	W10
0x4156	0x9005DE  	MOV	[W14+10], W11
0x4158	0x780510  	MOV	[W0], W10
0x415A	0x07EF9B  	RCALL	_NMRAnetUtilities_DatagramBufferUnLink
;NMRAnetCANReceive.mpas,184 :: 		NMRAnetBufferPools_ReleaseDatagramBuffer( DatagramBuffer);
0x415C	0x90055E  	MOV	[W14+10], W10
0x415E	0x07EFBF  	RCALL	_NMRAnetBufferPools_ReleaseDatagramBuffer
0x4160	0x78054F  	POP	W10
;NMRAnetCANReceive.mpas,186 :: 		end
L__ReceivedOnFilter058:
;NMRAnetCANReceive.mpas,187 :: 		end
0x4162	0x90006E  	MOV	[W14+12], W0
0x4164	0xE13000  	CP	W6, W0
0x4166	0x320002  	BRA Z	L__ReceivedOnFilter056
L__ReceivedOnFilter0316:
; i start address is: 12 (W6)
0x4168	0xEC200C  	INC	W6
; i end address is: 12 (W6)
; SourceAlias end address is: 10 (W5)
; i end address is: 12 (W6)
0x416A	0x37FFDA  	BRA	L__ReceivedOnFilter052
L__ReceivedOnFilter056:
;NMRAnetCANReceive.mpas,188 :: 		end;
0x416C	0x370000  	BRA	L__ReceivedOnFilter016
L__ReceivedOnFilter051:
L__ReceivedOnFilter016:
;NMRAnetCANReceive.mpas,190 :: 		end
L__ReceivedOnFilter012:
;NMRAnetCANReceive.mpas,191 :: 		end;
L__ReceivedOnFilter08:
;NMRAnetCANReceive.mpas,192 :: 		end;
L_end_ReceivedOnFilter0:
0x416E	0x7806CF  	POP	W13
0x4170	0x78064F  	POP	W12
0x4172	0x7805CF  	POP	W11
0x4174	0x78054F  	POP	W10
0x4176	0xFA8000  	ULNK
0x4178	0x060000  	RETURN
; end of _ReceivedOnFilter0
_ReceivedOnFilter2:
;NMRAnetCANReceive.mpas,543 :: 		begin
;NMRAnetCANReceive.mpas,545 :: 		end;
L_end_ReceivedOnFilter2:
0x417C	0x060000  	RETURN
; end of _ReceivedOnFilter2
_ReceivedOnFilter3:
;NMRAnetCANReceive.mpas,548 :: 		begin
;NMRAnetCANReceive.mpas,550 :: 		end;
L_end_ReceivedOnFilter3:
0x417E	0x060000  	RETURN
; end of _ReceivedOnFilter3
_ReceivedOnFilter4:
;NMRAnetCANReceive.mpas,553 :: 		begin
;NMRAnetCANReceive.mpas,555 :: 		end;
L_end_ReceivedOnFilter4:
0x4180	0x060000  	RETURN
; end of _ReceivedOnFilter4
_ReceivedOnFilter5:
;NMRAnetCANReceive.mpas,558 :: 		begin
;NMRAnetCANReceive.mpas,560 :: 		end;
L_end_ReceivedOnFilter5:
0x417A	0x060000  	RETURN
; end of _ReceivedOnFilter5
_ReceivedOnFilter6:
;NMRAnetCANReceive.mpas,563 :: 		begin
;NMRAnetCANReceive.mpas,565 :: 		end;
L_end_ReceivedOnFilter6:
0x3F80	0x060000  	RETURN
; end of _ReceivedOnFilter6
_dsPIC33_CAN_RX_Full:
;dsPIC33_CAN.mpas,977 :: 		begin
;dsPIC33_CAN.mpas,978 :: 		ClearWindowSelectBit;
0x3F82	0x781F8A  	PUSH	W10
0x3F84	0x781F8B  	PUSH	W11
0x3F86	0x781F8C  	PUSH	W12
0x3F88	0x07FA65  	RCALL	dsPIC33_CAN_ClearWindowSelectBit
;dsPIC33_CAN.mpas,979 :: 		Result := ReadRXBit(@C1RXFUL1, BufferNumber, Clear);
0x3F8A	0x78060B  	MOV	W11, W12
0x3F8C	0x78058A  	MOV	W10, W11
0x3F8E	0x20420A  	MOV	#lo_addr(C1RXFUL1), W10
0x3F90	0x07EEAD  	RCALL	dsPIC33_CAN_ReadRXBit
; Result start address is: 2 (W1)
0x3F92	0x780080  	MOV	W0, W1
;dsPIC33_CAN.mpas,980 :: 		end;
0x3F94	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_dsPIC33_CAN_RX_Full:
0x3F96	0x78064F  	POP	W12
0x3F98	0x7805CF  	POP	W11
0x3F9A	0x78054F  	POP	W10
0x3F9C	0x060000  	RETURN
; end of _dsPIC33_CAN_RX_Full
dsPIC33_CAN_ReadRXBit:
;dsPIC33_CAN.mpas,786 :: 		begin
;dsPIC33_CAN.mpas,787 :: 		ClearWindowSelectBit;
0x1CEC	0x070BB3  	RCALL	dsPIC33_CAN_ClearWindowSelectBit
;dsPIC33_CAN.mpas,788 :: 		Offset := BufferNumber div 16;       // Is it First or Second Register?
0x1CEE	0xDE5844  	LSR	W11, #4, W0
;dsPIC33_CAN.mpas,789 :: 		RegPtr := RegPtr + Offset;          // Get to the right Register
0x1CF0	0xDD0041  	SL	W0, #1, W0
0x1CF2	0x450000  	ADD	W10, W0, W0
0x1CF4	0x780500  	MOV	W0, W10
;dsPIC33_CAN.mpas,790 :: 		Offset := BufferNumber;
; Offset start address is: 4 (W2)
0x1CF6	0x78010B  	MOV	W11, W2
;dsPIC33_CAN.mpas,791 :: 		if Offset > 15 then
0x1CF8	0xE1586F  	CP	W11, #15
0x1CFA	0x360002  	BRA LEU	L_dsPIC33_CAN_ReadRXBit288
L_dsPIC33_CAN_ReadRXBit342:
;dsPIC33_CAN.mpas,792 :: 		Offset := Offset - 16; // Convert to the Bit Offset
; Offset start address is: 4 (W2)
0x1CFC	0x510170  	SUB	W2, #16, W2
; Offset end address is: 4 (W2)
; Offset end address is: 4 (W2)
0x1CFE	0x370000  	BRA	L_dsPIC33_CAN_ReadRXBit114
L_dsPIC33_CAN_ReadRXBit288:
;dsPIC33_CAN.mpas,791 :: 		if Offset > 15 then
;dsPIC33_CAN.mpas,792 :: 		Offset := Offset - 16; // Convert to the Bit Offset
L_dsPIC33_CAN_ReadRXBit114:
;dsPIC33_CAN.mpas,793 :: 		Result := RegPtr^.Offset = 1;
; Offset start address is: 4 (W2)
0x1D00	0x200010  	MOV	#1, W0
0x1D02	0xDD0002  	SL	W0, W2, W0
0x1D04	0x60001A  	AND	W0, [W10], W0
0x1D06	0xEF2002  	CLR	W1
0x1D08	0xE10060  	CP	W0, #0
0x1D0A	0x320002  	BRA Z	L_dsPIC33_CAN_ReadRXBit116
L_dsPIC33_CAN_ReadRXBit343:
0x1D0C	0xB3C010  	MOV.B	#1, W0
0x1D0E	0x784080  	MOV.B	W0, W1
L_dsPIC33_CAN_ReadRXBit116:
; Result start address is: 2 (W1)
0x1D10	0xE10C61  	CP.B	W1, #1
0x1D12	0xEF2002  	CLR	W1
0x1D14	0x3A0001  	BRA NZ	L_dsPIC33_CAN_ReadRXBit344
0x1D16	0xEEA002  	COM	W1
L_dsPIC33_CAN_ReadRXBit344:
;dsPIC33_CAN.mpas,794 :: 		if Clear then
0x1D18	0xE20018  	CP0	W12
0x1D1A	0x320004  	BRA Z	L_dsPIC33_CAN_ReadRXBit118
L_dsPIC33_CAN_ReadRXBit345:
;dsPIC33_CAN.mpas,795 :: 		RegPtr^.Offset := 0
0x1D1C	0x200010  	MOV	#1, W0
0x1D1E	0xDD0002  	SL	W0, W2, W0
; Offset end address is: 4 (W2)
0x1D20	0xEEA000  	COM	W0
0x1D22	0x600D1A  	AND	W0, [W10], [W10]
L_dsPIC33_CAN_ReadRXBit118:
;dsPIC33_CAN.mpas,796 :: 		end;
0x1D24	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_ReadRXBit:
0x1D26	0x060000  	RETURN
; end of dsPIC33_CAN_ReadRXBit
_INTERRUPT_1ms_Timer:
0x59C4	0xFA0002  	LNK	#2
0x59C6	0xF80034  	PUSH	DSWPAG
0x59C8	0xF80032  	PUSH	DSRPAG
0x59CA	0xF80036  	PUSH	RCOUNT
0x59CC	0x781F80  	PUSH	W0
0x59CE	0x200020  	MOV	#2, W0
0x59D0	0x09000C  	REPEAT	#12
0x59D2	0x781FB0  	PUSH	[W0++]
;dsPIC33EP_NMRAnetCommandStation.mpas,97 :: 		begin
;dsPIC33EP_NMRAnetCommandStation.mpas,98 :: 		T2IF_bit := 0;                                                                // Clear the Flag
0x59D4	0x781F8A  	PUSH	W10
0x59D6	0xA9E800  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,99 :: 		for i := 0 to Nodes.AllocatedCount - 1 do
; i start address is: 4 (W2)
0x59D8	0xEF2004  	CLR	W2
; i end address is: 4 (W2)
L__INTERRUPT_1ms_Timer8:
; i start address is: 4 (W2)
0x59DA	0x812780  	MOV	_Nodes+3120, W0
0x59DC	0xED2000  	DEC	W0
0x59DE	0x980700  	MOV	W0, [W14+0]
0x59E0	0xE11000  	CP	W2, W0
0x59E2	0x3C000A  	BRA GT	L__INTERRUPT_1ms_Timer12
L__INTERRUPT_1ms_Timer73:
;dsPIC33EP_NMRAnetCommandStation.mpas,100 :: 		NMRAnetStateMachine_100ms_Timer(Nodes.AllocatedList[i]);
0x59E4	0xDD10C1  	SL	W2, #1, W1
0x59E6	0x2246E0  	MOV	#lo_addr(_Nodes+2990), W0
0x59E8	0x400001  	ADD	W0, W1, W0
0x59EA	0x780510  	MOV	[W0], W10
0x59EC	0x07F488  	RCALL	_NMRAnetStateMachine_100ms_Timer
0x59EE	0x90000E  	MOV	[W14+0], W0
0x59F0	0xE11000  	CP	W2, W0
0x59F2	0x320002  	BRA Z	L__INTERRUPT_1ms_Timer12
L__INTERRUPT_1ms_Timer74:
; i start address is: 4 (W2)
0x59F4	0xEC2004  	INC	W2
; i end address is: 4 (W2)
; i end address is: 4 (W2)
0x59F6	0x37FFF1  	BRA	L__INTERRUPT_1ms_Timer8
L__INTERRUPT_1ms_Timer12:
;dsPIC33EP_NMRAnetCommandStation.mpas,101 :: 		NMRAnetBufferPools_100ms_TimeTick;
0x59F8	0x07F45C  	RCALL	_NMRAnetBufferPools_100ms_TimeTick
;dsPIC33EP_NMRAnetCommandStation.mpas,102 :: 		end;
L_end_INTERRUPT_1ms_Timer:
0x59FA	0x78054F  	POP	W10
0x59FC	0x2001A0  	MOV	#26, W0
0x59FE	0x09000C  	REPEAT	#12
0x5A00	0x78104F  	POP	[W0--]
0x5A02	0x78004F  	POP	W0
0x5A04	0xF90036  	POP	RCOUNT
0x5A06	0xF90032  	POP	DSRPAG
0x5A08	0xF90034  	POP	DSWPAG
0x5A0A	0xFA8000  	ULNK
0x5A0C	0x064000  	RETFIE
; end of _INTERRUPT_1ms_Timer
_NMRAnetStateMachine_100ms_Timer:
;NMRAnetStateMachine.mpas,349 :: 		begin
;NMRAnetStateMachine.mpas,350 :: 		Inc(Node^.Login.TimeCounter);
0x42FE	0x4500F4  	ADD	W10, #20, W1
0x4300	0x784011  	MOV.B	[W1], W0
0x4302	0xFB8000  	ZE	W0, W0
0x4304	0xEC2000  	INC	W0
0x4306	0x784880  	MOV.B	W0, [W1]
;NMRAnetStateMachine.mpas,351 :: 		end;
L_end_NMRAnetStateMachine_100ms_Timer:
0x4308	0x060000  	RETURN
; end of _NMRAnetStateMachine_100ms_Timer
_NMRAnetBufferPools_100ms_TimeTick:
;NMRAnetBufferPools.mpas,107 :: 		begin
;NMRAnetBufferPools.mpas,108 :: 		for i := 0 to DatagramPool.Count - 1 do
; i start address is: 10 (W5)
0x42B2	0xEF200A  	CLR	W5
; i end address is: 10 (W5)
L__NMRAnetBufferPools_100ms_TimeTick1:
; i start address is: 10 (W5)
0x42B4	0x2160F0  	MOV	#lo_addr(_DatagramPool+185), W0
0x42B6	0xFB8010  	ZE	[W0], W0
0x42B8	0x500261  	SUB	W0, #1, W4
0x42BA	0xE12804  	CP	W5, W4
0x42BC	0x3C001F  	BRA GT	L__NMRAnetBufferPools_100ms_TimeTick5
L__NMRAnetBufferPools_100ms_TimeTick62:
;NMRAnetBufferPools.mpas,110 :: 		if DatagramPool.Pool[i].State and CBS_ALLOCATED = CBS_ALLOCATED then
0x42BE	0x2005C0  	MOV	#92, W0
0x42C0	0xB80105  	MUL.UU	W0, W5, W2
0x42C2	0x215560  	MOV	#lo_addr(_DatagramPool), W0
0x42C4	0x400002  	ADD	W0, W2, W0
0x42C6	0x784010  	MOV.B	[W0], W0
0x42C8	0xFB8000  	ZE	W0, W0
0x42CA	0x600061  	AND	W0, #1, W0
0x42CC	0xE10061  	CP	W0, #1
0x42CE	0x3A0012  	BRA NZ	L__NMRAnetBufferPools_100ms_TimeTick7
L__NMRAnetBufferPools_100ms_TimeTick63:
;NMRAnetBufferPools.mpas,112 :: 		if DatagramPool.Pool[i].iWatchdog < DATAGRAM_WATCHDOG_MAX then
0x42D0	0x2005C0  	MOV	#92, W0
0x42D2	0xB80105  	MUL.UU	W0, W5, W2
0x42D4	0x215560  	MOV	#lo_addr(_DatagramPool), W0
0x42D6	0x400082  	ADD	W0, W2, W1
0x42D8	0x200580  	MOV	#88, W0
0x42DA	0x408000  	ADD	W1, W0, W0
0x42DC	0x780010  	MOV	[W0], W0
0x42DE	0xE1007E  	CP	W0, #30
0x42E0	0x310009  	BRA GEU	L__NMRAnetBufferPools_100ms_TimeTick10
L__NMRAnetBufferPools_100ms_TimeTick64:
;NMRAnetBufferPools.mpas,113 :: 		Inc(DatagramPool.Pool[i].iWatchdog);
0x42E2	0x2005C0  	MOV	#92, W0
0x42E4	0xB80105  	MUL.UU	W0, W5, W2
0x42E6	0x215560  	MOV	#lo_addr(_DatagramPool), W0
0x42E8	0x400082  	ADD	W0, W2, W1
0x42EA	0x200580  	MOV	#88, W0
0x42EC	0x408080  	ADD	W1, W0, W1
0x42EE	0x780011  	MOV	[W1], W0
0x42F0	0xEC2000  	INC	W0
0x42F2	0x780880  	MOV	W0, [W1]
L__NMRAnetBufferPools_100ms_TimeTick10:
;NMRAnetBufferPools.mpas,114 :: 		end;
L__NMRAnetBufferPools_100ms_TimeTick7:
;NMRAnetBufferPools.mpas,115 :: 		end;
0x42F4	0xE12804  	CP	W5, W4
0x42F6	0x320002  	BRA Z	L__NMRAnetBufferPools_100ms_TimeTick5
L__NMRAnetBufferPools_100ms_TimeTick65:
; i start address is: 10 (W5)
0x42F8	0xEC200A  	INC	W5
; i end address is: 10 (W5)
; i end address is: 10 (W5)
0x42FA	0x37FFDC  	BRA	L__NMRAnetBufferPools_100ms_TimeTick1
L__NMRAnetBufferPools_100ms_TimeTick5:
;NMRAnetBufferPools.mpas,116 :: 		end;
L_end_NMRAnetBufferPools_100ms_TimeTick:
0x42FC	0x060000  	RETURN
; end of _NMRAnetBufferPools_100ms_TimeTick
_INTERRUPT_DCC_Timer:
0x5A0E	0xF80034  	PUSH	DSWPAG
0x5A10	0xF80032  	PUSH	DSRPAG
0x5A12	0xF80036  	PUSH	RCOUNT
0x5A14	0x781F80  	PUSH	W0
0x5A16	0x200020  	MOV	#2, W0
0x5A18	0x09000C  	REPEAT	#12
0x5A1A	0x781FB0  	PUSH	[W0++]
;dsPIC33EP_NMRAnetCommandStation.mpas,62 :: 		begin
;dsPIC33EP_NMRAnetCommandStation.mpas,63 :: 		T1IF_bit := 0;                                                                // Clear the Flag
0x5A1C	0x781F8A  	PUSH	W10
0x5A1E	0x781F8B  	PUSH	W11
0x5A20	0xA96800  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,65 :: 		TMR5 := 0;
0x5A22	0xEF2118  	CLR	TMR5
;dsPIC33EP_NMRAnetCommandStation.mpas,69 :: 		H_Bridge_A_Lo := 0;                                                           // Bridge Off
0x5A24	0xA92E04  	BCLR	LATA1_bit, BitPos(LATA1_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,70 :: 		H_Bridge_A_Hi := 0;                                                           // Bridge Off
0x5A26	0xA90E14  	BCLR	LATB0_bit, BitPos(LATB0_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,71 :: 		H_Bridge_B_Lo := 0;                                                           // Bridge Off
0x5A28	0xA92E14  	BCLR	LATB1_bit, BitPos(LATB1_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,72 :: 		H_Bridge_B_Hi := 0;                                                           // Bridge Off
0x5A2A	0xA98E14  	BCLR	LATB4_bit, BitPos(LATB4_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,75 :: 		if Track.TX_Flags.TRANSMITTING_FLAG_DCC_PIN_BIT = 1 then
0x5A2C	0x216350  	MOV	#lo_addr(_Track+35), W0
0x5A2E	0x784010  	MOV.B	[W0], W0
0x5A30	0xAE4000  	BTSS.B	W0, #2
0x5A32	0x370003  	BRA	L__INTERRUPT_DCC_Timer2
;dsPIC33EP_NMRAnetCommandStation.mpas,77 :: 		H_Bridge_A_Lo := 1;
0x5A34	0xA82E04  	BSET	LATA1_bit, BitPos(LATA1_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,78 :: 		H_Bridge_B_Hi := 1;
0x5A36	0xA88E14  	BSET	LATB4_bit, BitPos(LATB4_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,79 :: 		end else
0x5A38	0x370002  	BRA	L__INTERRUPT_DCC_Timer3
L__INTERRUPT_DCC_Timer2:
;dsPIC33EP_NMRAnetCommandStation.mpas,81 :: 		H_Bridge_A_Hi := 1;
0x5A3A	0xA80E14  	BSET	LATB0_bit, BitPos(LATB0_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,82 :: 		H_Bridge_B_Lo := 1;
0x5A3C	0xA82E14  	BSET	LATB1_bit, BitPos(LATB1_bit+0)
;dsPIC33EP_NMRAnetCommandStation.mpas,83 :: 		end;
L__INTERRUPT_DCC_Timer3:
;dsPIC33EP_NMRAnetCommandStation.mpas,86 :: 		NMRA_DCC_56us_TimeTick(@Track);                                                         // < 1us
0x5A3E	0x21612A  	MOV	#lo_addr(_Track), W10
0x5A40	0x07F4F8  	RCALL	_NMRA_DCC_56us_TimeTick
;dsPIC33EP_NMRAnetCommandStation.mpas,87 :: 		NMRA_DCC_TransmitterStateMachine(@Track);                                               // < 5us
0x5A42	0x21612A  	MOV	#lo_addr(_Track), W10
0x5A44	0x07F462  	RCALL	_NMRA_DCC_TransmitterStateMachine
;dsPIC33EP_NMRAnetCommandStation.mpas,88 :: 		NMRA_DCC_LoadPacketIntoTransmitterStateMachine(@Track, PREAMBLE_BIT_COUNT_NORMAL);      // < 11us    Max
0x5A46	0xB3C0EB  	MOV.B	#14, W11
0x5A48	0x21612A  	MOV	#lo_addr(_Track), W10
0x5A4A	0x07F3B8  	RCALL	_NMRA_DCC_LoadPacketIntoTransmitterStateMachine
;dsPIC33EP_NMRAnetCommandStation.mpas,90 :: 		if TMR5 > DCCTime then DCCTime := TMR5;
0x5A4C	0x8008C1  	MOV	TMR5, W1
0x5A4E	0x225D80  	MOV	#lo_addr(_DCCTime), W0
0x5A50	0xE10810  	CP	W1, [W0]
0x5A52	0x360002  	BRA LEU	L__INTERRUPT_DCC_Timer5
L__INTERRUPT_DCC_Timer71:
0x5A54	0xBF8118  	MOV	TMR5, WREG
0x5A56	0x892EC0  	MOV	W0, _DCCTime
L__INTERRUPT_DCC_Timer5:
;dsPIC33EP_NMRAnetCommandStation.mpas,91 :: 		end;
L_end_INTERRUPT_DCC_Timer:
0x5A58	0x7805CF  	POP	W11
0x5A5A	0x78054F  	POP	W10
0x5A5C	0x2001A0  	MOV	#26, W0
0x5A5E	0x09000C  	REPEAT	#12
0x5A60	0x78104F  	POP	[W0--]
0x5A62	0x78004F  	POP	W0
0x5A64	0xF90036  	POP	RCOUNT
0x5A66	0xF90032  	POP	DSRPAG
0x5A68	0xF90034  	POP	DSWPAG
0x5A6A	0x064000  	RETFIE
; end of _INTERRUPT_DCC_Timer
_NMRA_DCC_56us_TimeTick:
;NMRAnetDCC.mpas,300 :: 		begin
;NMRAnetDCC.mpas,301 :: 		if ABuffer^.TX_TimerCount > 0 then
0x4432	0x200200  	MOV	#32, W0
0x4434	0x450000  	ADD	W10, W0, W0
0x4436	0x780010  	MOV	[W0], W0
0x4438	0xE10060  	CP	W0, #0
0x443A	0x360005  	BRA LEU	L__NMRA_DCC_56us_TimeTick25
L__NMRA_DCC_56us_TimeTick232:
;NMRAnetDCC.mpas,302 :: 		Dec(ABuffer^.TX_TimerCount);
0x443C	0x200200  	MOV	#32, W0
0x443E	0x450080  	ADD	W10, W0, W1
0x4440	0x780011  	MOV	[W1], W0
0x4442	0xED2000  	DEC	W0
0x4444	0x780880  	MOV	W0, [W1]
L__NMRA_DCC_56us_TimeTick25:
;NMRAnetDCC.mpas,303 :: 		end;
L_end_NMRA_DCC_56us_TimeTick:
0x4446	0x060000  	RETURN
; end of _NMRA_DCC_56us_TimeTick
_NMRA_DCC_TransmitterStateMachine:
0x430A	0xFA0004  	LNK	#4
;NMRAnetDCC.mpas,742 :: 		begin
;NMRAnetDCC.mpas,743 :: 		case ABuffer^.TX_iDCC_Pin_StateMachine of
0x430C	0x781F8B  	PUSH	W11
0x430E	0x45007D  	ADD	W10, #29, W0
0x4310	0x784010  	MOV.B	[W0], W0
0x4312	0x984720  	MOV.B	W0, [W14+2]
;NMRAnetDCC.mpas,744 :: 		STATE_NMRA_DCC_PIN_0 :     // Pin State 0 is the first "positive" 56us of a new bit being sent on the DCC line
0x4314	0xE10460  	CP.B	W0, #0
0x4316	0x3A005E  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine150
L__NMRA_DCC_TransmitterStateMachine290:
;NMRAnetDCC.mpas,746 :: 		case ABuffer^.TX_iStateMachine of
0x4318	0x45007B  	ADD	W10, #27, W0
0x431A	0x784010  	MOV.B	[W0], W0
0x431C	0x984700  	MOV.B	W0, [W14+0]
;NMRAnetDCC.mpas,747 :: 		STATE_NMRA_DCC_PREAMBLE          : NMRA_DCC_TransmitterStateMachineHandlePreamble(ABuffer);
0x431E	0xE10460  	CP.B	W0, #0
0x4320	0x3A0002  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine154
L__NMRA_DCC_TransmitterStateMachine291:
0x4322	0x07ECC7  	RCALL	NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble
0x4324	0x370046  	BRA	L__NMRA_DCC_TransmitterStateMachine151
L__NMRA_DCC_TransmitterStateMachine154:
;NMRAnetDCC.mpas,748 :: 		STATE_NMRA_DCC_START_BIT_0       : NMRA_DCC_TransmitterStateMachineHandleStartBit(ABuffer);
0x4326	0x90400E  	MOV.B	[W14+0], W0
0x4328	0xE10461  	CP.B	W0, #1
0x432A	0x3A0002  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine157
L__NMRA_DCC_TransmitterStateMachine292:
0x432C	0x07EB78  	RCALL	NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStartBit
0x432E	0x370041  	BRA	L__NMRA_DCC_TransmitterStateMachine151
L__NMRA_DCC_TransmitterStateMachine157:
;NMRAnetDCC.mpas,749 :: 		STATE_NMRA_DCC_BYTE_0            : NMRA_DCC_TransmitterStateMachineHandleByte(ABuffer, 0);
0x4330	0x90400E  	MOV.B	[W14+0], W0
0x4332	0xE10462  	CP.B	W0, #2
0x4334	0x3A0003  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine160
L__NMRA_DCC_TransmitterStateMachine293:
0x4336	0xEF2016  	CLR	W11
0x4338	0x07F5C4  	RCALL	NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte
0x433A	0x37003B  	BRA	L__NMRA_DCC_TransmitterStateMachine151
L__NMRA_DCC_TransmitterStateMachine160:
;NMRAnetDCC.mpas,750 :: 		STATE_NMRA_DCC_START_BIT_1       : NMRA_DCC_TransmitterStateMachineHandleStartBit(ABuffer);
0x433C	0x90400E  	MOV.B	[W14+0], W0
0x433E	0xE10463  	CP.B	W0, #3
0x4340	0x3A0002  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine163
L__NMRA_DCC_TransmitterStateMachine294:
0x4342	0x07EB6D  	RCALL	NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStartBit
0x4344	0x370036  	BRA	L__NMRA_DCC_TransmitterStateMachine151
L__NMRA_DCC_TransmitterStateMachine163:
;NMRAnetDCC.mpas,751 :: 		STATE_NMRA_DCC_BYTE_1            : NMRA_DCC_TransmitterStateMachineHandleByte(ABuffer, 1);
0x4346	0x90400E  	MOV.B	[W14+0], W0
0x4348	0xE10464  	CP.B	W0, #4
0x434A	0x3A0003  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine166
L__NMRA_DCC_TransmitterStateMachine295:
0x434C	0xB3C01B  	MOV.B	#1, W11
0x434E	0x07F5B9  	RCALL	NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte
0x4350	0x370030  	BRA	L__NMRA_DCC_TransmitterStateMachine151
L__NMRA_DCC_TransmitterStateMachine166:
;NMRAnetDCC.mpas,752 :: 		STATE_NMRA_DCC_START_BIT_2       : NMRA_DCC_TransmitterStateMachineHandleStartBit(ABuffer);
0x4352	0x90400E  	MOV.B	[W14+0], W0
0x4354	0xE10465  	CP.B	W0, #5
0x4356	0x3A0002  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine169
L__NMRA_DCC_TransmitterStateMachine296:
0x4358	0x07EB62  	RCALL	NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStartBit
0x435A	0x37002B  	BRA	L__NMRA_DCC_TransmitterStateMachine151
L__NMRA_DCC_TransmitterStateMachine169:
;NMRAnetDCC.mpas,753 :: 		STATE_NMRA_DCC_BYTE_2            : NMRA_DCC_TransmitterStateMachineHandleByte(ABuffer, 2);
0x435C	0x90400E  	MOV.B	[W14+0], W0
0x435E	0xE10466  	CP.B	W0, #6
0x4360	0x3A0003  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine172
L__NMRA_DCC_TransmitterStateMachine297:
0x4362	0xB3C02B  	MOV.B	#2, W11
0x4364	0x07F5AE  	RCALL	NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte
0x4366	0x370025  	BRA	L__NMRA_DCC_TransmitterStateMachine151
L__NMRA_DCC_TransmitterStateMachine172:
;NMRAnetDCC.mpas,754 :: 		STATE_NMRA_DCC_START_BIT_3       : NMRA_DCC_TransmitterStateMachineHandleStartBit(ABuffer);
0x4368	0x90400E  	MOV.B	[W14+0], W0
0x436A	0xE10467  	CP.B	W0, #7
0x436C	0x3A0002  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine175
L__NMRA_DCC_TransmitterStateMachine298:
0x436E	0x07EB57  	RCALL	NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStartBit
0x4370	0x370020  	BRA	L__NMRA_DCC_TransmitterStateMachine151
L__NMRA_DCC_TransmitterStateMachine175:
;NMRAnetDCC.mpas,755 :: 		STATE_NMRA_DCC_BYTE_3            : NMRA_DCC_TransmitterStateMachineHandleByte(ABuffer, 3);
0x4372	0x90400E  	MOV.B	[W14+0], W0
0x4374	0xE10468  	CP.B	W0, #8
0x4376	0x3A0003  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine178
L__NMRA_DCC_TransmitterStateMachine299:
0x4378	0xB3C03B  	MOV.B	#3, W11
0x437A	0x07F5A3  	RCALL	NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte
0x437C	0x37001A  	BRA	L__NMRA_DCC_TransmitterStateMachine151
L__NMRA_DCC_TransmitterStateMachine178:
;NMRAnetDCC.mpas,756 :: 		STATE_NMRA_DCC_START_BIT_4       : NMRA_DCC_TransmitterStateMachineHandleStartBit(ABuffer);
0x437E	0x90400E  	MOV.B	[W14+0], W0
0x4380	0xE10469  	CP.B	W0, #9
0x4382	0x3A0002  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine181
L__NMRA_DCC_TransmitterStateMachine300:
0x4384	0x07EB4C  	RCALL	NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStartBit
0x4386	0x370015  	BRA	L__NMRA_DCC_TransmitterStateMachine151
L__NMRA_DCC_TransmitterStateMachine181:
;NMRAnetDCC.mpas,757 :: 		STATE_NMRA_DCC_BYTE_4            : NMRA_DCC_TransmitterStateMachineHandleByte(ABuffer, 4);
0x4388	0x90400E  	MOV.B	[W14+0], W0
0x438A	0xE1046A  	CP.B	W0, #10
0x438C	0x3A0003  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine184
L__NMRA_DCC_TransmitterStateMachine301:
0x438E	0xB3C04B  	MOV.B	#4, W11
0x4390	0x07F598  	RCALL	NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte
0x4392	0x37000F  	BRA	L__NMRA_DCC_TransmitterStateMachine151
L__NMRA_DCC_TransmitterStateMachine184:
;NMRAnetDCC.mpas,758 :: 		STATE_NMRA_DCC_START_BIT_XOR     : NMRA_DCC_TransmitterStateMachineHandleStartBit(ABuffer);
0x4394	0x90400E  	MOV.B	[W14+0], W0
0x4396	0xE1046B  	CP.B	W0, #11
0x4398	0x3A0002  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine187
L__NMRA_DCC_TransmitterStateMachine302:
0x439A	0x07EB41  	RCALL	NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStartBit
0x439C	0x37000A  	BRA	L__NMRA_DCC_TransmitterStateMachine151
L__NMRA_DCC_TransmitterStateMachine187:
;NMRAnetDCC.mpas,759 :: 		STATE_NMRA_DCC_XOR_BYTE          : NMRA_DCC_TransmitterStateMachineXORByte(ABuffer);
0x439E	0x90400E  	MOV.B	[W14+0], W0
0x43A0	0xE1046C  	CP.B	W0, #12
0x43A2	0x3A0002  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine190
L__NMRA_DCC_TransmitterStateMachine303:
0x43A4	0x07F508  	RCALL	NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte
0x43A6	0x370005  	BRA	L__NMRA_DCC_TransmitterStateMachine151
L__NMRA_DCC_TransmitterStateMachine190:
;NMRAnetDCC.mpas,760 :: 		STATE_NMRA_DCC_STOP_BIT          : NMRA_DCC_TransmitterStateMachineHandleStopBit(ABuffer);
0x43A8	0x90400E  	MOV.B	[W14+0], W0
0x43AA	0xE1046D  	CP.B	W0, #13
0x43AC	0x3A0002  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine193
L__NMRA_DCC_TransmitterStateMachine304:
0x43AE	0x07F4F9  	RCALL	NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStopBit
0x43B0	0x370000  	BRA	L__NMRA_DCC_TransmitterStateMachine151
L__NMRA_DCC_TransmitterStateMachine193:
L__NMRA_DCC_TransmitterStateMachine151:
;NMRAnetDCC.mpas,763 :: 		ABuffer^.TX_Flags.TRANSMITTING_FLAG_DCC_PIN_BIT := 1;                   // Set the I/O Pin High for the start of the bit
0x43B2	0x200230  	MOV	#35, W0
0x43B4	0x450000  	ADD	W10, W0, W0
0x43B6	0xA02410  	BSET.B	[W0], #2
;NMRAnetDCC.mpas,765 :: 		if ABuffer^.Tx_Flags.TRANSMITTING_FLAG_CURRENT_BIT = 0 then             // If is a zero we need to add a 56us wait state to make a 112us wide pulse
0x43B8	0x200230  	MOV	#35, W0
0x43BA	0x450000  	ADD	W10, W0, W0
0x43BC	0x784010  	MOV.B	[W0], W0
0x43BE	0xAF0000  	BTSC.B	W0, #0
0x43C0	0x370005  	BRA	L__NMRA_DCC_TransmitterStateMachine195
;NMRAnetDCC.mpas,766 :: 		Inc(ABuffer^.TX_iDCC_Pin_StateMachine)
0x43C2	0x4500FD  	ADD	W10, #29, W1
0x43C4	0xFB8011  	ZE	[W1], W0
0x43C6	0xEC2000  	INC	W0
0x43C8	0x784880  	MOV.B	W0, [W1]
0x43CA	0x370003  	BRA	L__NMRA_DCC_TransmitterStateMachine196
;NMRAnetDCC.mpas,767 :: 		else
L__NMRA_DCC_TransmitterStateMachine195:
;NMRAnetDCC.mpas,768 :: 		ABuffer^.TX_iDCC_Pin_StateMachine := STATE_NMRA_DCC_PIN_2             // If is a one then we jump right to the back edge of the pulse width at 56us
0x43CC	0x4500FD  	ADD	W10, #29, W1
0x43CE	0xB3C020  	MOV.B	#2, W0
0x43D0	0x784880  	MOV.B	W0, [W1]
L__NMRA_DCC_TransmitterStateMachine196:
;NMRAnetDCC.mpas,769 :: 		end;
0x43D2	0x37002C  	BRA	L__NMRA_DCC_TransmitterStateMachine147
L__NMRA_DCC_TransmitterStateMachine150:
;NMRAnetDCC.mpas,770 :: 		STATE_NMRA_DCC_PIN_1 : Inc(ABuffer^.TX_iDCC_Pin_StateMachine);                // Pin State 1 is the second "positive" 56us of a new "0" bit being sent on the DCC line, if the bit was a 1 in Pin State 0 then this state is skipped
0x43D4	0x90412E  	MOV.B	[W14+2], W2
0x43D6	0xE11461  	CP.B	W2, #1
0x43D8	0x3A0005  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine199
L__NMRA_DCC_TransmitterStateMachine305:
0x43DA	0x4500FD  	ADD	W10, #29, W1
0x43DC	0xFB8011  	ZE	[W1], W0
0x43DE	0xEC2000  	INC	W0
0x43E0	0x784880  	MOV.B	W0, [W1]
0x43E2	0x370024  	BRA	L__NMRA_DCC_TransmitterStateMachine147
L__NMRA_DCC_TransmitterStateMachine199:
;NMRAnetDCC.mpas,771 :: 		STATE_NMRA_DCC_PIN_2 :                                                        // Pin State 2 is the first "negative" 56us of a new bit being sent on the DCC line
0x43E4	0xE11462  	CP.B	W2, #2
0x43E6	0x3A001C  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine202
L__NMRA_DCC_TransmitterStateMachine306:
;NMRAnetDCC.mpas,773 :: 		ABuffer^.TX_Flags.TRANSMITTING_FLAG_DCC_PIN_BIT := 0;                     // Set the I/O Pin Low (negative half of the DCC cycle)
0x43E8	0x200230  	MOV	#35, W0
0x43EA	0x450000  	ADD	W10, W0, W0
0x43EC	0xA12410  	BCLR.B	[W0], #2
;NMRAnetDCC.mpas,775 :: 		if ABuffer^.Tx_Flags.TRANSMITTING_FLAG_CURRENT_BIT = 0 then
0x43EE	0x200230  	MOV	#35, W0
0x43F0	0x450000  	ADD	W10, W0, W0
0x43F2	0x784010  	MOV.B	[W0], W0
0x43F4	0xAF0000  	BTSC.B	W0, #0
0x43F6	0x370005  	BRA	L__NMRA_DCC_TransmitterStateMachine204
;NMRAnetDCC.mpas,776 :: 		Inc(ABuffer^.TX_iDCC_Pin_StateMachine)                                  // It is a "0" so jump to the next half for a wait state to make it 112us wide
0x43F8	0x4500FD  	ADD	W10, #29, W1
0x43FA	0xFB8011  	ZE	[W1], W0
0x43FC	0xEC2000  	INC	W0
0x43FE	0x784880  	MOV.B	W0, [W1]
0x4400	0x37000E  	BRA	L__NMRA_DCC_TransmitterStateMachine205
;NMRAnetDCC.mpas,777 :: 		else begin
L__NMRA_DCC_TransmitterStateMachine204:
;NMRAnetDCC.mpas,778 :: 		ABuffer^.TX_iDCC_Pin_StateMachine := STATE_NMRA_DCC_PIN_0;              // It is a "1" so start the next bit from the beginning
0x4402	0x4500FD  	ADD	W10, #29, W1
0x4404	0xEF2000  	CLR	W0
0x4406	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,780 :: 		if ABuffer^.TX_Flags.TRANSMITTING_FLAG_STOP_BIT = 1 then                // If transmitting the second half of the stop bit then reset everything and get ready for the next message
0x4408	0x200230  	MOV	#35, W0
0x440A	0x450000  	ADD	W10, W0, W0
0x440C	0x784010  	MOV.B	[W0], W0
0x440E	0xAE2000  	BTSS.B	W0, #1
0x4410	0x370006  	BRA	L__NMRA_DCC_TransmitterStateMachine207
;NMRAnetDCC.mpas,782 :: 		ABuffer^.TX_Flags.TRANSMITTING_FLAG_STOP_BIT := 0;
0x4412	0x200230  	MOV	#35, W0
0x4414	0x450000  	ADD	W10, W0, W0
0x4416	0xA11410  	BCLR.B	[W0], #1
;NMRAnetDCC.mpas,783 :: 		ABuffer^.TX_iStateMachine := STATE_NMRA_DCC_PREAMBLE;                 // New message starting
0x4418	0x4500FB  	ADD	W10, #27, W1
0x441A	0xEF2000  	CLR	W0
0x441C	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,784 :: 		end
L__NMRA_DCC_TransmitterStateMachine207:
;NMRAnetDCC.mpas,785 :: 		end;
L__NMRA_DCC_TransmitterStateMachine205:
;NMRAnetDCC.mpas,786 :: 		end;
0x441E	0x370006  	BRA	L__NMRA_DCC_TransmitterStateMachine147
L__NMRA_DCC_TransmitterStateMachine202:
;NMRAnetDCC.mpas,787 :: 		STATE_NMRA_DCC_PIN_3 : ABuffer^.TX_iDCC_Pin_StateMachine := STATE_NMRA_DCC_PIN_0; // Pin State 3 is the second "negative" 56us of a new "0" bit being sent on the DCC line, if the bit was a 1 in Pin State 2 then this state is skipped
0x4420	0xE11463  	CP.B	W2, #3
0x4422	0x3A0004  	BRA NZ	L__NMRA_DCC_TransmitterStateMachine211
L__NMRA_DCC_TransmitterStateMachine307:
0x4424	0x4500FD  	ADD	W10, #29, W1
0x4426	0xEF2000  	CLR	W0
0x4428	0x784880  	MOV.B	W0, [W1]
0x442A	0x370000  	BRA	L__NMRA_DCC_TransmitterStateMachine147
L__NMRA_DCC_TransmitterStateMachine211:
L__NMRA_DCC_TransmitterStateMachine147:
;NMRAnetDCC.mpas,789 :: 		end;
L_end_NMRA_DCC_TransmitterStateMachine:
0x442C	0x7805CF  	POP	W11
0x442E	0xFA8000  	ULNK
0x4430	0x060000  	RETURN
; end of _NMRA_DCC_TransmitterStateMachine
NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble:
;NMRAnetDCC.mpas,640 :: 		begin
;NMRAnetDCC.mpas,641 :: 		ABuffer^.TX_Flags.TRANSMITTING_FLAG_CURRENT_BIT := 1;
0x1CB2	0x781F8B  	PUSH	W11
0x1CB4	0x200230  	MOV	#35, W0
0x1CB6	0x450000  	ADD	W10, W0, W0
0x1CB8	0xA00410  	BSET.B	[W0], #0
;NMRAnetDCC.mpas,642 :: 		if ABuffer^.TX_PreambleBitCount > 0 then
0x1CBA	0x45007A  	ADD	W10, #26, W0
0x1CBC	0x784010  	MOV.B	[W0], W0
0x1CBE	0xE10460  	CP.B	W0, #0
0x1CC0	0x36000D  	BRA LEU	L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble126
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble274:
;NMRAnetDCC.mpas,644 :: 		Dec(ABuffer^.TX_PreambleBitCount);
0x1CC2	0x4500FA  	ADD	W10, #26, W1
0x1CC4	0xFB8011  	ZE	[W1], W0
0x1CC6	0xED2000  	DEC	W0
0x1CC8	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,645 :: 		if ABuffer^.TX_PreambleBitCount = 0 then
0x1CCA	0x45007A  	ADD	W10, #26, W0
0x1CCC	0x784010  	MOV.B	[W0], W0
0x1CCE	0xE10460  	CP.B	W0, #0
0x1CD0	0x3A0004  	BRA NZ	L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble129
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble275:
;NMRAnetDCC.mpas,646 :: 		Inc(ABuffer^.TX_iStateMachine);
0x1CD2	0x4500FB  	ADD	W10, #27, W1
0x1CD4	0xFB8011  	ZE	[W1], W0
0x1CD6	0xEC2000  	INC	W0
0x1CD8	0x784880  	MOV.B	W0, [W1]
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble129:
;NMRAnetDCC.mpas,647 :: 		end else
0x1CDA	0x370006  	BRA	L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble127
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble126:
;NMRAnetDCC.mpas,649 :: 		NMRA_DCC_LoadIdlePacketIntoTransmitter(ABuffer, PREAMBLE_BIT_COUNT_NORMAL);
0x1CDC	0xB3C0EB  	MOV.B	#14, W11
0x1CDE	0x07FCCA  	RCALL	NMRAnetDCC_NMRA_DCC_LoadIdlePacketIntoTransmitter
;NMRAnetDCC.mpas,650 :: 		ABuffer^.TX_LastAddress := MESSAGE_IDLE_0;
0x1CE0	0x200220  	MOV	#34, W0
0x1CE2	0x450080  	ADD	W10, W0, W1
0x1CE4	0xB3CFF0  	MOV.B	#255, W0
0x1CE6	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,651 :: 		end
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble127:
;NMRAnetDCC.mpas,652 :: 		end;
L_end_NMRA_DCC_TransmitterStateMachineHandlePreamble:
0x1CE8	0x7805CF  	POP	W11
0x1CEA	0x060000  	RETURN
; end of NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble
NMRAnetDCC_NMRA_DCC_LoadIdlePacketIntoTransmitter:
;NMRAnetDCC.mpas,475 :: 		begin
;NMRAnetDCC.mpas,476 :: 		Buffer^.TX_TransmittingPacket.PacketBytes[0] := MESSAGE_IDLE_0;
0x1674	0x4500F4  	ADD	W10, #20, W1
0x1676	0xB3CFF0  	MOV.B	#255, W0
0x1678	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,477 :: 		Buffer^.TX_TransmittingPacket.PacketBytes[1] := MESSAGE_IDLE_1;
0x167A	0x450074  	ADD	W10, #20, W0
0x167C	0x4000E1  	ADD	W0, #1, W1
0x167E	0xEF2000  	CLR	W0
0x1680	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,478 :: 		Buffer^.TX_XOR_Byte := MESSAGE_IDLE_XOR;
0x1682	0x4500FE  	ADD	W10, #30, W1
0x1684	0xB3CFF0  	MOV.B	#255, W0
0x1686	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,479 :: 		Buffer^.TX_TransmittingPacket.Flags := MASK_DCC_PACKET_IDLE_MESSAGE;      // 2 Bytes and Address Is Special
0x1688	0x450074  	ADD	W10, #20, W0
0x168A	0x4000E5  	ADD	W0, #5, W1
0x168C	0xB3C820  	MOV.B	#130, W0
0x168E	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,480 :: 		Buffer^.TX_PreambleBitCount := PreambleCount;
0x1690	0x45007A  	ADD	W10, #26, W0
0x1692	0x78480B  	MOV.B	W11, [W0]
;NMRAnetDCC.mpas,481 :: 		end;
L_end_NMRA_DCC_LoadIdlePacketIntoTransmitter:
0x1694	0x060000  	RETURN
; end of NMRAnetDCC_NMRA_DCC_LoadIdlePacketIntoTransmitter
NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStartBit:
;NMRAnetDCC.mpas,685 :: 		begin
;NMRAnetDCC.mpas,686 :: 		ABuffer^.TX_iBit := STATE_NMRA_DCC_BIT_7;                                              // Reset Bit index for the next Byte
0x1A1E	0x4500FC  	ADD	W10, #28, W1
0x1A20	0xB3C070  	MOV.B	#7, W0
0x1A22	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,687 :: 		ABuffer^.TX_Flags.TRANSMITTING_FLAG_CURRENT_BIT := 0;                         // Current Bit = 0 (start bit)
0x1A24	0x200230  	MOV	#35, W0
0x1A26	0x450000  	ADD	W10, W0, W0
0x1A28	0xA10410  	BCLR.B	[W0], #0
;NMRAnetDCC.mpas,688 :: 		Inc(ABuffer^.TX_iStateMachine)                                                // Move to the next State
0x1A2A	0x4500FB  	ADD	W10, #27, W1
0x1A2C	0xFB8011  	ZE	[W1], W0
0x1A2E	0xEC2000  	INC	W0
0x1A30	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,689 :: 		end;
L_end_NMRA_DCC_TransmitterStateMachineHandleStartBit:
0x1A32	0x060000  	RETURN
; end of NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStartBit
NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte:
;NMRAnetDCC.mpas,664 :: 		begin
;NMRAnetDCC.mpas,665 :: 		Offset := ABuffer^.TX_iBit;
0x2EC2	0x45007C  	ADD	W10, #28, W0
0x2EC4	0x784110  	MOV.B	[W0], W2
;NMRAnetDCC.mpas,666 :: 		ABuffer^.TX_Flags.TRANSMITTING_FLAG_CURRENT_BIT := ABuffer^.TX_TransmittingPacket.PacketBytes[ByteIndex].Offset;
0x2EC6	0x200230  	MOV	#35, W0
0x2EC8	0x450200  	ADD	W10, W0, W4
0x2ECA	0x4500F4  	ADD	W10, #20, W1
0x2ECC	0xFB800B  	ZE	W11, W0
0x2ECE	0x408180  	ADD	W1, W0, W3
0x2ED0	0x200010  	MOV	#1, W0
0x2ED2	0xFB8102  	ZE	W2, W2
0x2ED4	0xDD0002  	SL	W0, W2, W0
0x2ED6	0xFB8093  	ZE	[W3], W1
0x2ED8	0xFB8000  	ZE	W0, W0
0x2EDA	0x608000  	AND	W1, W0, W0
0x2EDC	0xEF2002  	CLR	W1
0x2EDE	0xE10060  	CP	W0, #0
0x2EE0	0x320002  	BRA Z	L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte132
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte277:
0x2EE2	0xB3C010  	MOV.B	#1, W0
0x2EE4	0x784080  	MOV.B	W0, W1
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte132:
0x2EE6	0xA00414  	BSET.B	[W4], #0
0x2EE8	0xAE0002  	BTSS	W1, #0
0x2EEA	0xA10414  	BCLR.B	[W4], #0
;NMRAnetDCC.mpas,667 :: 		Dec(ABuffer^.TX_iBit);
0x2EEC	0x4500FC  	ADD	W10, #28, W1
0x2EEE	0xFB8011  	ZE	[W1], W0
0x2EF0	0xED2000  	DEC	W0
0x2EF2	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,668 :: 		if (ABuffer^.TX_iBit > STATE_NMRA_DCC_BIT_7) or (ABuffer^.TX_iBit < STATE_NMRA_DCC_BIT_0) then
0x2EF4	0x45017C  	ADD	W10, #28, W2
0x2EF6	0x784012  	MOV.B	[W2], W0
0x2EF8	0xE10467  	CP.B	W0, #7
0x2EFA	0xEF2002  	CLR	W1
0x2EFC	0x360001  	BRA LEU	L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte278
0x2EFE	0xEEA002  	COM	W1
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte278:
0x2F00	0x784012  	MOV.B	[W2], W0
0x2F02	0xE10460  	CP.B	W0, #0
0x2F04	0xEF2000  	CLR	W0
0x2F06	0x310001  	BRA GEU	L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte279
0x2F08	0xEEA000  	COM	W0
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte279:
0x2F0A	0x708000  	IOR	W1, W0, W0
0x2F0C	0x320010  	BRA Z	L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte134
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte280:
;NMRAnetDCC.mpas,670 :: 		if (ABuffer^.TX_TransmittingPacket.Flags and MASK_DCC_PACKET_COUNT) = ByteIndex + 1 then
0x2F0E	0x450074  	ADD	W10, #20, W0
0x2F10	0x400065  	ADD	W0, #5, W0
0x2F12	0xFB8010  	ZE	[W0], W0
0x2F14	0x6000E7  	AND	W0, #7, W1
0x2F16	0xFB800B  	ZE	W11, W0
0x2F18	0xEC2000  	INC	W0
0x2F1A	0xE10800  	CP	W1, W0
0x2F1C	0x3A0004  	BRA NZ	L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte137
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte281:
;NMRAnetDCC.mpas,671 :: 		ABuffer^.TX_iStateMachine := STATE_NMRA_DCC_START_BIT_XOR
0x2F1E	0x4500FB  	ADD	W10, #27, W1
0x2F20	0xB3C0B0  	MOV.B	#11, W0
0x2F22	0x784880  	MOV.B	W0, [W1]
0x2F24	0x370004  	BRA	L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte138
;NMRAnetDCC.mpas,672 :: 		else
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte137:
;NMRAnetDCC.mpas,673 :: 		Inc(ABuffer^.TX_iStateMachine)
0x2F26	0x4500FB  	ADD	W10, #27, W1
0x2F28	0xFB8011  	ZE	[W1], W0
0x2F2A	0xEC2000  	INC	W0
0x2F2C	0x784880  	MOV.B	W0, [W1]
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte138:
;NMRAnetDCC.mpas,674 :: 		end
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte134:
;NMRAnetDCC.mpas,675 :: 		end;
L_end_NMRA_DCC_TransmitterStateMachineHandleByte:
0x2F2E	0x060000  	RETURN
; end of NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte
NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte:
;NMRAnetDCC.mpas,701 :: 		begin
;NMRAnetDCC.mpas,702 :: 		Offset := ABuffer^.TX_iBit;
0x2DB6	0x45007C  	ADD	W10, #28, W0
0x2DB8	0x784110  	MOV.B	[W0], W2
;NMRAnetDCC.mpas,703 :: 		ABuffer^.TX_Flags.TRANSMITTING_FLAG_CURRENT_BIT := ABuffer^.TX_XOR_Byte.Offset;
0x2DBA	0x200230  	MOV	#35, W0
0x2DBC	0x450180  	ADD	W10, W0, W3
0x2DBE	0x4500FE  	ADD	W10, #30, W1
0x2DC0	0x200010  	MOV	#1, W0
0x2DC2	0xFB8102  	ZE	W2, W2
0x2DC4	0xDD0002  	SL	W0, W2, W0
0x2DC6	0xFB8091  	ZE	[W1], W1
0x2DC8	0xFB8000  	ZE	W0, W0
0x2DCA	0x608000  	AND	W1, W0, W0
0x2DCC	0xEF2002  	CLR	W1
0x2DCE	0xE10060  	CP	W0, #0
0x2DD0	0x320002  	BRA Z	L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte141
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte284:
0x2DD2	0xB3C010  	MOV.B	#1, W0
0x2DD4	0x784080  	MOV.B	W0, W1
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte141:
0x2DD6	0xA00413  	BSET.B	[W3], #0
0x2DD8	0xAE0002  	BTSS	W1, #0
0x2DDA	0xA10413  	BCLR.B	[W3], #0
;NMRAnetDCC.mpas,704 :: 		Dec(ABuffer^.TX_iBit);
0x2DDC	0x4500FC  	ADD	W10, #28, W1
0x2DDE	0xFB8011  	ZE	[W1], W0
0x2DE0	0xED2000  	DEC	W0
0x2DE2	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,705 :: 		if (ABuffer^.TX_iBit > STATE_NMRA_DCC_BIT_7) or (ABuffer^.TX_iBit < STATE_NMRA_DCC_BIT_0) then
0x2DE4	0x45017C  	ADD	W10, #28, W2
0x2DE6	0x784012  	MOV.B	[W2], W0
0x2DE8	0xE10467  	CP.B	W0, #7
0x2DEA	0xEF2002  	CLR	W1
0x2DEC	0x360001  	BRA LEU	L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte285
0x2DEE	0xEEA002  	COM	W1
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte285:
0x2DF0	0x784012  	MOV.B	[W2], W0
0x2DF2	0xE10460  	CP.B	W0, #0
0x2DF4	0xEF2000  	CLR	W0
0x2DF6	0x310001  	BRA GEU	L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte286
0x2DF8	0xEEA000  	COM	W0
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte286:
0x2DFA	0x708000  	IOR	W1, W0, W0
0x2DFC	0x320004  	BRA Z	L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte143
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte287:
;NMRAnetDCC.mpas,706 :: 		Inc(ABuffer^.TX_iStateMachine)
0x2DFE	0x4500FB  	ADD	W10, #27, W1
0x2E00	0xFB8011  	ZE	[W1], W0
0x2E02	0xEC2000  	INC	W0
0x2E04	0x784880  	MOV.B	W0, [W1]
L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte143:
;NMRAnetDCC.mpas,707 :: 		end;
L_end_NMRA_DCC_TransmitterStateMachineXORByte:
0x2E06	0x060000  	RETURN
; end of NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte
NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStopBit:
;NMRAnetDCC.mpas,717 :: 		begin
;NMRAnetDCC.mpas,718 :: 		ABuffer^.TX_iBit := STATE_NMRA_DCC_BIT_7;                                     // Reset Bit index for the next Byte
0x2DA2	0x4500FC  	ADD	W10, #28, W1
0x2DA4	0xB3C070  	MOV.B	#7, W0
0x2DA6	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,719 :: 		ABuffer^.TX_Flags.TRANSMITTING_FLAG_CURRENT_BIT := 1;                         // Current Bit = 1 (stop bit)
0x2DA8	0x200230  	MOV	#35, W0
0x2DAA	0x450000  	ADD	W10, W0, W0
0x2DAC	0xA00410  	BSET.B	[W0], #0
;NMRAnetDCC.mpas,720 :: 		ABuffer^.TX_Flags.TRANSMITTING_FLAG_STOP_BIT := 1;                            // Flag we are transmitting the Stop Bit
0x2DAE	0x200230  	MOV	#35, W0
0x2DB0	0x450000  	ADD	W10, W0, W0
0x2DB2	0xA01410  	BSET.B	[W0], #1
;NMRAnetDCC.mpas,721 :: 		end;
L_end_NMRA_DCC_TransmitterStateMachineHandleStopBit:
0x2DB4	0x060000  	RETURN
; end of NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStopBit
_NMRA_DCC_LoadPacketIntoTransmitterStateMachine:
0x41BC	0xFA0002  	LNK	#2
;NMRAnetDCC.mpas,582 :: 		begin
;NMRAnetDCC.mpas,583 :: 		AQueue := nil;
; AQueue start address is: 8 (W4)
0x41BE	0xEF2008  	CLR	W4
;NMRAnetDCC.mpas,584 :: 		if ABuffer^.TX_Flags.TRANSMITTING_FLAG_STOP_BIT = 1 then                      // If previous packet is on the stop bit then time to load the next packet
0x41C0	0x200230  	MOV	#35, W0
0x41C2	0x450000  	ADD	W10, W0, W0
0x41C4	0x784010  	MOV.B	[W0], W0
0x41C6	0xAE2000  	BTSS.B	W0, #1
0x41C8	0x37006D  	BRA	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine96
;NMRAnetDCC.mpas,586 :: 		if ABuffer^.Priority.Count > 0 then
0x41CA	0x45006A  	ADD	W10, #10, W0
0x41CC	0xECA000  	INC2	W0
0x41CE	0x784010  	MOV.B	[W0], W0
0x41D0	0xE10460  	CP.B	W0, #0
0x41D2	0x360013  	BRA LEU	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine218
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine265:
;NMRAnetDCC.mpas,588 :: 		AMessage := @ABuffer^.Priority.Slots^[ABuffer^.Priority.Tail];
0x41D4	0x45006A  	ADD	W10, #10, W0
0x41D6	0x780090  	MOV	[W0], W1
0x41D8	0x400065  	ADD	W0, #5, W0
0x41DA	0xFB8190  	ZE	[W0], W3
0x41DC	0x780101  	MOV	W1, W2
0x41DE	0x200060  	MOV	#6, W0
0x41E0	0xB80003  	MUL.UU	W0, W3, W0
0x41E2	0x410000  	ADD	W2, W0, W0
0x41E4	0x980700  	MOV	W0, [W14+0]
;NMRAnetDCC.mpas,589 :: 		if CanTransmitMessage(ABuffer, AMessage) then
0x41E6	0x781F8B  	PUSH	W11
0x41E8	0x780580  	MOV	W0, W11
0x41EA	0x07F60E  	RCALL	NMRAnetDCC_CanTransmitMessage
0x41EC	0x7805CF  	POP	W11
0x41EE	0xE20000  	CP0	W0
0x41F0	0x320003  	BRA Z	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine217
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine266:
; AQueue end address is: 8 (W4)
;NMRAnetDCC.mpas,590 :: 		AQueue := @ABuffer^.Priority
; AQueue start address is: 0 (W0)
0x41F2	0x45006A  	ADD	W10, #10, W0
0x41F4	0x780200  	MOV	W0, W4
; AQueue end address is: 0 (W0)
0x41F6	0x370000  	BRA	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine102
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine217:
;NMRAnetDCC.mpas,589 :: 		if CanTransmitMessage(ABuffer, AMessage) then
;NMRAnetDCC.mpas,590 :: 		AQueue := @ABuffer^.Priority
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine102:
;NMRAnetDCC.mpas,591 :: 		end;
; AQueue start address is: 8 (W4)
; AQueue end address is: 8 (W4)
0x41F8	0x370000  	BRA	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine99
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine218:
;NMRAnetDCC.mpas,586 :: 		if ABuffer^.Priority.Count > 0 then
;NMRAnetDCC.mpas,591 :: 		end;
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine99:
;NMRAnetDCC.mpas,593 :: 		if AQueue = nil then
; AQueue start address is: 8 (W4)
0x41FA	0xE12060  	CP	W4, #0
0x41FC	0x3A0019  	BRA NZ	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine221
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine267:
;NMRAnetDCC.mpas,595 :: 		if ABuffer^.Main.Count > 0 then
0x41FE	0x450062  	ADD	W10, #2, W0
0x4200	0x784010  	MOV.B	[W0], W0
0x4202	0xE10460  	CP.B	W0, #0
0x4204	0x360013  	BRA LEU	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine220
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine268:
;NMRAnetDCC.mpas,597 :: 		AMessage := @ABuffer^.Main.Slots^[ABuffer^.Main.Tail];
0x4206	0x78009A  	MOV	[W10], W1
0x4208	0x450065  	ADD	W10, #5, W0
0x420A	0xFB8190  	ZE	[W0], W3
0x420C	0x780101  	MOV	W1, W2
0x420E	0x200060  	MOV	#6, W0
0x4210	0xB80003  	MUL.UU	W0, W3, W0
0x4212	0x410000  	ADD	W2, W0, W0
0x4214	0x980700  	MOV	W0, [W14+0]
;NMRAnetDCC.mpas,598 :: 		if CanTransmitMessage(ABuffer, AMessage) then
0x4216	0x781F8B  	PUSH	W11
0x4218	0x780580  	MOV	W0, W11
0x421A	0x07F5F6  	RCALL	NMRAnetDCC_CanTransmitMessage
0x421C	0x7805CF  	POP	W11
0x421E	0xE20000  	CP0	W0
0x4220	0x320002  	BRA Z	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine219
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine269:
; AQueue end address is: 8 (W4)
;NMRAnetDCC.mpas,599 :: 		AQueue := @ABuffer^.Main
; AQueue start address is: 0 (W0)
0x4222	0x78000A  	MOV	W10, W0
; AQueue end address is: 0 (W0)
0x4224	0x370001  	BRA	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine111
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine219:
;NMRAnetDCC.mpas,598 :: 		if CanTransmitMessage(ABuffer, AMessage) then
0x4226	0x780004  	MOV	W4, W0
;NMRAnetDCC.mpas,599 :: 		AQueue := @ABuffer^.Main
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine111:
;NMRAnetDCC.mpas,600 :: 		end
; AQueue start address is: 0 (W0)
0x4228	0x780300  	MOV	W0, W6
; AQueue end address is: 0 (W0)
0x422A	0x370001  	BRA	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine108
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine220:
;NMRAnetDCC.mpas,595 :: 		if ABuffer^.Main.Count > 0 then
0x422C	0x780304  	MOV	W4, W6
;NMRAnetDCC.mpas,600 :: 		end
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine108:
;NMRAnetDCC.mpas,601 :: 		end;
; AQueue start address is: 12 (W6)
; AQueue end address is: 12 (W6)
0x422E	0x370001  	BRA	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine105
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine221:
;NMRAnetDCC.mpas,593 :: 		if AQueue = nil then
0x4230	0x780304  	MOV	W4, W6
;NMRAnetDCC.mpas,601 :: 		end;
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine105:
;NMRAnetDCC.mpas,604 :: 		if AQueue <> nil then
; AQueue start address is: 12 (W6)
0x4232	0xE13060  	CP	W6, #0
0x4234	0x320036  	BRA Z	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine114
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine270:
;NMRAnetDCC.mpas,609 :: 		ABuffer^.TX_TransmittingPacket := AMessage^;                               // Copy the message to the Transmit Buffer
0x4236	0x4500F4  	ADD	W10, #20, W1
0x4238	0x90000E  	MOV	[W14+0], W0
0x423A	0x090005  	REPEAT	#5
0x423C	0x7858B0  	MOV.B	[W0++], [W1++]
;NMRAnetDCC.mpas,610 :: 		ABuffer^.TX_XOR_Byte := 0;                                                  // Build the XOR Byte
0x423E	0x4500FE  	ADD	W10, #30, W1
0x4240	0xEF2000  	CLR	W0
0x4242	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,611 :: 		i := 0;
; i start address is: 10 (W5)
0x4244	0xEF200A  	CLR	W5
;NMRAnetDCC.mpas,612 :: 		Count := ABuffer^.TX_TransmittingPacket.Flags and MASK_DCC_PACKET_COUNT;
0x4246	0x450074  	ADD	W10, #20, W0
0x4248	0x400065  	ADD	W0, #5, W0
0x424A	0x784010  	MOV.B	[W0], W0
; Count start address is: 8 (W4)
0x424C	0x604267  	AND.B	W0, #7, W4
; Count end address is: 8 (W4)
; i end address is: 10 (W5)
; AQueue end address is: 12 (W6)
;NMRAnetDCC.mpas,613 :: 		while i < Count do
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine117:
; Count start address is: 8 (W4)
; i start address is: 10 (W5)
; AQueue start address is: 12 (W6)
0x424E	0xE12C04  	CP.B	W5, W4
0x4250	0x31000C  	BRA GEU	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine118
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine271:
;NMRAnetDCC.mpas,615 :: 		ABuffer^.TX_XOR_Byte := ABuffer^.TX_XOR_Byte xor ABuffer^.TX_TransmittingPacket.PacketBytes[i];
0x4252	0x4501FE  	ADD	W10, #30, W3
0x4254	0x4500F4  	ADD	W10, #20, W1
0x4256	0xFB8005  	ZE	W5, W0
0x4258	0x408100  	ADD	W1, W0, W2
0x425A	0x784013  	MOV.B	[W3], W0
0x425C	0xFB8080  	ZE	W0, W1
0x425E	0xFB8012  	ZE	[W2], W0
0x4260	0x688000  	XOR	W1, W0, W0
0x4262	0x784980  	MOV.B	W0, [W3]
;NMRAnetDCC.mpas,616 :: 		Inc(i)
; i start address is: 0 (W0)
0x4264	0x42C061  	ADD.B	W5, #1, W0
; i end address is: 10 (W5)
;NMRAnetDCC.mpas,617 :: 		end;
; Count end address is: 8 (W4)
; i end address is: 0 (W0)
0x4266	0x784280  	MOV.B	W0, W5
0x4268	0x37FFF2  	BRA	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine117
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine118:
;NMRAnetDCC.mpas,618 :: 		ABuffer^.TX_PreambleBitCount := PreambleCount;                              // Update the Preamble Count
0x426A	0x45007A  	ADD	W10, #26, W0
0x426C	0x78480B  	MOV.B	W11, [W0]
;NMRAnetDCC.mpas,619 :: 		ABuffer^.TX_LastAddress := ABuffer^.TX_TransmittingPacket.PacketBytes[0];   // Update the Last Address
0x426E	0x200220  	MOV	#34, W0
0x4270	0x450080  	ADD	W10, W0, W1
0x4272	0x450074  	ADD	W10, #20, W0
0x4274	0x784010  	MOV.B	[W0], W0
0x4276	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,621 :: 		Inc(AQueue^.Tail);
0x4278	0x4300E5  	ADD	W6, #5, W1
0x427A	0xFB8011  	ZE	[W1], W0
0x427C	0xEC2000  	INC	W0
0x427E	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,622 :: 		if AQueue^.Tail >= AQueue^.MaxCount then                                    // Remove the message from the Queue
0x4280	0x430065  	ADD	W6, #5, W0
0x4282	0x4300E3  	ADD	W6, #3, W1
0x4284	0x784010  	MOV.B	[W0], W0
0x4286	0xE10411  	CP.B	W0, [W1]
0x4288	0x390003  	BRA LTU	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine122
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine272:
;NMRAnetDCC.mpas,623 :: 		AQueue^.Tail := 0;
0x428A	0x4300E5  	ADD	W6, #5, W1
0x428C	0xEF2000  	CLR	W0
0x428E	0x784880  	MOV.B	W0, [W1]
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine122:
;NMRAnetDCC.mpas,624 :: 		Inc(AQueue^.TotalSent);
0x4290	0x4300E8  	ADD	W6, #8, W1
0x4292	0x780011  	MOV	[W1], W0
0x4294	0xEC2000  	INC	W0
0x4296	0x780880  	MOV	W0, [W1]
;NMRAnetDCC.mpas,625 :: 		Dec(AQueue^.Count);
0x4298	0x4300E2  	ADD	W6, #2, W1
; AQueue end address is: 12 (W6)
0x429A	0xFB8011  	ZE	[W1], W0
0x429C	0xED2000  	DEC	W0
0x429E	0x784880  	MOV.B	W0, [W1]
;NMRAnetDCC.mpas,626 :: 		end else
0x42A0	0x370001  	BRA	L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine115
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine114:
;NMRAnetDCC.mpas,627 :: 		NMRA_DCC_LoadIdlePacketIntoTransmitter(ABuffer, PreambleCount);
0x42A2	0x07E9E8  	RCALL	NMRAnetDCC_NMRA_DCC_LoadIdlePacketIntoTransmitter
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine115:
;NMRAnetDCC.mpas,628 :: 		end
L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine96:
;NMRAnetDCC.mpas,629 :: 		end;
L_end_NMRA_DCC_LoadPacketIntoTransmitterStateMachine:
0x42A4	0xFA8000  	ULNK
0x42A6	0x060000  	RETURN
; end of _NMRA_DCC_LoadPacketIntoTransmitterStateMachine
NMRAnetDCC_CanTransmitMessage:
;NMRAnetDCC.mpas,523 :: 		begin
;NMRAnetDCC.mpas,525 :: 		if AMessage^.Flags and MASK_DCC_PACKET_SHORT_MULTI_FUNCTION_ADDRESS <> 0 then
0x2E08	0x458065  	ADD	W11, #5, W0
0x2E0A	0xFB8010  	ZE	[W0], W0
0x2E0C	0x600068  	AND	W0, #8, W0
0x2E0E	0xE10060  	CP	W0, #0
0x2E10	0x320017  	BRA Z	L_NMRAnetDCC_CanTransmitMessage68
L_NMRAnetDCC_CanTransmitMessage254:
;NMRAnetDCC.mpas,527 :: 		if AMessage^.PacketBytes[0] = ABuffer^.TX_LastAddress then
0x2E12	0x200220  	MOV	#34, W0
0x2E14	0x450080  	ADD	W10, W0, W1
0x2E16	0x78401B  	MOV.B	[W11], W0
0x2E18	0xE10411  	CP.B	W0, [W1]
0x2E1A	0x3A0012  	BRA NZ	L_NMRAnetDCC_CanTransmitMessage71
L_NMRAnetDCC_CanTransmitMessage255:
;NMRAnetDCC.mpas,529 :: 		if AMessage^.PacketBytes[0] >= 112 then
0x2E1C	0x78409B  	MOV.B	[W11], W1
0x2E1E	0xB3C700  	MOV.B	#112, W0
0x2E20	0xE10C00  	CP.B	W1, W0
0x2E22	0x39000E  	BRA LTU	L_NMRAnetDCC_CanTransmitMessage74
L_NMRAnetDCC_CanTransmitMessage256:
;NMRAnetDCC.mpas,530 :: 		if AMessage^.PacketBytes[0] <= 127 then
0x2E24	0x78409B  	MOV.B	[W11], W1
0x2E26	0xB3C7F0  	MOV.B	#127, W0
0x2E28	0xE10C00  	CP.B	W1, W0
0x2E2A	0x3E000A  	BRA GTU	L_NMRAnetDCC_CanTransmitMessage77
L_NMRAnetDCC_CanTransmitMessage257:
;NMRAnetDCC.mpas,535 :: 		if ABuffer^.TX_TimerCount < _5ms_PERIOD then
0x2E2C	0x200200  	MOV	#32, W0
0x2E2E	0x450000  	ADD	W10, W0, W0
0x2E30	0x780090  	MOV	[W0], W1
0x2E32	0x2005A0  	MOV	#90, W0
0x2E34	0xE10800  	CP	W1, W0
0x2E36	0x310004  	BRA GEU	L_NMRAnetDCC_CanTransmitMessage80
L_NMRAnetDCC_CanTransmitMessage258:
;NMRAnetDCC.mpas,536 :: 		ABuffer^.TX_TimerCount := _5ms_PERIOD;          // 5ms/56us = 89.3
0x2E38	0x200200  	MOV	#32, W0
0x2E3A	0x450080  	ADD	W10, W0, W1
0x2E3C	0x2005A0  	MOV	#90, W0
0x2E3E	0x780880  	MOV	W0, [W1]
L_NMRAnetDCC_CanTransmitMessage80:
;NMRAnetDCC.mpas,537 :: 		end
L_NMRAnetDCC_CanTransmitMessage77:
L_NMRAnetDCC_CanTransmitMessage74:
;NMRAnetDCC.mpas,538 :: 		end
L_NMRAnetDCC_CanTransmitMessage71:
;NMRAnetDCC.mpas,539 :: 		end;
L_NMRAnetDCC_CanTransmitMessage68:
;NMRAnetDCC.mpas,541 :: 		if ABuffer^.TX_LastAddress = MESSAGE_RESET_0 then
0x2E40	0x200220  	MOV	#34, W0
0x2E42	0x450000  	ADD	W10, W0, W0
0x2E44	0x784010  	MOV.B	[W0], W0
0x2E46	0xE10460  	CP.B	W0, #0
0x2E48	0x3A0012  	BRA NZ	L_NMRAnetDCC_CanTransmitMessage83
L_NMRAnetDCC_CanTransmitMessage259:
;NMRAnetDCC.mpas,543 :: 		if (AMessage^.PacketBytes[0] >= 100) then
0x2E4A	0x78409B  	MOV.B	[W11], W1
0x2E4C	0xB3C640  	MOV.B	#100, W0
0x2E4E	0xE10C00  	CP.B	W1, W0
0x2E50	0x39000E  	BRA LTU	L_NMRAnetDCC_CanTransmitMessage86
L_NMRAnetDCC_CanTransmitMessage260:
;NMRAnetDCC.mpas,544 :: 		if AMessage^.PacketBytes[0] <= 127 then
0x2E52	0x78409B  	MOV.B	[W11], W1
0x2E54	0xB3C7F0  	MOV.B	#127, W0
0x2E56	0xE10C00  	CP.B	W1, W0
0x2E58	0x3E000A  	BRA GTU	L_NMRAnetDCC_CanTransmitMessage89
L_NMRAnetDCC_CanTransmitMessage261:
;NMRAnetDCC.mpas,549 :: 		if ABuffer^.TX_TimerCount < _20ms_PERIOD then      // 20ms/56us = 357.1
0x2E5A	0x200200  	MOV	#32, W0
0x2E5C	0x450000  	ADD	W10, W0, W0
0x2E5E	0x780090  	MOV	[W0], W1
0x2E60	0x201680  	MOV	#360, W0
0x2E62	0xE10800  	CP	W1, W0
0x2E64	0x310004  	BRA GEU	L_NMRAnetDCC_CanTransmitMessage92
L_NMRAnetDCC_CanTransmitMessage262:
;NMRAnetDCC.mpas,550 :: 		ABuffer^.TX_TimerCount := _20ms_PERIOD;
0x2E66	0x200200  	MOV	#32, W0
0x2E68	0x450080  	ADD	W10, W0, W1
0x2E6A	0x201680  	MOV	#360, W0
0x2E6C	0x780880  	MOV	W0, [W1]
L_NMRAnetDCC_CanTransmitMessage92:
;NMRAnetDCC.mpas,551 :: 		end;
L_NMRAnetDCC_CanTransmitMessage89:
L_NMRAnetDCC_CanTransmitMessage86:
;NMRAnetDCC.mpas,552 :: 		end;
L_NMRAnetDCC_CanTransmitMessage83:
;NMRAnetDCC.mpas,553 :: 		Result := ABuffer^.TX_TimerCount = 0
0x2E6E	0x200200  	MOV	#32, W0
0x2E70	0x450000  	ADD	W10, W0, W0
0x2E72	0x780010  	MOV	[W0], W0
; Result start address is: 2 (W1)
0x2E74	0xE10060  	CP	W0, #0
0x2E76	0xEF2002  	CLR	W1
0x2E78	0x3A0001  	BRA NZ	L_NMRAnetDCC_CanTransmitMessage263
0x2E7A	0xEEA002  	COM	W1
L_NMRAnetDCC_CanTransmitMessage263:
;NMRAnetDCC.mpas,554 :: 		end;
0x2E7C	0x780001  	MOV	W1, W0
; Result end address is: 2 (W1)
L_end_CanTransmitMessage:
0x2E7E	0x060000  	RETURN
; end of NMRAnetDCC_CanTransmitMessage
;,0 :: _initBlock_0 [3501]
; Containing: CDI_ARRAY [1643]
;             CDI_ARRAY_VNODE [1640]
;             PIV_VNODE_SUPPORTED_PROTOCOLS [54]
;             PIV_SUPPORTED_PROTOCOLS [48]
;             ACDI_MFG_STRINGS [26]
;             ACDI_MFG_STRINGS_VNODE [26]
;             SUPPORTED_VNODE_EVENTS_PRODUCED [24]
;             SUPPORTED_EVENTS_PRODUCED [16]
;             EVENT_DUPLICATE_ID_DETECTED [8]
;             SUPPORTED_EVENTS_CONSUMED [8]
;             SUPPORTED_VNODE_EVENTS_CONSUMED [8]
0x8000	0x3F3C ;_initBlock_0+0 : CDI_ARRAY at 0x8000
0x8002	0x6D78 ;_initBlock_0+2
0x8004	0x206C ;_initBlock_0+4
0x8006	0x6576 ;_initBlock_0+6
0x8008	0x7372 ;_initBlock_0+8
0x800A	0x6F69 ;_initBlock_0+10
0x800C	0x3D6E ;_initBlock_0+12
0x800E	0x3122 ;_initBlock_0+14
0x8010	0x302E ;_initBlock_0+16
0x8012	0x2022 ;_initBlock_0+18
0x8014	0x6E65 ;_initBlock_0+20
0x8016	0x6F63 ;_initBlock_0+22
0x8018	0x6964 ;_initBlock_0+24
0x801A	0x676E ;_initBlock_0+26
0x801C	0x223D ;_initBlock_0+28
0x801E	0x7475 ;_initBlock_0+30
0x8020	0x2D66 ;_initBlock_0+32
0x8022	0x2238 ;_initBlock_0+34
0x8024	0x3E3F ;_initBlock_0+36
0x8026	0x3F3C ;_initBlock_0+38
0x8028	0x6D78 ;_initBlock_0+40
0x802A	0x2D6C ;_initBlock_0+42
0x802C	0x7473 ;_initBlock_0+44
0x802E	0x6C79 ;_initBlock_0+46
0x8030	0x7365 ;_initBlock_0+48
0x8032	0x6568 ;_initBlock_0+50
0x8034	0x7465 ;_initBlock_0+52
0x8036	0x7420 ;_initBlock_0+54
0x8038	0x7079 ;_initBlock_0+56
0x803A	0x3D65 ;_initBlock_0+58
0x803C	0x7427 ;_initBlock_0+60
0x803E	0x7865 ;_initBlock_0+62
0x8040	0x2F74 ;_initBlock_0+64
0x8042	0x7378 ;_initBlock_0+66
0x8044	0x276C ;_initBlock_0+68
0x8046	0x6820 ;_initBlock_0+70
0x8048	0x6572 ;_initBlock_0+72
0x804A	0x3D66 ;_initBlock_0+74
0x804C	0x6827 ;_initBlock_0+76
0x804E	0x7474 ;_initBlock_0+78
0x8050	0x3A70 ;_initBlock_0+80
0x8052	0x2F2F ;_initBlock_0+82
0x8054	0x706F ;_initBlock_0+84
0x8056	0x6E65 ;_initBlock_0+86
0x8058	0x636C ;_initBlock_0+88
0x805A	0x2E62 ;_initBlock_0+90
0x805C	0x726F ;_initBlock_0+92
0x805E	0x2F67 ;_initBlock_0+94
0x8060	0x7274 ;_initBlock_0+96
0x8062	0x6E75 ;_initBlock_0+98
0x8064	0x2F6B ;_initBlock_0+100
0x8066	0x7270 ;_initBlock_0+102
0x8068	0x746F ;_initBlock_0+104
0x806A	0x746F ;_initBlock_0+106
0x806C	0x7079 ;_initBlock_0+108
0x806E	0x7365 ;_initBlock_0+110
0x8070	0x782F ;_initBlock_0+112
0x8072	0x6C6D ;_initBlock_0+114
0x8074	0x782F ;_initBlock_0+116
0x8076	0x6C73 ;_initBlock_0+118
0x8078	0x2F74 ;_initBlock_0+120
0x807A	0x6463 ;_initBlock_0+122
0x807C	0x2E69 ;_initBlock_0+124
0x807E	0x7378 ;_initBlock_0+126
0x8080	0x276C ;_initBlock_0+128
0x8082	0x3E3F ;_initBlock_0+130
0x8084	0x633C ;_initBlock_0+132
0x8086	0x6964 ;_initBlock_0+134
0x8088	0x7820 ;_initBlock_0+136
0x808A	0x6C6D ;_initBlock_0+138
0x808C	0x736E ;_initBlock_0+140
0x808E	0x783A ;_initBlock_0+142
0x8090	0x6973 ;_initBlock_0+144
0x8092	0x223D ;_initBlock_0+146
0x8094	0x7468 ;_initBlock_0+148
0x8096	0x7074 ;_initBlock_0+150
0x8098	0x2F3A ;_initBlock_0+152
0x809A	0x772F ;_initBlock_0+154
0x809C	0x7777 ;_initBlock_0+156
0x809E	0x772E ;_initBlock_0+158
0x80A0	0x2E33 ;_initBlock_0+160
0x80A2	0x726F ;_initBlock_0+162
0x80A4	0x2F67 ;_initBlock_0+164
0x80A6	0x3032 ;_initBlock_0+166
0x80A8	0x3130 ;_initBlock_0+168
0x80AA	0x582F ;_initBlock_0+170
0x80AC	0x4C4D ;_initBlock_0+172
0x80AE	0x6353 ;_initBlock_0+174
0x80B0	0x6568 ;_initBlock_0+176
0x80B2	0x616D ;_initBlock_0+178
0x80B4	0x692D ;_initBlock_0+180
0x80B6	0x736E ;_initBlock_0+182
0x80B8	0x6174 ;_initBlock_0+184
0x80BA	0x636E ;_initBlock_0+186
0x80BC	0x2265 ;_initBlock_0+188
0x80BE	0x7820 ;_initBlock_0+190
0x80C0	0x6973 ;_initBlock_0+192
0x80C2	0x6E3A ;_initBlock_0+194
0x80C4	0x4E6F ;_initBlock_0+196
0x80C6	0x6D61 ;_initBlock_0+198
0x80C8	0x7365 ;_initBlock_0+200
0x80CA	0x6170 ;_initBlock_0+202
0x80CC	0x6563 ;_initBlock_0+204
0x80CE	0x6353 ;_initBlock_0+206
0x80D0	0x6568 ;_initBlock_0+208
0x80D2	0x616D ;_initBlock_0+210
0x80D4	0x6F4C ;_initBlock_0+212
0x80D6	0x6163 ;_initBlock_0+214
0x80D8	0x6974 ;_initBlock_0+216
0x80DA	0x6E6F ;_initBlock_0+218
0x80DC	0x223D ;_initBlock_0+220
0x80DE	0x7468 ;_initBlock_0+222
0x80E0	0x7074 ;_initBlock_0+224
0x80E2	0x2F3A ;_initBlock_0+226
0x80E4	0x6F2F ;_initBlock_0+228
0x80E6	0x6570 ;_initBlock_0+230
0x80E8	0x6C6E ;_initBlock_0+232
0x80EA	0x6263 ;_initBlock_0+234
0x80EC	0x6F2E ;_initBlock_0+236
0x80EE	0x6772 ;_initBlock_0+238
0x80F0	0x742F ;_initBlock_0+240
0x80F2	0x7572 ;_initBlock_0+242
0x80F4	0x6B6E ;_initBlock_0+244
0x80F6	0x702F ;_initBlock_0+246
0x80F8	0x6F72 ;_initBlock_0+248
0x80FA	0x6F74 ;_initBlock_0+250
0x80FC	0x7974 ;_initBlock_0+252
0x80FE	0x6570 ;_initBlock_0+254
0x8100	0x2F73 ;_initBlock_0+256
0x8102	0x6D78 ;_initBlock_0+258
0x8104	0x2F6C ;_initBlock_0+260
0x8106	0x6373 ;_initBlock_0+262
0x8108	0x6568 ;_initBlock_0+264
0x810A	0x616D ;_initBlock_0+266
0x810C	0x632F ;_initBlock_0+268
0x810E	0x6964 ;_initBlock_0+270
0x8110	0x782E ;_initBlock_0+272
0x8112	0x6473 ;_initBlock_0+274
0x8114	0x3E22 ;_initBlock_0+276
0x8116	0x693C ;_initBlock_0+278
0x8118	0x6564 ;_initBlock_0+280
0x811A	0x746E ;_initBlock_0+282
0x811C	0x6669 ;_initBlock_0+284
0x811E	0x6369 ;_initBlock_0+286
0x8120	0x7461 ;_initBlock_0+288
0x8122	0x6F69 ;_initBlock_0+290
0x8124	0x3E6E ;_initBlock_0+292
0x8126	0x6D3C ;_initBlock_0+294
0x8128	0x6E61 ;_initBlock_0+296
0x812A	0x6675 ;_initBlock_0+298
0x812C	0x6361 ;_initBlock_0+300
0x812E	0x7574 ;_initBlock_0+302
0x8130	0x6572 ;_initBlock_0+304
0x8132	0x3E72 ;_initBlock_0+306
0x8134	0x754D ;_initBlock_0+308
0x8136	0x7473 ;_initBlock_0+310
0x8138	0x6E61 ;_initBlock_0+312
0x813A	0x7067 ;_initBlock_0+314
0x813C	0x6165 ;_initBlock_0+316
0x813E	0x3C6B ;_initBlock_0+318
0x8140	0x6D2F ;_initBlock_0+320
0x8142	0x6E61 ;_initBlock_0+322
0x8144	0x6675 ;_initBlock_0+324
0x8146	0x6361 ;_initBlock_0+326
0x8148	0x7574 ;_initBlock_0+328
0x814A	0x6572 ;_initBlock_0+330
0x814C	0x3E72 ;_initBlock_0+332
0x814E	0x6D3C ;_initBlock_0+334
0x8150	0x646F ;_initBlock_0+336
0x8152	0x6C65 ;_initBlock_0+338
0x8154	0x433E ;_initBlock_0+340
0x8156	0x3153 ;_initBlock_0+342
0x8158	0x3030 ;_initBlock_0+344
0x815A	0x2F3C ;_initBlock_0+346
0x815C	0x6F6D ;_initBlock_0+348
0x815E	0x6564 ;_initBlock_0+350
0x8160	0x3E6C ;_initBlock_0+352
0x8162	0x683C ;_initBlock_0+354
0x8164	0x7261 ;_initBlock_0+356
0x8166	0x7764 ;_initBlock_0+358
0x8168	0x7261 ;_initBlock_0+360
0x816A	0x5665 ;_initBlock_0+362
0x816C	0x7265 ;_initBlock_0+364
0x816E	0x6973 ;_initBlock_0+366
0x8170	0x6E6F ;_initBlock_0+368
0x8172	0x313E ;_initBlock_0+370
0x8174	0x302E ;_initBlock_0+372
0x8176	0x2F3C ;_initBlock_0+374
0x8178	0x6168 ;_initBlock_0+376
0x817A	0x6472 ;_initBlock_0+378
0x817C	0x6177 ;_initBlock_0+380
0x817E	0x6572 ;_initBlock_0+382
0x8180	0x6556 ;_initBlock_0+384
0x8182	0x7372 ;_initBlock_0+386
0x8184	0x6F69 ;_initBlock_0+388
0x8186	0x3E6E ;_initBlock_0+390
0x8188	0x733C ;_initBlock_0+392
0x818A	0x666F ;_initBlock_0+394
0x818C	0x7774 ;_initBlock_0+396
0x818E	0x7261 ;_initBlock_0+398
0x8190	0x5665 ;_initBlock_0+400
0x8192	0x7265 ;_initBlock_0+402
0x8194	0x6973 ;_initBlock_0+404
0x8196	0x6E6F ;_initBlock_0+406
0x8198	0x303E ;_initBlock_0+408
0x819A	0x322E ;_initBlock_0+410
0x819C	0x2F3C ;_initBlock_0+412
0x819E	0x6F73 ;_initBlock_0+414
0x81A0	0x7466 ;_initBlock_0+416
0x81A2	0x6177 ;_initBlock_0+418
0x81A4	0x6572 ;_initBlock_0+420
0x81A6	0x6556 ;_initBlock_0+422
0x81A8	0x7372 ;_initBlock_0+424
0x81AA	0x6F69 ;_initBlock_0+426
0x81AC	0x3E6E ;_initBlock_0+428
0x81AE	0x6D3C ;_initBlock_0+430
0x81B0	0x7061 ;_initBlock_0+432
0x81B2	0x3C3E ;_initBlock_0+434
0x81B4	0x6572 ;_initBlock_0+436
0x81B6	0x616C ;_initBlock_0+438
0x81B8	0x6974 ;_initBlock_0+440
0x81BA	0x6E6F ;_initBlock_0+442
0x81BC	0x3C3E ;_initBlock_0+444
0x81BE	0x7270 ;_initBlock_0+446
0x81C0	0x706F ;_initBlock_0+448
0x81C2	0x7265 ;_initBlock_0+450
0x81C4	0x7974 ;_initBlock_0+452
0x81C6	0x443E ;_initBlock_0+454
0x81C8	0x7365 ;_initBlock_0+456
0x81CA	0x7263 ;_initBlock_0+458
0x81CC	0x7069 ;_initBlock_0+460
0x81CE	0x6974 ;_initBlock_0+462
0x81D0	0x6E6F ;_initBlock_0+464
0x81D2	0x2F3C ;_initBlock_0+466
0x81D4	0x7270 ;_initBlock_0+468
0x81D6	0x706F ;_initBlock_0+470
0x81D8	0x7265 ;_initBlock_0+472
0x81DA	0x7974 ;_initBlock_0+474
0x81DC	0x3C3E ;_initBlock_0+476
0x81DE	0x6176 ;_initBlock_0+478
0x81E0	0x756C ;_initBlock_0+480
0x81E2	0x3E65 ;_initBlock_0+482
0x81E4	0x754D ;_initBlock_0+484
0x81E6	0x7473 ;_initBlock_0+486
0x81E8	0x6E61 ;_initBlock_0+488
0x81EA	0x7067 ;_initBlock_0+490
0x81EC	0x6165 ;_initBlock_0+492
0x81EE	0x206B ;_initBlock_0+494
0x81F0	0x6F43 ;_initBlock_0+496
0x81F2	0x6D6D ;_initBlock_0+498
0x81F4	0x6E61 ;_initBlock_0+500
0x81F6	0x2064 ;_initBlock_0+502
0x81F8	0x7453 ;_initBlock_0+504
0x81FA	0x7461 ;_initBlock_0+506
0x81FC	0x6F69 ;_initBlock_0+508
0x81FE	0x206E ;_initBlock_0+510
0x8200	0x6F4E ;_initBlock_0+512
0x8202	0x6564 ;_initBlock_0+514
0x8204	0x2F3C ;_initBlock_0+516
0x8206	0x6176 ;_initBlock_0+518
0x8208	0x756C ;_initBlock_0+520
0x820A	0x3E65 ;_initBlock_0+522
0x820C	0x2F3C ;_initBlock_0+524
0x820E	0x6572 ;_initBlock_0+526
0x8210	0x616C ;_initBlock_0+528
0x8212	0x6974 ;_initBlock_0+530
0x8214	0x6E6F ;_initBlock_0+532
0x8216	0x3C3E ;_initBlock_0+534
0x8218	0x6572 ;_initBlock_0+536
0x821A	0x616C ;_initBlock_0+538
0x821C	0x6974 ;_initBlock_0+540
0x821E	0x6E6F ;_initBlock_0+542
0x8220	0x3C3E ;_initBlock_0+544
0x8222	0x7270 ;_initBlock_0+546
0x8224	0x706F ;_initBlock_0+548
0x8226	0x7265 ;_initBlock_0+550
0x8228	0x7974 ;_initBlock_0+552
0x822A	0x533E ;_initBlock_0+554
0x822C	0x6174 ;_initBlock_0+556
0x822E	0x7574 ;_initBlock_0+558
0x8230	0x3C73 ;_initBlock_0+560
0x8232	0x702F ;_initBlock_0+562
0x8234	0x6F72 ;_initBlock_0+564
0x8236	0x6570 ;_initBlock_0+566
0x8238	0x7472 ;_initBlock_0+568
0x823A	0x3E79 ;_initBlock_0+570
0x823C	0x763C ;_initBlock_0+572
0x823E	0x6C61 ;_initBlock_0+574
0x8240	0x6575 ;_initBlock_0+576
0x8242	0x503E ;_initBlock_0+578
0x8244	0x6F72 ;_initBlock_0+580
0x8246	0x6F74 ;_initBlock_0+582
0x8248	0x7974 ;_initBlock_0+584
0x824A	0x6570 ;_initBlock_0+586
0x824C	0x2F3C ;_initBlock_0+588
0x824E	0x6176 ;_initBlock_0+590
0x8250	0x756C ;_initBlock_0+592
0x8252	0x3E65 ;_initBlock_0+594
0x8254	0x2F3C ;_initBlock_0+596
0x8256	0x6572 ;_initBlock_0+598
0x8258	0x616C ;_initBlock_0+600
0x825A	0x6974 ;_initBlock_0+602
0x825C	0x6E6F ;_initBlock_0+604
0x825E	0x3C3E ;_initBlock_0+606
0x8260	0x6D2F ;_initBlock_0+608
0x8262	0x7061 ;_initBlock_0+610
0x8264	0x3C3E ;_initBlock_0+612
0x8266	0x692F ;_initBlock_0+614
0x8268	0x6564 ;_initBlock_0+616
0x826A	0x746E ;_initBlock_0+618
0x826C	0x6669 ;_initBlock_0+620
0x826E	0x6369 ;_initBlock_0+622
0x8270	0x7461 ;_initBlock_0+624
0x8272	0x6F69 ;_initBlock_0+626
0x8274	0x3E6E ;_initBlock_0+628
0x8276	0x613C ;_initBlock_0+630
0x8278	0x6463 ;_initBlock_0+632
0x827A	0x2069 ;_initBlock_0+634
0x827C	0x6966 ;_initBlock_0+636
0x827E	0x6578 ;_initBlock_0+638
0x8280	0x3D64 ;_initBlock_0+640
0x8282	0x3122 ;_initBlock_0+642
0x8284	0x2022 ;_initBlock_0+644
0x8286	0x6176 ;_initBlock_0+646
0x8288	0x3D72 ;_initBlock_0+648
0x828A	0x3122 ;_initBlock_0+650
0x828C	0x2022 ;_initBlock_0+652
0x828E	0x3E2F ;_initBlock_0+654
0x8290	0x733C ;_initBlock_0+656
0x8292	0x6765 ;_initBlock_0+658
0x8294	0x656D ;_initBlock_0+660
0x8296	0x746E ;_initBlock_0+662
0x8298	0x6F20 ;_initBlock_0+664
0x829A	0x6972 ;_initBlock_0+666
0x829C	0x6967 ;_initBlock_0+668
0x829E	0x3D6E ;_initBlock_0+670
0x82A0	0x3022 ;_initBlock_0+672
0x82A2	0x2022 ;_initBlock_0+674
0x82A4	0x7073 ;_initBlock_0+676
0x82A6	0x6361 ;_initBlock_0+678
0x82A8	0x3D65 ;_initBlock_0+680
0x82AA	0x3222 ;_initBlock_0+682
0x82AC	0x3335 ;_initBlock_0+684
0x82AE	0x3E22 ;_initBlock_0+686
0x82B0	0x673C ;_initBlock_0+688
0x82B2	0x6F72 ;_initBlock_0+690
0x82B4	0x7075 ;_initBlock_0+692
0x82B6	0x6F20 ;_initBlock_0+694
0x82B8	0x6666 ;_initBlock_0+696
0x82BA	0x6573 ;_initBlock_0+698
0x82BC	0x3D74 ;_initBlock_0+700
0x82BE	0x3022 ;_initBlock_0+702
0x82C0	0x3E22 ;_initBlock_0+704
0x82C2	0x6E3C ;_initBlock_0+706
0x82C4	0x6D61 ;_initBlock_0+708
0x82C6	0x3E65 ;_initBlock_0+710
0x82C8	0x7355 ;_initBlock_0+712
0x82CA	0x7265 ;_initBlock_0+714
0x82CC	0x4420 ;_initBlock_0+716
0x82CE	0x7461 ;_initBlock_0+718
0x82D0	0x3C61 ;_initBlock_0+720
0x82D2	0x6E2F ;_initBlock_0+722
0x82D4	0x6D61 ;_initBlock_0+724
0x82D6	0x3E65 ;_initBlock_0+726
0x82D8	0x643C ;_initBlock_0+728
0x82DA	0x7365 ;_initBlock_0+730
0x82DC	0x7263 ;_initBlock_0+732
0x82DE	0x7069 ;_initBlock_0+734
0x82E0	0x6974 ;_initBlock_0+736
0x82E2	0x6E6F ;_initBlock_0+738
0x82E4	0x413E ;_initBlock_0+740
0x82E6	0x6464 ;_initBlock_0+742
0x82E8	0x7920 ;_initBlock_0+744
0x82EA	0x756F ;_initBlock_0+746
0x82EC	0x2072 ;_initBlock_0+748
0x82EE	0x776F ;_initBlock_0+750
0x82F0	0x206E ;_initBlock_0+752
0x82F2	0x6E75 ;_initBlock_0+754
0x82F4	0x7169 ;_initBlock_0+756
0x82F6	0x6575 ;_initBlock_0+758
0x82F8	0x6E20 ;_initBlock_0+760
0x82FA	0x646F ;_initBlock_0+762
0x82FC	0x2065 ;_initBlock_0+764
0x82FE	0x6E69 ;_initBlock_0+766
0x8300	0x6F66 ;_initBlock_0+768
0x8302	0x6820 ;_initBlock_0+770
0x8304	0x7265 ;_initBlock_0+772
0x8306	0x3C65 ;_initBlock_0+774
0x8308	0x642F ;_initBlock_0+776
0x830A	0x7365 ;_initBlock_0+778
0x830C	0x7263 ;_initBlock_0+780
0x830E	0x7069 ;_initBlock_0+782
0x8310	0x6974 ;_initBlock_0+784
0x8312	0x6E6F ;_initBlock_0+786
0x8314	0x3C3E ;_initBlock_0+788
0x8316	0x7473 ;_initBlock_0+790
0x8318	0x6972 ;_initBlock_0+792
0x831A	0x676E ;_initBlock_0+794
0x831C	0x7320 ;_initBlock_0+796
0x831E	0x7A69 ;_initBlock_0+798
0x8320	0x3D65 ;_initBlock_0+800
0x8322	0x3222 ;_initBlock_0+802
0x8324	0x2230 ;_initBlock_0+804
0x8326	0x3C3E ;_initBlock_0+806
0x8328	0x616E ;_initBlock_0+808
0x832A	0x656D ;_initBlock_0+810
0x832C	0x553E ;_initBlock_0+812
0x832E	0x6573 ;_initBlock_0+814
0x8330	0x2072 ;_initBlock_0+816
0x8332	0x614E ;_initBlock_0+818
0x8334	0x656D ;_initBlock_0+820
0x8336	0x2F3C ;_initBlock_0+822
0x8338	0x616E ;_initBlock_0+824
0x833A	0x656D ;_initBlock_0+826
0x833C	0x3C3E ;_initBlock_0+828
0x833E	0x732F ;_initBlock_0+830
0x8340	0x7274 ;_initBlock_0+832
0x8342	0x6E69 ;_initBlock_0+834
0x8344	0x3E67 ;_initBlock_0+836
0x8346	0x733C ;_initBlock_0+838
0x8348	0x7274 ;_initBlock_0+840
0x834A	0x6E69 ;_initBlock_0+842
0x834C	0x2067 ;_initBlock_0+844
0x834E	0x6973 ;_initBlock_0+846
0x8350	0x657A ;_initBlock_0+848
0x8352	0x223D ;_initBlock_0+850
0x8354	0x3034 ;_initBlock_0+852
0x8356	0x3E22 ;_initBlock_0+854
0x8358	0x6E3C ;_initBlock_0+856
0x835A	0x6D61 ;_initBlock_0+858
0x835C	0x3E65 ;_initBlock_0+860
0x835E	0x7355 ;_initBlock_0+862
0x8360	0x7265 ;_initBlock_0+864
0x8362	0x4420 ;_initBlock_0+866
0x8364	0x7365 ;_initBlock_0+868
0x8366	0x7263 ;_initBlock_0+870
0x8368	0x7069 ;_initBlock_0+872
0x836A	0x6974 ;_initBlock_0+874
0x836C	0x6E6F ;_initBlock_0+876
0x836E	0x2F3C ;_initBlock_0+878
0x8370	0x616E ;_initBlock_0+880
0x8372	0x656D ;_initBlock_0+882
0x8374	0x3C3E ;_initBlock_0+884
0x8376	0x732F ;_initBlock_0+886
0x8378	0x7274 ;_initBlock_0+888
0x837A	0x6E69 ;_initBlock_0+890
0x837C	0x3E67 ;_initBlock_0+892
0x837E	0x2F3C ;_initBlock_0+894
0x8380	0x7267 ;_initBlock_0+896
0x8382	0x756F ;_initBlock_0+898
0x8384	0x3E70 ;_initBlock_0+900
0x8386	0x2F3C ;_initBlock_0+902
0x8388	0x6573 ;_initBlock_0+904
0x838A	0x6D67 ;_initBlock_0+906
0x838C	0x6E65 ;_initBlock_0+908
0x838E	0x3E74 ;_initBlock_0+910
0x8390	0x733C ;_initBlock_0+912
0x8392	0x6765 ;_initBlock_0+914
0x8394	0x656D ;_initBlock_0+916
0x8396	0x746E ;_initBlock_0+918
0x8398	0x6F20 ;_initBlock_0+920
0x839A	0x6972 ;_initBlock_0+922
0x839C	0x6967 ;_initBlock_0+924
0x839E	0x3D6E ;_initBlock_0+926
0x83A0	0x3022 ;_initBlock_0+928
0x83A2	0x2022 ;_initBlock_0+930
0x83A4	0x7073 ;_initBlock_0+932
0x83A6	0x6361 ;_initBlock_0+934
0x83A8	0x3D65 ;_initBlock_0+936
0x83AA	0x3222 ;_initBlock_0+938
0x83AC	0x3235 ;_initBlock_0+940
0x83AE	0x3E22 ;_initBlock_0+942
0x83B0	0x673C ;_initBlock_0+944
0x83B2	0x6F72 ;_initBlock_0+946
0x83B4	0x7075 ;_initBlock_0+948
0x83B6	0x3C3E ;_initBlock_0+950
0x83B8	0x616E ;_initBlock_0+952
0x83BA	0x656D ;_initBlock_0+954
0x83BC	0x4D3E ;_initBlock_0+956
0x83BE	0x6E61 ;_initBlock_0+958
0x83C0	0x6675 ;_initBlock_0+960
0x83C2	0x6361 ;_initBlock_0+962
0x83C4	0x7574 ;_initBlock_0+964
0x83C6	0x6572 ;_initBlock_0+966
0x83C8	0x2072 ;_initBlock_0+968
0x83CA	0x6E49 ;_initBlock_0+970
0x83CC	0x6F66 ;_initBlock_0+972
0x83CE	0x6D72 ;_initBlock_0+974
0x83D0	0x7461 ;_initBlock_0+976
0x83D2	0x6F69 ;_initBlock_0+978
0x83D4	0x3C6E ;_initBlock_0+980
0x83D6	0x6E2F ;_initBlock_0+982
0x83D8	0x6D61 ;_initBlock_0+984
0x83DA	0x3E65 ;_initBlock_0+986
0x83DC	0x643C ;_initBlock_0+988
0x83DE	0x7365 ;_initBlock_0+990
0x83E0	0x7263 ;_initBlock_0+992
0x83E2	0x7069 ;_initBlock_0+994
0x83E4	0x6974 ;_initBlock_0+996
0x83E6	0x6E6F ;_initBlock_0+998
0x83E8	0x4D3E ;_initBlock_0+1000
0x83EA	0x6E61 ;_initBlock_0+1002
0x83EC	0x6675 ;_initBlock_0+1004
0x83EE	0x6361 ;_initBlock_0+1006
0x83F0	0x7574 ;_initBlock_0+1008
0x83F2	0x6572 ;_initBlock_0+1010
0x83F4	0x2D72 ;_initBlock_0+1012
0x83F6	0x7270 ;_initBlock_0+1014
0x83F8	0x766F ;_initBlock_0+1016
0x83FA	0x6469 ;_initBlock_0+1018
0x83FC	0x6465 ;_initBlock_0+1020
0x83FE	0x6620 ;_initBlock_0+1022
0x8400	0x7869 ;_initBlock_0+1024
0x8402	0x6465 ;_initBlock_0+1026
0x8404	0x6E20 ;_initBlock_0+1028
0x8406	0x646F ;_initBlock_0+1030
0x8408	0x2065 ;_initBlock_0+1032
0x840A	0x6564 ;_initBlock_0+1034
0x840C	0x6373 ;_initBlock_0+1036
0x840E	0x6972 ;_initBlock_0+1038
0x8410	0x7470 ;_initBlock_0+1040
0x8412	0x6F69 ;_initBlock_0+1042
0x8414	0x3C6E ;_initBlock_0+1044
0x8416	0x642F ;_initBlock_0+1046
0x8418	0x7365 ;_initBlock_0+1048
0x841A	0x7263 ;_initBlock_0+1050
0x841C	0x7069 ;_initBlock_0+1052
0x841E	0x6974 ;_initBlock_0+1054
0x8420	0x6E6F ;_initBlock_0+1056
0x8422	0x3C3E ;_initBlock_0+1058
0x8424	0x6E69 ;_initBlock_0+1060
0x8426	0x2074 ;_initBlock_0+1062
0x8428	0x6973 ;_initBlock_0+1064
0x842A	0x657A ;_initBlock_0+1066
0x842C	0x223D ;_initBlock_0+1068
0x842E	0x2231 ;_initBlock_0+1070
0x8430	0x3C3E ;_initBlock_0+1072
0x8432	0x616E ;_initBlock_0+1074
0x8434	0x656D ;_initBlock_0+1076
0x8436	0x563E ;_initBlock_0+1078
0x8438	0x7265 ;_initBlock_0+1080
0x843A	0x6973 ;_initBlock_0+1082
0x843C	0x6E6F ;_initBlock_0+1084
0x843E	0x2F3C ;_initBlock_0+1086
0x8440	0x616E ;_initBlock_0+1088
0x8442	0x656D ;_initBlock_0+1090
0x8444	0x3C3E ;_initBlock_0+1092
0x8446	0x692F ;_initBlock_0+1094
0x8448	0x746E ;_initBlock_0+1096
0x844A	0x3C3E ;_initBlock_0+1098
0x844C	0x7473 ;_initBlock_0+1100
0x844E	0x6972 ;_initBlock_0+1102
0x8450	0x676E ;_initBlock_0+1104
0x8452	0x7320 ;_initBlock_0+1106
0x8454	0x7A69 ;_initBlock_0+1108
0x8456	0x3D65 ;_initBlock_0+1110
0x8458	0x3122 ;_initBlock_0+1112
0x845A	0x2232 ;_initBlock_0+1114
0x845C	0x3C3E ;_initBlock_0+1116
0x845E	0x616E ;_initBlock_0+1118
0x8460	0x656D ;_initBlock_0+1120
0x8462	0x4D3E ;_initBlock_0+1122
0x8464	0x6E61 ;_initBlock_0+1124
0x8466	0x6675 ;_initBlock_0+1126
0x8468	0x6361 ;_initBlock_0+1128
0x846A	0x7574 ;_initBlock_0+1130
0x846C	0x6572 ;_initBlock_0+1132
0x846E	0x2072 ;_initBlock_0+1134
0x8470	0x614E ;_initBlock_0+1136
0x8472	0x656D ;_initBlock_0+1138
0x8474	0x2F3C ;_initBlock_0+1140
0x8476	0x616E ;_initBlock_0+1142
0x8478	0x656D ;_initBlock_0+1144
0x847A	0x3C3E ;_initBlock_0+1146
0x847C	0x732F ;_initBlock_0+1148
0x847E	0x7274 ;_initBlock_0+1150
0x8480	0x6E69 ;_initBlock_0+1152
0x8482	0x3E67 ;_initBlock_0+1154
0x8484	0x733C ;_initBlock_0+1156
0x8486	0x7274 ;_initBlock_0+1158
0x8488	0x6E69 ;_initBlock_0+1160
0x848A	0x2067 ;_initBlock_0+1162
0x848C	0x6973 ;_initBlock_0+1164
0x848E	0x657A ;_initBlock_0+1166
0x8490	0x223D ;_initBlock_0+1168
0x8492	0x2236 ;_initBlock_0+1170
0x8494	0x3C3E ;_initBlock_0+1172
0x8496	0x616E ;_initBlock_0+1174
0x8498	0x656D ;_initBlock_0+1176
0x849A	0x4D3E ;_initBlock_0+1178
0x849C	0x6E61 ;_initBlock_0+1180
0x849E	0x6675 ;_initBlock_0+1182
0x84A0	0x6361 ;_initBlock_0+1184
0x84A2	0x7574 ;_initBlock_0+1186
0x84A4	0x6572 ;_initBlock_0+1188
0x84A6	0x2072 ;_initBlock_0+1190
0x84A8	0x6E49 ;_initBlock_0+1192
0x84AA	0x6F66 ;_initBlock_0+1194
0x84AC	0x2F3C ;_initBlock_0+1196
0x84AE	0x616E ;_initBlock_0+1198
0x84B0	0x656D ;_initBlock_0+1200
0x84B2	0x3C3E ;_initBlock_0+1202
0x84B4	0x732F ;_initBlock_0+1204
0x84B6	0x7274 ;_initBlock_0+1206
0x84B8	0x6E69 ;_initBlock_0+1208
0x84BA	0x3E67 ;_initBlock_0+1210
0x84BC	0x733C ;_initBlock_0+1212
0x84BE	0x7274 ;_initBlock_0+1214
0x84C0	0x6E69 ;_initBlock_0+1216
0x84C2	0x2067 ;_initBlock_0+1218
0x84C4	0x6973 ;_initBlock_0+1220
0x84C6	0x657A ;_initBlock_0+1222
0x84C8	0x223D ;_initBlock_0+1224
0x84CA	0x2234 ;_initBlock_0+1226
0x84CC	0x3C3E ;_initBlock_0+1228
0x84CE	0x616E ;_initBlock_0+1230
0x84D0	0x656D ;_initBlock_0+1232
0x84D2	0x483E ;_initBlock_0+1234
0x84D4	0x7261 ;_initBlock_0+1236
0x84D6	0x7764 ;_initBlock_0+1238
0x84D8	0x7261 ;_initBlock_0+1240
0x84DA	0x2065 ;_initBlock_0+1242
0x84DC	0x6556 ;_initBlock_0+1244
0x84DE	0x7372 ;_initBlock_0+1246
0x84E0	0x6F69 ;_initBlock_0+1248
0x84E2	0x3C6E ;_initBlock_0+1250
0x84E4	0x6E2F ;_initBlock_0+1252
0x84E6	0x6D61 ;_initBlock_0+1254
0x84E8	0x3E65 ;_initBlock_0+1256
0x84EA	0x2F3C ;_initBlock_0+1258
0x84EC	0x7473 ;_initBlock_0+1260
0x84EE	0x6972 ;_initBlock_0+1262
0x84F0	0x676E ;_initBlock_0+1264
0x84F2	0x3C3E ;_initBlock_0+1266
0x84F4	0x7473 ;_initBlock_0+1268
0x84F6	0x6972 ;_initBlock_0+1270
0x84F8	0x676E ;_initBlock_0+1272
0x84FA	0x7320 ;_initBlock_0+1274
0x84FC	0x7A69 ;_initBlock_0+1276
0x84FE	0x3D65 ;_initBlock_0+1278
0x8500	0x3422 ;_initBlock_0+1280
0x8502	0x3E22 ;_initBlock_0+1282
0x8504	0x6E3C ;_initBlock_0+1284
0x8506	0x6D61 ;_initBlock_0+1286
0x8508	0x3E65 ;_initBlock_0+1288
0x850A	0x6F53 ;_initBlock_0+1290
0x850C	0x7466 ;_initBlock_0+1292
0x850E	0x6177 ;_initBlock_0+1294
0x8510	0x6572 ;_initBlock_0+1296
0x8512	0x5620 ;_initBlock_0+1298
0x8514	0x7265 ;_initBlock_0+1300
0x8516	0x6973 ;_initBlock_0+1302
0x8518	0x6E6F ;_initBlock_0+1304
0x851A	0x2F3C ;_initBlock_0+1306
0x851C	0x616E ;_initBlock_0+1308
0x851E	0x656D ;_initBlock_0+1310
0x8520	0x3C3E ;_initBlock_0+1312
0x8522	0x732F ;_initBlock_0+1314
0x8524	0x7274 ;_initBlock_0+1316
0x8526	0x6E69 ;_initBlock_0+1318
0x8528	0x3E67 ;_initBlock_0+1320
0x852A	0x2F3C ;_initBlock_0+1322
0x852C	0x7267 ;_initBlock_0+1324
0x852E	0x756F ;_initBlock_0+1326
0x8530	0x3E70 ;_initBlock_0+1328
0x8532	0x2F3C ;_initBlock_0+1330
0x8534	0x6573 ;_initBlock_0+1332
0x8536	0x6D67 ;_initBlock_0+1334
0x8538	0x6E65 ;_initBlock_0+1336
0x853A	0x3E74 ;_initBlock_0+1338
0x853C	0x733C ;_initBlock_0+1340
0x853E	0x6765 ;_initBlock_0+1342
0x8540	0x656D ;_initBlock_0+1344
0x8542	0x746E ;_initBlock_0+1346
0x8544	0x6F20 ;_initBlock_0+1348
0x8546	0x6972 ;_initBlock_0+1350
0x8548	0x6967 ;_initBlock_0+1352
0x854A	0x3D6E ;_initBlock_0+1354
0x854C	0x3022 ;_initBlock_0+1356
0x854E	0x2022 ;_initBlock_0+1358
0x8550	0x7073 ;_initBlock_0+1360
0x8552	0x6361 ;_initBlock_0+1362
0x8554	0x3D65 ;_initBlock_0+1364
0x8556	0x3222 ;_initBlock_0+1366
0x8558	0x3135 ;_initBlock_0+1368
0x855A	0x3E22 ;_initBlock_0+1370
0x855C	0x673C ;_initBlock_0+1372
0x855E	0x6F72 ;_initBlock_0+1374
0x8560	0x7075 ;_initBlock_0+1376
0x8562	0x6F20 ;_initBlock_0+1378
0x8564	0x6666 ;_initBlock_0+1380
0x8566	0x6573 ;_initBlock_0+1382
0x8568	0x3D74 ;_initBlock_0+1384
0x856A	0x3022 ;_initBlock_0+1386
0x856C	0x3E22 ;_initBlock_0+1388
0x856E	0x6E3C ;_initBlock_0+1390
0x8570	0x6D61 ;_initBlock_0+1392
0x8572	0x3E65 ;_initBlock_0+1394
0x8574	0x7355 ;_initBlock_0+1396
0x8576	0x7265 ;_initBlock_0+1398
0x8578	0x4420 ;_initBlock_0+1400
0x857A	0x7461 ;_initBlock_0+1402
0x857C	0x3C61 ;_initBlock_0+1404
0x857E	0x6E2F ;_initBlock_0+1406
0x8580	0x6D61 ;_initBlock_0+1408
0x8582	0x3E65 ;_initBlock_0+1410
0x8584	0x643C ;_initBlock_0+1412
0x8586	0x7365 ;_initBlock_0+1414
0x8588	0x7263 ;_initBlock_0+1416
0x858A	0x7069 ;_initBlock_0+1418
0x858C	0x6974 ;_initBlock_0+1420
0x858E	0x6E6F ;_initBlock_0+1422
0x8590	0x413E ;_initBlock_0+1424
0x8592	0x6464 ;_initBlock_0+1426
0x8594	0x7920 ;_initBlock_0+1428
0x8596	0x756F ;_initBlock_0+1430
0x8598	0x2072 ;_initBlock_0+1432
0x859A	0x776F ;_initBlock_0+1434
0x859C	0x206E ;_initBlock_0+1436
0x859E	0x6E75 ;_initBlock_0+1438
0x85A0	0x7169 ;_initBlock_0+1440
0x85A2	0x6575 ;_initBlock_0+1442
0x85A4	0x6E20 ;_initBlock_0+1444
0x85A6	0x646F ;_initBlock_0+1446
0x85A8	0x2065 ;_initBlock_0+1448
0x85AA	0x6E69 ;_initBlock_0+1450
0x85AC	0x6F66 ;_initBlock_0+1452
0x85AE	0x6820 ;_initBlock_0+1454
0x85B0	0x7265 ;_initBlock_0+1456
0x85B2	0x3C65 ;_initBlock_0+1458
0x85B4	0x642F ;_initBlock_0+1460
0x85B6	0x7365 ;_initBlock_0+1462
0x85B8	0x7263 ;_initBlock_0+1464
0x85BA	0x7069 ;_initBlock_0+1466
0x85BC	0x6974 ;_initBlock_0+1468
0x85BE	0x6E6F ;_initBlock_0+1470
0x85C0	0x3C3E ;_initBlock_0+1472
0x85C2	0x6E69 ;_initBlock_0+1474
0x85C4	0x2074 ;_initBlock_0+1476
0x85C6	0x6973 ;_initBlock_0+1478
0x85C8	0x657A ;_initBlock_0+1480
0x85CA	0x223D ;_initBlock_0+1482
0x85CC	0x2231 ;_initBlock_0+1484
0x85CE	0x3C3E ;_initBlock_0+1486
0x85D0	0x616E ;_initBlock_0+1488
0x85D2	0x656D ;_initBlock_0+1490
0x85D4	0x563E ;_initBlock_0+1492
0x85D6	0x7265 ;_initBlock_0+1494
0x85D8	0x6973 ;_initBlock_0+1496
0x85DA	0x6E6F ;_initBlock_0+1498
0x85DC	0x2F3C ;_initBlock_0+1500
0x85DE	0x616E ;_initBlock_0+1502
0x85E0	0x656D ;_initBlock_0+1504
0x85E2	0x3C3E ;_initBlock_0+1506
0x85E4	0x692F ;_initBlock_0+1508
0x85E6	0x746E ;_initBlock_0+1510
0x85E8	0x3C3E ;_initBlock_0+1512
0x85EA	0x7473 ;_initBlock_0+1514
0x85EC	0x6972 ;_initBlock_0+1516
0x85EE	0x676E ;_initBlock_0+1518
0x85F0	0x7320 ;_initBlock_0+1520
0x85F2	0x7A69 ;_initBlock_0+1522
0x85F4	0x3D65 ;_initBlock_0+1524
0x85F6	0x3222 ;_initBlock_0+1526
0x85F8	0x2230 ;_initBlock_0+1528
0x85FA	0x3C3E ;_initBlock_0+1530
0x85FC	0x616E ;_initBlock_0+1532
0x85FE	0x656D ;_initBlock_0+1534
0x8600	0x553E ;_initBlock_0+1536
0x8602	0x6573 ;_initBlock_0+1538
0x8604	0x2072 ;_initBlock_0+1540
0x8606	0x614E ;_initBlock_0+1542
0x8608	0x656D ;_initBlock_0+1544
0x860A	0x2F3C ;_initBlock_0+1546
0x860C	0x616E ;_initBlock_0+1548
0x860E	0x656D ;_initBlock_0+1550
0x8610	0x3C3E ;_initBlock_0+1552
0x8612	0x732F ;_initBlock_0+1554
0x8614	0x7274 ;_initBlock_0+1556
0x8616	0x6E69 ;_initBlock_0+1558
0x8618	0x3E67 ;_initBlock_0+1560
0x861A	0x733C ;_initBlock_0+1562
0x861C	0x7274 ;_initBlock_0+1564
0x861E	0x6E69 ;_initBlock_0+1566
0x8620	0x2067 ;_initBlock_0+1568
0x8622	0x6973 ;_initBlock_0+1570
0x8624	0x657A ;_initBlock_0+1572
0x8626	0x223D ;_initBlock_0+1574
0x8628	0x3034 ;_initBlock_0+1576
0x862A	0x3E22 ;_initBlock_0+1578
0x862C	0x6E3C ;_initBlock_0+1580
0x862E	0x6D61 ;_initBlock_0+1582
0x8630	0x3E65 ;_initBlock_0+1584
0x8632	0x7355 ;_initBlock_0+1586
0x8634	0x7265 ;_initBlock_0+1588
0x8636	0x4420 ;_initBlock_0+1590
0x8638	0x7365 ;_initBlock_0+1592
0x863A	0x7263 ;_initBlock_0+1594
0x863C	0x7069 ;_initBlock_0+1596
0x863E	0x6974 ;_initBlock_0+1598
0x8640	0x6E6F ;_initBlock_0+1600
0x8642	0x2F3C ;_initBlock_0+1602
0x8644	0x616E ;_initBlock_0+1604
0x8646	0x656D ;_initBlock_0+1606
0x8648	0x3C3E ;_initBlock_0+1608
0x864A	0x732F ;_initBlock_0+1610
0x864C	0x7274 ;_initBlock_0+1612
0x864E	0x6E69 ;_initBlock_0+1614
0x8650	0x3E67 ;_initBlock_0+1616
0x8652	0x2F3C ;_initBlock_0+1618
0x8654	0x7267 ;_initBlock_0+1620
0x8656	0x756F ;_initBlock_0+1622
0x8658	0x3E70 ;_initBlock_0+1624
0x865A	0x2F3C ;_initBlock_0+1626
0x865C	0x6573 ;_initBlock_0+1628
0x865E	0x6D67 ;_initBlock_0+1630
0x8660	0x6E65 ;_initBlock_0+1632
0x8662	0x3E74 ;_initBlock_0+1634
0x8664	0x2F3C ;_initBlock_0+1636
0x8666	0x6463 ;_initBlock_0+1638
0x8668	0x3E69 ;_initBlock_0+1640
0x866A	0x3C00 ;_initBlock_0+1642 : CDI_ARRAY_VNODE at 0x866B
0x866C	0x783F ;_initBlock_0+1644
0x866E	0x6C6D ;_initBlock_0+1646
0x8670	0x7620 ;_initBlock_0+1648
0x8672	0x7265 ;_initBlock_0+1650
0x8674	0x6973 ;_initBlock_0+1652
0x8676	0x6E6F ;_initBlock_0+1654
0x8678	0x223D ;_initBlock_0+1656
0x867A	0x2E31 ;_initBlock_0+1658
0x867C	0x2230 ;_initBlock_0+1660
0x867E	0x6520 ;_initBlock_0+1662
0x8680	0x636E ;_initBlock_0+1664
0x8682	0x646F ;_initBlock_0+1666
0x8684	0x6E69 ;_initBlock_0+1668
0x8686	0x3D67 ;_initBlock_0+1670
0x8688	0x7522 ;_initBlock_0+1672
0x868A	0x6674 ;_initBlock_0+1674
0x868C	0x382D ;_initBlock_0+1676
0x868E	0x3F22 ;_initBlock_0+1678
0x8690	0x3C3E ;_initBlock_0+1680
0x8692	0x783F ;_initBlock_0+1682
0x8694	0x6C6D ;_initBlock_0+1684
0x8696	0x732D ;_initBlock_0+1686
0x8698	0x7974 ;_initBlock_0+1688
0x869A	0x656C ;_initBlock_0+1690
0x869C	0x6873 ;_initBlock_0+1692
0x869E	0x6565 ;_initBlock_0+1694
0x86A0	0x2074 ;_initBlock_0+1696
0x86A2	0x7974 ;_initBlock_0+1698
0x86A4	0x6570 ;_initBlock_0+1700
0x86A6	0x273D ;_initBlock_0+1702
0x86A8	0x6574 ;_initBlock_0+1704
0x86AA	0x7478 ;_initBlock_0+1706
0x86AC	0x782F ;_initBlock_0+1708
0x86AE	0x6C73 ;_initBlock_0+1710
0x86B0	0x2027 ;_initBlock_0+1712
0x86B2	0x7268 ;_initBlock_0+1714
0x86B4	0x6665 ;_initBlock_0+1716
0x86B6	0x273D ;_initBlock_0+1718
0x86B8	0x7468 ;_initBlock_0+1720
0x86BA	0x7074 ;_initBlock_0+1722
0x86BC	0x2F3A ;_initBlock_0+1724
0x86BE	0x6F2F ;_initBlock_0+1726
0x86C0	0x6570 ;_initBlock_0+1728
0x86C2	0x6C6E ;_initBlock_0+1730
0x86C4	0x6263 ;_initBlock_0+1732
0x86C6	0x6F2E ;_initBlock_0+1734
0x86C8	0x6772 ;_initBlock_0+1736
0x86CA	0x742F ;_initBlock_0+1738
0x86CC	0x7572 ;_initBlock_0+1740
0x86CE	0x6B6E ;_initBlock_0+1742
0x86D0	0x702F ;_initBlock_0+1744
0x86D2	0x6F72 ;_initBlock_0+1746
0x86D4	0x6F74 ;_initBlock_0+1748
0x86D6	0x7974 ;_initBlock_0+1750
0x86D8	0x6570 ;_initBlock_0+1752
0x86DA	0x2F73 ;_initBlock_0+1754
0x86DC	0x6D78 ;_initBlock_0+1756
0x86DE	0x2F6C ;_initBlock_0+1758
0x86E0	0x7378 ;_initBlock_0+1760
0x86E2	0x746C ;_initBlock_0+1762
0x86E4	0x632F ;_initBlock_0+1764
0x86E6	0x6964 ;_initBlock_0+1766
0x86E8	0x782E ;_initBlock_0+1768
0x86EA	0x6C73 ;_initBlock_0+1770
0x86EC	0x3F27 ;_initBlock_0+1772
0x86EE	0x3C3E ;_initBlock_0+1774
0x86F0	0x6463 ;_initBlock_0+1776
0x86F2	0x2069 ;_initBlock_0+1778
0x86F4	0x6D78 ;_initBlock_0+1780
0x86F6	0x6E6C ;_initBlock_0+1782
0x86F8	0x3A73 ;_initBlock_0+1784
0x86FA	0x7378 ;_initBlock_0+1786
0x86FC	0x3D69 ;_initBlock_0+1788
0x86FE	0x6822 ;_initBlock_0+1790
0x8700	0x7474 ;_initBlock_0+1792
0x8702	0x3A70 ;_initBlock_0+1794
0x8704	0x2F2F ;_initBlock_0+1796
0x8706	0x7777 ;_initBlock_0+1798
0x8708	0x2E77 ;_initBlock_0+1800
0x870A	0x3377 ;_initBlock_0+1802
0x870C	0x6F2E ;_initBlock_0+1804
0x870E	0x6772 ;_initBlock_0+1806
0x8710	0x322F ;_initBlock_0+1808
0x8712	0x3030 ;_initBlock_0+1810
0x8714	0x2F31 ;_initBlock_0+1812
0x8716	0x4D58 ;_initBlock_0+1814
0x8718	0x534C ;_initBlock_0+1816
0x871A	0x6863 ;_initBlock_0+1818
0x871C	0x6D65 ;_initBlock_0+1820
0x871E	0x2D61 ;_initBlock_0+1822
0x8720	0x6E69 ;_initBlock_0+1824
0x8722	0x7473 ;_initBlock_0+1826
0x8724	0x6E61 ;_initBlock_0+1828
0x8726	0x6563 ;_initBlock_0+1830
0x8728	0x2022 ;_initBlock_0+1832
0x872A	0x7378 ;_initBlock_0+1834
0x872C	0x3A69 ;_initBlock_0+1836
0x872E	0x6F6E ;_initBlock_0+1838
0x8730	0x614E ;_initBlock_0+1840
0x8732	0x656D ;_initBlock_0+1842
0x8734	0x7073 ;_initBlock_0+1844
0x8736	0x6361 ;_initBlock_0+1846
0x8738	0x5365 ;_initBlock_0+1848
0x873A	0x6863 ;_initBlock_0+1850
0x873C	0x6D65 ;_initBlock_0+1852
0x873E	0x4C61 ;_initBlock_0+1854
0x8740	0x636F ;_initBlock_0+1856
0x8742	0x7461 ;_initBlock_0+1858
0x8744	0x6F69 ;_initBlock_0+1860
0x8746	0x3D6E ;_initBlock_0+1862
0x8748	0x6822 ;_initBlock_0+1864
0x874A	0x7474 ;_initBlock_0+1866
0x874C	0x3A70 ;_initBlock_0+1868
0x874E	0x2F2F ;_initBlock_0+1870
0x8750	0x706F ;_initBlock_0+1872
0x8752	0x6E65 ;_initBlock_0+1874
0x8754	0x636C ;_initBlock_0+1876
0x8756	0x2E62 ;_initBlock_0+1878
0x8758	0x726F ;_initBlock_0+1880
0x875A	0x2F67 ;_initBlock_0+1882
0x875C	0x7274 ;_initBlock_0+1884
0x875E	0x6E75 ;_initBlock_0+1886
0x8760	0x2F6B ;_initBlock_0+1888
0x8762	0x7270 ;_initBlock_0+1890
0x8764	0x746F ;_initBlock_0+1892
0x8766	0x746F ;_initBlock_0+1894
0x8768	0x7079 ;_initBlock_0+1896
0x876A	0x7365 ;_initBlock_0+1898
0x876C	0x782F ;_initBlock_0+1900
0x876E	0x6C6D ;_initBlock_0+1902
0x8770	0x732F ;_initBlock_0+1904
0x8772	0x6863 ;_initBlock_0+1906
0x8774	0x6D65 ;_initBlock_0+1908
0x8776	0x2F61 ;_initBlock_0+1910
0x8778	0x6463 ;_initBlock_0+1912
0x877A	0x2E69 ;_initBlock_0+1914
0x877C	0x7378 ;_initBlock_0+1916
0x877E	0x2264 ;_initBlock_0+1918
0x8780	0x3C3E ;_initBlock_0+1920
0x8782	0x6469 ;_initBlock_0+1922
0x8784	0x6E65 ;_initBlock_0+1924
0x8786	0x6974 ;_initBlock_0+1926
0x8788	0x6966 ;_initBlock_0+1928
0x878A	0x6163 ;_initBlock_0+1930
0x878C	0x6974 ;_initBlock_0+1932
0x878E	0x6E6F ;_initBlock_0+1934
0x8790	0x3C3E ;_initBlock_0+1936
0x8792	0x616D ;_initBlock_0+1938
0x8794	0x756E ;_initBlock_0+1940
0x8796	0x6166 ;_initBlock_0+1942
0x8798	0x7463 ;_initBlock_0+1944
0x879A	0x7275 ;_initBlock_0+1946
0x879C	0x7265 ;_initBlock_0+1948
0x879E	0x4D3E ;_initBlock_0+1950
0x87A0	0x7375 ;_initBlock_0+1952
0x87A2	0x6174 ;_initBlock_0+1954
0x87A4	0x676E ;_initBlock_0+1956
0x87A6	0x6570 ;_initBlock_0+1958
0x87A8	0x6B61 ;_initBlock_0+1960
0x87AA	0x2F3C ;_initBlock_0+1962
0x87AC	0x616D ;_initBlock_0+1964
0x87AE	0x756E ;_initBlock_0+1966
0x87B0	0x6166 ;_initBlock_0+1968
0x87B2	0x7463 ;_initBlock_0+1970
0x87B4	0x7275 ;_initBlock_0+1972
0x87B6	0x7265 ;_initBlock_0+1974
0x87B8	0x3C3E ;_initBlock_0+1976
0x87BA	0x6F6D ;_initBlock_0+1978
0x87BC	0x6564 ;_initBlock_0+1980
0x87BE	0x3E6C ;_initBlock_0+1982
0x87C0	0x4E50 ;_initBlock_0+1984
0x87C2	0x3031 ;_initBlock_0+1986
0x87C4	0x3C30 ;_initBlock_0+1988
0x87C6	0x6D2F ;_initBlock_0+1990
0x87C8	0x646F ;_initBlock_0+1992
0x87CA	0x6C65 ;_initBlock_0+1994
0x87CC	0x3C3E ;_initBlock_0+1996
0x87CE	0x6168 ;_initBlock_0+1998
0x87D0	0x6472 ;_initBlock_0+2000
0x87D2	0x6177 ;_initBlock_0+2002
0x87D4	0x6572 ;_initBlock_0+2004
0x87D6	0x6556 ;_initBlock_0+2006
0x87D8	0x7372 ;_initBlock_0+2008
0x87DA	0x6F69 ;_initBlock_0+2010
0x87DC	0x3E6E ;_initBlock_0+2012
0x87DE	0x2E31 ;_initBlock_0+2014
0x87E0	0x3C30 ;_initBlock_0+2016
0x87E2	0x682F ;_initBlock_0+2018
0x87E4	0x7261 ;_initBlock_0+2020
0x87E6	0x7764 ;_initBlock_0+2022
0x87E8	0x7261 ;_initBlock_0+2024
0x87EA	0x5665 ;_initBlock_0+2026
0x87EC	0x7265 ;_initBlock_0+2028
0x87EE	0x6973 ;_initBlock_0+2030
0x87F0	0x6E6F ;_initBlock_0+2032
0x87F2	0x3C3E ;_initBlock_0+2034
0x87F4	0x6F73 ;_initBlock_0+2036
0x87F6	0x7466 ;_initBlock_0+2038
0x87F8	0x6177 ;_initBlock_0+2040
0x87FA	0x6572 ;_initBlock_0+2042
0x87FC	0x6556 ;_initBlock_0+2044
0x87FE	0x7372 ;_initBlock_0+2046
0x8800	0x6F69 ;_initBlock_0+2048
0x8802	0x3E6E ;_initBlock_0+2050
0x8804	0x2E30 ;_initBlock_0+2052
0x8806	0x3C32 ;_initBlock_0+2054
0x8808	0x732F ;_initBlock_0+2056
0x880A	0x666F ;_initBlock_0+2058
0x880C	0x7774 ;_initBlock_0+2060
0x880E	0x7261 ;_initBlock_0+2062
0x8810	0x5665 ;_initBlock_0+2064
0x8812	0x7265 ;_initBlock_0+2066
0x8814	0x6973 ;_initBlock_0+2068
0x8816	0x6E6F ;_initBlock_0+2070
0x8818	0x3C3E ;_initBlock_0+2072
0x881A	0x616D ;_initBlock_0+2074
0x881C	0x3E70 ;_initBlock_0+2076
0x881E	0x723C ;_initBlock_0+2078
0x8820	0x6C65 ;_initBlock_0+2080
0x8822	0x7461 ;_initBlock_0+2082
0x8824	0x6F69 ;_initBlock_0+2084
0x8826	0x3E6E ;_initBlock_0+2086
0x8828	0x703C ;_initBlock_0+2088
0x882A	0x6F72 ;_initBlock_0+2090
0x882C	0x6570 ;_initBlock_0+2092
0x882E	0x7472 ;_initBlock_0+2094
0x8830	0x3E79 ;_initBlock_0+2096
0x8832	0x6544 ;_initBlock_0+2098
0x8834	0x6373 ;_initBlock_0+2100
0x8836	0x6972 ;_initBlock_0+2102
0x8838	0x7470 ;_initBlock_0+2104
0x883A	0x6F69 ;_initBlock_0+2106
0x883C	0x3C6E ;_initBlock_0+2108
0x883E	0x702F ;_initBlock_0+2110
0x8840	0x6F72 ;_initBlock_0+2112
0x8842	0x6570 ;_initBlock_0+2114
0x8844	0x7472 ;_initBlock_0+2116
0x8846	0x3E79 ;_initBlock_0+2118
0x8848	0x763C ;_initBlock_0+2120
0x884A	0x6C61 ;_initBlock_0+2122
0x884C	0x6575 ;_initBlock_0+2124
0x884E	0x4D3E ;_initBlock_0+2126
0x8850	0x7375 ;_initBlock_0+2128
0x8852	0x6174 ;_initBlock_0+2130
0x8854	0x676E ;_initBlock_0+2132
0x8856	0x6570 ;_initBlock_0+2134
0x8858	0x6B61 ;_initBlock_0+2136
0x885A	0x5420 ;_initBlock_0+2138
0x885C	0x6172 ;_initBlock_0+2140
0x885E	0x6E69 ;_initBlock_0+2142
0x8860	0x5020 ;_initBlock_0+2144
0x8862	0x6F72 ;_initBlock_0+2146
0x8864	0x7978 ;_initBlock_0+2148
0x8866	0x4E20 ;_initBlock_0+2150
0x8868	0x646F ;_initBlock_0+2152
0x886A	0x3C65 ;_initBlock_0+2154
0x886C	0x762F ;_initBlock_0+2156
0x886E	0x6C61 ;_initBlock_0+2158
0x8870	0x6575 ;_initBlock_0+2160
0x8872	0x3C3E ;_initBlock_0+2162
0x8874	0x722F ;_initBlock_0+2164
0x8876	0x6C65 ;_initBlock_0+2166
0x8878	0x7461 ;_initBlock_0+2168
0x887A	0x6F69 ;_initBlock_0+2170
0x887C	0x3E6E ;_initBlock_0+2172
0x887E	0x723C ;_initBlock_0+2174
0x8880	0x6C65 ;_initBlock_0+2176
0x8882	0x7461 ;_initBlock_0+2178
0x8884	0x6F69 ;_initBlock_0+2180
0x8886	0x3E6E ;_initBlock_0+2182
0x8888	0x703C ;_initBlock_0+2184
0x888A	0x6F72 ;_initBlock_0+2186
0x888C	0x6570 ;_initBlock_0+2188
0x888E	0x7472 ;_initBlock_0+2190
0x8890	0x3E79 ;_initBlock_0+2192
0x8892	0x7453 ;_initBlock_0+2194
0x8894	0x7461 ;_initBlock_0+2196
0x8896	0x7375 ;_initBlock_0+2198
0x8898	0x2F3C ;_initBlock_0+2200
0x889A	0x7270 ;_initBlock_0+2202
0x889C	0x706F ;_initBlock_0+2204
0x889E	0x7265 ;_initBlock_0+2206
0x88A0	0x7974 ;_initBlock_0+2208
0x88A2	0x3C3E ;_initBlock_0+2210
0x88A4	0x6176 ;_initBlock_0+2212
0x88A6	0x756C ;_initBlock_0+2214
0x88A8	0x3E65 ;_initBlock_0+2216
0x88AA	0x7250 ;_initBlock_0+2218
0x88AC	0x746F ;_initBlock_0+2220
0x88AE	0x746F ;_initBlock_0+2222
0x88B0	0x7079 ;_initBlock_0+2224
0x88B2	0x3C65 ;_initBlock_0+2226
0x88B4	0x762F ;_initBlock_0+2228
0x88B6	0x6C61 ;_initBlock_0+2230
0x88B8	0x6575 ;_initBlock_0+2232
0x88BA	0x3C3E ;_initBlock_0+2234
0x88BC	0x722F ;_initBlock_0+2236
0x88BE	0x6C65 ;_initBlock_0+2238
0x88C0	0x7461 ;_initBlock_0+2240
0x88C2	0x6F69 ;_initBlock_0+2242
0x88C4	0x3E6E ;_initBlock_0+2244
0x88C6	0x2F3C ;_initBlock_0+2246
0x88C8	0x616D ;_initBlock_0+2248
0x88CA	0x3E70 ;_initBlock_0+2250
0x88CC	0x2F3C ;_initBlock_0+2252
0x88CE	0x6469 ;_initBlock_0+2254
0x88D0	0x6E65 ;_initBlock_0+2256
0x88D2	0x6974 ;_initBlock_0+2258
0x88D4	0x6966 ;_initBlock_0+2260
0x88D6	0x6163 ;_initBlock_0+2262
0x88D8	0x6974 ;_initBlock_0+2264
0x88DA	0x6E6F ;_initBlock_0+2266
0x88DC	0x3C3E ;_initBlock_0+2268
0x88DE	0x6361 ;_initBlock_0+2270
0x88E0	0x6964 ;_initBlock_0+2272
0x88E2	0x6620 ;_initBlock_0+2274
0x88E4	0x7869 ;_initBlock_0+2276
0x88E6	0x6465 ;_initBlock_0+2278
0x88E8	0x223D ;_initBlock_0+2280
0x88EA	0x2231 ;_initBlock_0+2282
0x88EC	0x7620 ;_initBlock_0+2284
0x88EE	0x7261 ;_initBlock_0+2286
0x88F0	0x223D ;_initBlock_0+2288
0x88F2	0x2231 ;_initBlock_0+2290
0x88F4	0x2F20 ;_initBlock_0+2292
0x88F6	0x3C3E ;_initBlock_0+2294
0x88F8	0x6573 ;_initBlock_0+2296
0x88FA	0x6D67 ;_initBlock_0+2298
0x88FC	0x6E65 ;_initBlock_0+2300
0x88FE	0x2074 ;_initBlock_0+2302
0x8900	0x726F ;_initBlock_0+2304
0x8902	0x6769 ;_initBlock_0+2306
0x8904	0x6E69 ;_initBlock_0+2308
0x8906	0x223D ;_initBlock_0+2310
0x8908	0x2230 ;_initBlock_0+2312
0x890A	0x7320 ;_initBlock_0+2314
0x890C	0x6170 ;_initBlock_0+2316
0x890E	0x6563 ;_initBlock_0+2318
0x8910	0x223D ;_initBlock_0+2320
0x8912	0x3532 ;_initBlock_0+2322
0x8914	0x2233 ;_initBlock_0+2324
0x8916	0x3C3E ;_initBlock_0+2326
0x8918	0x7267 ;_initBlock_0+2328
0x891A	0x756F ;_initBlock_0+2330
0x891C	0x2070 ;_initBlock_0+2332
0x891E	0x666F ;_initBlock_0+2334
0x8920	0x7366 ;_initBlock_0+2336
0x8922	0x7465 ;_initBlock_0+2338
0x8924	0x223D ;_initBlock_0+2340
0x8926	0x2230 ;_initBlock_0+2342
0x8928	0x3C3E ;_initBlock_0+2344
0x892A	0x616E ;_initBlock_0+2346
0x892C	0x656D ;_initBlock_0+2348
0x892E	0x553E ;_initBlock_0+2350
0x8930	0x6573 ;_initBlock_0+2352
0x8932	0x2072 ;_initBlock_0+2354
0x8934	0x6144 ;_initBlock_0+2356
0x8936	0x6174 ;_initBlock_0+2358
0x8938	0x2F3C ;_initBlock_0+2360
0x893A	0x616E ;_initBlock_0+2362
0x893C	0x656D ;_initBlock_0+2364
0x893E	0x3C3E ;_initBlock_0+2366
0x8940	0x6564 ;_initBlock_0+2368
0x8942	0x6373 ;_initBlock_0+2370
0x8944	0x6972 ;_initBlock_0+2372
0x8946	0x7470 ;_initBlock_0+2374
0x8948	0x6F69 ;_initBlock_0+2376
0x894A	0x3E6E ;_initBlock_0+2378
0x894C	0x6441 ;_initBlock_0+2380
0x894E	0x2064 ;_initBlock_0+2382
0x8950	0x6F79 ;_initBlock_0+2384
0x8952	0x7275 ;_initBlock_0+2386
0x8954	0x6F20 ;_initBlock_0+2388
0x8956	0x6E77 ;_initBlock_0+2390
0x8958	0x7520 ;_initBlock_0+2392
0x895A	0x696E ;_initBlock_0+2394
0x895C	0x7571 ;_initBlock_0+2396
0x895E	0x2065 ;_initBlock_0+2398
0x8960	0x6F6E ;_initBlock_0+2400
0x8962	0x6564 ;_initBlock_0+2402
0x8964	0x6920 ;_initBlock_0+2404
0x8966	0x666E ;_initBlock_0+2406
0x8968	0x206F ;_initBlock_0+2408
0x896A	0x6568 ;_initBlock_0+2410
0x896C	0x6572 ;_initBlock_0+2412
0x896E	0x2F3C ;_initBlock_0+2414
0x8970	0x6564 ;_initBlock_0+2416
0x8972	0x6373 ;_initBlock_0+2418
0x8974	0x6972 ;_initBlock_0+2420
0x8976	0x7470 ;_initBlock_0+2422
0x8978	0x6F69 ;_initBlock_0+2424
0x897A	0x3E6E ;_initBlock_0+2426
0x897C	0x733C ;_initBlock_0+2428
0x897E	0x7274 ;_initBlock_0+2430
0x8980	0x6E69 ;_initBlock_0+2432
0x8982	0x2067 ;_initBlock_0+2434
0x8984	0x6973 ;_initBlock_0+2436
0x8986	0x657A ;_initBlock_0+2438
0x8988	0x223D ;_initBlock_0+2440
0x898A	0x3032 ;_initBlock_0+2442
0x898C	0x3E22 ;_initBlock_0+2444
0x898E	0x6E3C ;_initBlock_0+2446
0x8990	0x6D61 ;_initBlock_0+2448
0x8992	0x3E65 ;_initBlock_0+2450
0x8994	0x7355 ;_initBlock_0+2452
0x8996	0x7265 ;_initBlock_0+2454
0x8998	0x4E20 ;_initBlock_0+2456
0x899A	0x6D61 ;_initBlock_0+2458
0x899C	0x3C65 ;_initBlock_0+2460
0x899E	0x6E2F ;_initBlock_0+2462
0x89A0	0x6D61 ;_initBlock_0+2464
0x89A2	0x3E65 ;_initBlock_0+2466
0x89A4	0x2F3C ;_initBlock_0+2468
0x89A6	0x7473 ;_initBlock_0+2470
0x89A8	0x6972 ;_initBlock_0+2472
0x89AA	0x676E ;_initBlock_0+2474
0x89AC	0x3C3E ;_initBlock_0+2476
0x89AE	0x7473 ;_initBlock_0+2478
0x89B0	0x6972 ;_initBlock_0+2480
0x89B2	0x676E ;_initBlock_0+2482
0x89B4	0x7320 ;_initBlock_0+2484
0x89B6	0x7A69 ;_initBlock_0+2486
0x89B8	0x3D65 ;_initBlock_0+2488
0x89BA	0x3422 ;_initBlock_0+2490
0x89BC	0x2230 ;_initBlock_0+2492
0x89BE	0x3C3E ;_initBlock_0+2494
0x89C0	0x616E ;_initBlock_0+2496
0x89C2	0x656D ;_initBlock_0+2498
0x89C4	0x553E ;_initBlock_0+2500
0x89C6	0x6573 ;_initBlock_0+2502
0x89C8	0x2072 ;_initBlock_0+2504
0x89CA	0x6544 ;_initBlock_0+2506
0x89CC	0x6373 ;_initBlock_0+2508
0x89CE	0x6972 ;_initBlock_0+2510
0x89D0	0x7470 ;_initBlock_0+2512
0x89D2	0x6F69 ;_initBlock_0+2514
0x89D4	0x606E ;_initBlock_0+2516
0x89D6	0x2F3C ;_initBlock_0+2518
0x89D8	0x616E ;_initBlock_0+2520
0x89DA	0x656D ;_initBlock_0+2522
0x89DC	0x3C3E ;_initBlock_0+2524
0x89DE	0x732F ;_initBlock_0+2526
0x89E0	0x7274 ;_initBlock_0+2528
0x89E2	0x6E69 ;_initBlock_0+2530
0x89E4	0x3E67 ;_initBlock_0+2532
0x89E6	0x2F3C ;_initBlock_0+2534
0x89E8	0x7267 ;_initBlock_0+2536
0x89EA	0x756F ;_initBlock_0+2538
0x89EC	0x3E70 ;_initBlock_0+2540
0x89EE	0x2F3C ;_initBlock_0+2542
0x89F0	0x6573 ;_initBlock_0+2544
0x89F2	0x6D67 ;_initBlock_0+2546
0x89F4	0x6E65 ;_initBlock_0+2548
0x89F6	0x3E74 ;_initBlock_0+2550
0x89F8	0x733C ;_initBlock_0+2552
0x89FA	0x6765 ;_initBlock_0+2554
0x89FC	0x656D ;_initBlock_0+2556
0x89FE	0x746E ;_initBlock_0+2558
0x8A00	0x6F20 ;_initBlock_0+2560
0x8A02	0x6972 ;_initBlock_0+2562
0x8A04	0x6967 ;_initBlock_0+2564
0x8A06	0x3D6E ;_initBlock_0+2566
0x8A08	0x3022 ;_initBlock_0+2568
0x8A0A	0x2022 ;_initBlock_0+2570
0x8A0C	0x7073 ;_initBlock_0+2572
0x8A0E	0x6361 ;_initBlock_0+2574
0x8A10	0x3D65 ;_initBlock_0+2576
0x8A12	0x3222 ;_initBlock_0+2578
0x8A14	0x3235 ;_initBlock_0+2580
0x8A16	0x3E22 ;_initBlock_0+2582
0x8A18	0x673C ;_initBlock_0+2584
0x8A1A	0x6F72 ;_initBlock_0+2586
0x8A1C	0x7075 ;_initBlock_0+2588
0x8A1E	0x3C3E ;_initBlock_0+2590
0x8A20	0x616E ;_initBlock_0+2592
0x8A22	0x656D ;_initBlock_0+2594
0x8A24	0x4D3E ;_initBlock_0+2596
0x8A26	0x6E61 ;_initBlock_0+2598
0x8A28	0x6675 ;_initBlock_0+2600
0x8A2A	0x6361 ;_initBlock_0+2602
0x8A2C	0x7574 ;_initBlock_0+2604
0x8A2E	0x6572 ;_initBlock_0+2606
0x8A30	0x2072 ;_initBlock_0+2608
0x8A32	0x6E49 ;_initBlock_0+2610
0x8A34	0x6F66 ;_initBlock_0+2612
0x8A36	0x6D72 ;_initBlock_0+2614
0x8A38	0x7461 ;_initBlock_0+2616
0x8A3A	0x6F69 ;_initBlock_0+2618
0x8A3C	0x3C6E ;_initBlock_0+2620
0x8A3E	0x6E2F ;_initBlock_0+2622
0x8A40	0x6D61 ;_initBlock_0+2624
0x8A42	0x3E65 ;_initBlock_0+2626
0x8A44	0x643C ;_initBlock_0+2628
0x8A46	0x7365 ;_initBlock_0+2630
0x8A48	0x7263 ;_initBlock_0+2632
0x8A4A	0x7069 ;_initBlock_0+2634
0x8A4C	0x6974 ;_initBlock_0+2636
0x8A4E	0x6E6F ;_initBlock_0+2638
0x8A50	0x4D3E ;_initBlock_0+2640
0x8A52	0x6E61 ;_initBlock_0+2642
0x8A54	0x6675 ;_initBlock_0+2644
0x8A56	0x6361 ;_initBlock_0+2646
0x8A58	0x7574 ;_initBlock_0+2648
0x8A5A	0x6572 ;_initBlock_0+2650
0x8A5C	0x2D72 ;_initBlock_0+2652
0x8A5E	0x7270 ;_initBlock_0+2654
0x8A60	0x766F ;_initBlock_0+2656
0x8A62	0x6469 ;_initBlock_0+2658
0x8A64	0x6465 ;_initBlock_0+2660
0x8A66	0x6620 ;_initBlock_0+2662
0x8A68	0x7869 ;_initBlock_0+2664
0x8A6A	0x6465 ;_initBlock_0+2666
0x8A6C	0x6E20 ;_initBlock_0+2668
0x8A6E	0x646F ;_initBlock_0+2670
0x8A70	0x2065 ;_initBlock_0+2672
0x8A72	0x6564 ;_initBlock_0+2674
0x8A74	0x6373 ;_initBlock_0+2676
0x8A76	0x6972 ;_initBlock_0+2678
0x8A78	0x7470 ;_initBlock_0+2680
0x8A7A	0x6F69 ;_initBlock_0+2682
0x8A7C	0x3C6E ;_initBlock_0+2684
0x8A7E	0x642F ;_initBlock_0+2686
0x8A80	0x7365 ;_initBlock_0+2688
0x8A82	0x7263 ;_initBlock_0+2690
0x8A84	0x7069 ;_initBlock_0+2692
0x8A86	0x6974 ;_initBlock_0+2694
0x8A88	0x6E6F ;_initBlock_0+2696
0x8A8A	0x3C3E ;_initBlock_0+2698
0x8A8C	0x6E69 ;_initBlock_0+2700
0x8A8E	0x2074 ;_initBlock_0+2702
0x8A90	0x6973 ;_initBlock_0+2704
0x8A92	0x657A ;_initBlock_0+2706
0x8A94	0x223D ;_initBlock_0+2708
0x8A96	0x2231 ;_initBlock_0+2710
0x8A98	0x3C3E ;_initBlock_0+2712
0x8A9A	0x616E ;_initBlock_0+2714
0x8A9C	0x656D ;_initBlock_0+2716
0x8A9E	0x563E ;_initBlock_0+2718
0x8AA0	0x7265 ;_initBlock_0+2720
0x8AA2	0x6973 ;_initBlock_0+2722
0x8AA4	0x6E6F ;_initBlock_0+2724
0x8AA6	0x2F3C ;_initBlock_0+2726
0x8AA8	0x616E ;_initBlock_0+2728
0x8AAA	0x656D ;_initBlock_0+2730
0x8AAC	0x3C3E ;_initBlock_0+2732
0x8AAE	0x692F ;_initBlock_0+2734
0x8AB0	0x746E ;_initBlock_0+2736
0x8AB2	0x3C3E ;_initBlock_0+2738
0x8AB4	0x7473 ;_initBlock_0+2740
0x8AB6	0x6972 ;_initBlock_0+2742
0x8AB8	0x676E ;_initBlock_0+2744
0x8ABA	0x7320 ;_initBlock_0+2746
0x8ABC	0x7A69 ;_initBlock_0+2748
0x8ABE	0x3D65 ;_initBlock_0+2750
0x8AC0	0x3122 ;_initBlock_0+2752
0x8AC2	0x2232 ;_initBlock_0+2754
0x8AC4	0x3C3E ;_initBlock_0+2756
0x8AC6	0x616E ;_initBlock_0+2758
0x8AC8	0x656D ;_initBlock_0+2760
0x8ACA	0x4D3E ;_initBlock_0+2762
0x8ACC	0x6E61 ;_initBlock_0+2764
0x8ACE	0x6675 ;_initBlock_0+2766
0x8AD0	0x6361 ;_initBlock_0+2768
0x8AD2	0x7574 ;_initBlock_0+2770
0x8AD4	0x6572 ;_initBlock_0+2772
0x8AD6	0x2072 ;_initBlock_0+2774
0x8AD8	0x614E ;_initBlock_0+2776
0x8ADA	0x656D ;_initBlock_0+2778
0x8ADC	0x2F3C ;_initBlock_0+2780
0x8ADE	0x616E ;_initBlock_0+2782
0x8AE0	0x656D ;_initBlock_0+2784
0x8AE2	0x3C3E ;_initBlock_0+2786
0x8AE4	0x732F ;_initBlock_0+2788
0x8AE6	0x7274 ;_initBlock_0+2790
0x8AE8	0x6E69 ;_initBlock_0+2792
0x8AEA	0x3E67 ;_initBlock_0+2794
0x8AEC	0x733C ;_initBlock_0+2796
0x8AEE	0x7274 ;_initBlock_0+2798
0x8AF0	0x6E69 ;_initBlock_0+2800
0x8AF2	0x2067 ;_initBlock_0+2802
0x8AF4	0x6973 ;_initBlock_0+2804
0x8AF6	0x657A ;_initBlock_0+2806
0x8AF8	0x223D ;_initBlock_0+2808
0x8AFA	0x2236 ;_initBlock_0+2810
0x8AFC	0x3C3E ;_initBlock_0+2812
0x8AFE	0x616E ;_initBlock_0+2814
0x8B00	0x656D ;_initBlock_0+2816
0x8B02	0x4D3E ;_initBlock_0+2818
0x8B04	0x6E61 ;_initBlock_0+2820
0x8B06	0x6675 ;_initBlock_0+2822
0x8B08	0x6361 ;_initBlock_0+2824
0x8B0A	0x7574 ;_initBlock_0+2826
0x8B0C	0x6572 ;_initBlock_0+2828
0x8B0E	0x2072 ;_initBlock_0+2830
0x8B10	0x6E49 ;_initBlock_0+2832
0x8B12	0x6F66 ;_initBlock_0+2834
0x8B14	0x2F3C ;_initBlock_0+2836
0x8B16	0x616E ;_initBlock_0+2838
0x8B18	0x656D ;_initBlock_0+2840
0x8B1A	0x3C3E ;_initBlock_0+2842
0x8B1C	0x732F ;_initBlock_0+2844
0x8B1E	0x7274 ;_initBlock_0+2846
0x8B20	0x6E69 ;_initBlock_0+2848
0x8B22	0x3E67 ;_initBlock_0+2850
0x8B24	0x733C ;_initBlock_0+2852
0x8B26	0x7274 ;_initBlock_0+2854
0x8B28	0x6E69 ;_initBlock_0+2856
0x8B2A	0x2067 ;_initBlock_0+2858
0x8B2C	0x6973 ;_initBlock_0+2860
0x8B2E	0x657A ;_initBlock_0+2862
0x8B30	0x223D ;_initBlock_0+2864
0x8B32	0x2234 ;_initBlock_0+2866
0x8B34	0x3C3E ;_initBlock_0+2868
0x8B36	0x616E ;_initBlock_0+2870
0x8B38	0x656D ;_initBlock_0+2872
0x8B3A	0x483E ;_initBlock_0+2874
0x8B3C	0x7261 ;_initBlock_0+2876
0x8B3E	0x7764 ;_initBlock_0+2878
0x8B40	0x7261 ;_initBlock_0+2880
0x8B42	0x2065 ;_initBlock_0+2882
0x8B44	0x6556 ;_initBlock_0+2884
0x8B46	0x7372 ;_initBlock_0+2886
0x8B48	0x6F69 ;_initBlock_0+2888
0x8B4A	0x3C6E ;_initBlock_0+2890
0x8B4C	0x6E2F ;_initBlock_0+2892
0x8B4E	0x6D61 ;_initBlock_0+2894
0x8B50	0x3E65 ;_initBlock_0+2896
0x8B52	0x2F3C ;_initBlock_0+2898
0x8B54	0x7473 ;_initBlock_0+2900
0x8B56	0x6972 ;_initBlock_0+2902
0x8B58	0x676E ;_initBlock_0+2904
0x8B5A	0x3C3E ;_initBlock_0+2906
0x8B5C	0x7473 ;_initBlock_0+2908
0x8B5E	0x6972 ;_initBlock_0+2910
0x8B60	0x676E ;_initBlock_0+2912
0x8B62	0x7320 ;_initBlock_0+2914
0x8B64	0x7A69 ;_initBlock_0+2916
0x8B66	0x3D65 ;_initBlock_0+2918
0x8B68	0x3422 ;_initBlock_0+2920
0x8B6A	0x3E22 ;_initBlock_0+2922
0x8B6C	0x6E3C ;_initBlock_0+2924
0x8B6E	0x6D61 ;_initBlock_0+2926
0x8B70	0x3E65 ;_initBlock_0+2928
0x8B72	0x6F53 ;_initBlock_0+2930
0x8B74	0x7466 ;_initBlock_0+2932
0x8B76	0x6177 ;_initBlock_0+2934
0x8B78	0x6572 ;_initBlock_0+2936
0x8B7A	0x5620 ;_initBlock_0+2938
0x8B7C	0x7265 ;_initBlock_0+2940
0x8B7E	0x6973 ;_initBlock_0+2942
0x8B80	0x6E6F ;_initBlock_0+2944
0x8B82	0x2F3C ;_initBlock_0+2946
0x8B84	0x616E ;_initBlock_0+2948
0x8B86	0x656D ;_initBlock_0+2950
0x8B88	0x3C3E ;_initBlock_0+2952
0x8B8A	0x732F ;_initBlock_0+2954
0x8B8C	0x7274 ;_initBlock_0+2956
0x8B8E	0x6E69 ;_initBlock_0+2958
0x8B90	0x3E67 ;_initBlock_0+2960
0x8B92	0x2F3C ;_initBlock_0+2962
0x8B94	0x7267 ;_initBlock_0+2964
0x8B96	0x756F ;_initBlock_0+2966
0x8B98	0x3E70 ;_initBlock_0+2968
0x8B9A	0x2F3C ;_initBlock_0+2970
0x8B9C	0x6573 ;_initBlock_0+2972
0x8B9E	0x6D67 ;_initBlock_0+2974
0x8BA0	0x6E65 ;_initBlock_0+2976
0x8BA2	0x3E74 ;_initBlock_0+2978
0x8BA4	0x733C ;_initBlock_0+2980
0x8BA6	0x6765 ;_initBlock_0+2982
0x8BA8	0x656D ;_initBlock_0+2984
0x8BAA	0x746E ;_initBlock_0+2986
0x8BAC	0x6F20 ;_initBlock_0+2988
0x8BAE	0x6972 ;_initBlock_0+2990
0x8BB0	0x6967 ;_initBlock_0+2992
0x8BB2	0x3D6E ;_initBlock_0+2994
0x8BB4	0x3022 ;_initBlock_0+2996
0x8BB6	0x2022 ;_initBlock_0+2998
0x8BB8	0x7073 ;_initBlock_0+3000
0x8BBA	0x6361 ;_initBlock_0+3002
0x8BBC	0x3D65 ;_initBlock_0+3004
0x8BBE	0x3222 ;_initBlock_0+3006
0x8BC0	0x3135 ;_initBlock_0+3008
0x8BC2	0x3E22 ;_initBlock_0+3010
0x8BC4	0x673C ;_initBlock_0+3012
0x8BC6	0x6F72 ;_initBlock_0+3014
0x8BC8	0x7075 ;_initBlock_0+3016
0x8BCA	0x6F20 ;_initBlock_0+3018
0x8BCC	0x6666 ;_initBlock_0+3020
0x8BCE	0x6573 ;_initBlock_0+3022
0x8BD0	0x3D74 ;_initBlock_0+3024
0x8BD2	0x3022 ;_initBlock_0+3026
0x8BD4	0x3E22 ;_initBlock_0+3028
0x8BD6	0x6E3C ;_initBlock_0+3030
0x8BD8	0x6D61 ;_initBlock_0+3032
0x8BDA	0x3E65 ;_initBlock_0+3034
0x8BDC	0x7355 ;_initBlock_0+3036
0x8BDE	0x7265 ;_initBlock_0+3038
0x8BE0	0x4420 ;_initBlock_0+3040
0x8BE2	0x7461 ;_initBlock_0+3042
0x8BE4	0x3C61 ;_initBlock_0+3044
0x8BE6	0x6E2F ;_initBlock_0+3046
0x8BE8	0x6D61 ;_initBlock_0+3048
0x8BEA	0x3E65 ;_initBlock_0+3050
0x8BEC	0x643C ;_initBlock_0+3052
0x8BEE	0x7365 ;_initBlock_0+3054
0x8BF0	0x7263 ;_initBlock_0+3056
0x8BF2	0x7069 ;_initBlock_0+3058
0x8BF4	0x6974 ;_initBlock_0+3060
0x8BF6	0x6E6F ;_initBlock_0+3062
0x8BF8	0x413E ;_initBlock_0+3064
0x8BFA	0x6464 ;_initBlock_0+3066
0x8BFC	0x7920 ;_initBlock_0+3068
0x8BFE	0x756F ;_initBlock_0+3070
0x8C00	0x2072 ;_initBlock_0+3072
0x8C02	0x776F ;_initBlock_0+3074
0x8C04	0x206E ;_initBlock_0+3076
0x8C06	0x6E75 ;_initBlock_0+3078
0x8C08	0x7169 ;_initBlock_0+3080
0x8C0A	0x6575 ;_initBlock_0+3082
0x8C0C	0x6E20 ;_initBlock_0+3084
0x8C0E	0x646F ;_initBlock_0+3086
0x8C10	0x2065 ;_initBlock_0+3088
0x8C12	0x6E69 ;_initBlock_0+3090
0x8C14	0x6F66 ;_initBlock_0+3092
0x8C16	0x6820 ;_initBlock_0+3094
0x8C18	0x7265 ;_initBlock_0+3096
0x8C1A	0x3C65 ;_initBlock_0+3098
0x8C1C	0x642F ;_initBlock_0+3100
0x8C1E	0x7365 ;_initBlock_0+3102
0x8C20	0x7263 ;_initBlock_0+3104
0x8C22	0x7069 ;_initBlock_0+3106
0x8C24	0x6974 ;_initBlock_0+3108
0x8C26	0x6E6F ;_initBlock_0+3110
0x8C28	0x3C3E ;_initBlock_0+3112
0x8C2A	0x6E69 ;_initBlock_0+3114
0x8C2C	0x2074 ;_initBlock_0+3116
0x8C2E	0x6973 ;_initBlock_0+3118
0x8C30	0x657A ;_initBlock_0+3120
0x8C32	0x223D ;_initBlock_0+3122
0x8C34	0x2231 ;_initBlock_0+3124
0x8C36	0x3C3E ;_initBlock_0+3126
0x8C38	0x616E ;_initBlock_0+3128
0x8C3A	0x656D ;_initBlock_0+3130
0x8C3C	0x563E ;_initBlock_0+3132
0x8C3E	0x7265 ;_initBlock_0+3134
0x8C40	0x6973 ;_initBlock_0+3136
0x8C42	0x6E6F ;_initBlock_0+3138
0x8C44	0x2F3C ;_initBlock_0+3140
0x8C46	0x616E ;_initBlock_0+3142
0x8C48	0x656D ;_initBlock_0+3144
0x8C4A	0x3C3E ;_initBlock_0+3146
0x8C4C	0x692F ;_initBlock_0+3148
0x8C4E	0x746E ;_initBlock_0+3150
0x8C50	0x3C3E ;_initBlock_0+3152
0x8C52	0x7473 ;_initBlock_0+3154
0x8C54	0x6972 ;_initBlock_0+3156
0x8C56	0x676E ;_initBlock_0+3158
0x8C58	0x7320 ;_initBlock_0+3160
0x8C5A	0x7A69 ;_initBlock_0+3162
0x8C5C	0x3D65 ;_initBlock_0+3164
0x8C5E	0x3222 ;_initBlock_0+3166
0x8C60	0x2230 ;_initBlock_0+3168
0x8C62	0x3C3E ;_initBlock_0+3170
0x8C64	0x616E ;_initBlock_0+3172
0x8C66	0x656D ;_initBlock_0+3174
0x8C68	0x553E ;_initBlock_0+3176
0x8C6A	0x6573 ;_initBlock_0+3178
0x8C6C	0x2072 ;_initBlock_0+3180
0x8C6E	0x614E ;_initBlock_0+3182
0x8C70	0x656D ;_initBlock_0+3184
0x8C72	0x2F3C ;_initBlock_0+3186
0x8C74	0x616E ;_initBlock_0+3188
0x8C76	0x656D ;_initBlock_0+3190
0x8C78	0x3C3E ;_initBlock_0+3192
0x8C7A	0x732F ;_initBlock_0+3194
0x8C7C	0x7274 ;_initBlock_0+3196
0x8C7E	0x6E69 ;_initBlock_0+3198
0x8C80	0x3E67 ;_initBlock_0+3200
0x8C82	0x733C ;_initBlock_0+3202
0x8C84	0x7274 ;_initBlock_0+3204
0x8C86	0x6E69 ;_initBlock_0+3206
0x8C88	0x2067 ;_initBlock_0+3208
0x8C8A	0x6973 ;_initBlock_0+3210
0x8C8C	0x657A ;_initBlock_0+3212
0x8C8E	0x223D ;_initBlock_0+3214
0x8C90	0x3034 ;_initBlock_0+3216
0x8C92	0x3E22 ;_initBlock_0+3218
0x8C94	0x6E3C ;_initBlock_0+3220
0x8C96	0x6D61 ;_initBlock_0+3222
0x8C98	0x3E65 ;_initBlock_0+3224
0x8C9A	0x7355 ;_initBlock_0+3226
0x8C9C	0x7265 ;_initBlock_0+3228
0x8C9E	0x4420 ;_initBlock_0+3230
0x8CA0	0x7365 ;_initBlock_0+3232
0x8CA2	0x7263 ;_initBlock_0+3234
0x8CA4	0x7069 ;_initBlock_0+3236
0x8CA6	0x6974 ;_initBlock_0+3238
0x8CA8	0x6E6F ;_initBlock_0+3240
0x8CAA	0x2F3C ;_initBlock_0+3242
0x8CAC	0x616E ;_initBlock_0+3244
0x8CAE	0x656D ;_initBlock_0+3246
0x8CB0	0x3C3E ;_initBlock_0+3248
0x8CB2	0x732F ;_initBlock_0+3250
0x8CB4	0x7274 ;_initBlock_0+3252
0x8CB6	0x6E69 ;_initBlock_0+3254
0x8CB8	0x3E67 ;_initBlock_0+3256
0x8CBA	0x2F3C ;_initBlock_0+3258
0x8CBC	0x7267 ;_initBlock_0+3260
0x8CBE	0x756F ;_initBlock_0+3262
0x8CC0	0x3E70 ;_initBlock_0+3264
0x8CC2	0x2F3C ;_initBlock_0+3266
0x8CC4	0x6573 ;_initBlock_0+3268
0x8CC6	0x6D67 ;_initBlock_0+3270
0x8CC8	0x6E65 ;_initBlock_0+3272
0x8CCA	0x3E74 ;_initBlock_0+3274
0x8CCC	0x2F3C ;_initBlock_0+3276
0x8CCE	0x6463 ;_initBlock_0+3278
0x8CD0	0x3E69 ;_initBlock_0+3280
0x8CD2	0x8000 ;_initBlock_0+3282 : PIV_VNODE_SUPPORTED_PROTOCOLS at 0x8CD3
0x8CD4	0x0000 ;_initBlock_0+3284
0x8CD6	0x0000 ;_initBlock_0+3286
0x8CD8	0x4000 ;_initBlock_0+3288
0x8CDA	0x0000 ;_initBlock_0+3290
0x8CDC	0x0000 ;_initBlock_0+3292
0x8CDE	0x0400 ;_initBlock_0+3294
0x8CE0	0x0000 ;_initBlock_0+3296
0x8CE2	0x0000 ;_initBlock_0+3298
0x8CE4	0x1000 ;_initBlock_0+3300
0x8CE6	0x0000 ;_initBlock_0+3302
0x8CE8	0x0000 ;_initBlock_0+3304
0x8CEA	0x0000 ;_initBlock_0+3306
0x8CEC	0x0008 ;_initBlock_0+3308
0x8CEE	0x0000 ;_initBlock_0+3310
0x8CF0	0x0000 ;_initBlock_0+3312
0x8CF2	0x0010 ;_initBlock_0+3314
0x8CF4	0x0000 ;_initBlock_0+3316
0x8CF6	0x0000 ;_initBlock_0+3318
0x8CF8	0x0040 ;_initBlock_0+3320
0x8CFA	0x0000 ;_initBlock_0+3322
0x8CFC	0x0000 ;_initBlock_0+3324
0x8CFE	0x0004 ;_initBlock_0+3326
0x8D00	0x0000 ;_initBlock_0+3328
0x8D02	0x0000 ;_initBlock_0+3330
0x8D04	0x0002 ;_initBlock_0+3332
0x8D06	0x0000 ;_initBlock_0+3334
0x8D08	0x8000 ;_initBlock_0+3336 : PIV_SUPPORTED_PROTOCOLS at 0x8D09
0x8D0A	0x0000 ;_initBlock_0+3338
0x8D0C	0x0000 ;_initBlock_0+3340
0x8D0E	0x4000 ;_initBlock_0+3342
0x8D10	0x0000 ;_initBlock_0+3344
0x8D12	0x0000 ;_initBlock_0+3346
0x8D14	0x0400 ;_initBlock_0+3348
0x8D16	0x0000 ;_initBlock_0+3350
0x8D18	0x0000 ;_initBlock_0+3352
0x8D1A	0x1000 ;_initBlock_0+3354
0x8D1C	0x0000 ;_initBlock_0+3356
0x8D1E	0x0000 ;_initBlock_0+3358
0x8D20	0x0000 ;_initBlock_0+3360
0x8D22	0x0008 ;_initBlock_0+3362
0x8D24	0x0000 ;_initBlock_0+3364
0x8D26	0x0000 ;_initBlock_0+3366
0x8D28	0x0010 ;_initBlock_0+3368
0x8D2A	0x0000 ;_initBlock_0+3370
0x8D2C	0x0000 ;_initBlock_0+3372
0x8D2E	0x0040 ;_initBlock_0+3374
0x8D30	0x0000 ;_initBlock_0+3376
0x8D32	0x0000 ;_initBlock_0+3378
0x8D34	0x0001 ;_initBlock_0+3380
0x8D36	0x0000 ;_initBlock_0+3382
0x8D38	0x4D00 ;_initBlock_0+3384 : ACDI_MFG_STRINGS at 0x8D39
0x8D3A	0x7375 ;_initBlock_0+3386
0x8D3C	0x6174 ;_initBlock_0+3388
0x8D3E	0x676E ;_initBlock_0+3390
0x8D40	0x6570 ;_initBlock_0+3392
0x8D42	0x6B61 ;_initBlock_0+3394
0x8D44	0x4300 ;_initBlock_0+3396
0x8D46	0x3153 ;_initBlock_0+3398
0x8D48	0x3030 ;_initBlock_0+3400
0x8D4A	0x3000 ;_initBlock_0+3402
0x8D4C	0x312E ;_initBlock_0+3404
0x8D4E	0x3000 ;_initBlock_0+3406
0x8D50	0x332E ;_initBlock_0+3408
0x8D52	0x4D00 ;_initBlock_0+3410 : ACDI_MFG_STRINGS_VNODE at 0x8D53
0x8D54	0x7375 ;_initBlock_0+3412
0x8D56	0x6174 ;_initBlock_0+3414
0x8D58	0x676E ;_initBlock_0+3416
0x8D5A	0x6570 ;_initBlock_0+3418
0x8D5C	0x6B61 ;_initBlock_0+3420
0x8D5E	0x5600 ;_initBlock_0+3422
0x8D60	0x314E ;_initBlock_0+3424
0x8D62	0x3030 ;_initBlock_0+3426
0x8D64	0x3000 ;_initBlock_0+3428
0x8D66	0x312E ;_initBlock_0+3430
0x8D68	0x3000 ;_initBlock_0+3432
0x8D6A	0x392E ;_initBlock_0+3434
0x8D6C	0x0100 ;_initBlock_0+3436 : SUPPORTED_VNODE_EVENTS_PRODUCED at 0x8D6D
0x8D6E	0x0001 ;_initBlock_0+3438
0x8D70	0x0000 ;_initBlock_0+3440
0x8D72	0x0300 ;_initBlock_0+3442
0x8D74	0x0103 ;_initBlock_0+3444
0x8D76	0x0001 ;_initBlock_0+3446
0x8D78	0x0000 ;_initBlock_0+3448
0x8D7A	0x0300 ;_initBlock_0+3450
0x8D7C	0x0104 ;_initBlock_0+3452
0x8D7E	0x0001 ;_initBlock_0+3454
0x8D80	0x0000 ;_initBlock_0+3456
0x8D82	0x0300 ;_initBlock_0+3458
0x8D84	0x0105 ;_initBlock_0+3460 : SUPPORTED_EVENTS_PRODUCED at 0x8D85
0x8D86	0x0001 ;_initBlock_0+3462
0x8D88	0x0000 ;_initBlock_0+3464
0x8D8A	0x0400 ;_initBlock_0+3466
0x8D8C	0x0101 ;_initBlock_0+3468
0x8D8E	0x0010 ;_initBlock_0+3470
0x8D90	0x0000 ;_initBlock_0+3472
0x8D92	0xFF00 ;_initBlock_0+3474
0x8D94	0x01FF ;_initBlock_0+3476 : EVENT_DUPLICATE_ID_DETECTED at 0x8D95
0x8D96	0x0010 ;_initBlock_0+3478
0x8D98	0x0000 ;_initBlock_0+3480
0x8D9A	0x0200 ;_initBlock_0+3482
0x8D9C	0x0101 ;_initBlock_0+3484 : SUPPORTED_EVENTS_CONSUMED at 0x8D9D
0x8D9E	0x0001 ;_initBlock_0+3486
0x8DA0	0x0000 ;_initBlock_0+3488
0x8DA2	0xFF00 ;_initBlock_0+3490
0x8DA4	0x01FF ;_initBlock_0+3492 : SUPPORTED_VNODE_EVENTS_CONSUMED at 0x8DA5
0x8DA6	0x0001 ;_initBlock_0+3494
0x8DA8	0x0000 ;_initBlock_0+3496
0x8DAA	0xFF00 ;_initBlock_0+3498
0x8DAC	0xFF ;_initBlock_0+3500
; end of _initBlock_0
;NMRAnetAppDefines.mpas,50 :: _MEMORY_CONFIG_OPTIONS [6]
0x8DAE	0x4E00 ;_MEMORY_CONFIG_OPTIONS+0
0x8DB0	0xFFF2 ;_MEMORY_CONFIG_OPTIONS+2
0x8DB2	0x00FB ;_MEMORY_CONFIG_OPTIONS+4
; end of _MEMORY_CONFIG_OPTIONS
;NMRAnetAppDefines.mpas,218 :: _ALL_MAP [4]
0x8DB4	0x0000 ;_ALL_MAP+0
0x8DB6	0x7FFF ;_ALL_MAP+2
; end of _ALL_MAP
;,0 :: _initBlock_3 [7]
; Containing: LF [3]
;             DATAGRAM_RESULT_REJECTED_BUFFER_FULL [2]
;             DATAGRAM_RESULT_REJECTED_SOURCE_DATAGRAMS_NOT_ACCEPTED [2]
0x8DB8	0x0A0D ;_initBlock_3+0 : LF at 0x8DB8
0x8DBA	0x2000 ;_initBlock_3+2 : DATAGRAM_RESULT_REJECTED_BUFFER_FULL at 0x8DBB
0x8DBC	0x1000 ;_initBlock_3+4 : DATAGRAM_RESULT_REJECTED_SOURCE_DATAGRAMS_NOT_ACCEPTED at 0x8DBD
0x8DBE	0x40 ;_initBlock_3+6
; end of _initBlock_3
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0200      [40]    _25AAxxxx_WriteAddress
0x0228      [54]    NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed
0x025E     [160]    _NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed
0x02FE      [14]    _25AAxxxx_SetBank_CS
0x030C      [18]    _25AAxxxx_LocalSPI_Write
0x031E      [14]    _25AAxxxx_LocalSPI_Read
0x032C      [26]    _NMRAnetUtilities_CreateAliasID
0x0346      [12]    _NMRAnetNode_SetStateFlag
0x0352      [22]    _UART1_Write
0x0368       [6]    _AppCallback_ConfigurationSize
0x036E      [36]    _AppCallback_NodeAllocate
0x0392     [144]    _NMRAnetNode_SortNodeList
0x0422      [18]    _GetProxyData
0x0434      [18]    _Lock_IOLOCK
0x0446      [38]    __25AAxxxx_Busy
0x046C      [56]    _NMRAnetNode_SetProducerEventFlag
0x04A4      [84]    __25AAxxxx_Read
0x04F8      [56]    _NMRAnetNode_SetConsumerEventFlag
0x0530     [100]    __25AAxxxx_Write
0x0594     [124]    NMRAnetDCC_NMRA_DCCClassifyAddress
0x0610     [108]    _NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID
0x067C      [82]    __Divide_32x32
0x06CE     [136]    _AppCallback_StateMachine
0x0756      [42]    NMRAnetDCC_NMRA_DCC_ResetTransmitter
0x0780      [18]    _NMRAnetUtilities_ZeroCANData
0x0792      [44]    _NMRAnetUtilities_NextBaseBuffer
0x07BE     [472]    __Lib_PPS_33EP64GP502__PPS_Mapping
0x0996      [76]    _NMRAnetUtilities_BaseBufferUnLink
0x09E2      [64]    _AppCallback_ConfigurationRead
0x0A22      [20]    _NMRAnetBufferPools_ReleaseBaseBuffer
0x0A36      [18]    __Multiply_32x32
0x0A48      [88]    __Modulus_32x32
0x0AA0       [8]    _Get_Fosc_kHz
0x0AA8      [12]    _Delay_10ms
0x0AB4      [34]    _NMRA_DCC_LoadPacket
0x0AD6      [38]    _CANStorage_NextHighPriorityToSend
0x0AFC     [430]    _HalfToFloat
0x0CAA      [90]    _NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI
0x0D04      [16]    _NMRAnetUtilities_LoadDestinationAlias
0x0D14      [78]    NMRAnetNode_BinarySearchAliasID
0x0D62      [76]    NMRAnetAppCallbacks_SetProxyNodeProducerFlags
0x0DAE      [64]    _NMRAnetNode_SetConsumerEventFlags
0x0DEE      [64]    _NMRAnetNode_SetProducerEventFlags
0x0E2E      [82]    NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags
0x0E80      [44]    _NMRAnetUtilities_IsDatagramMsg
0x0EAC      [52]    _NMRAnetUtilities_SupportsEventAsProducer
0x0EE0     [308]    _NMRA_DCC_QueuePacket
0x1014      [40]    _UART1_Write_Text
0x103C     [236]    _NMRAnetUtilities_CreateCANControlFrameCANBuffer
0x1128      [40]    _NMRAnetUtilities_EqualEventID
0x1150      [16]    _NMRAnetNode_ClearMsgFlag
0x1160      [18]    _StartCANMessageEngine
0x1172      [52]    _NMRAnetUtilities_SupportsVNodeEventAsProducer
0x11A6     [364]    __AddSub_FP
0x1312     [114]    __Compare_Fp
0x1384       [4]    dsPIC33_CAN_SetWindowSelectBit
0x1388      [52]    _NMRAnetUtilities_FindOutgoingDatagram
0x13BC     [232]    _NMRAnetStateMachine_TrySendDatagram
0x14A4      [40]    dsPIC33_CAN_ManipulateTXBit
0x14CC      [12]    dsPIC33_CAN_ValidateCAN_ID
0x14D8      [18]    _AppCallback_AssignRAMAddress
0x14EA     [116]    _NMRAnetNode_Allocate
0x155E      [56]    dsPIC33_CAN_SetFilterMaskBits
0x1596     [194]    _NMRAnetStateMachine_InitializeNode
0x1658      [28]    _AppCallback_AssignConfigurationAddress
0x1674      [34]    NMRAnetDCC_NMRA_DCC_LoadIdlePacketIntoTransmitter
0x1696      [12]    dsPIC33_DMA_MapToChannelReg
0x16A2     [116]    _NMRAnetNode_NextConsumerEventFlag
0x1716      [32]    _NMRAnetNode_IsAnyProducerEventSet
0x1736     [116]    _NMRAnetNode_NextProducerEventFlag
0x17AA      [36]    _NMRAnetBufferPools_InitializeBaseBuffer
0x17CE     [118]    _NMRAnetDatagrams_InitializeDatagramBuffer
0x1844      [32]    _NMRAnetNode_IsAnyConsumerEventSet
0x1864     [196]    NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite
0x1928      [60]    _AppCallback_ConfigurationWrite
0x1964     [142]    NMRAnetStateMachine_MaxAddressByAddressSpace
0x19F2      [44]    _NMRAnetUtilities_NextDatagramBuffer
0x1A1E      [22]    NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStartBit
0x1A34      [52]    _NMRAnetUtilities_SupportsVNodeEventAsConsumer
0x1A68      [86]    _NMRAnetNode_FindByNodeID
0x1ABE       [6]    _AppCallback_ConsumerIdentify
0x1AC4     [132]    _NMRAnetUtilities_CANBufferBytesToNodeID
0x1B48     [282]    __Mul_FP
0x1C62      [80]    _NMRAnetUtilities_FindInDatagramByState
0x1CB2      [58]    NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble
0x1CEC      [60]    dsPIC33_CAN_ReadRXBit
0x1D28     [830]    _AppCallback_TractionControl
0x2066      [44]    _StartCANHighPriorityMessageEngine
0x2092      [76]    _NMRAnetUtilities_DatagramBufferUnLink
0x20DE      [20]    _NMRAnetBufferPools_ReleaseDatagramBuffer
0x20F2      [10]    __Sub_FP
0x20FC    [3118]    NMRAnetStateMachine_ProcessNode
0x2D2A      [38]    NMRAnetStateMachine_ProcessAbandonBuffers
0x2D50      [58]    NMRAnetStateMachine_ReleaseBuffers
0x2D8A       [8]    _NMRAnetNode_ClearMsgFlags
0x2D92      [16]    _NMRAnetNode_ClearStateFlag
0x2DA2      [20]    NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStopBit
0x2DB6      [82]    NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte
0x2E08     [120]    NMRAnetDCC_CanTransmitMessage
0x2E80      [66]    NMRAnetStateMachine_ProcessOutgoingNode
0x2EC2     [110]    NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte
0x2F30     [210]    _LongIntToStr
0x3002      [10]    __Compare_Le_Fp
0x300C     [118]    _AppCallback_EventsIdentify
0x3082     [182]    __Long2Float
0x3138      [52]    _NMRAnetUtilities_SupportsEventAsConsumer
0x316C     [148]    _AppCallback_ProducerIdentify
0x3200      [20]    _NMRAnetUtilities_FindInProcessDatagram
0x3214     [120]    __Float2Longint
0x328C      [38]    _NMRAnetUtilities_DatagramBufferLink
0x32B2      [44]    _NMRAnetUtilities_ExtractDestinationCodedInMTIAlias
0x32DE      [96]    _NMRAnetBufferPools_AllocateDatagramBuffer
0x333E      [14]    _dsPIC33_DMA_TransferCount
0x334C      [20]    _dsPIC33_DMA_OperatingMode
0x3360      [12]    _dsPIC33_DMA_PeripheralAddress
0x336C      [20]    _dsPIC33_DMA_ManualDMATransfer
0x3380      [20]    _dsPIC33_DMA_DataSize
0x3394      [20]    _dsPIC33_DMA_Enable
0x33A8      [22]    _dsPIC33_DMA_AddressMode
0x33BE      [20]    _dsPIC33_DMA_Direction
0x33D2      [26]    _dsPIC33_CAN_GlobalInterruptCAN_EventPriority
0x33EC      [14]    _dsPIC33_CAN_RXBufferInterrupt
0x33FA      [18]    _Unlock_IOLOCK
0x340C      [12]    _dsPIC33_CAN_GlobalInterruptCAN_Event
0x3418      [12]    _dsPIC33_DMA_AddressOffsetA
0x3424      [20]    _dsPIC33_DMA_InterruptSelect
0x3438      [14]    _dsPIC33_CAN_TXBufferInterrupt
0x3446      [14]    _dsPIC33_CAN_RXBufferOverflowInterrupt
0x3454       [4]    dsPIC33_CAN_ClearWindowSelectBit
0x3458      [84]    _NMRAnetAppCallbacks_Initialize
0x34AC      [80]    _NMRAnetBufferPools_Initialize
0x34FC      [26]    _dsPIC33_CAN_EnterConfigMode
0x3516     [134]    _NMRAnetNode_Initialize
0x359C      [94]    _CANStorage_Initialize
0x35FA     [210]    _dsPIC33_CAN_Initialize
0x36CC      [10]    _NMRAnetCANReceive_Initialize
0x36D6       [6]    _NMRAnetDatagrams_Initialize
0x36DC      [32]    _dsPIC33_CAN_RegisterBufferWithFilter
0x36FC       [4]    _dsPIC33_CAN_EnableDisableRXFilters
0x3700      [16]    _dsPIC33_CAN_SetBufferAsTransmitter
0x3710      [18]    _dsPIC33_CAN_EnterNormalMode
0x3722      [66]    _dsPIC33_CAN_SetMask
0x3764      [40]    _dsPIC33_CAN_SetBaud
0x378C      [78]    _dsPIC33_CAN_AssociateFilterWithMask
0x37DA      [66]    _dsPIC33_CAN_SetFilter
0x381C     [118]    _NMRAnetUtilities_CreateNMRABusMessageCANBuffer
0x3892      [82]    _TransmitNMRABusLayerMsg
0x38E4      [60]    _NMRAnetNode_FindByAlias
0x3920      [10]    _NMRAnetUtilities_ExtractSourceAlias
0x392A      [18]    _dsPIC33_CAN_RequestTransmit
0x393C     [460]    dsPIC33_CAN_dsPIC33_DMA_Style_Buffer
0x3B08      [18]    _NMRABusBufferAvailable
0x3B1A      [24]    _NMRAnetNode_TestMsgFlags
0x3B32      [64]    _NMRAnetNode_SetMsgFlags
0x3B72      [84]    _NMRAnetBufferPools_AllocateBaseBuffer
0x3BC6      [36]    _NMRAnetUtilities_ExtractDestinationAliasFlags
0x3BEA      [56]    _AppCallback_EventsIdentifyByDest
0x3C22      [38]    _NMRAnetUtilities_BaseBufferLink
0x3C48      [36]    _NMRAnetUtilities_ExtractDestinationAlias
0x3C6C      [24]    _NMRAnetUtilities_IsAddressedMessage
0x3C84      [12]    _NMRAnetNode_SetMsgFlag
0x3C90      [22]    _NMRAnetNode_TestStateFlag
0x3CA6      [38]    _CANStorage_NextToSend
0x3CCC      [22]    _LockCANInterrupt
0x3CE2      [18]    _PPS_Mapping_NoLock
0x3CF4     [224]    _UART1_Init
0x3DD4     [172]    NMRAnetDCC_InitializeBuffer
0x3E80      [40]    _SPI1_Init
0x3EA8      [22]    _UnLockCANInterrupt
0x3EBE      [18]    NMRAnetStateMachine_CANBusBufferAvailable
0x3ED0      [40]    _TransmitCANLayerMsg
0x3EF8     [136]    _CANStorage_FlushBuffers
0x3F80       [2]    _ReceivedOnFilter6
0x3F82      [28]    _dsPIC33_CAN_RX_Full
0x3F9E     [476]    _ReceivedOnFilter0
0x417A       [2]    _ReceivedOnFilter5
0x417C       [2]    _ReceivedOnFilter2
0x417E       [2]    _ReceivedOnFilter3
0x4180       [2]    _ReceivedOnFilter4
0x4182      [24]    _NMRAnetStateMachine_Initialize
0x419A      [34]    _NMRA_DCC_Initialize
0x41BC     [236]    _NMRA_DCC_LoadPacketIntoTransmitterStateMachine
0x42A8      [10]    __25AAxxxx_Initialize
0x42B2      [76]    _NMRAnetBufferPools_100ms_TimeTick
0x42FE      [12]    _NMRAnetStateMachine_100ms_Timer
0x430A     [296]    _NMRA_DCC_TransmitterStateMachine
0x4432      [22]    _NMRA_DCC_56us_TimeTick
0x4448      [12]    _dsPIC33_CAN_InterruptCode
0x4454      [26]    _dsPIC33_CAN_InterruptFlagRXBuffer
0x446E      [26]    _dsPIC33_CAN_InterruptFlagRXBufferOverflow
0x4488     [512]    _MCU_Setup_Initialize
0x4688      [78]    _NMRA_DCC_Packet_Init
0x46D6      [26]    _dsPIC33_CAN_InterruptFlagTXBuffer
0x46F0     [730]    _NMRAnetStateMachine_Process
0x49CA      [62]    dsPIC33_CAN_StartTransmission
0x4A08     [442]    _FloatToStr
0x4BC2      [52]    _NMRAnetNode_NextNode
0x4BF6    [2108]    _ReceivedOnFilter1
0x5432      [48]    _NMRAnetNode_FindFirstVirtualNode
0x5462      [84]    _NMRAnetStateMachine_TrySendVerifyNodeID
0x54B6      [32]    _NMRAnetStateMachine_TrySendAliasMapReset
0x54D6      [24]    _dsPIC33_CAN_GlobalInterruptFlagCAN_Event
0x54EE     [124]    _NMRAnetNode_Release
0x556A      [16]    ___CS2S
0x557A      [14]    _UART1_Data_Ready
0x5588      [10]    _UART1_Read
0x5592     [816]    _main
0x58C2     [258]    dsPIC33_CAN_Interrupt_CAN_Event
0x59C4      [74]    _INTERRUPT_1ms_Timer
0x5A0E      [94]    _INTERRUPT_DCC_Timer
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x1040    [1302]    _BaseBufferPool
0x1556     [186]    _DatagramPool
0x1610       [2]    NMRAnetCANReceive_NMRAnetLayerReceiveHook
0x0114       [2]    TMR4
0x1612      [36]    _Track
0x0820       [0]    T1IE_bit
0x0800       [0]    T1IF_bit
0x1636     [650]    NMRAnetAppCallbacks_VolatileData
0x18C0    [3124]    _Nodes
0x24F4       [2]    NMRAnetCANReceive_CANLayerReceiveHook
0x0E10       [0]    EEPROM_Hold_Direction
0x0E14       [0]    EE_PROM_Hold
0x0240       [0]    SPIRBF_bit
0x0248       [2]    SPI1BUF
0x0E10       [0]    CS_Bank_0_Direction
0x24F6      [96]    NMRAnetDCC_TrackQueue
0x2556       [2]    _DatagramTrainControlCallbackFunc
0x0E14       [0]    CS_Bank_0
0x2558      [96]    NMRAnetDCC_TrackQueuePriority
0x0102       [2]    PR1
0x0842       [0]    T2IP_0_bit
0x0110       [0]    TCS_T2CON_bit
0x0842       [0]    T2IP_2_bit
0x0842       [0]    T2IP_1_bit
0x0242       [2]    SPI1CON
0x0442       [2]    C1TXD
0x0744       [0]    PLLPOST_0_bit
0x0240       [0]    SPIEN_bit
0x0440       [2]    C1RXD
0x0110       [0]    TCKPS_0_T2CON_bit
0x0840       [0]    T1IP_0_bit
0x0104       [0]    TCS_T1CON_bit
0x0840       [0]    T1IP_2_bit
0x0840       [0]    T1IP_1_bit
0x0110       [0]    TON_T2CON_bit
0x010C       [2]    PR2
0x0110       [0]    TCKPS_1_T2CON_bit
0x0820       [0]    T2IE_bit
0x0800       [0]    T2IF_bit
0x25B8       [2]    _UART_Wr_Ptr
0x0240       [2]    SPI1STAT
0x25BA       [2]    _UART_Rdy_Ptr
0x25BC       [2]    _UART_Rd_Ptr
0x25BE       [2]    _SPI_Wr_Ptr
0x0E10       [0]    TRISB10_bit
0x0E10       [0]    TRISB9_bit
0x25C0       [2]    _SPI_Rd_Ptr
0x0E10       [0]    TRISB11_bit
0x25C2       [2]    _UART_TX_Idle_Ptr
0x0404       [2]    C1VEC
0x0420       [2]    C1RXFUL1
0x0118       [2]    TMR5
0x0804       [0]    C1IF_bit
0x0224       [2]    U1TXREG
0x0222       [2]    U1STA
0x0220       [2]    U1MODE
0x0226       [2]    U1RXREG
0x0228       [2]    U1BRG
0x0E10       [0]    TRISB8_bit
0x06A0       [2]    RPINR0
0x0688       [2]    RPOR4
0x06A6       [2]    RPINR3
0x06A2       [2]    RPINR1
0x0686       [2]    RPOR3
0x0680       [2]    RPOR0
0x0742       [0]    IOLOCK_bit
0x0684       [2]    RPOR2
0x0682       [2]    RPOR1
0x06AE       [2]    RPINR7
0x06D4       [2]    RPINR26
0x06CE       [2]    RPINR23
0x0E10       [0]    TRISB7_bit
0x0E10       [0]    TRISB3_bit
0x06CC       [2]    RPINR22
0x06B6       [2]    RPINR11
0x06B0       [2]    RPINR8
0x06C6       [2]    RPINR19
0x06C4       [2]    RPINR18
0x0744       [0]    PLLPOST_1_bit
0x25C4       [2]    _MaxTime_RX
0x25C6       [2]    _i
0x25C8       [2]    _MaxTime_StateMachine
0x25CA       [2]    _LastRxTime
0x25CC       [2]    _j
0x0104       [0]    TON_T1CON_bit
0x0E10       [0]    TRISB4_bit
0x25CE       [2]    _y
0x25D0       [2]    _x
0x25D2       [2]    _LastStateMachineTime
0x0120       [0]    TON_T5CON_bit
0x011E       [0]    TON_T4CON_bit
0x010A       [2]    TMR3
0x25D4       [2]    _ActiveNode
0x0112       [0]    TON_T3CON_bit
0x25D6       [2]    _LastDCCTime
0x25D8       [2]    _DCCTime
0x0E04       [0]    LATA4_bit
0x0E00       [0]    TRISA4_bit
0x0E10       [0]    H_Bridge_B_Hi_Direction
0x0E04       [0]    LATA1_bit
0x0E04       [0]    H_Bridge_A_Lo
0x0E14       [0]    LATB0_bit
0x0E14       [0]    H_Bridge_A_Hi
0x25DA      [58]    _CAN_Engine
0x0E10       [0]    TRISB6_bit
0x0E14       [0]    LATB6_bit
0x0E10       [0]    TRISB5_bit
0x0E14       [0]    LATB5_bit
0x0E14       [0]    H_Bridge_B_Lo
0x0E10       [0]    TRISB0_bit
0x0E10       [0]    H_Bridge_A_Hi_Direction
0x0E10       [0]    TRISB1_bit
0x0E10       [0]    H_Bridge_B_Lo_Direction
0x0E00       [0]    TRISA1_bit
0x0E14       [0]    H_Bridge_B_Hi
0x0E14       [0]    LATB1_bit
0x0E00       [0]    H_Bridge_A_Lo_Direction
0x0E14       [0]    LATB4_bit
0x1020      [32]    _RX_Main_RawBufferArray
0x0412       [2]    C1CFG2
0x0432       [2]    C1RXM0EID
0x0430       [2]    C1RXM0SID
0x0410       [2]    C1CFG1
0x0850       [0]    C1IP_0_bit
0x040C       [0]    RBOVIE_bit
0x0850       [0]    C1IP_2_bit
0x0850       [0]    C1IP_1_bit
0x0B0E       [2]    DMA0CNT
0x0742       [2]    OSCCON
0x0E1E       [2]    ANSELB
0x0746       [2]    PLLFBD
0x0744       [2]    CLKDIV
0x0E0E       [2]    ANSELA
0x0B02       [2]    DMA0REQ
0x0B00       [2]    DMA0CON
0x0B0C       [2]    DMA0PAD
0x0B04       [2]    DMA0STAL
0x040C       [0]    TBIE_bit
0x0430       [2]    C1TR01CON
0x040A       [0]    TBIF_bit
0x040A       [0]    RBOVIF_bit
0x040A       [0]    RBIF_bit
0x0824       [0]    C1IE_bit
0x2614      [33]    _s1
0x2636       [4]    _TickTime
0x263A       [2]    _ProxyData
0x263C       [2]    _TempNode
0x0400       [0]    WIN_bit
0x0414       [2]    C1FEN1
0x0420       [2]    C1BUFPNT1
0x040C       [0]    RBIE_bit
0x1000      [32]    _TX_Main_RawBufferArray
0x0400       [2]    C1CTRL1
0x041A       [2]    C1FMSKSEL2
0x0418       [2]    C1FMSKSEL1
0x0442       [2]    C1RXF0EID
0x0440       [2]    C1RXF0SID
0x0102       [2]    PR1
0x010A       [2]    TMR3
0x010C       [2]    PR2
0x0114       [2]    TMR4
0x0118       [2]    TMR5
0x0014       [4]    FARG_WriteAddress_Address
0x0220       [2]    U1MODE
0x0222       [2]    U1STA
0x0224       [2]    U1TXREG
0x0226       [2]    U1RXREG
0x0228       [2]    U1BRG
0x0014       [2]    FARG_NMRAnetUtilities_GenerateID_Alias_From_Seed_Seed
0x0240       [2]    SPI1STAT
0x0242       [2]    SPI1CON
0x0248       [2]    SPI1BUF
0x0014       [2]    FARG_NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed_Seed
0x0014       [2]    FARG_SetBank_CS_Bank
0x0016       [2]    FARG_SetBank_CS_CS_State
0x0014       [1]    FARG_LocalSPI_Write_DataByte
0x0014       [2]    FARG_NMRAnetUtilities_CreateAliasID_Seed
0x0016       [2]    FARG_NMRAnetUtilities_CreateAliasID_Regenerate
0x0014       [2]    FARG_NMRAnetNode_SetStateFlag_Node
0x0016       [1]    FARG_NMRAnetNode_SetStateFlag_Flag
0x0014       [2]    FARG_UART1_Write_data_
0x0014       [2]    FARG_AppCallback_ConfigurationSize_Node
0x0014       [2]    FARG_AppCallback_NodeAllocate_Node
0x0014       [2]    FARG_NMRAnetNode_SortNodeList_LocalNodes
0x0400       [2]    C1CTRL1
0x0404       [2]    C1VEC
0x0410       [2]    C1CFG1
0x0412       [2]    C1CFG2
0x0414       [2]    C1FEN1
0x0418       [2]    C1FMSKSEL1
0x041A       [2]    C1FMSKSEL2
0x0420       [2]    C1RXFUL1
0x0420       [2]    C1BUFPNT1
0x0014       [2]    FARG_GetProxyData_Node
0x0430       [2]    C1RXM0SID
0x0430       [2]    C1TR01CON
0x0432       [2]    C1RXM0EID
0x0440       [2]    C1RXD
0x0440       [2]    C1RXF0SID
0x0442       [2]    C1RXF0EID
0x0442       [2]    C1TXD
0x0014       [2]    FARG__25AAxxxx_Busy_Bank
0x0014       [2]    FARG_NMRAnetNode_SetProducerEventFlag_Node
0x0016       [2]    FARG_NMRAnetNode_SetProducerEventFlag_EventIndex
0x0018       [1]    FARG_NMRAnetNode_SetProducerEventFlag_State
0x0014       [2]    FARG__25AAxxxx_Read_Bank
0x0016       [4]    FARG__25AAxxxx_Read_Address
0x001A       [2]    FARG__25AAxxxx_Read_Count
0x0014       [2]    FARG_NMRAnetNode_SetConsumerEventFlag_Node
0x0016       [2]    FARG_NMRAnetNode_SetConsumerEventFlag_EventIndex
0x0018       [1]    FARG_NMRAnetNode_SetConsumerEventFlag_State
0x0014       [2]    FARG__25AAxxxx_Write_Bank
0x0016       [4]    FARG__25AAxxxx_Write_Address
0x001A       [2]    FARG__25AAxxxx_Write_Count
0x0014       [2]    FARG_NMRA_DCCClassifyAddress_AMessage
0x0014       [2]    FARG_NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID_NodeBuffer
0x0016       [2]    FARG_NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID_CANBuffer
0x0680       [2]    RPOR0
0x0682       [2]    RPOR1
0x0684       [2]    RPOR2
0x0686       [2]    RPOR3
0x0688       [2]    RPOR4
0x06A0       [2]    RPINR0
0x06A2       [2]    RPINR1
0x06A6       [2]    RPINR3
0x06AE       [2]    RPINR7
0x06B0       [2]    RPINR8
0x06B6       [2]    RPINR11
0x06C4       [2]    RPINR18
0x06C6       [2]    RPINR19
0x06CC       [2]    RPINR22
0x06CE       [2]    RPINR23
0x0014       [2]    FARG_AppCallback_StateMachine_Node
0x0016       [2]    FARG_AppCallback_StateMachine_CANBuffer
0x0018       [2]    FARG_AppCallback_StateMachine_DataBytesPtr
0x06D4       [2]    RPINR26
0x0742       [2]    OSCCON
0x0744       [2]    CLKDIV
0x0746       [2]    PLLFBD
0x0014       [2]    FARG_NMRA_DCC_ResetTransmitter_ABuffer
0x0014       [2]    FARG_NMRAnetUtilities_ZeroCANData_DataBytes
0x0014       [2]    FARG_NMRAnetUtilities_NextBaseBuffer_Node
0x0014       [1]    FARG__PPS_Mapping_rp_num
0x0016       [1]    FARG__PPS_Mapping_input_output
0x0018       [1]    FARG__PPS_Mapping_funct_name
0x001A       [2]    FARG__PPS_Mapping_lock
0x0014       [2]    FARG_NMRAnetUtilities_BaseBufferUnLink_Node
0x0016       [2]    FARG_NMRAnetUtilities_BaseBufferUnLink_Buffer
0x0014       [2]    FARG_AppCallback_ConfigurationRead_Node
0x0016       [2]    FARG_AppCallback_ConfigurationRead_DataTarget
0x0018       [4]    FARG_AppCallback_ConfigurationRead_StartAddress
0x0014       [2]    FARG_NMRAnetBufferPools_ReleaseBaseBuffer_Buffer
0x0014       [2]    FARG_NMRA_DCC_LoadPacket_NewMessage
0x0016       [1]    FARG_NMRA_DCC_LoadPacket_Data1
0x0018       [1]    FARG_NMRA_DCC_LoadPacket_Data2
0x001A       [1]    FARG_NMRA_DCC_LoadPacket_Data3
0x0014       [2]    FARG_HalfToFloat_Half
0x0B00       [2]    DMA0CON
0x0B02       [2]    DMA0REQ
0x0B04       [2]    DMA0STAL
0x0B0C       [2]    DMA0PAD
0x0B0E       [2]    DMA0CNT
0x0014       [2]    FARG_NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI_NodeBuffer
0x0016       [2]    FARG_NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI_Buffer
0x0018       [4]    FARG_NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI_MTI
0x0014       [2]    FARG_NMRAnetUtilities_LoadDestinationAlias_DestinationAlias
0x0016       [2]    FARG_NMRAnetUtilities_LoadDestinationAlias_DataBytes
0x0014       [2]    FARG_BinarySearchAliasID_LocalNodes
0x0016       [2]    FARG_BinarySearchAliasID_AliasID
0x0014       [2]    FARG_SetProxyNodeProducerFlags_Node
0x0016       [2]    FARG_SetProxyNodeProducerFlags_EventIndex
0x0014       [2]    FARG_NMRAnetNode_SetConsumerEventFlags_Node
0x0016       [1]    FARG_NMRAnetNode_SetConsumerEventFlags_State
0x0014       [2]    FARG_NMRAnetNode_SetProducerEventFlags_Node
0x0016       [1]    FARG_NMRAnetNode_SetProducerEventFlags_State
0x0E0E       [2]    ANSELA
0x0E1E       [2]    ANSELB
0x0014       [2]    FARG_SetProxyNodeDccAddressFlags_Node
0x0016       [2]    FARG_SetProxyNodeDccAddressFlags_Event
0x0014       [2]    FARG_NMRAnetUtilities_IsDatagramMsg_CANBuffer
0x0014       [2]    FARG_NMRAnetUtilities_SupportsEventAsProducer_DataBytes
0x0016       [2]    FARG_NMRAnetUtilities_SupportsEventAsProducer_EventIndex
0x0014       [2]    FARG_NMRA_DCC_QueuePacket_ABuffer
0x0016       [2]    FARG_NMRA_DCC_QueuePacket_NewMessage
0x0018       [2]    FARG_NMRA_DCC_QueuePacket_HighPriority
0x0014       [2]    FARG_UART1_Write_Text_uart_text
0x0014       [2]    FARG_NMRAnetUtilities_CreateCANControlFrameCANBuffer_NodeBuffer
0x0016       [2]    FARG_NMRAnetUtilities_CreateCANControlFrameCANBuffer_CANBuffer
0x0018       [4]    FARG_NMRAnetUtilities_CreateCANControlFrameCANBuffer_MTI
0x0014       [2]    FARG_NMRAnetUtilities_EqualEventID_Event1
0x0016       [2]    FARG_NMRAnetUtilities_EqualEventID_Event2
0x0014       [2]    FARG_NMRAnetNode_ClearMsgFlag_Node
0x0016       [1]    FARG_NMRAnetNode_ClearMsgFlag_Flag
0x0014       [2]    FARG_NMRAnetUtilities_SupportsVNodeEventAsProducer_DataBytes
0x0016       [2]    FARG_NMRAnetUtilities_SupportsVNodeEventAsProducer_EventIndex
0x0014       [2]    FARG_NMRAnetUtilities_FindOutgoingDatagram_Node
0x0016       [2]    FARG_NMRAnetUtilities_FindOutgoingDatagram_Buffer
0x0018       [2]    FARG_NMRAnetUtilities_FindOutgoingDatagram_ProcessingOnly
0x0014       [2]    FARG_NMRAnetStateMachine_TrySendDatagram_Node
0x0016       [2]    FARG_NMRAnetStateMachine_TrySendDatagram_CANBuffer
0x0018       [2]    FARG_NMRAnetStateMachine_TrySendDatagram_Datagram
0x0014       [2]    FARG_ManipulateTXBit_BufferNumber
0x0016       [1]    FARG_ManipulateTXBit_BitIndex
0x0018       [2]    FARG_ManipulateTXBit_DoSet
0x0014       [2]    FARG_ValidateCAN_ID_ID
0x0014       [2]    FARG_AppCallback_AssignRAMAddress_Node
0x0016       [2]    FARG_AppCallback_AssignRAMAddress_iNode
0x0014       [2]    FARG_SetFilterMaskBits_RegPtrSID
0x0016       [2]    FARG_SetFilterMaskBits_RegPtrEID
0x0018       [4]    FARG_SetFilterMaskBits_Filter
0x0014       [2]    FARG_NMRAnetStateMachine_InitializeNode_Node
0x0016       [4]    FARG_NMRAnetStateMachine_InitializeNode_NodeID_HI
0x0014       [2]    FARG_AppCallback_AssignConfigurationAddress_Node
0x0016       [2]    FARG_AppCallback_AssignConfigurationAddress_iNode
0x0014       [2]    FARG_NMRA_DCC_LoadIdlePacketIntoTransmitter_Buffer
0x0016       [1]    FARG_NMRA_DCC_LoadIdlePacketIntoTransmitter_PreambleCount
0x0014       [2]    FARG_MapToChannelReg_ChannelNumber
0x0016       [2]    FARG_MapToChannelReg_Channel_0_Reg
0x0014       [2]    FARG_NMRAnetNode_NextConsumerEventFlag_Node
0x0016       [2]    FARG_NMRAnetNode_NextConsumerEventFlag_State
0x0014       [2]    FARG_NMRAnetNode_IsAnyProducerEventSet_Node
0x0014       [2]    FARG_NMRAnetNode_NextProducerEventFlag_Node
0x0016       [2]    FARG_NMRAnetNode_NextProducerEventFlag_State
0x0014       [2]    FARG_NMRAnetBufferPools_InitializeBaseBuffer_Buffer
0x0014       [2]    FARG_NMRAnetDatagrams_InitializeDatagramBuffer_Buffer
0x0014       [2]    FARG_NMRAnetNode_IsAnyConsumerEventSet_Node
0x0014       [2]    FARG_DecodeMemoryConfigurationReadWrite_Node
0x0016       [2]    FARG_DecodeMemoryConfigurationReadWrite_DataBytes
0x0018       [2]    FARG_DecodeMemoryConfigurationReadWrite_MemorySpace
0x001A       [2]    FARG_DecodeMemoryConfigurationReadWrite_MemorySpaceAddress
0x0014       [2]    FARG_AppCallback_ConfigurationWrite_Node
0x0016       [2]    FARG_AppCallback_ConfigurationWrite_DataTarget
0x0018       [4]    FARG_AppCallback_ConfigurationWrite_StartAddress
0x0014       [2]    FARG_MaxAddressByAddressSpace_Node
0x0016       [1]    FARG_MaxAddressByAddressSpace_AddressSpace
0x0014       [2]    FARG_NMRAnetUtilities_NextDatagramBuffer_Node
0x0014       [2]    FARG_NMRA_DCC_TransmitterStateMachineHandleStartBit_ABuffer
0x0014       [2]    FARG_NMRAnetUtilities_SupportsVNodeEventAsConsumer_DataBytes
0x0016       [2]    FARG_NMRAnetUtilities_SupportsVNodeEventAsConsumer_EventIndex
0x0014       [2]    FARG_NMRAnetNode_FindByNodeID_NodeID
0x0014       [2]    FARG_AppCallback_ConsumerIdentify_Node
0x0016       [2]    FARG_AppCallback_ConsumerIdentify_Event
0x0014       [2]    FARG_NMRAnetUtilities_CANBufferBytesToNodeID_DataBytes
0x0016       [2]    FARG_NMRAnetUtilities_CANBufferBytesToNodeID_NodeID
0x0018       [1]    FARG_NMRAnetUtilities_CANBufferBytesToNodeID_iStartByte
0x0014       [2]    FARG_NMRAnetUtilities_FindInDatagramByState_Node
0x0016       [2]    FARG_NMRAnetUtilities_FindInDatagramByState_Alias
0x0018       [2]    FARG_NMRAnetUtilities_FindInDatagramByState_Buffer
0x001A       [1]    FARG_NMRAnetUtilities_FindInDatagramByState_AState
0x0014       [2]    FARG_NMRA_DCC_TransmitterStateMachineHandlePreamble_ABuffer
0x0014       [2]    FARG_ReadRXBit_RegPtr
0x0016       [2]    FARG_ReadRXBit_BufferNumber
0x0018       [2]    FARG_ReadRXBit_Clear
0x0014       [2]    FARG_AppCallback_TractionControl_Node
0x0016       [2]    FARG_AppCallback_TractionControl_CANBuffer
0x0014       [2]    FARG_NMRAnetUtilities_DatagramBufferUnLink_Node
0x0016       [2]    FARG_NMRAnetUtilities_DatagramBufferUnLink_Buffer
0x0014       [2]    FARG_NMRAnetBufferPools_ReleaseDatagramBuffer_Buffer
0x0014       [2]    FARG_ProcessNode_Node
0x0016       [2]    FARG_ProcessNode_CANBuffer
0x0014       [2]    FARG_ProcessAbandonBuffers_Node
0x0014       [2]    FARG_ReleaseBuffers_Node
0x0014       [2]    FARG_NMRAnetNode_ClearMsgFlags_Node
0x0014       [2]    FARG_NMRAnetNode_ClearStateFlag_Node
0x0016       [1]    FARG_NMRAnetNode_ClearStateFlag_Flag
0x0014       [2]    FARG_NMRA_DCC_TransmitterStateMachineHandleStopBit_ABuffer
0x0014       [2]    FARG_NMRA_DCC_TransmitterStateMachineXORByte_ABuffer
0x0014       [2]    FARG_CanTransmitMessage_ABuffer
0x0016       [2]    FARG_CanTransmitMessage_AMessage
0x0014       [2]    FARG_ProcessOutgoingNode_Node
0x0016       [2]    FARG_ProcessOutgoingNode_CANBuffer
0x0014       [2]    FARG_NMRA_DCC_TransmitterStateMachineHandleByte_ABuffer
0x0016       [1]    FARG_NMRA_DCC_TransmitterStateMachineHandleByte_ByteIndex
0x0014       [4]    FARG_LongIntToStr_input
0x0018       [2]    FARG_LongIntToStr_output
0x0014       [2]    FARG_NMRAnetUtilities_SupportsEventAsConsumer_DataBytes
0x0016       [2]    FARG_NMRAnetUtilities_SupportsEventAsConsumer_EventIndex
0x0014       [2]    FARG_AppCallback_ProducerIdentify_Node
0x0016       [2]    FARG_AppCallback_ProducerIdentify_Event
0x0014       [2]    FARG_NMRAnetUtilities_FindInProcessDatagram_Node
0x0016       [2]    FARG_NMRAnetUtilities_FindInProcessDatagram_Alias
0x0018       [2]    FARG_NMRAnetUtilities_FindInProcessDatagram_Buffer
0x0014       [2]    FARG_NMRAnetUtilities_DatagramBufferLink_Node
0x0016       [2]    FARG_NMRAnetUtilities_DatagramBufferLink_Buffer
0x0014       [2]    FARG_NMRAnetUtilities_ExtractDestinationCodedInMTIAlias_CANBuffer
0x0014       [2]    FARG_NMRAnetBufferPools_AllocateDatagramBuffer_Buffer
0x0016       [2]    FARG_NMRAnetBufferPools_AllocateDatagramBuffer_ForTransmit
0x0014       [2]    FARG_dsPIC33_DMA_TransferCount_ChannelNumber
0x0016       [2]    FARG_dsPIC33_DMA_TransferCount_Count
0x0014       [2]    FARG_dsPIC33_DMA_OperatingMode_ChannelNumber
0x0016       [2]    FARG_dsPIC33_DMA_OperatingMode_Mode
0x0014       [2]    FARG_dsPIC33_DMA_PeripheralAddress_ChannelNumber
0x0016       [2]    FARG_dsPIC33_DMA_PeripheralAddress_Address
0x0014       [2]    FARG_dsPIC33_DMA_ManualDMATransfer_ChannelNumber
0x0016       [2]    FARG_dsPIC33_DMA_ManualDMATransfer_Manual
0x0014       [2]    FARG_dsPIC33_DMA_DataSize_ChannelNumber
0x0016       [2]    FARG_dsPIC33_DMA_DataSize__Size
0x0014       [2]    FARG_dsPIC33_DMA_Enable_ChannelNumber
0x0016       [2]    FARG_dsPIC33_DMA_Enable_Enable
0x0014       [2]    FARG_dsPIC33_DMA_AddressMode_ChannelNumber
0x0016       [2]    FARG_dsPIC33_DMA_AddressMode_Mode
0x0014       [2]    FARG_dsPIC33_DMA_Direction_ChannelNumber
0x0016       [2]    FARG_dsPIC33_DMA_Direction_Direction
0x0014       [2]    FARG_dsPIC33_CAN_GlobalInterruptCAN_EventPriority_Priority
0x0014       [2]    FARG_dsPIC33_CAN_RXBufferInterrupt_Enable
0x0014       [2]    FARG_dsPIC33_CAN_GlobalInterruptCAN_Event_Enable
0x0014       [2]    FARG_dsPIC33_DMA_AddressOffsetA_ChannelNumber
0x0016       [2]    FARG_dsPIC33_DMA_AddressOffsetA_Address
0x0014       [2]    FARG_dsPIC33_DMA_InterruptSelect_ChannelNumber
0x0016       [2]    FARG_dsPIC33_DMA_InterruptSelect_IRQ_Select
0x0014       [2]    FARG_dsPIC33_CAN_TXBufferInterrupt_Enable
0x0014       [2]    FARG_dsPIC33_CAN_RXBufferOverflowInterrupt_Enable
0x0014       [4]    FARG_NMRAnetNode_Initialize_PhysicalNodeID_HI
0x0018       [4]    FARG_NMRAnetNode_Initialize_PhysicalNodeID_Lo
0x0014       [2]    FARG_dsPIC33_CAN_RegisterBufferWithFilter_FilterNumber
0x0016       [2]    FARG_dsPIC33_CAN_RegisterBufferWithFilter_BufferNumber
0x0014       [2]    FARG_dsPIC33_CAN_EnableDisableRXFilters_FilterMask
0x0014       [2]    FARG_dsPIC33_CAN_SetBufferAsTransmitter_BufferNumber
0x0016       [2]    FARG_dsPIC33_CAN_SetBufferAsTransmitter_DoSet
0x0014       [1]    FARG_dsPIC33_CAN_SetMask_MaskNumber
0x0016       [4]    FARG_dsPIC33_CAN_SetMask_Mask
0x001A       [2]    FARG_dsPIC33_CAN_SetMask_ExtendedOnly
0x0014       [2]    FARG_dsPIC33_CAN_SetBaud_SWJ
0x0016       [2]    FARG_dsPIC33_CAN_SetBaud_BRP
0x0018       [2]    FARG_dsPIC33_CAN_SetBaud_SEG2PH
0x001A       [2]    FARG_dsPIC33_CAN_SetBaud_SEG1PH
0x0014       [2]    FARG_dsPIC33_CAN_AssociateFilterWithMask_FilterNumber
0x0016       [2]    FARG_dsPIC33_CAN_AssociateFilterWithMask_MaskNumber
0x0014       [1]    FARG_dsPIC33_CAN_SetFilter_FilterNumber
0x0016       [4]    FARG_dsPIC33_CAN_SetFilter_Filter
0x001A       [2]    FARG_dsPIC33_CAN_SetFilter_ExtendedOnly
0x0014       [2]    FARG_NMRAnetUtilities_CreateNMRABusMessageCANBuffer_NodeBuffer
0x0016       [2]    FARG_NMRAnetUtilities_CreateNMRABusMessageCANBuffer_Buffer
0x0018       [4]    FARG_NMRAnetUtilities_CreateNMRABusMessageCANBuffer_MTI
0x0014       [2]    FARG_TransmitNMRABusLayerMsg_Node
0x0016       [2]    FARG_TransmitNMRABusLayerMsg_Buffer
0x0018       [4]    FARG_TransmitNMRABusLayerMsg_MTI
0x0014       [2]    FARG_NMRAnetNode_FindByAlias_AliasID
0x0014       [2]    FARG_NMRAnetUtilities_ExtractSourceAlias_CANBuffer
0x0014       [2]    FARG_dsPIC33_CAN_RequestTransmit_BufferNumber
0x0014       [1]    FARG_dsPIC33_DMA_Style_Buffer_Direction
0x0016       [2]    FARG_dsPIC33_DMA_Style_Buffer_CANPtr
0x0018       [2]    FARG_dsPIC33_DMA_Style_Buffer_Buffer
0x0014       [2]    FARG_NMRAnetNode_TestMsgFlags_Node
0x0016       [2]    FARG_NMRAnetNode_TestMsgFlags_Flag
0x0018       [2]    FARG_NMRAnetNode_TestMsgFlags_DoClear
0x0014       [2]    FARG_NMRAnetNode_SetMsgFlags_MsgFlags
0x0014       [2]    FARG_NMRAnetBufferPools_AllocateBaseBuffer_Buffer
0x0014       [2]    FARG_NMRAnetUtilities_ExtractDestinationAliasFlags_Buffer
0x0014       [2]    FARG_AppCallback_EventsIdentifyByDest_Node
0x0014       [2]    FARG_NMRAnetUtilities_BaseBufferLink_Node
0x0016       [2]    FARG_NMRAnetUtilities_BaseBufferLink_Buffer
0x0014       [2]    FARG_NMRAnetUtilities_ExtractDestinationAlias_CANBuffer
0x0014       [2]    FARG_NMRAnetUtilities_IsAddressedMessage_CANBuffer
0x0014       [2]    FARG_NMRAnetNode_SetMsgFlag_Node
0x0016       [1]    FARG_NMRAnetNode_SetMsgFlag_Flag
0x0014       [2]    FARG_NMRAnetNode_TestStateFlag_Node
0x0016       [1]    FARG_NMRAnetNode_TestStateFlag_Flag
0x0014       [1]    FARG_PPS_Mapping_NoLock_rp_num
0x0016       [1]    FARG_PPS_Mapping_NoLock_input_output
0x0018       [1]    FARG_PPS_Mapping_NoLock_funct_name
0x0014       [4]    FARG_UART1_Init_baud_rate
0x0014       [2]    FARG_InitializeBuffer_ABuffer
0x0016       [2]    FARG_InitializeBuffer_SlotQueue
0x0018       [2]    FARG_InitializeBuffer_PrioritySlotQueue
0x001A       [1]    FARG_InitializeBuffer_QueueSize
0x0014       [2]    FARG_TransmitCANLayerMsg_Node
0x0016       [2]    FARG_TransmitCANLayerMsg_Buffer
0x0018       [4]    FARG_TransmitCANLayerMsg_VariableField
0x0014       [2]    FARG_CANStorage_FlushBuffers_AliasID
0x0014       [2]    FARG_ReceivedOnFilter6_Buffer
0x0014       [2]    FARG_dsPIC33_CAN_RX_Full_BufferNumber
0x0016       [2]    FARG_dsPIC33_CAN_RX_Full_Clear
0x0014       [2]    FARG_ReceivedOnFilter0_CANBuffer
0x0014       [2]    FARG_ReceivedOnFilter5_Buffer
0x0014       [2]    FARG_ReceivedOnFilter2_Buffer
0x0014       [2]    FARG_ReceivedOnFilter3_Buffer
0x0014       [2]    FARG_ReceivedOnFilter4_Buffer
0x0014       [4]    FARG_NMRAnetStateMachine_Initialize_PhysicalNodeID_HI
0x0018       [4]    FARG_NMRAnetStateMachine_Initialize_PhysicalNodeID_Lo
0x0014       [2]    FARG_NMRA_DCC_LoadPacketIntoTransmitterStateMachine_ABuffer
0x0016       [1]    FARG_NMRA_DCC_LoadPacketIntoTransmitterStateMachine_PreambleCount
0x0014       [2]    FARG_NMRAnetStateMachine_100ms_Timer_Node
0x0014       [2]    FARG_NMRA_DCC_TransmitterStateMachine_ABuffer
0x0014       [2]    FARG_NMRA_DCC_56us_TimeTick_ABuffer
0x0014       [2]    FARG_dsPIC33_CAN_InterruptFlagRXBuffer_DoReset
0x0014       [2]    FARG_dsPIC33_CAN_InterruptFlagRXBufferOverflow_DoReset
0x0014       [2]    FARG_dsPIC33_CAN_InterruptFlagTXBuffer_DoReset
0x0014       [2]    FARG_NMRAnetStateMachine_Process_Node
0x0014       [4]    FARG_FloatToStr_input
0x0018       [2]    FARG_FloatToStr_output
0x0014       [2]    FARG_ReceivedOnFilter1_CANBuffer
0x0014       [2]    FARG_NMRAnetStateMachine_TrySendVerifyNodeID_Node
0x0016       [2]    FARG_NMRAnetStateMachine_TrySendVerifyNodeID_DestinationAliasID
0x0014       [2]    FARG_NMRAnetStateMachine_TrySendAliasMapReset_Node
0x0014       [2]    FARG_dsPIC33_CAN_GlobalInterruptFlagCAN_Event_DoReset
0x0014       [2]    FARG_NMRAnetNode_Release_Node
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x8000    [1643]    _CDI_ARRAY
0x866B    [1640]    _CDI_ARRAY_VNODE
0x8CD3      [54]    _PIV_VNODE_SUPPORTED_PROTOCOLS
0x8D09      [48]    _PIV_SUPPORTED_PROTOCOLS
0x8D39      [26]    _ACDI_MFG_STRINGS
0x8D53      [26]    _ACDI_MFG_STRINGS_VNODE
0x8D6D      [24]    _SUPPORTED_VNODE_EVENTS_PRODUCED
0x8D85      [16]    _SUPPORTED_EVENTS_PRODUCED
0x8D95       [8]    _EVENT_DUPLICATE_ID_DETECTED
0x8D9D       [8]    _SUPPORTED_EVENTS_CONSUMED
0x8DA5       [8]    _SUPPORTED_VNODE_EVENTS_CONSUMED
0x8DAE       [6]    _MEMORY_CONFIG_OPTIONS
0x8DB4       [4]    _ALL_MAP
0x8DB8       [3]    _LF
0x8DBB       [2]    _DATAGRAM_RESULT_REJECTED_BUFFER_FULL
0x8DBD       [2]    _DATAGRAM_RESULT_REJECTED_SOURCE_DATAGRAMS_NOT_ACCEPTED
//** Label List: ** 
//----------------------------------------------
  L_end__CANStorage_Initialize
  L_end__CANStorage_FlushBuffers
  L__CANStorage_FlushBuffers2
  L__CANStorage_FlushBuffers3
  L__CANStorage_FlushBuffers4
  L__CANStorage_FlushBuffers5
  L__CANStorage_FlushBuffers6
  L__CANStorage_FlushBuffers7
  L__CANStorage_FlushBuffers8
  L__CANStorage_FlushBuffers9
  L__CANStorage_FlushBuffers10
  L__CANStorage_FlushBuffers11
  L__CANStorage_FlushBuffers12
  L__CANStorage_FlushBuffers13
  L__CANStorage_FlushBuffers14
  L__CANStorage_FlushBuffers15
  L__CANStorage_FlushBuffers16
  L_end__CANStorage_NextToSend
  L__CANStorage_NextToSend18
  L__CANStorage_NextToSend19
  L__CANStorage_NextToSend20
  L__CANStorage_NextToSend21
  L__CANStorage_NextToSend22
  L__CANStorage_NextToSend23
  L_end__CANStorage_NextHighPriorityToSend
  L__CANStorage_NextHighPriorityToSend25
  L__CANStorage_NextHighPriorityToSend26
  L__CANStorage_NextHighPriorityToSend27
  L__CANStorage_NextHighPriorityToSend28
  L__CANStorage_NextHighPriorityToSend29
  L__CANStorage_NextHighPriorityToSend30
  L_end_CANStorage_Initialize
  _CANStorage_Initialize
  L_end_CANStorage_FlushBuffers
  _CANStorage_FlushBuffers
  L__CANStorage_FlushBuffers33
  L__CANStorage_FlushBuffers34
  L__CANStorage_FlushBuffers35
  L__CANStorage_FlushBuffers36
  L__CANStorage_FlushBuffers37
  L_end_CANStorage_NextToSend
  _CANStorage_NextToSend
  L__CANStorage_NextToSend39
  L__CANStorage_NextToSend40
  L_end_CANStorage_NextHighPriorityToSend
  _CANStorage_NextHighPriorityToSend
  L__CANStorage_NextHighPriorityToSend42
  L__CANStorage_NextHighPriorityToSend43
  L_end__INTERRUPT_DCC_Timer
  L__INTERRUPT_DCC_Timer1
  L__INTERRUPT_DCC_Timer2
  L__INTERRUPT_DCC_Timer3
  L__INTERRUPT_DCC_Timer4
  L__INTERRUPT_DCC_Timer5
  L__INTERRUPT_DCC_Timer6
  L_end__INTERRUPT_1ms_Timer
  L__INTERRUPT_1ms_Timer8
  L__INTERRUPT_1ms_Timer9
  L__INTERRUPT_1ms_Timer10
  L__INTERRUPT_1ms_Timer11
  L__INTERRUPT_1ms_Timer12
  L_end__main
  L__main14
  L__main15
  L__main16
  L__main17
  L__main18
  L__main19
  L__main20
  L__main21
  L__main22
  L__main23
  L__main24
  L__main25
  L__main26
  L__main27
  L__main28
  L__main29
  L__main30
  L__main31
  L__main32
  L__main33
  L__main34
  L__main35
  L__main36
  L__main37
  L__main38
  L__main39
  L__main40
  L__main41
  L__main42
  L__main43
  L__main44
  L__main45
  L__main46
  L__main47
  L__main48
  L__main49
  L__main50
  L__main51
  L__main52
  L__main53
  L__main54
  L__main55
  L__main56
  L__main57
  L__main58
  L__main59
  L__main60
  L__main61
  L__main62
  L__main63
  L__main64
  L__main65
  L__main66
  L__main67
  L__main68
  L__main69
  L_end_INTERRUPT_DCC_Timer
  _INTERRUPT_DCC_Timer
  L__INTERRUPT_DCC_Timer71
  L_end_INTERRUPT_1ms_Timer
  _INTERRUPT_1ms_Timer
  L__INTERRUPT_1ms_Timer73
  L__INTERRUPT_1ms_Timer74
  L_end_main
  _main
  L__main76
  L__main77
  L__main78
  L__main79
  L__main80
  L__main81
  L__main82
  L__main83
  L__main84
  L__main85
  L__main86
  L__main87
  L__main88
  L__main89
  L__main90
  L__main91
  L__main92
  L__main_end_loop
  L_end_dsPIC33_CAN_StartTransmission
  L_dsPIC33_CAN_StartTransmission1
  L_dsPIC33_CAN_StartTransmission2
  L_dsPIC33_CAN_StartTransmission3
  L_end__StartCANHighPriorityMessageEngine
  L__StartCANHighPriorityMessageEngine5
  L__StartCANHighPriorityMessageEngine6
  L__StartCANHighPriorityMessageEngine7
  L_end__StartCANMessageEngine
  L__StartCANMessageEngine9
  L__StartCANMessageEngine10
  L__StartCANMessageEngine11
  L_end__dsPIC33_CAN_GlobalInterruptCAN_Event
  L__dsPIC33_CAN_GlobalInterruptCAN_Event13
  L__dsPIC33_CAN_GlobalInterruptCAN_Event14
  L__dsPIC33_CAN_GlobalInterruptCAN_Event15
  L_end_dsPIC33_CAN_Interrupt_CAN_Event
  L_dsPIC33_CAN_Interrupt_CAN_Event17
  L_dsPIC33_CAN_Interrupt_CAN_Event18
  L_dsPIC33_CAN_Interrupt_CAN_Event19
  L_dsPIC33_CAN_Interrupt_CAN_Event20
  L_dsPIC33_CAN_Interrupt_CAN_Event21
  L_dsPIC33_CAN_Interrupt_CAN_Event22
  L_dsPIC33_CAN_Interrupt_CAN_Event23
  L_dsPIC33_CAN_Interrupt_CAN_Event24
  L_dsPIC33_CAN_Interrupt_CAN_Event25
  L_dsPIC33_CAN_Interrupt_CAN_Event26
  L_dsPIC33_CAN_Interrupt_CAN_Event27
  L_dsPIC33_CAN_Interrupt_CAN_Event28
  L_dsPIC33_CAN_Interrupt_CAN_Event29
  L_dsPIC33_CAN_Interrupt_CAN_Event30
  L_dsPIC33_CAN_Interrupt_CAN_Event31
  L_dsPIC33_CAN_Interrupt_CAN_Event32
  L_dsPIC33_CAN_Interrupt_CAN_Event33
  L_dsPIC33_CAN_Interrupt_CAN_Event34
  L_dsPIC33_CAN_Interrupt_CAN_Event35
  L_dsPIC33_CAN_Interrupt_CAN_Event36
  L_dsPIC33_CAN_Interrupt_CAN_Event37
  L_dsPIC33_CAN_Interrupt_CAN_Event38
  L_dsPIC33_CAN_Interrupt_CAN_Event39
  L_dsPIC33_CAN_Interrupt_CAN_Event40
  L_dsPIC33_CAN_Interrupt_CAN_Event41
  L_dsPIC33_CAN_Interrupt_CAN_Event42
  L_dsPIC33_CAN_Interrupt_CAN_Event43
  L_dsPIC33_CAN_Interrupt_CAN_Event44
  L_dsPIC33_CAN_Interrupt_CAN_Event45
  L_dsPIC33_CAN_Interrupt_CAN_Event46
  L_dsPIC33_CAN_Interrupt_CAN_Event47
  L_dsPIC33_CAN_Interrupt_CAN_Event48
  L_dsPIC33_CAN_Interrupt_CAN_Event49
  L_dsPIC33_CAN_Interrupt_CAN_Event50
  L_dsPIC33_CAN_Interrupt_CAN_Event51
  L_dsPIC33_CAN_Interrupt_CAN_Event52
  L_dsPIC33_CAN_Interrupt_CAN_Event53
  L_dsPIC33_CAN_Interrupt_CAN_Event54
  L_dsPIC33_CAN_Interrupt_CAN_Event55
  L_dsPIC33_CAN_Interrupt_CAN_Event56
  L_dsPIC33_CAN_Interrupt_CAN_Event57
  L_dsPIC33_CAN_Interrupt_CAN_Event58
  L_dsPIC33_CAN_Interrupt_CAN_Event59
  L_dsPIC33_CAN_Interrupt_CAN_Event60
  L_dsPIC33_CAN_Interrupt_CAN_Event61
  L_dsPIC33_CAN_Interrupt_CAN_Event62
  L_end__dsPIC33_CAN_Initialize
  L__dsPIC33_CAN_Initialize64
  L__dsPIC33_CAN_Initialize65
  L__dsPIC33_CAN_Initialize66
  L__dsPIC33_CAN_Initialize67
  L__dsPIC33_CAN_Initialize68
  L__dsPIC33_CAN_Initialize69
  L__dsPIC33_CAN_Initialize70
  L__dsPIC33_CAN_Initialize71
  L__dsPIC33_CAN_Initialize72
  L__dsPIC33_CAN_Initialize73
  L_end_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer75
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer76
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer77
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer78
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer79
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer80
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer81
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer82
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer83
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer84
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer85
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer86
  L_end__LockCANInterrupt
  L__LockCANInterrupt88
  L__LockCANInterrupt89
  L__LockCANInterrupt90
  L_end__UnLockCANInterrupt
  L__UnLockCANInterrupt92
  L__UnLockCANInterrupt93
  L__UnLockCANInterrupt94
  L_end_dsPIC33_CAN_SetWindowSelectBit
  L_end_dsPIC33_CAN_ClearWindowSelectBit
  L_end_dsPIC33_CAN_SetFilterMaskBits
  L_dsPIC33_CAN_SetFilterMaskBits98
  L_dsPIC33_CAN_SetFilterMaskBits99
  L_dsPIC33_CAN_SetFilterMaskBits100
  L_end_dsPIC33_CAN_ValidateCAN_ID
  L_end_dsPIC33_CAN_ManipulateTXBit
  L_dsPIC33_CAN_ManipulateTXBit103
  L_dsPIC33_CAN_ManipulateTXBit104
  L_dsPIC33_CAN_ManipulateTXBit105
  L_dsPIC33_CAN_ManipulateTXBit106
  L_dsPIC33_CAN_ManipulateTXBit107
  L_dsPIC33_CAN_ManipulateTXBit108
  L_dsPIC33_CAN_ManipulateTXBit109
  L_end_dsPIC33_CAN_ReadTXBit
  L_dsPIC33_CAN_ReadTXBit111
  L_end_dsPIC33_CAN_ReadRXBit
  L_dsPIC33_CAN_ReadRXBit113
  L_dsPIC33_CAN_ReadRXBit114
  L_dsPIC33_CAN_ReadRXBit115
  L_dsPIC33_CAN_ReadRXBit116
  L_dsPIC33_CAN_ReadRXBit117
  L_dsPIC33_CAN_ReadRXBit118
  L_dsPIC33_CAN_ReadRXBit119
  L_dsPIC33_CAN_ReadRXBit120
  L_dsPIC33_CAN_ReadRXBit121
  L_end__dsPIC33_CAN_TX_Aborted
  L_end__dsPIC33_CAN_TX_Requested
  L_end__dsPIC33_CAN_TX_ArbitrationLost
  L_end__dsPIC33_CAN_TX_ErrorDetected
  L_end__dsPIC33_CAN_SetBufferAsTransmitter
  L_end__dsPIC33_CAN_SetTransmitterPriority
  L_end__dsPIC33_CAN_RequestTransmit
  L_end__dsPIC33_CAN_ClearTransmit
  L_end__dsPIC33_CAN_RX_Full
  L_end__dsPIC33_CAN_RX_Overflow
  L_end__dsPIC33_CAN_InterruptCodeWithFilterHit
  L_end__dsPIC33_CAN_GlobalInterruptCAN_RX_Ready
  L__dsPIC33_CAN_GlobalInterruptCAN_RX_Ready134
  L__dsPIC33_CAN_GlobalInterruptCAN_RX_Ready135
  L__dsPIC33_CAN_GlobalInterruptCAN_RX_Ready136
  L_end__dsPIC33_CAN_GlobalInterruptCAN_TX_Request
  L__dsPIC33_CAN_GlobalInterruptCAN_TX_Request138
  L__dsPIC33_CAN_GlobalInterruptCAN_TX_Request139
  L__dsPIC33_CAN_GlobalInterruptCAN_TX_Request140
  L_end__dsPIC33_CAN_GlobalInterruptFlagCAN_Event
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event142
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event143
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event144
  L_end__dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready146
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready147
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready148
  L_end__dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request150
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request151
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request152
  L_end__dsPIC33_CAN_GlobalInterruptCAN_EventPriority
  L_end__dsPIC33_CAN_GlobalInterruptCAN_RX_ReadyPriority
  L_end__dsPIC33_CAN_GlobalInterruptCAN_TX_RequestPriority
  L_end__dsPIC33_CAN_InterruptCode
  L_end__dsPIC33_CAN_InterruptFlagTXInErrorStateBusOff
  L_end__dsPIC33_CAN_InterruptFlagTXInErrorStateBusPassive
  L_end__dsPIC33_CAN_InterruptFlagRXInErrorBusPassive
  L_end__dsPIC33_CAN_InterruptFlagTXInErrorStateWarning
  L_end__dsPIC33_CAN_InterruptFlagRXInErrorStateWarning
  L_end__dsPIC33_CAN_InterruptFlagTXOrRXInErrorStateWarning
  L_end__dsPIC33_CAN_InterruptFlagInvalidMessage
  L__dsPIC33_CAN_InterruptFlagInvalidMessage164
  L__dsPIC33_CAN_InterruptFlagInvalidMessage165
  L__dsPIC33_CAN_InterruptFlagInvalidMessage166
  L_end__dsPIC33_CAN_InterruptFlagBusWakeupActivity
  L__dsPIC33_CAN_InterruptFlagBusWakeupActivity168
  L__dsPIC33_CAN_InterruptFlagBusWakeupActivity169
  L__dsPIC33_CAN_InterruptFlagBusWakeupActivity170
  L_end__dsPIC33_CAN_InterruptFlagError
  L__dsPIC33_CAN_InterruptFlagError172
  L__dsPIC33_CAN_InterruptFlagError173
  L__dsPIC33_CAN_InterruptFlagError174
  L_end__dsPIC33_CAN_InterruptFlagFIFO_AlmostFull
  L__dsPIC33_CAN_InterruptFlagFIFO_AlmostFull176
  L__dsPIC33_CAN_InterruptFlagFIFO_AlmostFull177
  L__dsPIC33_CAN_InterruptFlagFIFO_AlmostFull178
  L_end__dsPIC33_CAN_InterruptFlagRXBufferOverflow
  L__dsPIC33_CAN_InterruptFlagRXBufferOverflow180
  L__dsPIC33_CAN_InterruptFlagRXBufferOverflow181
  L__dsPIC33_CAN_InterruptFlagRXBufferOverflow182
  L_end__dsPIC33_CAN_InterruptFlagRXBuffer
  L__dsPIC33_CAN_InterruptFlagRXBuffer184
  L__dsPIC33_CAN_InterruptFlagRXBuffer185
  L__dsPIC33_CAN_InterruptFlagRXBuffer186
  L_end__dsPIC33_CAN_InterruptFlagTXBuffer
  L__dsPIC33_CAN_InterruptFlagTXBuffer188
  L__dsPIC33_CAN_InterruptFlagTXBuffer189
  L__dsPIC33_CAN_InterruptFlagTXBuffer190
  L_end__dsPIC33_CAN_InvalidMessageInterrupt
  L__dsPIC33_CAN_InvalidMessageInterrupt192
  L__dsPIC33_CAN_InvalidMessageInterrupt193
  L__dsPIC33_CAN_InvalidMessageInterrupt194
  L_end__dsPIC33_CAN_BusWakeUpInterrupt
  L__dsPIC33_CAN_BusWakeUpInterrupt196
  L__dsPIC33_CAN_BusWakeUpInterrupt197
  L__dsPIC33_CAN_BusWakeUpInterrupt198
  L_end__dsPIC33_CAN_ErrorInterrupt
  L__dsPIC33_CAN_ErrorInterrupt200
  L__dsPIC33_CAN_ErrorInterrupt201
  L__dsPIC33_CAN_ErrorInterrupt202
  L_end__dsPIC33_CAN_FIFO_AlmostFullInterrupt
  L__dsPIC33_CAN_FIFO_AlmostFullInterrupt204
  L__dsPIC33_CAN_FIFO_AlmostFullInterrupt205
  L__dsPIC33_CAN_FIFO_AlmostFullInterrupt206
  L_end__dsPIC33_CAN_RXBufferOverflowInterrupt
  L__dsPIC33_CAN_RXBufferOverflowInterrupt208
  L__dsPIC33_CAN_RXBufferOverflowInterrupt209
  L__dsPIC33_CAN_RXBufferOverflowInterrupt210
  L_end__dsPIC33_CAN_RXBufferInterrupt
  L__dsPIC33_CAN_RXBufferInterrupt212
  L__dsPIC33_CAN_RXBufferInterrupt213
  L__dsPIC33_CAN_RXBufferInterrupt214
  L_end__dsPIC33_CAN_TXBufferInterrupt
  L__dsPIC33_CAN_TXBufferInterrupt216
  L__dsPIC33_CAN_TXBufferInterrupt217
  L__dsPIC33_CAN_TXBufferInterrupt218
  L_end__dsPIC33_CAN_SetBufferSize
  L__dsPIC33_CAN_SetBufferSize220
  L__dsPIC33_CAN_SetBufferSize221
  L__dsPIC33_CAN_SetBufferSize222
  L__dsPIC33_CAN_SetBufferSize223
  L__dsPIC33_CAN_SetBufferSize224
  L__dsPIC33_CAN_SetBufferSize225
  L__dsPIC33_CAN_SetBufferSize226
  L__dsPIC33_CAN_SetBufferSize227
  L__dsPIC33_CAN_SetBufferSize228
  L__dsPIC33_CAN_SetBufferSize229
  L__dsPIC33_CAN_SetBufferSize230
  L__dsPIC33_CAN_SetBufferSize231
  L__dsPIC33_CAN_SetBufferSize232
  L__dsPIC33_CAN_SetBufferSize233
  L__dsPIC33_CAN_SetBufferSize234
  L__dsPIC33_CAN_SetBufferSize235
  L__dsPIC33_CAN_SetBufferSize236
  L__dsPIC33_CAN_SetBufferSize237
  L__dsPIC33_CAN_SetBufferSize238
  L_end__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement240
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement241
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement242
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement243
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement244
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement245
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement246
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement247
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement248
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement249
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement250
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement251
  L_end__dsPIC33_CAN_HardwareFIFO_SetFilter
  L_end__dsPIC33_CAN_HardwareFIFO_SetStartBuffer
  L_end__dsPIC33_CAN_HardwareFIFO_GetCurrentBuffer
  L_end__dsPIC33_CAN_HardwareFIFO_GetNextBuffer
  L_end__dsPIC33_CAN_RegisterBufferWithFilter
  L_end__dsPIC33_CAN_AssociateFilterWithMask
  L__dsPIC33_CAN_AssociateFilterWithMask258
  L__dsPIC33_CAN_AssociateFilterWithMask259
  L__dsPIC33_CAN_AssociateFilterWithMask260
  L_end__dsPIC33_CAN_SetFilter
  L__dsPIC33_CAN_SetFilter262
  L__dsPIC33_CAN_SetFilter263
  L__dsPIC33_CAN_SetFilter264
  L_end__dsPIC33_CAN_SetMask
  L__dsPIC33_CAN_SetMask266
  L__dsPIC33_CAN_SetMask267
  L__dsPIC33_CAN_SetMask268
  L_end__dsPIC33_CAN_EnableDisableRXFilters
  L_end__dsPIC33_CAN_SetBaud
  L__dsPIC33_CAN_SetBaud271
  L__dsPIC33_CAN_SetBaud272
  L__dsPIC33_CAN_SetBaud273
  L_end__dsPIC33_CAN_EnterConfigMode
  L__dsPIC33_CAN_EnterConfigMode275
  L__dsPIC33_CAN_EnterConfigMode276
  L__dsPIC33_CAN_EnterConfigMode277
  L__dsPIC33_CAN_EnterConfigMode278
  L__dsPIC33_CAN_EnterConfigMode279
  L_end__dsPIC33_CAN_EnterNormalMode
  L__dsPIC33_CAN_EnterNormalMode281
  L__dsPIC33_CAN_EnterNormalMode282
  L__dsPIC33_CAN_EnterNormalMode283
  L__dsPIC33_CAN_EnterNormalMode284
  L__dsPIC33_CAN_EnterNormalMode285
  L_end__dsPIC33_CAN_AbortPendingTransmissions
  L_dsPIC33_CAN_StartTransmission287
  L_dsPIC33_CAN_ReadRXBit288
  L_end_StartTransmission
  dsPIC33_CAN_StartTransmission
  L_dsPIC33_CAN_StartTransmission290
  L_end_StartCANHighPriorityMessageEngine
  _StartCANHighPriorityMessageEngine
  L__StartCANHighPriorityMessageEngine292
  L_end_StartCANMessageEngine
  _StartCANMessageEngine
  L__StartCANMessageEngine294
  L_end_dsPIC33_CAN_GlobalInterruptCAN_Event
  _dsPIC33_CAN_GlobalInterruptCAN_Event
  L__dsPIC33_CAN_GlobalInterruptCAN_Event296
  L_end_Interrupt_CAN_Event
  dsPIC33_CAN_Interrupt_CAN_Event
  L_dsPIC33_CAN_Interrupt_CAN_Event298
  L_dsPIC33_CAN_Interrupt_CAN_Event299
  L_dsPIC33_CAN_Interrupt_CAN_Event300
  L_dsPIC33_CAN_Interrupt_CAN_Event301
  L_dsPIC33_CAN_Interrupt_CAN_Event302
  L_dsPIC33_CAN_Interrupt_CAN_Event303
  L_dsPIC33_CAN_Interrupt_CAN_Event304
  L_dsPIC33_CAN_Interrupt_CAN_Event305
  L_dsPIC33_CAN_Interrupt_CAN_Event306
  L_dsPIC33_CAN_Interrupt_CAN_Event307
  L_dsPIC33_CAN_Interrupt_CAN_Event308
  L_dsPIC33_CAN_Interrupt_CAN_Event309
  L_dsPIC33_CAN_Interrupt_CAN_Event310
  L_end_dsPIC33_CAN_Initialize
  _dsPIC33_CAN_Initialize
  L__dsPIC33_CAN_Initialize312
  L__dsPIC33_CAN_Initialize313
  L_end_dsPIC33_DMA_Style_Buffer
  dsPIC33_CAN_dsPIC33_DMA_Style_Buffer
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer315
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer316
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer317
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer318
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer319
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer320
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer321
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer322
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer323
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer324
  L_end_LockCANInterrupt
  _LockCANInterrupt
  L__LockCANInterrupt326
  L_end_UnLockCANInterrupt
  _UnLockCANInterrupt
  L__UnLockCANInterrupt328
  L_end_SetWindowSelectBit
  dsPIC33_CAN_SetWindowSelectBit
  L_end_ClearWindowSelectBit
  dsPIC33_CAN_ClearWindowSelectBit
  L_end_SetFilterMaskBits
  dsPIC33_CAN_SetFilterMaskBits
  L_dsPIC33_CAN_SetFilterMaskBits332
  L_dsPIC33_CAN_SetFilterMaskBits333
  L_dsPIC33_CAN_SetFilterMaskBits334
  L_end_ValidateCAN_ID
  dsPIC33_CAN_ValidateCAN_ID
  L_end_ManipulateTXBit
  dsPIC33_CAN_ManipulateTXBit
  L_dsPIC33_CAN_ManipulateTXBit337
  L_end_ReadTXBit
  dsPIC33_CAN_ReadTXBit
  L_dsPIC33_CAN_ReadTXBit339
  L_dsPIC33_CAN_ReadTXBit340
  L_end_ReadRXBit
  dsPIC33_CAN_ReadRXBit
  L_dsPIC33_CAN_ReadRXBit342
  L_dsPIC33_CAN_ReadRXBit343
  L_dsPIC33_CAN_ReadRXBit344
  L_dsPIC33_CAN_ReadRXBit345
  L_end_dsPIC33_CAN_TX_Aborted
  _dsPIC33_CAN_TX_Aborted
  L_end_dsPIC33_CAN_TX_Requested
  _dsPIC33_CAN_TX_Requested
  L_end_dsPIC33_CAN_TX_ArbitrationLost
  _dsPIC33_CAN_TX_ArbitrationLost
  L_end_dsPIC33_CAN_TX_ErrorDetected
  _dsPIC33_CAN_TX_ErrorDetected
  L_end_dsPIC33_CAN_SetBufferAsTransmitter
  _dsPIC33_CAN_SetBufferAsTransmitter
  L_end_dsPIC33_CAN_SetTransmitterPriority
  _dsPIC33_CAN_SetTransmitterPriority
  L_end_dsPIC33_CAN_RequestTransmit
  _dsPIC33_CAN_RequestTransmit
  L_end_dsPIC33_CAN_ClearTransmit
  _dsPIC33_CAN_ClearTransmit
  L_end_dsPIC33_CAN_RX_Full
  _dsPIC33_CAN_RX_Full
  L_end_dsPIC33_CAN_RX_Overflow
  _dsPIC33_CAN_RX_Overflow
  L_end_dsPIC33_CAN_InterruptCodeWithFilterHit
  _dsPIC33_CAN_InterruptCodeWithFilterHit
  L_end_dsPIC33_CAN_GlobalInterruptCAN_RX_Ready
  _dsPIC33_CAN_GlobalInterruptCAN_RX_Ready
  L__dsPIC33_CAN_GlobalInterruptCAN_RX_Ready358
  L_end_dsPIC33_CAN_GlobalInterruptCAN_TX_Request
  _dsPIC33_CAN_GlobalInterruptCAN_TX_Request
  L__dsPIC33_CAN_GlobalInterruptCAN_TX_Request360
  L_end_dsPIC33_CAN_GlobalInterruptFlagCAN_Event
  _dsPIC33_CAN_GlobalInterruptFlagCAN_Event
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event362
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event363
  L_end_dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready
  _dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready365
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready366
  L_end_dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request
  _dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request368
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request369
  L_end_dsPIC33_CAN_GlobalInterruptCAN_EventPriority
  _dsPIC33_CAN_GlobalInterruptCAN_EventPriority
  L_end_dsPIC33_CAN_GlobalInterruptCAN_RX_ReadyPriority
  _dsPIC33_CAN_GlobalInterruptCAN_RX_ReadyPriority
  L_end_dsPIC33_CAN_GlobalInterruptCAN_TX_RequestPriority
  _dsPIC33_CAN_GlobalInterruptCAN_TX_RequestPriority
  L_end_dsPIC33_CAN_InterruptCode
  _dsPIC33_CAN_InterruptCode
  L_end_dsPIC33_CAN_InterruptFlagTXInErrorStateBusOff
  _dsPIC33_CAN_InterruptFlagTXInErrorStateBusOff
  L__dsPIC33_CAN_InterruptFlagTXInErrorStateBusOff375
  L_end_dsPIC33_CAN_InterruptFlagTXInErrorStateBusPassive
  _dsPIC33_CAN_InterruptFlagTXInErrorStateBusPassive
  L__dsPIC33_CAN_InterruptFlagTXInErrorStateBusPassive377
  L_end_dsPIC33_CAN_InterruptFlagRXInErrorBusPassive
  _dsPIC33_CAN_InterruptFlagRXInErrorBusPassive
  L__dsPIC33_CAN_InterruptFlagRXInErrorBusPassive379
  L_end_dsPIC33_CAN_InterruptFlagTXInErrorStateWarning
  _dsPIC33_CAN_InterruptFlagTXInErrorStateWarning
  L__dsPIC33_CAN_InterruptFlagTXInErrorStateWarning381
  L_end_dsPIC33_CAN_InterruptFlagRXInErrorStateWarning
  _dsPIC33_CAN_InterruptFlagRXInErrorStateWarning
  L__dsPIC33_CAN_InterruptFlagRXInErrorStateWarning383
  L_end_dsPIC33_CAN_InterruptFlagTXOrRXInErrorStateWarning
  _dsPIC33_CAN_InterruptFlagTXOrRXInErrorStateWarning
  L__dsPIC33_CAN_InterruptFlagTXOrRXInErrorStateWarning385
  L_end_dsPIC33_CAN_InterruptFlagInvalidMessage
  _dsPIC33_CAN_InterruptFlagInvalidMessage
  L__dsPIC33_CAN_InterruptFlagInvalidMessage387
  L__dsPIC33_CAN_InterruptFlagInvalidMessage388
  L_end_dsPIC33_CAN_InterruptFlagBusWakeupActivity
  _dsPIC33_CAN_InterruptFlagBusWakeupActivity
  L__dsPIC33_CAN_InterruptFlagBusWakeupActivity390
  L__dsPIC33_CAN_InterruptFlagBusWakeupActivity391
  L_end_dsPIC33_CAN_InterruptFlagError
  _dsPIC33_CAN_InterruptFlagError
  L__dsPIC33_CAN_InterruptFlagError393
  L__dsPIC33_CAN_InterruptFlagError394
  L_end_dsPIC33_CAN_InterruptFlagFIFO_AlmostFull
  _dsPIC33_CAN_InterruptFlagFIFO_AlmostFull
  L__dsPIC33_CAN_InterruptFlagFIFO_AlmostFull396
  L__dsPIC33_CAN_InterruptFlagFIFO_AlmostFull397
  L_end_dsPIC33_CAN_InterruptFlagRXBufferOverflow
  _dsPIC33_CAN_InterruptFlagRXBufferOverflow
  L__dsPIC33_CAN_InterruptFlagRXBufferOverflow399
  L__dsPIC33_CAN_InterruptFlagRXBufferOverflow400
  L_end_dsPIC33_CAN_InterruptFlagRXBuffer
  _dsPIC33_CAN_InterruptFlagRXBuffer
  L__dsPIC33_CAN_InterruptFlagRXBuffer402
  L__dsPIC33_CAN_InterruptFlagRXBuffer403
  L_end_dsPIC33_CAN_InterruptFlagTXBuffer
  _dsPIC33_CAN_InterruptFlagTXBuffer
  L__dsPIC33_CAN_InterruptFlagTXBuffer405
  L__dsPIC33_CAN_InterruptFlagTXBuffer406
  L_end_dsPIC33_CAN_InvalidMessageInterrupt
  _dsPIC33_CAN_InvalidMessageInterrupt
  L__dsPIC33_CAN_InvalidMessageInterrupt408
  L_end_dsPIC33_CAN_BusWakeUpInterrupt
  _dsPIC33_CAN_BusWakeUpInterrupt
  L__dsPIC33_CAN_BusWakeUpInterrupt410
  L_end_dsPIC33_CAN_ErrorInterrupt
  _dsPIC33_CAN_ErrorInterrupt
  L__dsPIC33_CAN_ErrorInterrupt412
  L_end_dsPIC33_CAN_FIFO_AlmostFullInterrupt
  _dsPIC33_CAN_FIFO_AlmostFullInterrupt
  L__dsPIC33_CAN_FIFO_AlmostFullInterrupt414
  L_end_dsPIC33_CAN_RXBufferOverflowInterrupt
  _dsPIC33_CAN_RXBufferOverflowInterrupt
  L__dsPIC33_CAN_RXBufferOverflowInterrupt416
  L_end_dsPIC33_CAN_RXBufferInterrupt
  _dsPIC33_CAN_RXBufferInterrupt
  L__dsPIC33_CAN_RXBufferInterrupt418
  L_end_dsPIC33_CAN_TXBufferInterrupt
  _dsPIC33_CAN_TXBufferInterrupt
  L__dsPIC33_CAN_TXBufferInterrupt420
  L_end_dsPIC33_CAN_SetBufferSize
  _dsPIC33_CAN_SetBufferSize
  L__dsPIC33_CAN_SetBufferSize422
  L__dsPIC33_CAN_SetBufferSize423
  L__dsPIC33_CAN_SetBufferSize424
  L__dsPIC33_CAN_SetBufferSize425
  L__dsPIC33_CAN_SetBufferSize426
  L__dsPIC33_CAN_SetBufferSize427
  L_end_dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement
  _dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement429
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement430
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement431
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement432
  L_end_dsPIC33_CAN_HardwareFIFO_SetFilter
  _dsPIC33_CAN_HardwareFIFO_SetFilter
  L_end_dsPIC33_CAN_HardwareFIFO_SetStartBuffer
  _dsPIC33_CAN_HardwareFIFO_SetStartBuffer
  L_end_dsPIC33_CAN_HardwareFIFO_GetCurrentBuffer
  _dsPIC33_CAN_HardwareFIFO_GetCurrentBuffer
  L_end_dsPIC33_CAN_HardwareFIFO_GetNextBuffer
  _dsPIC33_CAN_HardwareFIFO_GetNextBuffer
  L_end_dsPIC33_CAN_RegisterBufferWithFilter
  _dsPIC33_CAN_RegisterBufferWithFilter
  L_end_dsPIC33_CAN_AssociateFilterWithMask
  _dsPIC33_CAN_AssociateFilterWithMask
  L__dsPIC33_CAN_AssociateFilterWithMask439
  L__dsPIC33_CAN_AssociateFilterWithMask440
  L__dsPIC33_CAN_AssociateFilterWithMask441
  L__dsPIC33_CAN_AssociateFilterWithMask442
  L__dsPIC33_CAN_AssociateFilterWithMask443
  L__dsPIC33_CAN_AssociateFilterWithMask444
  L__dsPIC33_CAN_AssociateFilterWithMask445
  L_end_dsPIC33_CAN_SetFilter
  _dsPIC33_CAN_SetFilter
  L__dsPIC33_CAN_SetFilter447
  L_end_dsPIC33_CAN_SetMask
  _dsPIC33_CAN_SetMask
  L__dsPIC33_CAN_SetMask449
  L_end_dsPIC33_CAN_EnableDisableRXFilters
  _dsPIC33_CAN_EnableDisableRXFilters
  L_end_dsPIC33_CAN_SetBaud
  _dsPIC33_CAN_SetBaud
  L__dsPIC33_CAN_SetBaud452
  L_end_dsPIC33_CAN_EnterConfigMode
  _dsPIC33_CAN_EnterConfigMode
  L__dsPIC33_CAN_EnterConfigMode454
  L_end_dsPIC33_CAN_EnterNormalMode
  _dsPIC33_CAN_EnterNormalMode
  L__dsPIC33_CAN_EnterNormalMode456
  L_end_dsPIC33_CAN_AbortPendingTransmissions
  _dsPIC33_CAN_AbortPendingTransmissions
  L_end_dsPIC33_DMA_MapToChannelReg
  L_end__dsPIC33_DMA_Enable
  L__dsPIC33_DMA_Enable2
  L__dsPIC33_DMA_Enable3
  L__dsPIC33_DMA_Enable4
  L_end__dsPIC33_DMA_DataSize
  L__dsPIC33_DMA_DataSize6
  L__dsPIC33_DMA_DataSize7
  L__dsPIC33_DMA_DataSize8
  L_end__dsPIC33_DMA_Direction
  L__dsPIC33_DMA_Direction10
  L__dsPIC33_DMA_Direction11
  L__dsPIC33_DMA_Direction12
  L_end__dsPIC33_DMA_HalfBlockTransferInterrupt
  L__dsPIC33_DMA_HalfBlockTransferInterrupt14
  L__dsPIC33_DMA_HalfBlockTransferInterrupt15
  L__dsPIC33_DMA_HalfBlockTransferInterrupt16
  L_end__dsPIC33_DMA_NullWrite
  L__dsPIC33_DMA_NullWrite18
  L__dsPIC33_DMA_NullWrite19
  L__dsPIC33_DMA_NullWrite20
  L_end__dsPIC33_DMA_AddressMode
  L_end__dsPIC33_DMA_OperatingMode
  L_end__dsPIC33_DMA_InterruptSelect
  L_end__dsPIC33_DMA_ManualDMATransfer
  L__dsPIC33_DMA_ManualDMATransfer25
  L__dsPIC33_DMA_ManualDMATransfer26
  L__dsPIC33_DMA_ManualDMATransfer27
  L_end__dsPIC33_DMA_AddressOffsetA
  L_end__dsPIC33_DMA_AddressOffsetB
  L_end__dsPIC33_DMA_PeripheralAddress
  L_end__dsPIC33_DMA_TransferCount
  L_end__dsPIC33_DMA_MostRecentRAM_Address
  L_end__dsPIC33_DMA_PeripheralWriteCollisionDetected
  L__dsPIC33_DMA_PeripheralWriteCollisionDetected34
  L_end__dsPIC33_DMA_DSPRAMWriteCollisionDetected
  L__dsPIC33_DMA_DSPRAMWriteCollisionDetected36
  L_end__dsPIC33_DMA_CurrentPingPongRegister
  L__dsPIC33_DMA_CurrentPingPongRegister38
  L__dsPIC33_DMA_CurrentPingPongRegister39
  L__dsPIC33_DMA_CurrentPingPongRegister40
  L__dsPIC33_DMA_CurrentPingPongRegister41
  L_end__dsPIC33_DMA_LastActiveChannel
  L_end_MapToChannelReg
  dsPIC33_DMA_MapToChannelReg
  L_end_dsPIC33_DMA_Enable
  _dsPIC33_DMA_Enable
  L__dsPIC33_DMA_Enable45
  L_end_dsPIC33_DMA_DataSize
  _dsPIC33_DMA_DataSize
  L__dsPIC33_DMA_DataSize47
  L_end_dsPIC33_DMA_Direction
  _dsPIC33_DMA_Direction
  L__dsPIC33_DMA_Direction49
  L_end_dsPIC33_DMA_HalfBlockTransferInterrupt
  _dsPIC33_DMA_HalfBlockTransferInterrupt
  L__dsPIC33_DMA_HalfBlockTransferInterrupt51
  L_end_dsPIC33_DMA_NullWrite
  _dsPIC33_DMA_NullWrite
  L__dsPIC33_DMA_NullWrite53
  L_end_dsPIC33_DMA_AddressMode
  _dsPIC33_DMA_AddressMode
  L_end_dsPIC33_DMA_OperatingMode
  _dsPIC33_DMA_OperatingMode
  L_end_dsPIC33_DMA_InterruptSelect
  _dsPIC33_DMA_InterruptSelect
  L_end_dsPIC33_DMA_ManualDMATransfer
  _dsPIC33_DMA_ManualDMATransfer
  L__dsPIC33_DMA_ManualDMATransfer58
  L_end_dsPIC33_DMA_AddressOffsetA
  _dsPIC33_DMA_AddressOffsetA
  L_end_dsPIC33_DMA_AddressOffsetB
  _dsPIC33_DMA_AddressOffsetB
  L_end_dsPIC33_DMA_PeripheralAddress
  _dsPIC33_DMA_PeripheralAddress
  L_end_dsPIC33_DMA_TransferCount
  _dsPIC33_DMA_TransferCount
  L_end_dsPIC33_DMA_MostRecentRAM_Address
  _dsPIC33_DMA_MostRecentRAM_Address
  L_end_dsPIC33_DMA_PeripheralWriteCollisionDetected
  _dsPIC33_DMA_PeripheralWriteCollisionDetected
  L__dsPIC33_DMA_PeripheralWriteCollisionDetected65
  L__dsPIC33_DMA_PeripheralWriteCollisionDetected66
  L_end_dsPIC33_DMA_DSPRAMWriteCollisionDetected
  _dsPIC33_DMA_DSPRAMWriteCollisionDetected
  L__dsPIC33_DMA_DSPRAMWriteCollisionDetected68
  L__dsPIC33_DMA_DSPRAMWriteCollisionDetected69
  L_end_dsPIC33_DMA_CurrentPingPongRegister
  _dsPIC33_DMA_CurrentPingPongRegister
  L__dsPIC33_DMA_CurrentPingPongRegister71
  L__dsPIC33_DMA_CurrentPingPongRegister72
  L_end_dsPIC33_DMA_LastActiveChannel
  _dsPIC33_DMA_LastActiveChannel
  L_end__Float16ToInt
  L__Float16ToInt1
  L__Float16ToInt2
  L__Float16ToInt3
  L_end__HalfToFloat
  L__HalfToFloat5
  L__HalfToFloat6
  L__HalfToFloat7
  L__HalfToFloat8
  L__HalfToFloat9
  L__HalfToFloat10
  L__HalfToFloat11
  L__HalfToFloat12
  L__HalfToFloat13
  L__HalfToFloat14
  L__HalfToFloat15
  L__HalfToFloat16
  L__HalfToFloat17
  L__HalfToFloat18
  L__HalfToFloat19
  L__HalfToFloat20
  L__HalfToFloat21
  L_end__FloatToHalf
  L__FloatToHalf23
  L__FloatToHalf24
  L__FloatToHalf25
  L__FloatToHalf26
  L__FloatToHalf27
  L__FloatToHalf28
  L__FloatToHalf29
  L__FloatToHalf30
  L__FloatToHalf31
  L__FloatToHalf32
  L__FloatToHalf33
  L__FloatToHalf34
  L__FloatToHalf35
  L__FloatToHalf36
  L__FloatToHalf37
  L__FloatToHalf38
  L__FloatToHalf39
  L__FloatToHalf40
  L__FloatToHalf41
  L__FloatToHalf42
  L__FloatToHalf43
  L__FloatToHalf44
  L__FloatToHalf45
  L__FloatToHalf46
  L__FloatToHalf47
  L__FloatToHalf48
  L__FloatToHalf49
  L__FloatToHalf50
  L__FloatToHalf51
  L__FloatToHalf52
  L_end_Float16_Float16ToFloat
  L_Float16_Float16ToFloat54
  L_Float16_Float16ToFloat55
  L_Float16_Float16ToFloat56
  L_Float16_Float16ToFloat57
  L_Float16_Float16ToFloat58
  L_Float16_Float16ToFloat59
  L_Float16_Float16ToFloat60
  L_Float16_Float16ToFloat61
  L_Float16_Float16ToFloat62
  L_Float16_Float16ToFloat63
  L_Float16_Float16ToFloat64
  L_Float16_Float16ToFloat65
  L_Float16_Float16ToFloat66
  L_Float16_Float16ToFloat67
  L_Float16_Float16ToFloat68
  L_Float16_Float16ToFloat69
  L_Float16_Float16ToFloat70
  L_end_Float16_FloatToFloat16
  L_Float16_FloatToFloat1672
  L_Float16_FloatToFloat1673
  L_Float16_FloatToFloat1674
  L_Float16_FloatToFloat1675
  L_Float16_FloatToFloat1676
  L_Float16_FloatToFloat1677
  L_Float16_FloatToFloat1678
  L_Float16_FloatToFloat1679
  L_Float16_FloatToFloat1680
  L_Float16_FloatToFloat1681
  L_Float16_FloatToFloat1682
  L_Float16_FloatToFloat1683
  L_Float16_FloatToFloat1684
  L_Float16_FloatToFloat1685
  L_Float16_FloatToFloat1686
  L_Float16_FloatToFloat1687
  L_Float16_FloatToFloat1688
  L_Float16_FloatToFloat1689
  L_Float16_FloatToFloat1690
  L_Float16_FloatToFloat1691
  L_Float16_FloatToFloat1692
  L_Float16_FloatToFloat1693
  L_Float16_FloatToFloat1694
  L_Float16_FloatToFloat1695
  L_Float16_FloatToFloat1696
  L_Float16_FloatToFloat1697
  L_Float16_FloatToFloat1698
  L_Float16_FloatToFloat1699
  L_Float16_FloatToFloat16100
  L_Float16_FloatToFloat16101
  L__FloatToHalf102
  L__FloatToHalf103
  L_Float16_FloatToFloat16104
  L_Float16_FloatToFloat16105
  L_end_Float16ToInt
  _Float16ToInt
  L__Float16ToInt107
  L_end_HalfToFloat
  _HalfToFloat
  L__HalfToFloat109
  L__HalfToFloat110
  L__HalfToFloat111
  L__HalfToFloat112
  L__HalfToFloat113
  L__HalfToFloat114
  L__HalfToFloat115
  L__HalfToFloat116
  L__HalfToFloat117
  L__HalfToFloat118
  L__HalfToFloat119
  L__HalfToFloat120
  L__HalfToFloat121
  L__HalfToFloat122
  L__HalfToFloat123
  L__HalfToFloat124
  L__HalfToFloat125
  L__HalfToFloat126
  L__HalfToFloat127
  L__HalfToFloat128
  L__HalfToFloat129
  L__HalfToFloat130
  L__HalfToFloat131
  L__HalfToFloat132
  L__HalfToFloat133
  L__HalfToFloat134
  L__HalfToFloat135
  L__HalfToFloat136
  L__HalfToFloat137
  L__HalfToFloat138
  L__HalfToFloat139
  L__HalfToFloat140
  L__HalfToFloat141
  L_end_FloatToHalf
  _FloatToHalf
  L__FloatToHalf143
  L__FloatToHalf144
  L__FloatToHalf145
  L__FloatToHalf146
  L__FloatToHalf147
  L__FloatToHalf148
  L__FloatToHalf149
  L__FloatToHalf150
  L__FloatToHalf151
  L__FloatToHalf152
  L__FloatToHalf153
  L__FloatToHalf154
  L__FloatToHalf155
  L__FloatToHalf156
  L__FloatToHalf157
  L__FloatToHalf158
  L__FloatToHalf159
  L__FloatToHalf160
  L__FloatToHalf161
  L__FloatToHalf162
  L__FloatToHalf163
  L__FloatToHalf164
  L__FloatToHalf165
  L__FloatToHalf166
  L__FloatToHalf167
  L__FloatToHalf168
  L_end_Float16ToFloat
  Float16_Float16ToFloat
  L_Float16_Float16ToFloat170
  L_Float16_Float16ToFloat171
  L_Float16_Float16ToFloat172
  L_Float16_Float16ToFloat173
  L_Float16_Float16ToFloat174
  L_Float16_Float16ToFloat175
  L_Float16_Float16ToFloat176
  L_Float16_Float16ToFloat177
  L_Float16_Float16ToFloat178
  L_Float16_Float16ToFloat179
  L_Float16_Float16ToFloat180
  L_Float16_Float16ToFloat181
  L_Float16_Float16ToFloat182
  L_Float16_Float16ToFloat183
  L_Float16_Float16ToFloat184
  L_Float16_Float16ToFloat185
  L_Float16_Float16ToFloat186
  L_Float16_Float16ToFloat187
  L_Float16_Float16ToFloat188
  L_Float16_Float16ToFloat189
  L_Float16_Float16ToFloat190
  L_Float16_Float16ToFloat191
  L_Float16_Float16ToFloat192
  L_Float16_Float16ToFloat193
  L_Float16_Float16ToFloat194
  L_Float16_Float16ToFloat195
  L_Float16_Float16ToFloat196
  L_Float16_Float16ToFloat197
  L_Float16_Float16ToFloat198
  L_Float16_Float16ToFloat199
  L_Float16_Float16ToFloat200
  L_Float16_Float16ToFloat201
  L_Float16_Float16ToFloat202
  L_end_FloatToFloat16
  Float16_FloatToFloat16
  L_Float16_FloatToFloat16204
  L_Float16_FloatToFloat16205
  L_Float16_FloatToFloat16206
  L_Float16_FloatToFloat16207
  L_Float16_FloatToFloat16208
  L_Float16_FloatToFloat16209
  L_Float16_FloatToFloat16210
  L_Float16_FloatToFloat16211
  L_Float16_FloatToFloat16212
  L_Float16_FloatToFloat16213
  L_Float16_FloatToFloat16214
  L_Float16_FloatToFloat16215
  L_Float16_FloatToFloat16216
  L_Float16_FloatToFloat16217
  L_Float16_FloatToFloat16218
  L_Float16_FloatToFloat16219
  L_Float16_FloatToFloat16220
  L_Float16_FloatToFloat16221
  L_Float16_FloatToFloat16222
  L_Float16_FloatToFloat16223
  L_Float16_FloatToFloat16224
  L_Float16_FloatToFloat16225
  L_Float16_FloatToFloat16226
  L_Float16_FloatToFloat16227
  L_Float16_FloatToFloat16228
  L_Float16_FloatToFloat16229
  L_end__MCU_Setup_Initialize
  L__MCU_Setup_Initialize1
  L__MCU_Setup_Initialize2
  L__MCU_Setup_Initialize3
  L__MCU_Setup_Initialize4
  L__MCU_Setup_Initialize5
  L__MCU_Setup_Initialize6
  L__MCU_Setup_Initialize7
  L__MCU_Setup_Initialize8
  L__MCU_Setup_Initialize9
  L__MCU_Setup_Initialize10
  L__MCU_Setup_Initialize11
  L__MCU_Setup_Initialize13
  L_end_MCU_Setup_Initialize
  _MCU_Setup_Initialize
  L_end__GetProxyData
  L__GetProxyData1
  L__GetProxyData2
  L__GetProxyData3
  L_end__AppCallback_ConfigurationWrite
  L__AppCallback_ConfigurationWrite5
  L__AppCallback_ConfigurationWrite6
  L__AppCallback_ConfigurationWrite7
  L__AppCallback_ConfigurationWrite8
  L__AppCallback_ConfigurationWrite9
  L__AppCallback_ConfigurationWrite10
  L_end__AppCallback_ConfigurationRead
  L__AppCallback_ConfigurationRead13
  L__AppCallback_ConfigurationRead14
  L__AppCallback_ConfigurationRead15
  L__AppCallback_ConfigurationRead16
  L__AppCallback_ConfigurationRead17
  L__AppCallback_ConfigurationRead18
  L_end__AppCallback_ConfigurationSize
  L_end__AppCallback_AssignConfigurationAddress
  L_end__AppCallback_AssignRAMAddress
  L_end__NMRAnetAppCallbacks_Initialize
  L__NMRAnetAppCallbacks_Initialize24
  L__NMRAnetAppCallbacks_Initialize25
  L__NMRAnetAppCallbacks_Initialize26
  L__NMRAnetAppCallbacks_Initialize27
  L__NMRAnetAppCallbacks_Initialize28
  L_end__AppCallback_NodeAllocate
  L_end_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags31
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags32
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags33
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags34
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags35
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags36
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags37
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags38
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags39
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags40
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags41
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags42
  L_end_NMRAnetAppCallbacks_SetProxyNodeProducerFlags
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags44
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags45
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags46
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags47
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags48
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags49
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags50
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags51
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags52
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags53
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags54
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags55
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags56
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags57
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags58
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags59
  L_end__AppCallback_ProducerIdentify
  L__AppCallback_ProducerIdentify61
  L__AppCallback_ProducerIdentify62
  L__AppCallback_ProducerIdentify63
  L__AppCallback_ProducerIdentify64
  L__AppCallback_ProducerIdentify65
  L__AppCallback_ProducerIdentify66
  L__AppCallback_ProducerIdentify67
  L__AppCallback_ProducerIdentify68
  L__AppCallback_ProducerIdentify69
  L__AppCallback_ProducerIdentify70
  L__AppCallback_ProducerIdentify71
  L__AppCallback_ProducerIdentify72
  L__AppCallback_ProducerIdentify73
  L__AppCallback_ProducerIdentify74
  L_end__AppCallback_ConsumerIdentify
  L_end__AppCallback_EventsIdentify
  L__AppCallback_EventsIdentify77
  L__AppCallback_EventsIdentify78
  L__AppCallback_EventsIdentify79
  L__AppCallback_EventsIdentify80
  L__AppCallback_EventsIdentify81
  L__AppCallback_EventsIdentify82
  L__AppCallback_EventsIdentify83
  L__AppCallback_EventsIdentify84
  L__AppCallback_EventsIdentify85
  L__AppCallback_EventsIdentify86
  L__AppCallback_EventsIdentify87
  L__AppCallback_EventsIdentify88
  L__AppCallback_EventsIdentify89
  L_end__AppCallback_EventsIdentifyByDest
  L__AppCallback_EventsIdentifyByDest91
  L__AppCallback_EventsIdentifyByDest92
  L__AppCallback_EventsIdentifyByDest93
  L__AppCallback_EventsIdentifyByDest94
  L__AppCallback_EventsIdentifyByDest95
  L__AppCallback_EventsIdentifyByDest96
  L__AppCallback_EventsIdentifyByDest97
  L__AppCallback_EventsIdentifyByDest98
  L_end__AppCallback_TractionControl
  L__AppCallback_TractionControl100
  L__AppCallback_TractionControl101
  L__AppCallback_TractionControl102
  L__AppCallback_TractionControl103
  L__AppCallback_TractionControl104
  L__AppCallback_TractionControl105
  L__AppCallback_TractionControl106
  L__AppCallback_TractionControl107
  L__AppCallback_TractionControl108
  L__AppCallback_TractionControl109
  L__AppCallback_TractionControl110
  L__AppCallback_TractionControl111
  L__AppCallback_TractionControl112
  L__AppCallback_TractionControl113
  L__AppCallback_TractionControl114
  L__AppCallback_TractionControl115
  L__AppCallback_TractionControl116
  L__AppCallback_TractionControl117
  L__AppCallback_TractionControl118
  L__AppCallback_TractionControl119
  L__AppCallback_TractionControl120
  L__AppCallback_TractionControl121
  L__AppCallback_TractionControl122
  L__AppCallback_TractionControl123
  L__AppCallback_TractionControl124
  L__AppCallback_TractionControl125
  L__AppCallback_TractionControl126
  L__AppCallback_TractionControl127
  L__AppCallback_TractionControl128
  L__AppCallback_TractionControl129
  L__AppCallback_TractionControl130
  L__AppCallback_TractionControl131
  L__AppCallback_TractionControl132
  L__AppCallback_TractionControl133
  L__AppCallback_TractionControl134
  L__AppCallback_TractionControl135
  L__AppCallback_TractionControl136
  L__AppCallback_TractionControl137
  L__AppCallback_TractionControl138
  L__AppCallback_TractionControl139
  L__AppCallback_TractionControl140
  L__AppCallback_TractionControl141
  L__AppCallback_TractionControl142
  L__AppCallback_TractionControl143
  L__AppCallback_TractionControl144
  L__AppCallback_TractionControl145
  L__AppCallback_TractionControl146
  L__AppCallback_TractionControl147
  L__AppCallback_TractionControl148
  L__AppCallback_TractionControl149
  L__AppCallback_TractionControl150
  L__AppCallback_TractionControl151
  L__AppCallback_TractionControl152
  L__AppCallback_TractionControl153
  L__AppCallback_TractionControl154
  L__AppCallback_TractionControl155
  L__AppCallback_TractionControl156
  L__AppCallback_TractionControl157
  L__AppCallback_TractionControl158
  L__AppCallback_TractionControl159
  L__AppCallback_TractionControl160
  L__AppCallback_TractionControl161
  L__AppCallback_TractionControl162
  L__AppCallback_TractionControl163
  L__AppCallback_TractionControl164
  L__AppCallback_TractionControl165
  L__AppCallback_TractionControl166
  L__AppCallback_TractionControl167
  L__AppCallback_TractionControl168
  L__AppCallback_TractionControl169
  L__AppCallback_TractionControl170
  L_end__AppCallback_StateMachine
  L__AppCallback_StateMachine172
  L__AppCallback_StateMachine173
  L__AppCallback_StateMachine174
  L__AppCallback_StateMachine175
  L__AppCallback_StateMachine176
  L__AppCallback_StateMachine177
  L__GetProxyData178
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags179
  L_end_GetProxyData
  _GetProxyData
  L__GetProxyData181
  L_end_AppCallback_ConfigurationWrite
  _AppCallback_ConfigurationWrite
  L__AppCallback_ConfigurationWrite183
  L_end_AppCallback_ConfigurationRead
  _AppCallback_ConfigurationRead
  L__AppCallback_ConfigurationRead185
  L_end_AppCallback_ConfigurationSize
  _AppCallback_ConfigurationSize
  L_end_AppCallback_AssignConfigurationAddress
  _AppCallback_AssignConfigurationAddress
  L__AppCallback_AssignConfigurationAddress188
  L__AppCallback_AssignConfigurationAddress189
  L_end_AppCallback_AssignRAMAddress
  _AppCallback_AssignRAMAddress
  L_end_NMRAnetAppCallbacks_Initialize
  _NMRAnetAppCallbacks_Initialize
  L__NMRAnetAppCallbacks_Initialize192
  L_end_AppCallback_NodeAllocate
  _AppCallback_NodeAllocate
  L_end_SetProxyNodeDccAddressFlags
  NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags195
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags196
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags197
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags198
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags199
  L_NMRAnetAppCallbacks_SetProxyNodeDccAddressFlags200
  L_end_SetProxyNodeProducerFlags
  NMRAnetAppCallbacks_SetProxyNodeProducerFlags
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags202
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags203
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags204
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags205
  L_NMRAnetAppCallbacks_SetProxyNodeProducerFlags206
  L_end_AppCallback_ProducerIdentify
  _AppCallback_ProducerIdentify
  L__AppCallback_ProducerIdentify208
  L__AppCallback_ProducerIdentify209
  L__AppCallback_ProducerIdentify210
  L__AppCallback_ProducerIdentify211
  L__AppCallback_ProducerIdentify212
  L_end_AppCallback_ConsumerIdentify
  _AppCallback_ConsumerIdentify
  L_end_AppCallback_EventsIdentify
  _AppCallback_EventsIdentify
  L__AppCallback_EventsIdentify215
  L__AppCallback_EventsIdentify216
  L__AppCallback_EventsIdentify217
  L__AppCallback_EventsIdentify218
  L_end_AppCallback_EventsIdentifyByDest
  _AppCallback_EventsIdentifyByDest
  L__AppCallback_EventsIdentifyByDest220
  L__AppCallback_EventsIdentifyByDest221
  L_end_AppCallback_TractionControl
  _AppCallback_TractionControl
  L__AppCallback_TractionControl223
  L__AppCallback_TractionControl224
  L__AppCallback_TractionControl225
  L__AppCallback_TractionControl226
  L__AppCallback_TractionControl227
  L__AppCallback_TractionControl228
  L__AppCallback_TractionControl229
  L__AppCallback_TractionControl230
  L__AppCallback_TractionControl231
  L__AppCallback_TractionControl232
  L__AppCallback_TractionControl233
  L__AppCallback_TractionControl234
  L__AppCallback_TractionControl235
  L__AppCallback_TractionControl236
  L__AppCallback_TractionControl237
  L__AppCallback_TractionControl238
  L__AppCallback_TractionControl239
  L__AppCallback_TractionControl240
  L__AppCallback_TractionControl241
  L__AppCallback_TractionControl242
  L__AppCallback_TractionControl243
  L__AppCallback_TractionControl244
  L__AppCallback_TractionControl245
  L__AppCallback_TractionControl246
  L__AppCallback_TractionControl247
  L__AppCallback_TractionControl248
  L__AppCallback_TractionControl249
  L__AppCallback_TractionControl250
  L__AppCallback_TractionControl251
  L__AppCallback_TractionControl252
  L__AppCallback_TractionControl253
  L__AppCallback_TractionControl254
  L_end_AppCallback_StateMachine
  _AppCallback_StateMachine
  L__AppCallback_StateMachine256
  L__AppCallback_StateMachine257
  L_end__NMRAnetBufferPools_100ms_TimeTick
  L__NMRAnetBufferPools_100ms_TimeTick1
  L__NMRAnetBufferPools_100ms_TimeTick2
  L__NMRAnetBufferPools_100ms_TimeTick3
  L__NMRAnetBufferPools_100ms_TimeTick4
  L__NMRAnetBufferPools_100ms_TimeTick5
  L__NMRAnetBufferPools_100ms_TimeTick6
  L__NMRAnetBufferPools_100ms_TimeTick7
  L__NMRAnetBufferPools_100ms_TimeTick8
  L__NMRAnetBufferPools_100ms_TimeTick9
  L__NMRAnetBufferPools_100ms_TimeTick10
  L__NMRAnetBufferPools_100ms_TimeTick11
  L_end__NMRAnetBufferPools_InitializeBaseBuffer
  L_end__NMRAnetBufferPools_Initialize
  L__NMRAnetBufferPools_Initialize14
  L__NMRAnetBufferPools_Initialize15
  L__NMRAnetBufferPools_Initialize16
  L__NMRAnetBufferPools_Initialize17
  L__NMRAnetBufferPools_Initialize18
  L__NMRAnetBufferPools_Initialize19
  L__NMRAnetBufferPools_Initialize20
  L__NMRAnetBufferPools_Initialize21
  L__NMRAnetBufferPools_Initialize22
  L__NMRAnetBufferPools_Initialize23
  L_end__NMRAnetBufferPools_AllocateBaseBuffer
  L__NMRAnetBufferPools_AllocateBaseBuffer25
  L__NMRAnetBufferPools_AllocateBaseBuffer26
  L__NMRAnetBufferPools_AllocateBaseBuffer27
  L__NMRAnetBufferPools_AllocateBaseBuffer28
  L__NMRAnetBufferPools_AllocateBaseBuffer29
  L__NMRAnetBufferPools_AllocateBaseBuffer30
  L__NMRAnetBufferPools_AllocateBaseBuffer31
  L__NMRAnetBufferPools_AllocateBaseBuffer32
  L__NMRAnetBufferPools_AllocateBaseBuffer33
  L__NMRAnetBufferPools_AllocateBaseBuffer34
  L__NMRAnetBufferPools_AllocateBaseBuffer35
  L_end__NMRAnetBufferPools_ReleaseBaseBuffer
  L__NMRAnetBufferPools_ReleaseBaseBuffer37
  L__NMRAnetBufferPools_ReleaseBaseBuffer38
  L__NMRAnetBufferPools_ReleaseBaseBuffer39
  L_end__NMRAnetBufferPools_AllocateDatagramBuffer
  L__NMRAnetBufferPools_AllocateDatagramBuffer41
  L__NMRAnetBufferPools_AllocateDatagramBuffer42
  L__NMRAnetBufferPools_AllocateDatagramBuffer43
  L__NMRAnetBufferPools_AllocateDatagramBuffer44
  L__NMRAnetBufferPools_AllocateDatagramBuffer45
  L__NMRAnetBufferPools_AllocateDatagramBuffer46
  L__NMRAnetBufferPools_AllocateDatagramBuffer47
  L__NMRAnetBufferPools_AllocateDatagramBuffer48
  L__NMRAnetBufferPools_AllocateDatagramBuffer49
  L__NMRAnetBufferPools_AllocateDatagramBuffer50
  L__NMRAnetBufferPools_AllocateDatagramBuffer51
  L__NMRAnetBufferPools_AllocateDatagramBuffer52
  L__NMRAnetBufferPools_AllocateDatagramBuffer53
  L__NMRAnetBufferPools_AllocateDatagramBuffer54
  L_end__NMRAnetBufferPools_ReleaseDatagramBuffer
  L__NMRAnetBufferPools_ReleaseDatagramBuffer56
  L__NMRAnetBufferPools_ReleaseDatagramBuffer57
  L__NMRAnetBufferPools_ReleaseDatagramBuffer58
  L__NMRAnetBufferPools_AllocateBaseBuffer59
  L__NMRAnetBufferPools_AllocateDatagramBuffer60
  L_end_NMRAnetBufferPools_100ms_TimeTick
  _NMRAnetBufferPools_100ms_TimeTick
  L__NMRAnetBufferPools_100ms_TimeTick62
  L__NMRAnetBufferPools_100ms_TimeTick63
  L__NMRAnetBufferPools_100ms_TimeTick64
  L__NMRAnetBufferPools_100ms_TimeTick65
  L_end_NMRAnetBufferPools_InitializeBaseBuffer
  _NMRAnetBufferPools_InitializeBaseBuffer
  L_end_NMRAnetBufferPools_Initialize
  _NMRAnetBufferPools_Initialize
  L__NMRAnetBufferPools_Initialize68
  L__NMRAnetBufferPools_Initialize69
  L_end_NMRAnetBufferPools_AllocateBaseBuffer
  _NMRAnetBufferPools_AllocateBaseBuffer
  L__NMRAnetBufferPools_AllocateBaseBuffer71
  L__NMRAnetBufferPools_AllocateBaseBuffer72
  L__NMRAnetBufferPools_AllocateBaseBuffer73
  L_end_NMRAnetBufferPools_ReleaseBaseBuffer
  _NMRAnetBufferPools_ReleaseBaseBuffer
  L__NMRAnetBufferPools_ReleaseBaseBuffer75
  L_end_NMRAnetBufferPools_AllocateDatagramBuffer
  _NMRAnetBufferPools_AllocateDatagramBuffer
  L__NMRAnetBufferPools_AllocateDatagramBuffer77
  L__NMRAnetBufferPools_AllocateDatagramBuffer78
  L__NMRAnetBufferPools_AllocateDatagramBuffer79
  L__NMRAnetBufferPools_AllocateDatagramBuffer80
  L_end_NMRAnetBufferPools_ReleaseDatagramBuffer
  _NMRAnetBufferPools_ReleaseDatagramBuffer
  L__NMRAnetBufferPools_ReleaseDatagramBuffer82
  L_end__NMRAnetCANReceive_Initialize
  L_end__NMRAnetCANReceive_SetCANLayerReceiveHook
  L_end__NMRAnetCANReceive_SetNMRANetLayerReceiveHook
  L_end__ReceivedOnFilter0
  L__ReceivedOnFilter04
  L__ReceivedOnFilter05
  L__ReceivedOnFilter06
  L__ReceivedOnFilter07
  L__ReceivedOnFilter08
  L__ReceivedOnFilter09
  L__ReceivedOnFilter010
  L__ReceivedOnFilter011
  L__ReceivedOnFilter012
  L__ReceivedOnFilter013
  L__ReceivedOnFilter014
  L__ReceivedOnFilter015
  L__ReceivedOnFilter016
  L__ReceivedOnFilter017
  L__ReceivedOnFilter018
  L__ReceivedOnFilter019
  L__ReceivedOnFilter020
  L__ReceivedOnFilter021
  L__ReceivedOnFilter022
  L__ReceivedOnFilter023
  L__ReceivedOnFilter024
  L__ReceivedOnFilter025
  L__ReceivedOnFilter026
  L__ReceivedOnFilter027
  L__ReceivedOnFilter028
  L__ReceivedOnFilter029
  L__ReceivedOnFilter030
  L__ReceivedOnFilter031
  L__ReceivedOnFilter032
  L__ReceivedOnFilter033
  L__ReceivedOnFilter034
  L__ReceivedOnFilter035
  L__ReceivedOnFilter036
  L__ReceivedOnFilter037
  L__ReceivedOnFilter038
  L__ReceivedOnFilter039
  L__ReceivedOnFilter040
  L__ReceivedOnFilter041
  L__ReceivedOnFilter042
  L__ReceivedOnFilter043
  L__ReceivedOnFilter044
  L__ReceivedOnFilter045
  L__ReceivedOnFilter046
  L__ReceivedOnFilter047
  L__ReceivedOnFilter048
  L__ReceivedOnFilter049
  L__ReceivedOnFilter050
  L__ReceivedOnFilter051
  L__ReceivedOnFilter052
  L__ReceivedOnFilter053
  L__ReceivedOnFilter054
  L__ReceivedOnFilter055
  L__ReceivedOnFilter056
  L__ReceivedOnFilter057
  L__ReceivedOnFilter058
  L__ReceivedOnFilter059
  L_end__ReceivedOnFilter1
  L__ReceivedOnFilter161
  L__ReceivedOnFilter162
  L__ReceivedOnFilter163
  L__ReceivedOnFilter164
  L__ReceivedOnFilter165
  L__ReceivedOnFilter166
  L__ReceivedOnFilter167
  L__ReceivedOnFilter168
  L__ReceivedOnFilter169
  L__ReceivedOnFilter170
  L__ReceivedOnFilter171
  L__ReceivedOnFilter172
  L__ReceivedOnFilter173
  L__ReceivedOnFilter174
  L__ReceivedOnFilter175
  L__ReceivedOnFilter176
  L__ReceivedOnFilter177
  L__ReceivedOnFilter178
  L__ReceivedOnFilter179
  L__ReceivedOnFilter180
  L__ReceivedOnFilter181
  L__ReceivedOnFilter182
  L__ReceivedOnFilter183
  L__ReceivedOnFilter184
  L__ReceivedOnFilter185
  L__ReceivedOnFilter186
  L__ReceivedOnFilter187
  L__ReceivedOnFilter188
  L__ReceivedOnFilter189
  L__ReceivedOnFilter190
  L__ReceivedOnFilter191
  L__ReceivedOnFilter192
  L__ReceivedOnFilter193
  L__ReceivedOnFilter194
  L__ReceivedOnFilter195
  L__ReceivedOnFilter196
  L__ReceivedOnFilter197
  L__ReceivedOnFilter198
  L__ReceivedOnFilter199
  L__ReceivedOnFilter1100
  L__ReceivedOnFilter1101
  L__ReceivedOnFilter1102
  L__ReceivedOnFilter1103
  L__ReceivedOnFilter1104
  L__ReceivedOnFilter1105
  L__ReceivedOnFilter1106
  L__ReceivedOnFilter1107
  L__ReceivedOnFilter1108
  L__ReceivedOnFilter1109
  L__ReceivedOnFilter1110
  L__ReceivedOnFilter1111
  L__ReceivedOnFilter1112
  L__ReceivedOnFilter1113
  L__ReceivedOnFilter1114
  L__ReceivedOnFilter1115
  L__ReceivedOnFilter1116
  L__ReceivedOnFilter1117
  L__ReceivedOnFilter1118
  L__ReceivedOnFilter1119
  L__ReceivedOnFilter1120
  L__ReceivedOnFilter1121
  L__ReceivedOnFilter1122
  L__ReceivedOnFilter1123
  L__ReceivedOnFilter1124
  L__ReceivedOnFilter1125
  L__ReceivedOnFilter1126
  L__ReceivedOnFilter1127
  L__ReceivedOnFilter1128
  L__ReceivedOnFilter1129
  L__ReceivedOnFilter1130
  L__ReceivedOnFilter1131
  L__ReceivedOnFilter1132
  L__ReceivedOnFilter1133
  L__ReceivedOnFilter1134
  L__ReceivedOnFilter1135
  L__ReceivedOnFilter1136
  L__ReceivedOnFilter1137
  L__ReceivedOnFilter1138
  L__ReceivedOnFilter1139
  L__ReceivedOnFilter1140
  L__ReceivedOnFilter1141
  L__ReceivedOnFilter1142
  L__ReceivedOnFilter1143
  L__ReceivedOnFilter1144
  L__ReceivedOnFilter1145
  L__ReceivedOnFilter1146
  L__ReceivedOnFilter1147
  L__ReceivedOnFilter1148
  L__ReceivedOnFilter1149
  L__ReceivedOnFilter1150
  L__ReceivedOnFilter1151
  L__ReceivedOnFilter1152
  L__ReceivedOnFilter1153
  L__ReceivedOnFilter1154
  L__ReceivedOnFilter1155
  L__ReceivedOnFilter1156
  L__ReceivedOnFilter1157
  L__ReceivedOnFilter1158
  L__ReceivedOnFilter1159
  L__ReceivedOnFilter1160
  L__ReceivedOnFilter1161
  L__ReceivedOnFilter1162
  L__ReceivedOnFilter1163
  L__ReceivedOnFilter1164
  L__ReceivedOnFilter1165
  L__ReceivedOnFilter1166
  L__ReceivedOnFilter1167
  L__ReceivedOnFilter1168
  L__ReceivedOnFilter1169
  L__ReceivedOnFilter1170
  L__ReceivedOnFilter1171
  L__ReceivedOnFilter1172
  L__ReceivedOnFilter1173
  L__ReceivedOnFilter1174
  L__ReceivedOnFilter1175
  L__ReceivedOnFilter1176
  L__ReceivedOnFilter1177
  L__ReceivedOnFilter1178
  L__ReceivedOnFilter1179
  L__ReceivedOnFilter1180
  L__ReceivedOnFilter1181
  L__ReceivedOnFilter1182
  L__ReceivedOnFilter1183
  L__ReceivedOnFilter1184
  L__ReceivedOnFilter1185
  L__ReceivedOnFilter1186
  L__ReceivedOnFilter1187
  L__ReceivedOnFilter1188
  L__ReceivedOnFilter1189
  L__ReceivedOnFilter1190
  L__ReceivedOnFilter1191
  L__ReceivedOnFilter1192
  L__ReceivedOnFilter1193
  L__ReceivedOnFilter1194
  L__ReceivedOnFilter1195
  L__ReceivedOnFilter1196
  L__ReceivedOnFilter1197
  L__ReceivedOnFilter1198
  L__ReceivedOnFilter1199
  L__ReceivedOnFilter1200
  L__ReceivedOnFilter1201
  L__ReceivedOnFilter1202
  L__ReceivedOnFilter1203
  L__ReceivedOnFilter1204
  L__ReceivedOnFilter1205
  L__ReceivedOnFilter1206
  L__ReceivedOnFilter1207
  L__ReceivedOnFilter1208
  L__ReceivedOnFilter1209
  L__ReceivedOnFilter1210
  L__ReceivedOnFilter1211
  L__ReceivedOnFilter1212
  L__ReceivedOnFilter1213
  L__ReceivedOnFilter1214
  L__ReceivedOnFilter1215
  L__ReceivedOnFilter1216
  L__ReceivedOnFilter1217
  L__ReceivedOnFilter1218
  L__ReceivedOnFilter1219
  L__ReceivedOnFilter1220
  L__ReceivedOnFilter1221
  L__ReceivedOnFilter1222
  L__ReceivedOnFilter1223
  L__ReceivedOnFilter1224
  L__ReceivedOnFilter1225
  L__ReceivedOnFilter1226
  L__ReceivedOnFilter1227
  L__ReceivedOnFilter1228
  L__ReceivedOnFilter1229
  L__ReceivedOnFilter1230
  L__ReceivedOnFilter1231
  L__ReceivedOnFilter1232
  L__ReceivedOnFilter1233
  L__ReceivedOnFilter1234
  L__ReceivedOnFilter1235
  L__ReceivedOnFilter1236
  L__ReceivedOnFilter1237
  L__ReceivedOnFilter1238
  L__ReceivedOnFilter1239
  L__ReceivedOnFilter1240
  L__ReceivedOnFilter1241
  L__ReceivedOnFilter1242
  L__ReceivedOnFilter1243
  L__ReceivedOnFilter1244
  L__ReceivedOnFilter1245
  L__ReceivedOnFilter1246
  L__ReceivedOnFilter1247
  L__ReceivedOnFilter1248
  L__ReceivedOnFilter1249
  L__ReceivedOnFilter1250
  L__ReceivedOnFilter1251
  L__ReceivedOnFilter1252
  L__ReceivedOnFilter1253
  L__ReceivedOnFilter1254
  L__ReceivedOnFilter1255
  L__ReceivedOnFilter1256
  L__ReceivedOnFilter1257
  L__ReceivedOnFilter1258
  L__ReceivedOnFilter1259
  L__ReceivedOnFilter1260
  L__ReceivedOnFilter1261
  L__ReceivedOnFilter1262
  L__ReceivedOnFilter1263
  L__ReceivedOnFilter1264
  L__ReceivedOnFilter1265
  L__ReceivedOnFilter1266
  L__ReceivedOnFilter1267
  L__ReceivedOnFilter1268
  L__ReceivedOnFilter1269
  L__ReceivedOnFilter1270
  L__ReceivedOnFilter1271
  L__ReceivedOnFilter1272
  L__ReceivedOnFilter1273
  L__ReceivedOnFilter1274
  L__ReceivedOnFilter1275
  L__ReceivedOnFilter1276
  L__ReceivedOnFilter1277
  L__ReceivedOnFilter1278
  L__ReceivedOnFilter1279
  L__ReceivedOnFilter1280
  L__ReceivedOnFilter1281
  L__ReceivedOnFilter1282
  L__ReceivedOnFilter1283
  L_end__ReceivedOnFilter2
  L_end__ReceivedOnFilter3
  L_end__ReceivedOnFilter4
  L_end__ReceivedOnFilter5
  L_end__ReceivedOnFilter6
  L__ReceivedOnFilter1289
  L_end_NMRAnetCANReceive_Initialize
  _NMRAnetCANReceive_Initialize
  L_end_NMRAnetCANReceive_SetCANLayerReceiveHook
  _NMRAnetCANReceive_SetCANLayerReceiveHook
  L_end_NMRAnetCANReceive_SetNMRANetLayerReceiveHook
  _NMRAnetCANReceive_SetNMRANetLayerReceiveHook
  L_end_ReceivedOnFilter0
  _ReceivedOnFilter0
  L__ReceivedOnFilter0294
  L__ReceivedOnFilter0295
  L__ReceivedOnFilter0296
  L__ReceivedOnFilter0297
  L__ReceivedOnFilter0298
  L__ReceivedOnFilter0299
  L__ReceivedOnFilter0300
  L__ReceivedOnFilter0301
  L__ReceivedOnFilter0302
  L__ReceivedOnFilter0303
  L__ReceivedOnFilter0304
  L__ReceivedOnFilter0305
  L__ReceivedOnFilter0306
  L__ReceivedOnFilter0307
  L__ReceivedOnFilter0308
  L__ReceivedOnFilter0309
  L__ReceivedOnFilter0310
  L__ReceivedOnFilter0311
  L__ReceivedOnFilter0312
  L__ReceivedOnFilter0313
  L__ReceivedOnFilter0314
  L__ReceivedOnFilter0315
  L__ReceivedOnFilter0316
  L_end_ReceivedOnFilter1
  _ReceivedOnFilter1
  L__ReceivedOnFilter1318
  L__ReceivedOnFilter1319
  L__ReceivedOnFilter1320
  L__ReceivedOnFilter1321
  L__ReceivedOnFilter1322
  L__ReceivedOnFilter1323
  L__ReceivedOnFilter1324
  L__ReceivedOnFilter1325
  L__ReceivedOnFilter1326
  L__ReceivedOnFilter1327
  L__ReceivedOnFilter1328
  L__ReceivedOnFilter1329
  L__ReceivedOnFilter1330
  L__ReceivedOnFilter1331
  L__ReceivedOnFilter1332
  L__ReceivedOnFilter1333
  L__ReceivedOnFilter1334
  L__ReceivedOnFilter1335
  L__ReceivedOnFilter1336
  L__ReceivedOnFilter1337
  L__ReceivedOnFilter1338
  L__ReceivedOnFilter1339
  L__ReceivedOnFilter1340
  L__ReceivedOnFilter1341
  L__ReceivedOnFilter1342
  L__ReceivedOnFilter1343
  L__ReceivedOnFilter1344
  L__ReceivedOnFilter1345
  L__ReceivedOnFilter1346
  L__ReceivedOnFilter1347
  L__ReceivedOnFilter1348
  L__ReceivedOnFilter1349
  L__ReceivedOnFilter1350
  L__ReceivedOnFilter1351
  L__ReceivedOnFilter1352
  L__ReceivedOnFilter1353
  L__ReceivedOnFilter1354
  L__ReceivedOnFilter1355
  L__ReceivedOnFilter1356
  L__ReceivedOnFilter1357
  L__ReceivedOnFilter1358
  L__ReceivedOnFilter1359
  L__ReceivedOnFilter1360
  L__ReceivedOnFilter1361
  L__ReceivedOnFilter1362
  L__ReceivedOnFilter1363
  L__ReceivedOnFilter1364
  L__ReceivedOnFilter1365
  L__ReceivedOnFilter1366
  L__ReceivedOnFilter1367
  L__ReceivedOnFilter1368
  L__ReceivedOnFilter1369
  L__ReceivedOnFilter1370
  L__ReceivedOnFilter1371
  L__ReceivedOnFilter1372
  L__ReceivedOnFilter1373
  L__ReceivedOnFilter1374
  L__ReceivedOnFilter1375
  L__ReceivedOnFilter1376
  L__ReceivedOnFilter1377
  L__ReceivedOnFilter1378
  L__ReceivedOnFilter1379
  L__ReceivedOnFilter1380
  L__ReceivedOnFilter1381
  L__ReceivedOnFilter1382
  L__ReceivedOnFilter1383
  L__ReceivedOnFilter1384
  L__ReceivedOnFilter1385
  L__ReceivedOnFilter1386
  L__ReceivedOnFilter1387
  L__ReceivedOnFilter1388
  L__ReceivedOnFilter1389
  L__ReceivedOnFilter1390
  L__ReceivedOnFilter1391
  L__ReceivedOnFilter1392
  L__ReceivedOnFilter1393
  L__ReceivedOnFilter1394
  L__ReceivedOnFilter1395
  L__ReceivedOnFilter1396
  L_end_ReceivedOnFilter2
  _ReceivedOnFilter2
  L_end_ReceivedOnFilter3
  _ReceivedOnFilter3
  L_end_ReceivedOnFilter4
  _ReceivedOnFilter4
  L_end_ReceivedOnFilter5
  _ReceivedOnFilter5
  L_end_ReceivedOnFilter6
  _ReceivedOnFilter6
  L_end__NMRAnetDatagrams_InitializeDatagramBuffer
  L__NMRAnetDatagrams_InitializeDatagramBuffer1
  L__NMRAnetDatagrams_InitializeDatagramBuffer2
  L__NMRAnetDatagrams_InitializeDatagramBuffer3
  L__NMRAnetDatagrams_InitializeDatagramBuffer4
  L__NMRAnetDatagrams_InitializeDatagramBuffer5
  L__NMRAnetDatagrams_InitializeDatagramBuffer6
  L__NMRAnetDatagrams_InitializeDatagramBuffer7
  L__NMRAnetDatagrams_InitializeDatagramBuffer8
  L_end__NMRAnetDatagrams_Initialize
  L_end__NMRAnetDatagrams_SetCallback
  L_end_NMRAnetDatagrams_InitializeDatagramBuffer
  _NMRAnetDatagrams_InitializeDatagramBuffer
  L__NMRAnetDatagrams_InitializeDatagramBuffer12
  L__NMRAnetDatagrams_InitializeDatagramBuffer13
  L_end_NMRAnetDatagrams_Initialize
  _NMRAnetDatagrams_Initialize
  L_end_NMRAnetDatagrams_SetCallback
  _NMRAnetDatagrams_SetCallback
  L_end__NMRA_DCC_Initialize
  L_end_NMRAnetDCC_InitializeBuffer
  L_NMRAnetDCC_InitializeBuffer2
  L_NMRAnetDCC_InitializeBuffer3
  L_NMRAnetDCC_InitializeBuffer4
  L_NMRAnetDCC_InitializeBuffer5
  L_NMRAnetDCC_InitializeBuffer6
  L_NMRAnetDCC_InitializeBuffer7
  L_NMRAnetDCC_InitializeBuffer8
  L_NMRAnetDCC_InitializeBuffer9
  L_NMRAnetDCC_InitializeBuffer10
  L_NMRAnetDCC_InitializeBuffer11
  L_end__NMRA_DCC_Packet_Init
  L__NMRA_DCC_Packet_Init13
  L__NMRA_DCC_Packet_Init14
  L__NMRA_DCC_Packet_Init15
  L__NMRA_DCC_Packet_Init16
  L__NMRA_DCC_Packet_Init17
  L__NMRA_DCC_Packet_Init18
  L__NMRA_DCC_Packet_Init19
  L__NMRA_DCC_Packet_Init20
  L__NMRA_DCC_Packet_Init21
  L__NMRA_DCC_Packet_Init22
  L_end__NMRA_DCC_56us_TimeTick
  L__NMRA_DCC_56us_TimeTick24
  L__NMRA_DCC_56us_TimeTick25
  L__NMRA_DCC_56us_TimeTick26
  L_end_NMRAnetDCC_NMRA_DCC_ResetTransmitter
  L_end_NMRAnetDCC_NMRA_DCCClassifyAddress
  L_NMRAnetDCC_NMRA_DCCClassifyAddress29
  L_NMRAnetDCC_NMRA_DCCClassifyAddress30
  L_NMRAnetDCC_NMRA_DCCClassifyAddress31
  L_NMRAnetDCC_NMRA_DCCClassifyAddress32
  L_NMRAnetDCC_NMRA_DCCClassifyAddress33
  L_NMRAnetDCC_NMRA_DCCClassifyAddress34
  L_NMRAnetDCC_NMRA_DCCClassifyAddress35
  L_NMRAnetDCC_NMRA_DCCClassifyAddress36
  L_NMRAnetDCC_NMRA_DCCClassifyAddress37
  L_NMRAnetDCC_NMRA_DCCClassifyAddress38
  L_NMRAnetDCC_NMRA_DCCClassifyAddress39
  L_NMRAnetDCC_NMRA_DCCClassifyAddress40
  L_end__NMRA_DCC_LoadPacket
  L_end__NMRA_DCC_QueuePacket
  L__NMRA_DCC_QueuePacket43
  L__NMRA_DCC_QueuePacket44
  L__NMRA_DCC_QueuePacket45
  L__NMRA_DCC_QueuePacket46
  L__NMRA_DCC_QueuePacket47
  L__NMRA_DCC_QueuePacket48
  L__NMRA_DCC_QueuePacket49
  L__NMRA_DCC_QueuePacket50
  L__NMRA_DCC_QueuePacket51
  L__NMRA_DCC_QueuePacket52
  L__NMRA_DCC_QueuePacket53
  L__NMRA_DCC_QueuePacket54
  L__NMRA_DCC_QueuePacket55
  L__NMRA_DCC_QueuePacket56
  L__NMRA_DCC_QueuePacket57
  L__NMRA_DCC_QueuePacket58
  L__NMRA_DCC_QueuePacket59
  L__NMRA_DCC_QueuePacket60
  L__NMRA_DCC_QueuePacket61
  L__NMRA_DCC_QueuePacket62
  L__NMRA_DCC_QueuePacket63
  L_end_NMRAnetDCC_NMRA_DCC_LoadIdlePacketIntoTransmitter
  L_end_NMRAnetDCC_NMRA_DCC_LoadResetPacketIntoTransmitter
  L_end_NMRAnetDCC_CanTransmitMessage
  L_NMRAnetDCC_CanTransmitMessage67
  L_NMRAnetDCC_CanTransmitMessage68
  L_NMRAnetDCC_CanTransmitMessage69
  L_NMRAnetDCC_CanTransmitMessage70
  L_NMRAnetDCC_CanTransmitMessage71
  L_NMRAnetDCC_CanTransmitMessage72
  L_NMRAnetDCC_CanTransmitMessage73
  L_NMRAnetDCC_CanTransmitMessage74
  L_NMRAnetDCC_CanTransmitMessage75
  L_NMRAnetDCC_CanTransmitMessage76
  L_NMRAnetDCC_CanTransmitMessage77
  L_NMRAnetDCC_CanTransmitMessage78
  L_NMRAnetDCC_CanTransmitMessage79
  L_NMRAnetDCC_CanTransmitMessage80
  L_NMRAnetDCC_CanTransmitMessage81
  L_NMRAnetDCC_CanTransmitMessage82
  L_NMRAnetDCC_CanTransmitMessage83
  L_NMRAnetDCC_CanTransmitMessage84
  L_NMRAnetDCC_CanTransmitMessage85
  L_NMRAnetDCC_CanTransmitMessage86
  L_NMRAnetDCC_CanTransmitMessage87
  L_NMRAnetDCC_CanTransmitMessage88
  L_NMRAnetDCC_CanTransmitMessage89
  L_NMRAnetDCC_CanTransmitMessage90
  L_NMRAnetDCC_CanTransmitMessage91
  L_NMRAnetDCC_CanTransmitMessage92
  L_NMRAnetDCC_CanTransmitMessage93
  L_end__NMRA_DCC_LoadPacketIntoTransmitterStateMachine
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine95
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine96
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine97
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine98
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine99
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine100
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine101
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine102
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine103
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine104
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine105
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine106
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine107
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine108
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine109
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine110
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine111
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine112
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine113
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine114
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine115
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine116
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine117
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine118
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine119
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine120
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine121
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine122
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine123
  L_end_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble125
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble126
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble127
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble128
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble129
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble130
  L_end_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte132
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte133
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte134
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte135
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte136
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte137
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte138
  L_end_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStartBit
  L_end_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte141
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte142
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte143
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte144
  L_end_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStopBit
  L_end__NMRA_DCC_TransmitterStateMachine
  L__NMRA_DCC_TransmitterStateMachine147
  L__NMRA_DCC_TransmitterStateMachine148
  L__NMRA_DCC_TransmitterStateMachine149
  L__NMRA_DCC_TransmitterStateMachine150
  L__NMRA_DCC_TransmitterStateMachine151
  L__NMRA_DCC_TransmitterStateMachine152
  L__NMRA_DCC_TransmitterStateMachine153
  L__NMRA_DCC_TransmitterStateMachine154
  L__NMRA_DCC_TransmitterStateMachine155
  L__NMRA_DCC_TransmitterStateMachine156
  L__NMRA_DCC_TransmitterStateMachine157
  L__NMRA_DCC_TransmitterStateMachine158
  L__NMRA_DCC_TransmitterStateMachine159
  L__NMRA_DCC_TransmitterStateMachine160
  L__NMRA_DCC_TransmitterStateMachine161
  L__NMRA_DCC_TransmitterStateMachine162
  L__NMRA_DCC_TransmitterStateMachine163
  L__NMRA_DCC_TransmitterStateMachine164
  L__NMRA_DCC_TransmitterStateMachine165
  L__NMRA_DCC_TransmitterStateMachine166
  L__NMRA_DCC_TransmitterStateMachine167
  L__NMRA_DCC_TransmitterStateMachine168
  L__NMRA_DCC_TransmitterStateMachine169
  L__NMRA_DCC_TransmitterStateMachine170
  L__NMRA_DCC_TransmitterStateMachine171
  L__NMRA_DCC_TransmitterStateMachine172
  L__NMRA_DCC_TransmitterStateMachine173
  L__NMRA_DCC_TransmitterStateMachine174
  L__NMRA_DCC_TransmitterStateMachine175
  L__NMRA_DCC_TransmitterStateMachine176
  L__NMRA_DCC_TransmitterStateMachine177
  L__NMRA_DCC_TransmitterStateMachine178
  L__NMRA_DCC_TransmitterStateMachine179
  L__NMRA_DCC_TransmitterStateMachine180
  L__NMRA_DCC_TransmitterStateMachine181
  L__NMRA_DCC_TransmitterStateMachine182
  L__NMRA_DCC_TransmitterStateMachine183
  L__NMRA_DCC_TransmitterStateMachine184
  L__NMRA_DCC_TransmitterStateMachine185
  L__NMRA_DCC_TransmitterStateMachine186
  L__NMRA_DCC_TransmitterStateMachine187
  L__NMRA_DCC_TransmitterStateMachine188
  L__NMRA_DCC_TransmitterStateMachine189
  L__NMRA_DCC_TransmitterStateMachine190
  L__NMRA_DCC_TransmitterStateMachine191
  L__NMRA_DCC_TransmitterStateMachine192
  L__NMRA_DCC_TransmitterStateMachine193
  L__NMRA_DCC_TransmitterStateMachine194
  L__NMRA_DCC_TransmitterStateMachine195
  L__NMRA_DCC_TransmitterStateMachine196
  L__NMRA_DCC_TransmitterStateMachine197
  L__NMRA_DCC_TransmitterStateMachine198
  L__NMRA_DCC_TransmitterStateMachine199
  L__NMRA_DCC_TransmitterStateMachine200
  L__NMRA_DCC_TransmitterStateMachine201
  L__NMRA_DCC_TransmitterStateMachine202
  L__NMRA_DCC_TransmitterStateMachine203
  L__NMRA_DCC_TransmitterStateMachine204
  L__NMRA_DCC_TransmitterStateMachine205
  L__NMRA_DCC_TransmitterStateMachine206
  L__NMRA_DCC_TransmitterStateMachine207
  L__NMRA_DCC_TransmitterStateMachine208
  L__NMRA_DCC_TransmitterStateMachine209
  L__NMRA_DCC_TransmitterStateMachine210
  L__NMRA_DCC_TransmitterStateMachine211
  L__NMRA_DCC_QueuePacket212
  L__NMRA_DCC_QueuePacket213
  L__NMRA_DCC_QueuePacket214
  L__NMRA_DCC_QueuePacket215
  L__NMRA_DCC_Packet_Init216
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine217
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine218
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine219
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine220
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine221
  L_end_NMRA_DCC_Initialize
  _NMRA_DCC_Initialize
  L_end_InitializeBuffer
  NMRAnetDCC_InitializeBuffer
  L_NMRAnetDCC_InitializeBuffer224
  L_NMRAnetDCC_InitializeBuffer225
  L_NMRAnetDCC_InitializeBuffer226
  L_NMRAnetDCC_InitializeBuffer227
  L_end_NMRA_DCC_Packet_Init
  _NMRA_DCC_Packet_Init
  L__NMRA_DCC_Packet_Init229
  L__NMRA_DCC_Packet_Init230
  L_end_NMRA_DCC_56us_TimeTick
  _NMRA_DCC_56us_TimeTick
  L__NMRA_DCC_56us_TimeTick232
  L_end_NMRA_DCC_ResetTransmitter
  NMRAnetDCC_NMRA_DCC_ResetTransmitter
  L_end_NMRA_DCCClassifyAddress
  NMRAnetDCC_NMRA_DCCClassifyAddress
  L_NMRAnetDCC_NMRA_DCCClassifyAddress235
  L_NMRAnetDCC_NMRA_DCCClassifyAddress236
  L_NMRAnetDCC_NMRA_DCCClassifyAddress237
  L_NMRAnetDCC_NMRA_DCCClassifyAddress238
  L_NMRAnetDCC_NMRA_DCCClassifyAddress239
  L_NMRAnetDCC_NMRA_DCCClassifyAddress240
  L_NMRAnetDCC_NMRA_DCCClassifyAddress241
  L_end_NMRA_DCC_LoadPacket
  _NMRA_DCC_LoadPacket
  L_end_NMRA_DCC_QueuePacket
  _NMRA_DCC_QueuePacket
  L__NMRA_DCC_QueuePacket244
  L__NMRA_DCC_QueuePacket245
  L__NMRA_DCC_QueuePacket246
  L__NMRA_DCC_QueuePacket247
  L__NMRA_DCC_QueuePacket248
  L__NMRA_DCC_QueuePacket249
  L__NMRA_DCC_QueuePacket250
  L_end_NMRA_DCC_LoadIdlePacketIntoTransmitter
  NMRAnetDCC_NMRA_DCC_LoadIdlePacketIntoTransmitter
  L_end_NMRA_DCC_LoadResetPacketIntoTransmitter
  NMRAnetDCC_NMRA_DCC_LoadResetPacketIntoTransmitter
  L_end_CanTransmitMessage
  NMRAnetDCC_CanTransmitMessage
  L_NMRAnetDCC_CanTransmitMessage254
  L_NMRAnetDCC_CanTransmitMessage255
  L_NMRAnetDCC_CanTransmitMessage256
  L_NMRAnetDCC_CanTransmitMessage257
  L_NMRAnetDCC_CanTransmitMessage258
  L_NMRAnetDCC_CanTransmitMessage259
  L_NMRAnetDCC_CanTransmitMessage260
  L_NMRAnetDCC_CanTransmitMessage261
  L_NMRAnetDCC_CanTransmitMessage262
  L_NMRAnetDCC_CanTransmitMessage263
  L_end_NMRA_DCC_LoadPacketIntoTransmitterStateMachine
  _NMRA_DCC_LoadPacketIntoTransmitterStateMachine
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine265
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine266
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine267
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine268
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine269
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine270
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine271
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine272
  L_end_NMRA_DCC_TransmitterStateMachineHandlePreamble
  NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble274
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble275
  L_end_NMRA_DCC_TransmitterStateMachineHandleByte
  NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte277
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte278
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte279
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte280
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte281
  L_end_NMRA_DCC_TransmitterStateMachineHandleStartBit
  NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStartBit
  L_end_NMRA_DCC_TransmitterStateMachineXORByte
  NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte284
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte285
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte286
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte287
  L_end_NMRA_DCC_TransmitterStateMachineHandleStopBit
  NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStopBit
  L_end_NMRA_DCC_TransmitterStateMachine
  _NMRA_DCC_TransmitterStateMachine
  L__NMRA_DCC_TransmitterStateMachine290
  L__NMRA_DCC_TransmitterStateMachine291
  L__NMRA_DCC_TransmitterStateMachine292
  L__NMRA_DCC_TransmitterStateMachine293
  L__NMRA_DCC_TransmitterStateMachine294
  L__NMRA_DCC_TransmitterStateMachine295
  L__NMRA_DCC_TransmitterStateMachine296
  L__NMRA_DCC_TransmitterStateMachine297
  L__NMRA_DCC_TransmitterStateMachine298
  L__NMRA_DCC_TransmitterStateMachine299
  L__NMRA_DCC_TransmitterStateMachine300
  L__NMRA_DCC_TransmitterStateMachine301
  L__NMRA_DCC_TransmitterStateMachine302
  L__NMRA_DCC_TransmitterStateMachine303
  L__NMRA_DCC_TransmitterStateMachine304
  L__NMRA_DCC_TransmitterStateMachine305
  L__NMRA_DCC_TransmitterStateMachine306
  L__NMRA_DCC_TransmitterStateMachine307
  L_end__NMRAnetNode_SortNodeList
  L__NMRAnetNode_SortNodeList1
  L__NMRAnetNode_SortNodeList2
  L__NMRAnetNode_SortNodeList3
  L__NMRAnetNode_SortNodeList4
  L__NMRAnetNode_SortNodeList5
  L__NMRAnetNode_SortNodeList6
  L__NMRAnetNode_SortNodeList7
  L__NMRAnetNode_SortNodeList8
  L__NMRAnetNode_SortNodeList9
  L__NMRAnetNode_SortNodeList10
  L__NMRAnetNode_SortNodeList11
  L__NMRAnetNode_SortNodeList12
  L__NMRAnetNode_SortNodeList13
  L_end_NMRAnetNode_BinarySearchAliasID
  L_NMRAnetNode_BinarySearchAliasID15
  L_NMRAnetNode_BinarySearchAliasID16
  L_NMRAnetNode_BinarySearchAliasID17
  L_NMRAnetNode_BinarySearchAliasID18
  L_NMRAnetNode_BinarySearchAliasID19
  L_NMRAnetNode_BinarySearchAliasID20
  L_NMRAnetNode_BinarySearchAliasID21
  L_NMRAnetNode_BinarySearchAliasID22
  L_NMRAnetNode_BinarySearchAliasID23
  L_NMRAnetNode_BinarySearchAliasID24
  L_NMRAnetNode_BinarySearchAliasID25
  L_end__NMRAnetNode_FindByAlias
  L__NMRAnetNode_FindByAlias27
  L__NMRAnetNode_FindByAlias28
  L__NMRAnetNode_FindByAlias29
  L_end__NMRAnetNode_FindByNodeID
  L__NMRAnetNode_FindByNodeID31
  L__NMRAnetNode_FindByNodeID32
  L__NMRAnetNode_FindByNodeID33
  L__NMRAnetNode_FindByNodeID34
  L__NMRAnetNode_FindByNodeID35
  L__NMRAnetNode_FindByNodeID36
  L__NMRAnetNode_FindByNodeID37
  L__NMRAnetNode_FindByNodeID38
  L__NMRAnetNode_FindByNodeID39
  L__NMRAnetNode_FindByNodeID40
  L__NMRAnetNode_FindByNodeID41
  L_end__NMRAnetNode_FindFirstVirtualNode
  L__NMRAnetNode_FindFirstVirtualNode43
  L__NMRAnetNode_FindFirstVirtualNode44
  L__NMRAnetNode_FindFirstVirtualNode45
  L__NMRAnetNode_FindFirstVirtualNode46
  L__NMRAnetNode_FindFirstVirtualNode47
  L__NMRAnetNode_FindFirstVirtualNode48
  L__NMRAnetNode_FindFirstVirtualNode49
  L__NMRAnetNode_FindFirstVirtualNode50
  L_end__NMRAnetNode_FindLastVirtualNode
  L__NMRAnetNode_FindLastVirtualNode52
  L__NMRAnetNode_FindLastVirtualNode53
  L__NMRAnetNode_FindLastVirtualNode54
  L__NMRAnetNode_FindLastVirtualNode55
  L__NMRAnetNode_FindLastVirtualNode56
  L__NMRAnetNode_FindLastVirtualNode57
  L__NMRAnetNode_FindLastVirtualNode58
  L__NMRAnetNode_FindLastVirtualNode59
  L_end__NMRAnetNode_Initialize
  L__NMRAnetNode_Initialize61
  L__NMRAnetNode_Initialize62
  L__NMRAnetNode_Initialize63
  L__NMRAnetNode_Initialize64
  L__NMRAnetNode_Initialize65
  L_end__NMRAnetNode_Allocate
  L__NMRAnetNode_Allocate67
  L__NMRAnetNode_Allocate68
  L__NMRAnetNode_Allocate69
  L_end__NMRAnetNode_Release
  L__NMRAnetNode_Release71
  L__NMRAnetNode_Release72
  L__NMRAnetNode_Release73
  L__NMRAnetNode_Release74
  L__NMRAnetNode_Release75
  L__NMRAnetNode_Release76
  L__NMRAnetNode_Release77
  L__NMRAnetNode_Release78
  L__NMRAnetNode_Release79
  L__NMRAnetNode_Release80
  L__NMRAnetNode_Release81
  L__NMRAnetNode_Release82
  L__NMRAnetNode_Release83
  L__NMRAnetNode_Release84
  L__NMRAnetNode_Release85
  L__NMRAnetNode_Release86
  L__NMRAnetNode_Release87
  L__NMRAnetNode_Release88
  L__NMRAnetNode_Release89
  L_end__NMRAnetNode_SetMsgFlags
  L__NMRAnetNode_SetMsgFlags91
  L__NMRAnetNode_SetMsgFlags92
  L__NMRAnetNode_SetMsgFlags93
  L__NMRAnetNode_SetMsgFlags94
  L__NMRAnetNode_SetMsgFlags95
  L__NMRAnetNode_SetMsgFlags96
  L__NMRAnetNode_SetMsgFlags97
  L__NMRAnetNode_SetMsgFlags98
  L_end__NMRAnetNode_NextNode
  L__NMRAnetNode_NextNode100
  L__NMRAnetNode_NextNode101
  L__NMRAnetNode_NextNode102
  L__NMRAnetNode_NextNode103
  L__NMRAnetNode_NextNode104
  L__NMRAnetNode_NextNode105
  L_end__NMRAnetNode_SetStateFlag
  L_end__NMRAnetNode_ClearStateFlag
  L_end__NMRAnetNode_TestStateFlag
  L_end__NMRAnetNode_SetMsgFlag
  L_end__NMRAnetNode_ClearMsgFlag
  L_end__NMRAnetNode_ClearMsgFlags
  L_end__NMRAnetNode_TestMsgFlags
  L__NMRAnetNode_TestMsgFlags113
  L__NMRAnetNode_TestMsgFlags114
  L__NMRAnetNode_TestMsgFlags115
  L_end__NMRAnetNode_SetProducerEventFlags
  L__NMRAnetNode_SetProducerEventFlags117
  L__NMRAnetNode_SetProducerEventFlags118
  L__NMRAnetNode_SetProducerEventFlags119
  L__NMRAnetNode_SetProducerEventFlags120
  L__NMRAnetNode_SetProducerEventFlags121
  L__NMRAnetNode_SetProducerEventFlags122
  L__NMRAnetNode_SetProducerEventFlags123
  L__NMRAnetNode_SetProducerEventFlags124
  L__NMRAnetNode_SetProducerEventFlags125
  L__NMRAnetNode_SetProducerEventFlags126
  L__NMRAnetNode_SetProducerEventFlags127
  L__NMRAnetNode_SetProducerEventFlags128
  L__NMRAnetNode_SetProducerEventFlags129
  L_end__NMRAnetNode_SetProducerEventFlag
  L_end__NMRAnetNode_ClearProducerEventFlags
  L__NMRAnetNode_ClearProducerEventFlags132
  L__NMRAnetNode_ClearProducerEventFlags133
  L__NMRAnetNode_ClearProducerEventFlags134
  L__NMRAnetNode_ClearProducerEventFlags135
  L__NMRAnetNode_ClearProducerEventFlags136
  L_end__NMRAnetNode_NextProducerEventFlag
  L__NMRAnetNode_NextProducerEventFlag138
  L__NMRAnetNode_NextProducerEventFlag139
  L__NMRAnetNode_NextProducerEventFlag140
  L__NMRAnetNode_NextProducerEventFlag141
  L__NMRAnetNode_NextProducerEventFlag142
  L__NMRAnetNode_NextProducerEventFlag143
  L__NMRAnetNode_NextProducerEventFlag144
  L__NMRAnetNode_NextProducerEventFlag145
  L__NMRAnetNode_NextProducerEventFlag146
  L__NMRAnetNode_NextProducerEventFlag147
  L__NMRAnetNode_NextProducerEventFlag148
  L__NMRAnetNode_NextProducerEventFlag149
  L__NMRAnetNode_NextProducerEventFlag150
  L__NMRAnetNode_NextProducerEventFlag151
  L__NMRAnetNode_NextProducerEventFlag152
  L__NMRAnetNode_NextProducerEventFlag153
  L_end__NMRAnetNode_IsAnyProducerEventSet
  L__NMRAnetNode_IsAnyProducerEventSet155
  L__NMRAnetNode_IsAnyProducerEventSet156
  L__NMRAnetNode_IsAnyProducerEventSet157
  L__NMRAnetNode_IsAnyProducerEventSet158
  L__NMRAnetNode_IsAnyProducerEventSet159
  L__NMRAnetNode_IsAnyProducerEventSet160
  L__NMRAnetNode_IsAnyProducerEventSet161
  L__NMRAnetNode_IsAnyProducerEventSet162
  L_end__NMRAnetNode_SetConsumerEventFlags
  L__NMRAnetNode_SetConsumerEventFlags164
  L__NMRAnetNode_SetConsumerEventFlags165
  L__NMRAnetNode_SetConsumerEventFlags166
  L__NMRAnetNode_SetConsumerEventFlags167
  L__NMRAnetNode_SetConsumerEventFlags168
  L__NMRAnetNode_SetConsumerEventFlags169
  L__NMRAnetNode_SetConsumerEventFlags170
  L__NMRAnetNode_SetConsumerEventFlags171
  L__NMRAnetNode_SetConsumerEventFlags172
  L__NMRAnetNode_SetConsumerEventFlags173
  L__NMRAnetNode_SetConsumerEventFlags174
  L__NMRAnetNode_SetConsumerEventFlags175
  L__NMRAnetNode_SetConsumerEventFlags176
  L_end__NMRAnetNode_SetConsumerEventFlag
  L_end__NMRAnetNode_ClearConsumerEventFlags
  L__NMRAnetNode_ClearConsumerEventFlags179
  L__NMRAnetNode_ClearConsumerEventFlags180
  L__NMRAnetNode_ClearConsumerEventFlags181
  L__NMRAnetNode_ClearConsumerEventFlags182
  L__NMRAnetNode_ClearConsumerEventFlags183
  L_end__NMRAnetNode_NextConsumerEventFlag
  L__NMRAnetNode_NextConsumerEventFlag185
  L__NMRAnetNode_NextConsumerEventFlag186
  L__NMRAnetNode_NextConsumerEventFlag187
  L__NMRAnetNode_NextConsumerEventFlag188
  L__NMRAnetNode_NextConsumerEventFlag189
  L__NMRAnetNode_NextConsumerEventFlag190
  L__NMRAnetNode_NextConsumerEventFlag191
  L__NMRAnetNode_NextConsumerEventFlag192
  L__NMRAnetNode_NextConsumerEventFlag193
  L__NMRAnetNode_NextConsumerEventFlag194
  L__NMRAnetNode_NextConsumerEventFlag195
  L__NMRAnetNode_NextConsumerEventFlag196
  L__NMRAnetNode_NextConsumerEventFlag197
  L__NMRAnetNode_NextConsumerEventFlag198
  L__NMRAnetNode_NextConsumerEventFlag199
  L__NMRAnetNode_NextConsumerEventFlag200
  L_end__NMRAnetNode_IsAnyConsumerEventSet
  L__NMRAnetNode_IsAnyConsumerEventSet202
  L__NMRAnetNode_IsAnyConsumerEventSet203
  L__NMRAnetNode_IsAnyConsumerEventSet204
  L__NMRAnetNode_IsAnyConsumerEventSet205
  L__NMRAnetNode_IsAnyConsumerEventSet206
  L__NMRAnetNode_IsAnyConsumerEventSet207
  L__NMRAnetNode_IsAnyConsumerEventSet208
  L__NMRAnetNode_IsAnyConsumerEventSet209
  L__NMRAnetNode_FindByAlias210
  L__NMRAnetNode_FindByNodeID211
  L__NMRAnetNode_FindByNodeID212
  L__NMRAnetNode_FindFirstVirtualNode213
  L__NMRAnetNode_FindLastVirtualNode214
  L__NMRAnetNode_Release215
  L__NMRAnetNode_NextNode216
  L__NMRAnetNode_NextProducerEventFlag217
  L__NMRAnetNode_NextConsumerEventFlag218
  L_end_NMRAnetNode_SortNodeList
  _NMRAnetNode_SortNodeList
  L__NMRAnetNode_SortNodeList220
  L__NMRAnetNode_SortNodeList221
  L__NMRAnetNode_SortNodeList222
  L__NMRAnetNode_SortNodeList223
  L__NMRAnetNode_SortNodeList224
  L__NMRAnetNode_SortNodeList225
  L_end_BinarySearchAliasID
  NMRAnetNode_BinarySearchAliasID
  L_NMRAnetNode_BinarySearchAliasID227
  L_NMRAnetNode_BinarySearchAliasID228
  L_NMRAnetNode_BinarySearchAliasID229
  L_end_NMRAnetNode_FindByAlias
  _NMRAnetNode_FindByAlias
  L__NMRAnetNode_FindByAlias231
  L__NMRAnetNode_FindByAlias232
  L__NMRAnetNode_FindByAlias233
  L_end_NMRAnetNode_FindByNodeID
  _NMRAnetNode_FindByNodeID
  L__NMRAnetNode_FindByNodeID235
  L__NMRAnetNode_FindByNodeID236
  L__NMRAnetNode_FindByNodeID237
  L__NMRAnetNode_FindByNodeID238
  L_end_NMRAnetNode_FindFirstVirtualNode
  _NMRAnetNode_FindFirstVirtualNode
  L__NMRAnetNode_FindFirstVirtualNode240
  L__NMRAnetNode_FindFirstVirtualNode241
  L_end_NMRAnetNode_FindLastVirtualNode
  _NMRAnetNode_FindLastVirtualNode
  L__NMRAnetNode_FindLastVirtualNode243
  L__NMRAnetNode_FindLastVirtualNode244
  L_end_NMRAnetNode_Initialize
  _NMRAnetNode_Initialize
  L__NMRAnetNode_Initialize246
  L_end_NMRAnetNode_Allocate
  _NMRAnetNode_Allocate
  L__NMRAnetNode_Allocate248
  L_end_NMRAnetNode_Release
  _NMRAnetNode_Release
  L__NMRAnetNode_Release250
  L__NMRAnetNode_Release251
  L__NMRAnetNode_Release252
  L__NMRAnetNode_Release253
  L__NMRAnetNode_Release254
  L_end_NMRAnetNode_SetMsgFlags
  _NMRAnetNode_SetMsgFlags
  L__NMRAnetNode_SetMsgFlags256
  L__NMRAnetNode_SetMsgFlags257
  L__NMRAnetNode_SetMsgFlags258
  L_end_NMRAnetNode_NextNode
  _NMRAnetNode_NextNode
  L__NMRAnetNode_NextNode260
  L__NMRAnetNode_NextNode261
  L_end_NMRAnetNode_SetStateFlag
  _NMRAnetNode_SetStateFlag
  L_end_NMRAnetNode_ClearStateFlag
  _NMRAnetNode_ClearStateFlag
  L_end_NMRAnetNode_TestStateFlag
  _NMRAnetNode_TestStateFlag
  L__NMRAnetNode_TestStateFlag265
  L_end_NMRAnetNode_SetMsgFlag
  _NMRAnetNode_SetMsgFlag
  L_end_NMRAnetNode_ClearMsgFlag
  _NMRAnetNode_ClearMsgFlag
  L_end_NMRAnetNode_ClearMsgFlags
  _NMRAnetNode_ClearMsgFlags
  L_end_NMRAnetNode_TestMsgFlags
  _NMRAnetNode_TestMsgFlags
  L__NMRAnetNode_TestMsgFlags270
  L__NMRAnetNode_TestMsgFlags271
  L_end_NMRAnetNode_SetProducerEventFlags
  _NMRAnetNode_SetProducerEventFlags
  L__NMRAnetNode_SetProducerEventFlags273
  L__NMRAnetNode_SetProducerEventFlags274
  L__NMRAnetNode_SetProducerEventFlags275
  L_end_NMRAnetNode_SetProducerEventFlag
  _NMRAnetNode_SetProducerEventFlag
  L_end_NMRAnetNode_ClearProducerEventFlags
  _NMRAnetNode_ClearProducerEventFlags
  L__NMRAnetNode_ClearProducerEventFlags278
  L_end_NMRAnetNode_NextProducerEventFlag
  _NMRAnetNode_NextProducerEventFlag
  L__NMRAnetNode_NextProducerEventFlag280
  L__NMRAnetNode_NextProducerEventFlag281
  L__NMRAnetNode_NextProducerEventFlag282
  L__NMRAnetNode_NextProducerEventFlag283
  L_end_NMRAnetNode_IsAnyProducerEventSet
  _NMRAnetNode_IsAnyProducerEventSet
  L__NMRAnetNode_IsAnyProducerEventSet285
  L__NMRAnetNode_IsAnyProducerEventSet286
  L_end_NMRAnetNode_SetConsumerEventFlags
  _NMRAnetNode_SetConsumerEventFlags
  L__NMRAnetNode_SetConsumerEventFlags288
  L__NMRAnetNode_SetConsumerEventFlags289
  L__NMRAnetNode_SetConsumerEventFlags290
  L_end_NMRAnetNode_SetConsumerEventFlag
  _NMRAnetNode_SetConsumerEventFlag
  L_end_NMRAnetNode_ClearConsumerEventFlags
  _NMRAnetNode_ClearConsumerEventFlags
  L__NMRAnetNode_ClearConsumerEventFlags293
  L_end_NMRAnetNode_NextConsumerEventFlag
  _NMRAnetNode_NextConsumerEventFlag
  L__NMRAnetNode_NextConsumerEventFlag295
  L__NMRAnetNode_NextConsumerEventFlag296
  L__NMRAnetNode_NextConsumerEventFlag297
  L__NMRAnetNode_NextConsumerEventFlag298
  L_end_NMRAnetNode_IsAnyConsumerEventSet
  _NMRAnetNode_IsAnyConsumerEventSet
  L__NMRAnetNode_IsAnyConsumerEventSet300
  L__NMRAnetNode_IsAnyConsumerEventSet301
  L_end__NMRAnetStateMachine_TrySendAbbreviatedCDI
  L_end__NMRAnetStateMachine_TrySendIdentifyProducer
  L_end__NMRAnetStateMachine_TrySendIdentifyConsumer
  L_end__NMRAnetStateMachine_TrySendIdentifyEvents
  L_end__NMRAnetStateMachine_TrySendAliasMapEnquiry
  L_end__NMRAnetStateMachine_TrySendAliasMapReset
  L_end__NMRAnetStateMachine_TrySendVerifyNodeID
  L__NMRAnetStateMachine_TrySendVerifyNodeID7
  L__NMRAnetStateMachine_TrySendVerifyNodeID8
  L__NMRAnetStateMachine_TrySendVerifyNodeID9
  L_end__NMRAnetStateMachine_TrySendDatagram
  L__NMRAnetStateMachine_TrySendDatagram11
  L__NMRAnetStateMachine_TrySendDatagram12
  L__NMRAnetStateMachine_TrySendDatagram13
  L__NMRAnetStateMachine_TrySendDatagram14
  L__NMRAnetStateMachine_TrySendDatagram15
  L__NMRAnetStateMachine_TrySendDatagram16
  L__NMRAnetStateMachine_TrySendDatagram17
  L__NMRAnetStateMachine_TrySendDatagram18
  L__NMRAnetStateMachine_TrySendDatagram19
  L__NMRAnetStateMachine_TrySendDatagram20
  L__NMRAnetStateMachine_TrySendDatagram21
  L__NMRAnetStateMachine_TrySendDatagram22
  L__NMRAnetStateMachine_TrySendDatagram23
  L__NMRAnetStateMachine_TrySendDatagram24
  L__NMRAnetStateMachine_TrySendDatagram25
  L__NMRAnetStateMachine_TrySendDatagram26
  L__NMRAnetStateMachine_TrySendDatagram27
  L__NMRAnetStateMachine_TrySendDatagram28
  L__NMRAnetStateMachine_TrySendDatagram29
  L__NMRAnetStateMachine_TrySendDatagram30
  L__NMRAnetStateMachine_TrySendDatagram31
  L__NMRAnetStateMachine_TrySendDatagram32
  L_end_NMRAnetStateMachine_ReleaseBuffers
  L_NMRAnetStateMachine_ReleaseBuffers34
  L_NMRAnetStateMachine_ReleaseBuffers35
  L_NMRAnetStateMachine_ReleaseBuffers36
  L_NMRAnetStateMachine_ReleaseBuffers37
  L_NMRAnetStateMachine_ReleaseBuffers38
  L_NMRAnetStateMachine_ReleaseBuffers39
  L_NMRAnetStateMachine_ReleaseBuffers40
  L_NMRAnetStateMachine_ReleaseBuffers41
  L_NMRAnetStateMachine_ReleaseBuffers42
  L_NMRAnetStateMachine_ReleaseBuffers43
  L_end__NMRAnetStateMachine_InitializeNode
  L__NMRAnetStateMachine_InitializeNode45
  L__NMRAnetStateMachine_InitializeNode46
  L__NMRAnetStateMachine_InitializeNode47
  L__NMRAnetStateMachine_InitializeNode48
  L__NMRAnetStateMachine_InitializeNode49
  L__NMRAnetStateMachine_InitializeNode50
  L__NMRAnetStateMachine_InitializeNode51
  L__NMRAnetStateMachine_InitializeNode52
  L__NMRAnetStateMachine_InitializeNode53
  L__NMRAnetStateMachine_InitializeNode54
  L__NMRAnetStateMachine_InitializeNode55
  L__NMRAnetStateMachine_InitializeNode56
  L__NMRAnetStateMachine_InitializeNode57
  L_end__NMRAnetStateMachine_Initialize
  L_end__NMRAnetStateMachine_100ms_Timer
  L_end__TransmitCANLayerMsg
  L__TransmitCANLayerMsg61
  L__TransmitCANLayerMsg62
  L__TransmitCANLayerMsg63
  L_end_NMRAnetStateMachine_CANBusBufferAvailable
  L_end__TransmitNMRABusLayerMsg
  L__TransmitNMRABusLayerMsg66
  L__TransmitNMRABusLayerMsg67
  L__TransmitNMRABusLayerMsg68
  L__TransmitNMRABusLayerMsg69
  L__TransmitNMRABusLayerMsg70
  L__TransmitNMRABusLayerMsg71
  L_end__NMRABusBufferAvailable
  L_end_NMRAnetStateMachine_MaxAddressByAddressSpace
  L_NMRAnetStateMachine_MaxAddressByAddressSpace74
  L_NMRAnetStateMachine_MaxAddressByAddressSpace75
  L_NMRAnetStateMachine_MaxAddressByAddressSpace76
  L_NMRAnetStateMachine_MaxAddressByAddressSpace77
  L_NMRAnetStateMachine_MaxAddressByAddressSpace78
  L_NMRAnetStateMachine_MaxAddressByAddressSpace79
  L_NMRAnetStateMachine_MaxAddressByAddressSpace80
  L_NMRAnetStateMachine_MaxAddressByAddressSpace81
  L_NMRAnetStateMachine_MaxAddressByAddressSpace82
  L_NMRAnetStateMachine_MaxAddressByAddressSpace83
  L_NMRAnetStateMachine_MaxAddressByAddressSpace84
  L_NMRAnetStateMachine_MaxAddressByAddressSpace85
  L_NMRAnetStateMachine_MaxAddressByAddressSpace86
  L_NMRAnetStateMachine_MaxAddressByAddressSpace87
  L_NMRAnetStateMachine_MaxAddressByAddressSpace88
  L_NMRAnetStateMachine_MaxAddressByAddressSpace89
  L_NMRAnetStateMachine_MaxAddressByAddressSpace90
  L_NMRAnetStateMachine_MaxAddressByAddressSpace91
  L_NMRAnetStateMachine_MaxAddressByAddressSpace92
  L_NMRAnetStateMachine_MaxAddressByAddressSpace93
  L_NMRAnetStateMachine_MaxAddressByAddressSpace94
  L_NMRAnetStateMachine_MaxAddressByAddressSpace95
  L_end_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite97
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite98
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite99
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite100
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite101
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite102
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite103
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite104
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite105
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite106
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite107
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite108
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite109
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite110
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite111
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite112
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite113
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite114
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite115
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite116
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite117
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite118
  L_end_NMRAnetStateMachine_ProcessNode
  L_NMRAnetStateMachine_ProcessNode120
  L_NMRAnetStateMachine_ProcessNode121
  L_NMRAnetStateMachine_ProcessNode122
  L_NMRAnetStateMachine_ProcessNode123
  L_NMRAnetStateMachine_ProcessNode124
  L_NMRAnetStateMachine_ProcessNode125
  L_NMRAnetStateMachine_ProcessNode126
  L_NMRAnetStateMachine_ProcessNode127
  L_NMRAnetStateMachine_ProcessNode128
  L_NMRAnetStateMachine_ProcessNode129
  L_NMRAnetStateMachine_ProcessNode130
  L_NMRAnetStateMachine_ProcessNode131
  L_NMRAnetStateMachine_ProcessNode132
  L_NMRAnetStateMachine_ProcessNode133
  L_NMRAnetStateMachine_ProcessNode134
  L_NMRAnetStateMachine_ProcessNode135
  L_NMRAnetStateMachine_ProcessNode136
  L_NMRAnetStateMachine_ProcessNode137
  L_NMRAnetStateMachine_ProcessNode138
  L_NMRAnetStateMachine_ProcessNode139
  L_NMRAnetStateMachine_ProcessNode140
  L_NMRAnetStateMachine_ProcessNode141
  L_NMRAnetStateMachine_ProcessNode142
  L_NMRAnetStateMachine_ProcessNode143
  L_NMRAnetStateMachine_ProcessNode144
  L_NMRAnetStateMachine_ProcessNode145
  L_NMRAnetStateMachine_ProcessNode146
  L_NMRAnetStateMachine_ProcessNode147
  L_NMRAnetStateMachine_ProcessNode148
  L_NMRAnetStateMachine_ProcessNode149
  L_NMRAnetStateMachine_ProcessNode150
  L_NMRAnetStateMachine_ProcessNode151
  L_NMRAnetStateMachine_ProcessNode152
  L_NMRAnetStateMachine_ProcessNode153
  L_NMRAnetStateMachine_ProcessNode154
  L_NMRAnetStateMachine_ProcessNode155
  L_NMRAnetStateMachine_ProcessNode156
  L_NMRAnetStateMachine_ProcessNode157
  L_NMRAnetStateMachine_ProcessNode158
  L_NMRAnetStateMachine_ProcessNode159
  L_NMRAnetStateMachine_ProcessNode160
  L_NMRAnetStateMachine_ProcessNode161
  L_NMRAnetStateMachine_ProcessNode162
  L_NMRAnetStateMachine_ProcessNode163
  L_NMRAnetStateMachine_ProcessNode164
  L_NMRAnetStateMachine_ProcessNode165
  L_NMRAnetStateMachine_ProcessNode166
  L_NMRAnetStateMachine_ProcessNode167
  L_NMRAnetStateMachine_ProcessNode168
  L_NMRAnetStateMachine_ProcessNode169
  L_NMRAnetStateMachine_ProcessNode170
  L_NMRAnetStateMachine_ProcessNode171
  L_NMRAnetStateMachine_ProcessNode172
  L_NMRAnetStateMachine_ProcessNode173
  L_NMRAnetStateMachine_ProcessNode174
  L_NMRAnetStateMachine_ProcessNode175
  L_NMRAnetStateMachine_ProcessNode176
  L_NMRAnetStateMachine_ProcessNode177
  L_NMRAnetStateMachine_ProcessNode178
  L_NMRAnetStateMachine_ProcessNode179
  L_NMRAnetStateMachine_ProcessNode180
  L_NMRAnetStateMachine_ProcessNode181
  L_NMRAnetStateMachine_ProcessNode182
  L_NMRAnetStateMachine_ProcessNode183
  L_NMRAnetStateMachine_ProcessNode184
  L_NMRAnetStateMachine_ProcessNode185
  L_NMRAnetStateMachine_ProcessNode186
  L_NMRAnetStateMachine_ProcessNode187
  L_NMRAnetStateMachine_ProcessNode188
  L_NMRAnetStateMachine_ProcessNode189
  L_NMRAnetStateMachine_ProcessNode190
  L_NMRAnetStateMachine_ProcessNode191
  L_NMRAnetStateMachine_ProcessNode192
  L_NMRAnetStateMachine_ProcessNode193
  L_NMRAnetStateMachine_ProcessNode194
  L_NMRAnetStateMachine_ProcessNode195
  L_NMRAnetStateMachine_ProcessNode196
  L_NMRAnetStateMachine_ProcessNode197
  L_NMRAnetStateMachine_ProcessNode198
  L_NMRAnetStateMachine_ProcessNode199
  L_NMRAnetStateMachine_ProcessNode200
  L_NMRAnetStateMachine_ProcessNode201
  L_NMRAnetStateMachine_ProcessNode202
  L_NMRAnetStateMachine_ProcessNode203
  L_NMRAnetStateMachine_ProcessNode204
  L_NMRAnetStateMachine_ProcessNode205
  L_NMRAnetStateMachine_ProcessNode206
  L_NMRAnetStateMachine_ProcessNode207
  L_NMRAnetStateMachine_ProcessNode208
  L_NMRAnetStateMachine_ProcessNode209
  L_NMRAnetStateMachine_ProcessNode210
  L_NMRAnetStateMachine_ProcessNode211
  L_NMRAnetStateMachine_ProcessNode212
  L_NMRAnetStateMachine_ProcessNode213
  L_NMRAnetStateMachine_ProcessNode214
  L_NMRAnetStateMachine_ProcessNode215
  L_NMRAnetStateMachine_ProcessNode216
  L_NMRAnetStateMachine_ProcessNode217
  L_NMRAnetStateMachine_ProcessNode218
  L_NMRAnetStateMachine_ProcessNode219
  L_NMRAnetStateMachine_ProcessNode220
  L_NMRAnetStateMachine_ProcessNode221
  L_NMRAnetStateMachine_ProcessNode222
  L_NMRAnetStateMachine_ProcessNode223
  L_NMRAnetStateMachine_ProcessNode224
  L_NMRAnetStateMachine_ProcessNode225
  L_NMRAnetStateMachine_ProcessNode226
  L_NMRAnetStateMachine_ProcessNode227
  L_NMRAnetStateMachine_ProcessNode228
  L_NMRAnetStateMachine_ProcessNode229
  L_NMRAnetStateMachine_ProcessNode230
  L_NMRAnetStateMachine_ProcessNode231
  L_NMRAnetStateMachine_ProcessNode232
  L_NMRAnetStateMachine_ProcessNode233
  L_NMRAnetStateMachine_ProcessNode234
  L_NMRAnetStateMachine_ProcessNode235
  L_NMRAnetStateMachine_ProcessNode236
  L_NMRAnetStateMachine_ProcessNode237
  L_NMRAnetStateMachine_ProcessNode238
  L_NMRAnetStateMachine_ProcessNode239
  L_NMRAnetStateMachine_ProcessNode240
  L_NMRAnetStateMachine_ProcessNode241
  L_NMRAnetStateMachine_ProcessNode242
  L_NMRAnetStateMachine_ProcessNode243
  L_NMRAnetStateMachine_ProcessNode244
  L_NMRAnetStateMachine_ProcessNode245
  L_NMRAnetStateMachine_ProcessNode246
  L_NMRAnetStateMachine_ProcessNode247
  L_NMRAnetStateMachine_ProcessNode248
  L_NMRAnetStateMachine_ProcessNode249
  L_NMRAnetStateMachine_ProcessNode250
  L_NMRAnetStateMachine_ProcessNode251
  L_NMRAnetStateMachine_ProcessNode252
  L_NMRAnetStateMachine_ProcessNode253
  L_NMRAnetStateMachine_ProcessNode254
  L_NMRAnetStateMachine_ProcessNode255
  L_NMRAnetStateMachine_ProcessNode256
  L_NMRAnetStateMachine_ProcessNode257
  L_NMRAnetStateMachine_ProcessNode258
  L_NMRAnetStateMachine_ProcessNode259
  L_NMRAnetStateMachine_ProcessNode260
  L_NMRAnetStateMachine_ProcessNode261
  L_NMRAnetStateMachine_ProcessNode262
  L_NMRAnetStateMachine_ProcessNode263
  L_NMRAnetStateMachine_ProcessNode264
  L_NMRAnetStateMachine_ProcessNode265
  L_NMRAnetStateMachine_ProcessNode266
  L_NMRAnetStateMachine_ProcessNode267
  L_NMRAnetStateMachine_ProcessNode268
  L_NMRAnetStateMachine_ProcessNode269
  L_NMRAnetStateMachine_ProcessNode270
  L_NMRAnetStateMachine_ProcessNode271
  L_NMRAnetStateMachine_ProcessNode272
  L_NMRAnetStateMachine_ProcessNode273
  L_NMRAnetStateMachine_ProcessNode274
  L_NMRAnetStateMachine_ProcessNode275
  L_NMRAnetStateMachine_ProcessNode276
  L_NMRAnetStateMachine_ProcessNode277
  L_NMRAnetStateMachine_ProcessNode278
  L_NMRAnetStateMachine_ProcessNode279
  L_NMRAnetStateMachine_ProcessNode280
  L_NMRAnetStateMachine_ProcessNode281
  L_NMRAnetStateMachine_ProcessNode282
  L_NMRAnetStateMachine_ProcessNode283
  L_NMRAnetStateMachine_ProcessNode284
  L_NMRAnetStateMachine_ProcessNode285
  L_NMRAnetStateMachine_ProcessNode286
  L_NMRAnetStateMachine_ProcessNode287
  L_NMRAnetStateMachine_ProcessNode288
  L_NMRAnetStateMachine_ProcessNode289
  L_NMRAnetStateMachine_ProcessNode290
  L_NMRAnetStateMachine_ProcessNode291
  L_NMRAnetStateMachine_ProcessNode292
  L_NMRAnetStateMachine_ProcessNode293
  L_NMRAnetStateMachine_ProcessNode294
  L_NMRAnetStateMachine_ProcessNode295
  L_NMRAnetStateMachine_ProcessNode296
  L_NMRAnetStateMachine_ProcessNode297
  L_NMRAnetStateMachine_ProcessNode298
  L_NMRAnetStateMachine_ProcessNode299
  L_NMRAnetStateMachine_ProcessNode300
  L_NMRAnetStateMachine_ProcessNode301
  L_NMRAnetStateMachine_ProcessNode302
  L_NMRAnetStateMachine_ProcessNode303
  L_NMRAnetStateMachine_ProcessNode304
  L_NMRAnetStateMachine_ProcessNode305
  L_NMRAnetStateMachine_ProcessNode306
  L_NMRAnetStateMachine_ProcessNode307
  L_NMRAnetStateMachine_ProcessNode308
  L_NMRAnetStateMachine_ProcessNode309
  L_NMRAnetStateMachine_ProcessNode310
  L_NMRAnetStateMachine_ProcessNode311
  L_NMRAnetStateMachine_ProcessNode312
  L_NMRAnetStateMachine_ProcessNode313
  L_NMRAnetStateMachine_ProcessNode314
  L_NMRAnetStateMachine_ProcessNode315
  L_NMRAnetStateMachine_ProcessNode316
  L_NMRAnetStateMachine_ProcessNode317
  L_NMRAnetStateMachine_ProcessNode318
  L_NMRAnetStateMachine_ProcessNode319
  L_NMRAnetStateMachine_ProcessNode320
  L_NMRAnetStateMachine_ProcessNode321
  L_NMRAnetStateMachine_ProcessNode322
  L_NMRAnetStateMachine_ProcessNode323
  L_NMRAnetStateMachine_ProcessNode324
  L_NMRAnetStateMachine_ProcessNode325
  L_NMRAnetStateMachine_ProcessNode326
  L_NMRAnetStateMachine_ProcessNode327
  L_NMRAnetStateMachine_ProcessNode328
  L_NMRAnetStateMachine_ProcessNode329
  L_NMRAnetStateMachine_ProcessNode330
  L_NMRAnetStateMachine_ProcessNode331
  L_NMRAnetStateMachine_ProcessNode332
  L_NMRAnetStateMachine_ProcessNode333
  L_NMRAnetStateMachine_ProcessNode334
  L_NMRAnetStateMachine_ProcessNode335
  L_NMRAnetStateMachine_ProcessNode336
  L_NMRAnetStateMachine_ProcessNode337
  L_NMRAnetStateMachine_ProcessNode338
  L_NMRAnetStateMachine_ProcessNode339
  L_NMRAnetStateMachine_ProcessNode340
  L_NMRAnetStateMachine_ProcessNode341
  L_NMRAnetStateMachine_ProcessNode342
  L_NMRAnetStateMachine_ProcessNode343
  L_NMRAnetStateMachine_ProcessNode344
  L_NMRAnetStateMachine_ProcessNode345
  L_NMRAnetStateMachine_ProcessNode346
  L_NMRAnetStateMachine_ProcessNode347
  L_NMRAnetStateMachine_ProcessNode348
  L_NMRAnetStateMachine_ProcessNode349
  L_NMRAnetStateMachine_ProcessNode350
  L_NMRAnetStateMachine_ProcessNode351
  L_NMRAnetStateMachine_ProcessNode352
  L_NMRAnetStateMachine_ProcessNode353
  L_NMRAnetStateMachine_ProcessNode354
  L_NMRAnetStateMachine_ProcessNode355
  L_NMRAnetStateMachine_ProcessNode356
  L_NMRAnetStateMachine_ProcessNode357
  L_NMRAnetStateMachine_ProcessNode358
  L_NMRAnetStateMachine_ProcessNode359
  L_NMRAnetStateMachine_ProcessNode360
  L_NMRAnetStateMachine_ProcessNode361
  L_NMRAnetStateMachine_ProcessNode362
  L_NMRAnetStateMachine_ProcessNode363
  L_NMRAnetStateMachine_ProcessNode364
  L_NMRAnetStateMachine_ProcessNode365
  L_NMRAnetStateMachine_ProcessNode366
  L_NMRAnetStateMachine_ProcessNode367
  L_NMRAnetStateMachine_ProcessNode368
  L_NMRAnetStateMachine_ProcessNode369
  L_NMRAnetStateMachine_ProcessNode370
  L_NMRAnetStateMachine_ProcessNode371
  L_NMRAnetStateMachine_ProcessNode372
  L_NMRAnetStateMachine_ProcessNode373
  L_NMRAnetStateMachine_ProcessNode374
  L_NMRAnetStateMachine_ProcessNode375
  L_NMRAnetStateMachine_ProcessNode376
  L_NMRAnetStateMachine_ProcessNode377
  L_NMRAnetStateMachine_ProcessNode378
  L_NMRAnetStateMachine_ProcessNode379
  L_NMRAnetStateMachine_ProcessNode380
  L_NMRAnetStateMachine_ProcessNode381
  L_NMRAnetStateMachine_ProcessNode382
  L_NMRAnetStateMachine_ProcessNode383
  L_NMRAnetStateMachine_ProcessNode384
  L_NMRAnetStateMachine_ProcessNode385
  L_NMRAnetStateMachine_ProcessNode386
  L_NMRAnetStateMachine_ProcessNode387
  L_NMRAnetStateMachine_ProcessNode388
  L_NMRAnetStateMachine_ProcessNode389
  L_NMRAnetStateMachine_ProcessNode390
  L_NMRAnetStateMachine_ProcessNode391
  L_NMRAnetStateMachine_ProcessNode392
  L_NMRAnetStateMachine_ProcessNode393
  L_NMRAnetStateMachine_ProcessNode394
  L_NMRAnetStateMachine_ProcessNode395
  L_NMRAnetStateMachine_ProcessNode396
  L_NMRAnetStateMachine_ProcessNode397
  L_NMRAnetStateMachine_ProcessNode398
  L_NMRAnetStateMachine_ProcessNode399
  L_NMRAnetStateMachine_ProcessNode400
  L_NMRAnetStateMachine_ProcessNode401
  L_NMRAnetStateMachine_ProcessNode402
  L_NMRAnetStateMachine_ProcessNode403
  L_NMRAnetStateMachine_ProcessNode404
  L_NMRAnetStateMachine_ProcessNode405
  L_NMRAnetStateMachine_ProcessNode406
  L_NMRAnetStateMachine_ProcessNode407
  L_NMRAnetStateMachine_ProcessNode408
  L_NMRAnetStateMachine_ProcessNode409
  L_NMRAnetStateMachine_ProcessNode410
  L_NMRAnetStateMachine_ProcessNode411
  L_NMRAnetStateMachine_ProcessNode412
  L_NMRAnetStateMachine_ProcessNode413
  L_NMRAnetStateMachine_ProcessNode414
  L_NMRAnetStateMachine_ProcessNode415
  L_NMRAnetStateMachine_ProcessNode416
  L_NMRAnetStateMachine_ProcessNode417
  L_NMRAnetStateMachine_ProcessNode418
  L_NMRAnetStateMachine_ProcessNode419
  L_NMRAnetStateMachine_ProcessNode420
  L_NMRAnetStateMachine_ProcessNode421
  L_NMRAnetStateMachine_ProcessNode422
  L_NMRAnetStateMachine_ProcessNode423
  L_NMRAnetStateMachine_ProcessNode424
  L_NMRAnetStateMachine_ProcessNode425
  L_NMRAnetStateMachine_ProcessNode426
  L_NMRAnetStateMachine_ProcessNode427
  L_NMRAnetStateMachine_ProcessNode428
  L_NMRAnetStateMachine_ProcessNode429
  L_NMRAnetStateMachine_ProcessNode430
  L_NMRAnetStateMachine_ProcessNode431
  L_NMRAnetStateMachine_ProcessNode432
  L_NMRAnetStateMachine_ProcessNode433
  L_NMRAnetStateMachine_ProcessNode434
  L_NMRAnetStateMachine_ProcessNode435
  L_NMRAnetStateMachine_ProcessNode436
  L_NMRAnetStateMachine_ProcessNode437
  L_NMRAnetStateMachine_ProcessNode438
  L_NMRAnetStateMachine_ProcessNode439
  L_NMRAnetStateMachine_ProcessNode440
  L_NMRAnetStateMachine_ProcessNode441
  L_NMRAnetStateMachine_ProcessNode442
  L_NMRAnetStateMachine_ProcessNode443
  L_NMRAnetStateMachine_ProcessNode444
  L_NMRAnetStateMachine_ProcessNode445
  L_NMRAnetStateMachine_ProcessNode446
  L_NMRAnetStateMachine_ProcessNode447
  L_NMRAnetStateMachine_ProcessNode448
  L_NMRAnetStateMachine_ProcessNode449
  L_NMRAnetStateMachine_ProcessNode450
  L_NMRAnetStateMachine_ProcessNode451
  L_end_NMRAnetStateMachine_ProcessOutgoingNode
  L_NMRAnetStateMachine_ProcessOutgoingNode453
  L_NMRAnetStateMachine_ProcessOutgoingNode454
  L_NMRAnetStateMachine_ProcessOutgoingNode455
  L_NMRAnetStateMachine_ProcessOutgoingNode456
  L_NMRAnetStateMachine_ProcessOutgoingNode457
  L_NMRAnetStateMachine_ProcessOutgoingNode458
  L_end_NMRAnetStateMachine_ProcessAbandonBuffers
  L_NMRAnetStateMachine_ProcessAbandonBuffers460
  L_NMRAnetStateMachine_ProcessAbandonBuffers461
  L_NMRAnetStateMachine_ProcessAbandonBuffers462
  L_NMRAnetStateMachine_ProcessAbandonBuffers463
  L_NMRAnetStateMachine_ProcessAbandonBuffers464
  L_NMRAnetStateMachine_ProcessAbandonBuffers465
  L_end__NMRAnetStateMachine_Process
  L__NMRAnetStateMachine_Process467
  L__NMRAnetStateMachine_Process468
  L__NMRAnetStateMachine_Process469
  L__NMRAnetStateMachine_Process470
  L__NMRAnetStateMachine_Process471
  L__NMRAnetStateMachine_Process472
  L__NMRAnetStateMachine_Process473
  L__NMRAnetStateMachine_Process474
  L__NMRAnetStateMachine_Process475
  L__NMRAnetStateMachine_Process476
  L__NMRAnetStateMachine_Process477
  L__NMRAnetStateMachine_Process478
  L__NMRAnetStateMachine_Process479
  L__NMRAnetStateMachine_Process480
  L__NMRAnetStateMachine_Process481
  L__NMRAnetStateMachine_Process482
  L__NMRAnetStateMachine_Process483
  L__NMRAnetStateMachine_Process484
  L__NMRAnetStateMachine_Process485
  L__NMRAnetStateMachine_Process486
  L__NMRAnetStateMachine_Process487
  L__NMRAnetStateMachine_Process488
  L__NMRAnetStateMachine_Process489
  L__NMRAnetStateMachine_Process490
  L__NMRAnetStateMachine_Process491
  L__NMRAnetStateMachine_Process492
  L__NMRAnetStateMachine_Process493
  L__NMRAnetStateMachine_Process494
  L__NMRAnetStateMachine_Process495
  L__NMRAnetStateMachine_Process496
  L__NMRAnetStateMachine_Process497
  L__NMRAnetStateMachine_Process498
  L__NMRAnetStateMachine_Process499
  L__NMRAnetStateMachine_Process500
  L__NMRAnetStateMachine_Process501
  L__NMRAnetStateMachine_Process502
  L__NMRAnetStateMachine_Process503
  L__NMRAnetStateMachine_Process504
  L__NMRAnetStateMachine_Process505
  L__NMRAnetStateMachine_Process506
  L__NMRAnetStateMachine_Process507
  L__NMRAnetStateMachine_Process508
  L__NMRAnetStateMachine_Process509
  L__NMRAnetStateMachine_Process510
  L__NMRAnetStateMachine_Process511
  L__NMRAnetStateMachine_Process512
  L__NMRAnetStateMachine_Process513
  L__NMRAnetStateMachine_Process514
  L__NMRAnetStateMachine_Process515
  L__NMRAnetStateMachine_Process516
  L__NMRAnetStateMachine_Process517
  L__NMRAnetStateMachine_Process518
  L__NMRAnetStateMachine_Process519
  L__NMRAnetStateMachine_Process520
  L__NMRAnetStateMachine_Process521
  L__NMRAnetStateMachine_Process522
  L__NMRAnetStateMachine_Process523
  L__NMRAnetStateMachine_Process524
  L__NMRAnetStateMachine_Process525
  L__NMRAnetStateMachine_Process526
  L__NMRAnetStateMachine_Process527
  L__NMRAnetStateMachine_Process528
  L__NMRAnetStateMachine_Process529
  L__NMRAnetStateMachine_Process530
  L__NMRAnetStateMachine_Process531
  L__NMRAnetStateMachine_Process532
  L__NMRAnetStateMachine_Process533
  L__NMRAnetStateMachine_Process534
  L__NMRAnetStateMachine_Process535
  L__NMRAnetStateMachine_Process536
  L__NMRAnetStateMachine_Process537
  L__NMRAnetStateMachine_Process538
  L__NMRAnetStateMachine_Process539
  L__NMRAnetStateMachine_Process540
  L__NMRAnetStateMachine_Process541
  L__NMRAnetStateMachine_Process542
  L__NMRAnetStateMachine_Process543
  L__NMRAnetStateMachine_Process544
  L__NMRAnetStateMachine_Process545
  L__NMRAnetStateMachine_Process546
  L__NMRAnetStateMachine_Process547
  L__NMRAnetStateMachine_Process548
  L__NMRAnetStateMachine_Process549
  L__NMRAnetStateMachine_Process550
  L__NMRAnetStateMachine_Process551
  L__NMRAnetStateMachine_Process552
  L__NMRAnetStateMachine_Process553
  L__NMRAnetStateMachine_Process554
  L__NMRAnetStateMachine_Process555
  L__NMRAnetStateMachine_Process556
  L__NMRAnetStateMachine_Process557
  L__NMRAnetStateMachine_Process558
  L__NMRAnetStateMachine_Process559
  L__NMRAnetStateMachine_Process560
  L__NMRAnetStateMachine_Process561
  L__NMRAnetStateMachine_Process562
  L__NMRAnetStateMachine_Process563
  L__NMRAnetStateMachine_Process564
  L__NMRAnetStateMachine_Process565
  L__NMRAnetStateMachine_Process566
  L__NMRAnetStateMachine_Process567
  L__NMRAnetStateMachine_Process568
  L__NMRAnetStateMachine_Process569
  L_end__NMRAnetStateMachine_Disconnect
  L__TransmitNMRABusLayerMsg571
  L__TransmitCANLayerMsg572
  L_NMRAnetStateMachine_ProcessNode573
  L_NMRAnetStateMachine_ProcessNode574
  L_NMRAnetStateMachine_ProcessNode575
  L_end_NMRAnetStateMachine_TrySendAbbreviatedCDI
  _NMRAnetStateMachine_TrySendAbbreviatedCDI
  L_end_NMRAnetStateMachine_TrySendIdentifyProducer
  _NMRAnetStateMachine_TrySendIdentifyProducer
  L_end_NMRAnetStateMachine_TrySendIdentifyConsumer
  _NMRAnetStateMachine_TrySendIdentifyConsumer
  L_end_NMRAnetStateMachine_TrySendIdentifyEvents
  _NMRAnetStateMachine_TrySendIdentifyEvents
  L_end_NMRAnetStateMachine_TrySendAliasMapEnquiry
  _NMRAnetStateMachine_TrySendAliasMapEnquiry
  L_end_NMRAnetStateMachine_TrySendAliasMapReset
  _NMRAnetStateMachine_TrySendAliasMapReset
  L_end_NMRAnetStateMachine_TrySendVerifyNodeID
  _NMRAnetStateMachine_TrySendVerifyNodeID
  L__NMRAnetStateMachine_TrySendVerifyNodeID583
  L_end_NMRAnetStateMachine_TrySendDatagram
  _NMRAnetStateMachine_TrySendDatagram
  L__NMRAnetStateMachine_TrySendDatagram585
  L__NMRAnetStateMachine_TrySendDatagram586
  L__NMRAnetStateMachine_TrySendDatagram587
  L__NMRAnetStateMachine_TrySendDatagram588
  L__NMRAnetStateMachine_TrySendDatagram589
  L__NMRAnetStateMachine_TrySendDatagram590
  L__NMRAnetStateMachine_TrySendDatagram591
  L__NMRAnetStateMachine_TrySendDatagram592
  L__NMRAnetStateMachine_TrySendDatagram593
  L_end_ReleaseBuffers
  NMRAnetStateMachine_ReleaseBuffers
  L_NMRAnetStateMachine_ReleaseBuffers595
  L_NMRAnetStateMachine_ReleaseBuffers596
  L_end_NMRAnetStateMachine_InitializeNode
  _NMRAnetStateMachine_InitializeNode
  L__NMRAnetStateMachine_InitializeNode598
  L__NMRAnetStateMachine_InitializeNode599
  L__NMRAnetStateMachine_InitializeNode600
  L__NMRAnetStateMachine_InitializeNode601
  L__NMRAnetStateMachine_InitializeNode602
  L_end_NMRAnetStateMachine_Initialize
  _NMRAnetStateMachine_Initialize
  L_end_NMRAnetStateMachine_100ms_Timer
  _NMRAnetStateMachine_100ms_Timer
  L_end_TransmitCANLayerMsg
  _TransmitCANLayerMsg
  L__TransmitCANLayerMsg606
  L_end_CANBusBufferAvailable
  NMRAnetStateMachine_CANBusBufferAvailable
  L_NMRAnetStateMachine_CANBusBufferAvailable608
  L_end_TransmitNMRABusLayerMsg
  _TransmitNMRABusLayerMsg
  L__TransmitNMRABusLayerMsg610
  L__TransmitNMRABusLayerMsg611
  L_end_NMRABusBufferAvailable
  _NMRABusBufferAvailable
  L__NMRABusBufferAvailable613
  L_end_MaxAddressByAddressSpace
  NMRAnetStateMachine_MaxAddressByAddressSpace
  L_NMRAnetStateMachine_MaxAddressByAddressSpace615
  L_NMRAnetStateMachine_MaxAddressByAddressSpace616
  L_NMRAnetStateMachine_MaxAddressByAddressSpace617
  L_NMRAnetStateMachine_MaxAddressByAddressSpace618
  L_NMRAnetStateMachine_MaxAddressByAddressSpace619
  L_NMRAnetStateMachine_MaxAddressByAddressSpace620
  L_NMRAnetStateMachine_MaxAddressByAddressSpace621
  L_end_DecodeMemoryConfigurationReadWrite
  NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite623
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite624
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite625
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite626
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite627
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite628
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite629
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite630
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite631
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite632
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite633
  L_end_ProcessNode
  NMRAnetStateMachine_ProcessNode
  L_NMRAnetStateMachine_ProcessNode635
  L_NMRAnetStateMachine_ProcessNode636
  L_NMRAnetStateMachine_ProcessNode637
  L_NMRAnetStateMachine_ProcessNode638
  L_NMRAnetStateMachine_ProcessNode639
  L_NMRAnetStateMachine_ProcessNode640
  L_NMRAnetStateMachine_ProcessNode641
  L_NMRAnetStateMachine_ProcessNode642
  L_NMRAnetStateMachine_ProcessNode643
  L_NMRAnetStateMachine_ProcessNode644
  L_NMRAnetStateMachine_ProcessNode645
  L_NMRAnetStateMachine_ProcessNode646
  L_NMRAnetStateMachine_ProcessNode647
  L_NMRAnetStateMachine_ProcessNode648
  L_NMRAnetStateMachine_ProcessNode649
  L_NMRAnetStateMachine_ProcessNode650
  L_NMRAnetStateMachine_ProcessNode651
  L_NMRAnetStateMachine_ProcessNode652
  L_NMRAnetStateMachine_ProcessNode653
  L_NMRAnetStateMachine_ProcessNode654
  L_NMRAnetStateMachine_ProcessNode655
  L_NMRAnetStateMachine_ProcessNode656
  L_NMRAnetStateMachine_ProcessNode657
  L_NMRAnetStateMachine_ProcessNode658
  L_NMRAnetStateMachine_ProcessNode659
  L_NMRAnetStateMachine_ProcessNode660
  L_NMRAnetStateMachine_ProcessNode661
  L_NMRAnetStateMachine_ProcessNode662
  L_NMRAnetStateMachine_ProcessNode663
  L_NMRAnetStateMachine_ProcessNode664
  L_NMRAnetStateMachine_ProcessNode665
  L_NMRAnetStateMachine_ProcessNode666
  L_NMRAnetStateMachine_ProcessNode667
  L_NMRAnetStateMachine_ProcessNode668
  L_NMRAnetStateMachine_ProcessNode669
  L_NMRAnetStateMachine_ProcessNode670
  L_NMRAnetStateMachine_ProcessNode671
  L_NMRAnetStateMachine_ProcessNode672
  L_NMRAnetStateMachine_ProcessNode673
  L_NMRAnetStateMachine_ProcessNode674
  L_NMRAnetStateMachine_ProcessNode675
  L_NMRAnetStateMachine_ProcessNode676
  L_NMRAnetStateMachine_ProcessNode677
  L_NMRAnetStateMachine_ProcessNode678
  L_NMRAnetStateMachine_ProcessNode679
  L_NMRAnetStateMachine_ProcessNode680
  L_NMRAnetStateMachine_ProcessNode681
  L_NMRAnetStateMachine_ProcessNode682
  L_NMRAnetStateMachine_ProcessNode683
  L_NMRAnetStateMachine_ProcessNode684
  L_NMRAnetStateMachine_ProcessNode685
  L_NMRAnetStateMachine_ProcessNode686
  L_NMRAnetStateMachine_ProcessNode687
  L_NMRAnetStateMachine_ProcessNode688
  L_NMRAnetStateMachine_ProcessNode689
  L_NMRAnetStateMachine_ProcessNode690
  L_NMRAnetStateMachine_ProcessNode691
  L_NMRAnetStateMachine_ProcessNode692
  L_NMRAnetStateMachine_ProcessNode693
  L_NMRAnetStateMachine_ProcessNode694
  L_NMRAnetStateMachine_ProcessNode695
  L_NMRAnetStateMachine_ProcessNode696
  L_NMRAnetStateMachine_ProcessNode697
  L_NMRAnetStateMachine_ProcessNode698
  L_NMRAnetStateMachine_ProcessNode699
  L_NMRAnetStateMachine_ProcessNode700
  L_NMRAnetStateMachine_ProcessNode701
  L_NMRAnetStateMachine_ProcessNode702
  L_NMRAnetStateMachine_ProcessNode703
  L_NMRAnetStateMachine_ProcessNode704
  L_NMRAnetStateMachine_ProcessNode705
  L_NMRAnetStateMachine_ProcessNode706
  L_NMRAnetStateMachine_ProcessNode707
  L_NMRAnetStateMachine_ProcessNode708
  L_NMRAnetStateMachine_ProcessNode709
  L_NMRAnetStateMachine_ProcessNode710
  L_NMRAnetStateMachine_ProcessNode711
  L_NMRAnetStateMachine_ProcessNode712
  L_NMRAnetStateMachine_ProcessNode713
  L_NMRAnetStateMachine_ProcessNode714
  L_NMRAnetStateMachine_ProcessNode715
  L_NMRAnetStateMachine_ProcessNode716
  L_NMRAnetStateMachine_ProcessNode717
  L_NMRAnetStateMachine_ProcessNode718
  L_NMRAnetStateMachine_ProcessNode719
  L_NMRAnetStateMachine_ProcessNode720
  L_NMRAnetStateMachine_ProcessNode721
  L_NMRAnetStateMachine_ProcessNode722
  L_NMRAnetStateMachine_ProcessNode723
  L_NMRAnetStateMachine_ProcessNode724
  L_NMRAnetStateMachine_ProcessNode725
  L_NMRAnetStateMachine_ProcessNode726
  L_NMRAnetStateMachine_ProcessNode727
  L_NMRAnetStateMachine_ProcessNode728
  L_NMRAnetStateMachine_ProcessNode729
  L_NMRAnetStateMachine_ProcessNode730
  L_NMRAnetStateMachine_ProcessNode731
  L_NMRAnetStateMachine_ProcessNode732
  L_NMRAnetStateMachine_ProcessNode733
  L_NMRAnetStateMachine_ProcessNode734
  L_NMRAnetStateMachine_ProcessNode735
  L_NMRAnetStateMachine_ProcessNode736
  L_NMRAnetStateMachine_ProcessNode737
  L_NMRAnetStateMachine_ProcessNode738
  L_NMRAnetStateMachine_ProcessNode739
  L_NMRAnetStateMachine_ProcessNode740
  L_NMRAnetStateMachine_ProcessNode741
  L_NMRAnetStateMachine_ProcessNode742
  L_NMRAnetStateMachine_ProcessNode743
  L_NMRAnetStateMachine_ProcessNode744
  L_NMRAnetStateMachine_ProcessNode745
  L_NMRAnetStateMachine_ProcessNode746
  L_NMRAnetStateMachine_ProcessNode747
  L_NMRAnetStateMachine_ProcessNode748
  L_NMRAnetStateMachine_ProcessNode749
  L_NMRAnetStateMachine_ProcessNode750
  L_end_ProcessOutgoingNode
  NMRAnetStateMachine_ProcessOutgoingNode
  L_NMRAnetStateMachine_ProcessOutgoingNode752
  L_NMRAnetStateMachine_ProcessOutgoingNode753
  L_end_ProcessAbandonBuffers
  NMRAnetStateMachine_ProcessAbandonBuffers
  L_NMRAnetStateMachine_ProcessAbandonBuffers755
  L_NMRAnetStateMachine_ProcessAbandonBuffers756
  L_end_NMRAnetStateMachine_Process
  _NMRAnetStateMachine_Process
  L__NMRAnetStateMachine_Process758
  L__NMRAnetStateMachine_Process759
  L__NMRAnetStateMachine_Process760
  L__NMRAnetStateMachine_Process761
  L__NMRAnetStateMachine_Process762
  L__NMRAnetStateMachine_Process763
  L__NMRAnetStateMachine_Process764
  L__NMRAnetStateMachine_Process765
  L__NMRAnetStateMachine_Process766
  L__NMRAnetStateMachine_Process767
  L__NMRAnetStateMachine_Process768
  L__NMRAnetStateMachine_Process769
  L__NMRAnetStateMachine_Process770
  L__NMRAnetStateMachine_Process771
  L__NMRAnetStateMachine_Process772
  L__NMRAnetStateMachine_Process773
  L__NMRAnetStateMachine_Process774
  L__NMRAnetStateMachine_Process775
  L__NMRAnetStateMachine_Process776
  L__NMRAnetStateMachine_Process777
  L__NMRAnetStateMachine_Process778
  L__NMRAnetStateMachine_Process779
  L__NMRAnetStateMachine_Process780
  L__NMRAnetStateMachine_Process781
  L__NMRAnetStateMachine_Process782
  L__NMRAnetStateMachine_Process783
  L__NMRAnetStateMachine_Process784
  L__NMRAnetStateMachine_Process785
  L__NMRAnetStateMachine_Process786
  L__NMRAnetStateMachine_Process787
  L__NMRAnetStateMachine_Process788
  L__NMRAnetStateMachine_Process789
  L__NMRAnetStateMachine_Process790
  L_end_NMRAnetStateMachine_Disconnect
  _NMRAnetStateMachine_Disconnect
  L_end__NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID
  L_end__NMRAnetUtilities_CreateCANControlFrameCANBuffer
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer2
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer3
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer4
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer5
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer6
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer7
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer8
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer9
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer10
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer11
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer12
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer13
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer14
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer15
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer16
  L_end__NMRAnetUtilities_CreateNMRABusMessageCANBuffer
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer18
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer19
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer20
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer21
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer22
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer23
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer24
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer25
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer26
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer27
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer28
  L_end__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI
  L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI30
  L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI31
  L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI32
  L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI33
  L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI34
  L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI35
  L_end__NMRAnetUtilities_ExtractDestinationAlias
  L__NMRAnetUtilities_ExtractDestinationAlias37
  L__NMRAnetUtilities_ExtractDestinationAlias38
  L__NMRAnetUtilities_ExtractDestinationAlias39
  L_end__NMRAnetUtilities_ExtractDestinationAliasFlags
  L__NMRAnetUtilities_ExtractDestinationAliasFlags41
  L__NMRAnetUtilities_ExtractDestinationAliasFlags42
  L__NMRAnetUtilities_ExtractDestinationAliasFlags43
  L_end__NMRAnetUtilities_ExtractDestinationCodedInMTIAlias
  L__NMRAnetUtilities_ExtractDestinationCodedInMTIAlias45
  L__NMRAnetUtilities_ExtractDestinationCodedInMTIAlias46
  L__NMRAnetUtilities_ExtractDestinationCodedInMTIAlias47
  L_end__NMRAnetUtilities_ExtractSourceAlias
  L_end__NMRAnetUtilities_CANBufferBytesToNodeID
  L_end__NMRAnetUtilities_EqualNodeID
  L_end__NMRAnetUtilities_CompareNodeIDs
  L_end__NMRAnetUtilities_EqualDestinationAlias
  L_end__NMRAnetUtilities_EqualAliasID
  L_end__NMRAnetUtilities_CompareAliasIDs
  L_end__NMRAnetUtilities_LoadNodeID
  L_end__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed
  L_end_NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed
  L_end__NMRAnetUtilities_CreateAliasID
  L__NMRAnetUtilities_CreateAliasID59
  L__NMRAnetUtilities_CreateAliasID60
  L__NMRAnetUtilities_CreateAliasID61
  L__NMRAnetUtilities_CreateAliasID62
  L__NMRAnetUtilities_CreateAliasID63
  L__NMRAnetUtilities_CreateAliasID64
  L_end__NMRAnetUtilities_RecreateAliasID
  L_end__NMRAnetUtilities_IsAddressedMessage
  L_end__NMRAnetUtilities_IsAddressedMessageToNode
  L__NMRAnetUtilities_IsAddressedMessageToNode68
  L__NMRAnetUtilities_IsAddressedMessageToNode69
  L__NMRAnetUtilities_IsAddressedMessageToNode70
  L_end__NMRAnetUtilities_IsDatagramMsg
  L_end_NMRAnetUtilities_NMRAnetUtilities_IsAddressedDatagramToNode
  L_end__NMRAnetUtilities_LoadCANData
  L_end__NMRAnetUtilities_LoadDestinationAlias
  L_end__NMRAnetUtilities_ZeroCANData
  L__NMRAnetUtilities_ZeroCANData76
  L__NMRAnetUtilities_ZeroCANData77
  L__NMRAnetUtilities_ZeroCANData78
  L__NMRAnetUtilities_ZeroCANData79
  L__NMRAnetUtilities_ZeroCANData80
  L_end__NMRAnetUtilities_PackBytesLo
  L_end__NMRAnetUtilities_PackBytesHi
  L_end__NMRAnetUtilities_EqualEventID
  L__NMRAnetUtilities_EqualEventID84
  L__NMRAnetUtilities_EqualEventID85
  L__NMRAnetUtilities_EqualEventID86
  L__NMRAnetUtilities_EqualEventID87
  L__NMRAnetUtilities_EqualEventID88
  L__NMRAnetUtilities_EqualEventID89
  L__NMRAnetUtilities_EqualEventID90
  L__NMRAnetUtilities_EqualEventID91
  L_end__NMRAnetUtilities_SupportsEventAsProducer
  L__NMRAnetUtilities_SupportsEventAsProducer93
  L__NMRAnetUtilities_SupportsEventAsProducer94
  L__NMRAnetUtilities_SupportsEventAsProducer95
  L__NMRAnetUtilities_SupportsEventAsProducer96
  L__NMRAnetUtilities_SupportsEventAsProducer97
  L__NMRAnetUtilities_SupportsEventAsProducer98
  L__NMRAnetUtilities_SupportsEventAsProducer99
  L__NMRAnetUtilities_SupportsEventAsProducer100
  L_end__NMRAnetUtilities_SupportsEventAsConsumer
  L__NMRAnetUtilities_SupportsEventAsConsumer102
  L__NMRAnetUtilities_SupportsEventAsConsumer103
  L__NMRAnetUtilities_SupportsEventAsConsumer104
  L__NMRAnetUtilities_SupportsEventAsConsumer105
  L__NMRAnetUtilities_SupportsEventAsConsumer106
  L__NMRAnetUtilities_SupportsEventAsConsumer107
  L__NMRAnetUtilities_SupportsEventAsConsumer108
  L__NMRAnetUtilities_SupportsEventAsConsumer109
  L_end__NMRAnetUtilities_SupportsVNodeEventAsProducer
  L__NMRAnetUtilities_SupportsVNodeEventAsProducer111
  L__NMRAnetUtilities_SupportsVNodeEventAsProducer112
  L__NMRAnetUtilities_SupportsVNodeEventAsProducer113
  L__NMRAnetUtilities_SupportsVNodeEventAsProducer114
  L__NMRAnetUtilities_SupportsVNodeEventAsProducer115
  L__NMRAnetUtilities_SupportsVNodeEventAsProducer116
  L__NMRAnetUtilities_SupportsVNodeEventAsProducer117
  L__NMRAnetUtilities_SupportsVNodeEventAsProducer118
  L_end__NMRAnetUtilities_SupportsVNodeEventAsConsumer
  L__NMRAnetUtilities_SupportsVNodeEventAsConsumer120
  L__NMRAnetUtilities_SupportsVNodeEventAsConsumer121
  L__NMRAnetUtilities_SupportsVNodeEventAsConsumer122
  L__NMRAnetUtilities_SupportsVNodeEventAsConsumer123
  L__NMRAnetUtilities_SupportsVNodeEventAsConsumer124
  L__NMRAnetUtilities_SupportsVNodeEventAsConsumer125
  L__NMRAnetUtilities_SupportsVNodeEventAsConsumer126
  L__NMRAnetUtilities_SupportsVNodeEventAsConsumer127
  L_end__NMRANetUtilities_LoadDatagramResultBytes
  L__NMRANetUtilities_LoadDatagramResultBytes129
  L__NMRANetUtilities_LoadDatagramResultBytes130
  L__NMRANetUtilities_LoadDatagramResultBytes131
  L_end__NMRAnetUtilities_BaseBufferLink
  L__NMRAnetUtilities_BaseBufferLink133
  L__NMRAnetUtilities_BaseBufferLink134
  L__NMRAnetUtilities_BaseBufferLink135
  L__NMRAnetUtilities_BaseBufferLink136
  L__NMRAnetUtilities_BaseBufferLink137
  L__NMRAnetUtilities_BaseBufferLink138
  L__NMRAnetUtilities_BaseBufferLink139
  L__NMRAnetUtilities_BaseBufferLink140
  L_end__NMRAnetUtilities_BaseBufferUnLink
  L__NMRAnetUtilities_BaseBufferUnLink142
  L__NMRAnetUtilities_BaseBufferUnLink143
  L__NMRAnetUtilities_BaseBufferUnLink144
  L__NMRAnetUtilities_BaseBufferUnLink145
  L__NMRAnetUtilities_BaseBufferUnLink146
  L__NMRAnetUtilities_BaseBufferUnLink147
  L__NMRAnetUtilities_BaseBufferUnLink148
  L__NMRAnetUtilities_BaseBufferUnLink149
  L__NMRAnetUtilities_BaseBufferUnLink150
  L__NMRAnetUtilities_BaseBufferUnLink151
  L__NMRAnetUtilities_BaseBufferUnLink152
  L__NMRAnetUtilities_BaseBufferUnLink153
  L__NMRAnetUtilities_BaseBufferUnLink154
  L__NMRAnetUtilities_BaseBufferUnLink155
  L_end__NMRAnetUtilities_DatagramBufferLink
  L__NMRAnetUtilities_DatagramBufferLink157
  L__NMRAnetUtilities_DatagramBufferLink158
  L__NMRAnetUtilities_DatagramBufferLink159
  L__NMRAnetUtilities_DatagramBufferLink160
  L__NMRAnetUtilities_DatagramBufferLink161
  L__NMRAnetUtilities_DatagramBufferLink162
  L__NMRAnetUtilities_DatagramBufferLink163
  L__NMRAnetUtilities_DatagramBufferLink164
  L_end__NMRAnetUtilities_DatagramBufferUnLink
  L__NMRAnetUtilities_DatagramBufferUnLink166
  L__NMRAnetUtilities_DatagramBufferUnLink167
  L__NMRAnetUtilities_DatagramBufferUnLink168
  L__NMRAnetUtilities_DatagramBufferUnLink169
  L__NMRAnetUtilities_DatagramBufferUnLink170
  L__NMRAnetUtilities_DatagramBufferUnLink171
  L__NMRAnetUtilities_DatagramBufferUnLink172
  L__NMRAnetUtilities_DatagramBufferUnLink173
  L__NMRAnetUtilities_DatagramBufferUnLink174
  L__NMRAnetUtilities_DatagramBufferUnLink175
  L__NMRAnetUtilities_DatagramBufferUnLink176
  L__NMRAnetUtilities_DatagramBufferUnLink177
  L__NMRAnetUtilities_DatagramBufferUnLink178
  L__NMRAnetUtilities_DatagramBufferUnLink179
  L_end__NMRAnetUtilities_FindInDatagramByState
  L__NMRAnetUtilities_FindInDatagramByState181
  L__NMRAnetUtilities_FindInDatagramByState182
  L__NMRAnetUtilities_FindInDatagramByState183
  L__NMRAnetUtilities_FindInDatagramByState184
  L__NMRAnetUtilities_FindInDatagramByState185
  L__NMRAnetUtilities_FindInDatagramByState186
  L__NMRAnetUtilities_FindInDatagramByState187
  L__NMRAnetUtilities_FindInDatagramByState188
  L__NMRAnetUtilities_FindInDatagramByState189
  L__NMRAnetUtilities_FindInDatagramByState190
  L__NMRAnetUtilities_FindInDatagramByState191
  L__NMRAnetUtilities_FindInDatagramByState192
  L__NMRAnetUtilities_FindInDatagramByState193
  L__NMRAnetUtilities_FindInDatagramByState194
  L__NMRAnetUtilities_FindInDatagramByState195
  L__NMRAnetUtilities_FindInDatagramByState196
  L__NMRAnetUtilities_FindInDatagramByState197
  L_end__NMRAnetUtilities_FindInProcessDatagram
  L_end__NMRAnetUtilities_FindCompletedDatagram
  L_end__NMRAnetUtilities_FindOutgoingDatagram
  L__NMRAnetUtilities_FindOutgoingDatagram201
  L__NMRAnetUtilities_FindOutgoingDatagram202
  L__NMRAnetUtilities_FindOutgoingDatagram203
  L__NMRAnetUtilities_FindOutgoingDatagram204
  L__NMRAnetUtilities_FindOutgoingDatagram205
  L__NMRAnetUtilities_FindOutgoingDatagram206
  L__NMRAnetUtilities_FindOutgoingDatagram207
  L__NMRAnetUtilities_FindOutgoingDatagram208
  L__NMRAnetUtilities_FindOutgoingDatagram209
  L__NMRAnetUtilities_FindOutgoingDatagram210
  L__NMRAnetUtilities_FindOutgoingDatagram211
  L_end__NMRAnetUtilities_NextBaseBuffer
  L__NMRAnetUtilities_NextBaseBuffer213
  L__NMRAnetUtilities_NextBaseBuffer214
  L__NMRAnetUtilities_NextBaseBuffer215
  L__NMRAnetUtilities_NextBaseBuffer216
  L__NMRAnetUtilities_NextBaseBuffer217
  L__NMRAnetUtilities_NextBaseBuffer218
  L__NMRAnetUtilities_NextBaseBuffer219
  L__NMRAnetUtilities_NextBaseBuffer220
  L__NMRAnetUtilities_NextBaseBuffer221
  L__NMRAnetUtilities_NextBaseBuffer222
  L__NMRAnetUtilities_NextBaseBuffer223
  L_end__NMRAnetUtilities_NextDatagramBuffer
  L__NMRAnetUtilities_NextDatagramBuffer225
  L__NMRAnetUtilities_NextDatagramBuffer226
  L__NMRAnetUtilities_NextDatagramBuffer227
  L__NMRAnetUtilities_NextDatagramBuffer228
  L__NMRAnetUtilities_NextDatagramBuffer229
  L__NMRAnetUtilities_NextDatagramBuffer230
  L__NMRAnetUtilities_NextDatagramBuffer231
  L__NMRAnetUtilities_NextDatagramBuffer232
  L__NMRAnetUtilities_NextDatagramBuffer233
  L__NMRAnetUtilities_NextDatagramBuffer234
  L__NMRAnetUtilities_NextDatagramBuffer235
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer236
  L__NMRAnetUtilities_ExtractDestinationAlias237
  L__NMRAnetUtilities_ExtractDestinationAliasFlags238
  L__NMRAnetUtilities_CreateAliasID239
  L__NMRAnetUtilities_EqualEventID240
  L__NMRAnetUtilities_FindInDatagramByState241
  L__NMRAnetUtilities_FindOutgoingDatagram242
  L__NMRAnetUtilities_FindOutgoingDatagram243
  L__NMRAnetUtilities_NextBaseBuffer244
  L__NMRAnetUtilities_NextBaseBuffer245
  L__NMRAnetUtilities_NextDatagramBuffer246
  L__NMRAnetUtilities_NextDatagramBuffer247
  L_end_NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID
  _NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID
  L__NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID249
  L__NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID250
  L__NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID251
  L__NMRAnetUtilities_LoadFrameCANBufferDataWith48BitNodeID252
  L_end_NMRAnetUtilities_CreateCANControlFrameCANBuffer
  _NMRAnetUtilities_CreateCANControlFrameCANBuffer
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer254
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer255
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer256
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer257
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer258
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer259
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer260
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer261
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer262
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer263
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer264
  L__NMRAnetUtilities_CreateCANControlFrameCANBuffer265
  L_end_NMRAnetUtilities_CreateNMRABusMessageCANBuffer
  _NMRAnetUtilities_CreateNMRABusMessageCANBuffer
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer267
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer268
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer269
  L__NMRAnetUtilities_CreateNMRABusMessageCANBuffer270
  L_end_NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI
  _NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI
  L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI272
  L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI273
  L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI274
  L__NMRAnetUtilities_CreateNMRABusMessageCANBufferWithDestInMTI275
  L_end_NMRAnetUtilities_ExtractDestinationAlias
  _NMRAnetUtilities_ExtractDestinationAlias
  L__NMRAnetUtilities_ExtractDestinationAlias277
  L_end_NMRAnetUtilities_ExtractDestinationAliasFlags
  _NMRAnetUtilities_ExtractDestinationAliasFlags
  L__NMRAnetUtilities_ExtractDestinationAliasFlags279
  L_end_NMRAnetUtilities_ExtractDestinationCodedInMTIAlias
  _NMRAnetUtilities_ExtractDestinationCodedInMTIAlias
  L__NMRAnetUtilities_ExtractDestinationCodedInMTIAlias281
  L__NMRAnetUtilities_ExtractDestinationCodedInMTIAlias282
  L__NMRAnetUtilities_ExtractDestinationCodedInMTIAlias283
  L_end_NMRAnetUtilities_ExtractSourceAlias
  _NMRAnetUtilities_ExtractSourceAlias
  L_end_NMRAnetUtilities_CANBufferBytesToNodeID
  _NMRAnetUtilities_CANBufferBytesToNodeID
  L__NMRAnetUtilities_CANBufferBytesToNodeID286
  L__NMRAnetUtilities_CANBufferBytesToNodeID287
  L__NMRAnetUtilities_CANBufferBytesToNodeID288
  L__NMRAnetUtilities_CANBufferBytesToNodeID289
  L_end_NMRAnetUtilities_EqualNodeID
  _NMRAnetUtilities_EqualNodeID
  L__NMRAnetUtilities_EqualNodeID291
  L__NMRAnetUtilities_EqualNodeID292
  L_end_NMRAnetUtilities_CompareNodeIDs
  _NMRAnetUtilities_CompareNodeIDs
  L__NMRAnetUtilities_CompareNodeIDs294
  L__NMRAnetUtilities_CompareNodeIDs295
  L_end_NMRAnetUtilities_EqualDestinationAlias
  _NMRAnetUtilities_EqualDestinationAlias
  L_end_NMRAnetUtilities_EqualAliasID
  _NMRAnetUtilities_EqualAliasID
  L__NMRAnetUtilities_EqualAliasID298
  L_end_NMRAnetUtilities_CompareAliasIDs
  _NMRAnetUtilities_CompareAliasIDs
  L__NMRAnetUtilities_CompareAliasIDs300
  L_end_NMRAnetUtilities_LoadNodeID
  _NMRAnetUtilities_LoadNodeID
  L_end_NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed
  _NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed
  L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed303
  L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed304
  L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed305
  L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed306
  L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed307
  L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed308
  L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed309
  L__NMRAnetUtilities_PsudoRandomNumberGeneratorOnSeed310
  L_end_NMRAnetUtilities_GenerateID_Alias_From_Seed
  NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed
  L_NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed312
  L_NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed313
  L_NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed314
  L_NMRAnetUtilities_NMRAnetUtilities_GenerateID_Alias_From_Seed315
  L_end_NMRAnetUtilities_CreateAliasID
  _NMRAnetUtilities_CreateAliasID
  L__NMRAnetUtilities_CreateAliasID317
  L__NMRAnetUtilities_CreateAliasID318
  L_end_NMRAnetUtilities_RecreateAliasID
  _NMRAnetUtilities_RecreateAliasID
  L_end_NMRAnetUtilities_IsAddressedMessage
  _NMRAnetUtilities_IsAddressedMessage
  L__NMRAnetUtilities_IsAddressedMessage321
  L_end_NMRAnetUtilities_IsAddressedMessageToNode
  _NMRAnetUtilities_IsAddressedMessageToNode
  L__NMRAnetUtilities_IsAddressedMessageToNode323
  L_end_NMRAnetUtilities_IsDatagramMsg
  _NMRAnetUtilities_IsDatagramMsg
  L__NMRAnetUtilities_IsDatagramMsg325
  L__NMRAnetUtilities_IsDatagramMsg326
  L_end_NMRAnetUtilities_IsAddressedDatagramToNode
  NMRAnetUtilities_NMRAnetUtilities_IsAddressedDatagramToNode
  L_end_NMRAnetUtilities_LoadCANData
  _NMRAnetUtilities_LoadCANData
  L_end_NMRAnetUtilities_LoadDestinationAlias
  _NMRAnetUtilities_LoadDestinationAlias
  L_end_NMRAnetUtilities_ZeroCANData
  _NMRAnetUtilities_ZeroCANData
  L__NMRAnetUtilities_ZeroCANData331
  L_end_NMRAnetUtilities_PackBytesLo
  _NMRAnetUtilities_PackBytesLo
  L__NMRAnetUtilities_PackBytesLo333
  L__NMRAnetUtilities_PackBytesLo334
  L__NMRAnetUtilities_PackBytesLo335
  L__NMRAnetUtilities_PackBytesLo336
  L__NMRAnetUtilities_PackBytesLo337
  L__NMRAnetUtilities_PackBytesLo338
  L__NMRAnetUtilities_PackBytesLo339
  L__NMRAnetUtilities_PackBytesLo340
  L_end_NMRAnetUtilities_PackBytesHi
  _NMRAnetUtilities_PackBytesHi
  L__NMRAnetUtilities_PackBytesHi342
  L__NMRAnetUtilities_PackBytesHi343
  L__NMRAnetUtilities_PackBytesHi344
  L__NMRAnetUtilities_PackBytesHi345
  L__NMRAnetUtilities_PackBytesHi346
  L__NMRAnetUtilities_PackBytesHi347
  L__NMRAnetUtilities_PackBytesHi348
  L__NMRAnetUtilities_PackBytesHi349
  L_end_NMRAnetUtilities_EqualEventID
  _NMRAnetUtilities_EqualEventID
  L__NMRAnetUtilities_EqualEventID351
  L__NMRAnetUtilities_EqualEventID352
  L__NMRAnetUtilities_EqualEventID353
  L_end_NMRAnetUtilities_SupportsEventAsProducer
  _NMRAnetUtilities_SupportsEventAsProducer
  L__NMRAnetUtilities_SupportsEventAsProducer355
  L__NMRAnetUtilities_SupportsEventAsProducer356
  L_end_NMRAnetUtilities_SupportsEventAsConsumer
  _NMRAnetUtilities_SupportsEventAsConsumer
  L__NMRAnetUtilities_SupportsEventAsConsumer358
  L__NMRAnetUtilities_SupportsEventAsConsumer359
  L_end_NMRAnetUtilities_SupportsVNodeEventAsProducer
  _NMRAnetUtilities_SupportsVNodeEventAsProducer
  L__NMRAnetUtilities_SupportsVNodeEventAsProducer361
  L__NMRAnetUtilities_SupportsVNodeEventAsProducer362
  L_end_NMRAnetUtilities_SupportsVNodeEventAsConsumer
  _NMRAnetUtilities_SupportsVNodeEventAsConsumer
  L__NMRAnetUtilities_SupportsVNodeEventAsConsumer364
  L__NMRAnetUtilities_SupportsVNodeEventAsConsumer365
  L_end_NMRANetUtilities_LoadDatagramResultBytes
  _NMRANetUtilities_LoadDatagramResultBytes
  L__NMRANetUtilities_LoadDatagramResultBytes367
  L_end_NMRAnetUtilities_BaseBufferLink
  _NMRAnetUtilities_BaseBufferLink
  L__NMRAnetUtilities_BaseBufferLink369
  L__NMRAnetUtilities_BaseBufferLink370
  L_end_NMRAnetUtilities_BaseBufferUnLink
  _NMRAnetUtilities_BaseBufferUnLink
  L__NMRAnetUtilities_BaseBufferUnLink372
  L__NMRAnetUtilities_BaseBufferUnLink373
  L__NMRAnetUtilities_BaseBufferUnLink374
  L__NMRAnetUtilities_BaseBufferUnLink375
  L__NMRAnetUtilities_BaseBufferUnLink376
  L__NMRAnetUtilities_BaseBufferUnLink377
  L_end_NMRAnetUtilities_DatagramBufferLink
  _NMRAnetUtilities_DatagramBufferLink
  L__NMRAnetUtilities_DatagramBufferLink379
  L__NMRAnetUtilities_DatagramBufferLink380
  L_end_NMRAnetUtilities_DatagramBufferUnLink
  _NMRAnetUtilities_DatagramBufferUnLink
  L__NMRAnetUtilities_DatagramBufferUnLink382
  L__NMRAnetUtilities_DatagramBufferUnLink383
  L__NMRAnetUtilities_DatagramBufferUnLink384
  L__NMRAnetUtilities_DatagramBufferUnLink385
  L__NMRAnetUtilities_DatagramBufferUnLink386
  L__NMRAnetUtilities_DatagramBufferUnLink387
  L_end_NMRAnetUtilities_FindInDatagramByState
  _NMRAnetUtilities_FindInDatagramByState
  L__NMRAnetUtilities_FindInDatagramByState389
  L__NMRAnetUtilities_FindInDatagramByState390
  L__NMRAnetUtilities_FindInDatagramByState391
  L__NMRAnetUtilities_FindInDatagramByState392
  L__NMRAnetUtilities_FindInDatagramByState393
  L_end_NMRAnetUtilities_FindInProcessDatagram
  _NMRAnetUtilities_FindInProcessDatagram
  L_end_NMRAnetUtilities_FindCompletedDatagram
  _NMRAnetUtilities_FindCompletedDatagram
  L_end_NMRAnetUtilities_FindOutgoingDatagram
  _NMRAnetUtilities_FindOutgoingDatagram
  L__NMRAnetUtilities_FindOutgoingDatagram397
  L__NMRAnetUtilities_FindOutgoingDatagram398
  L__NMRAnetUtilities_FindOutgoingDatagram399
  L_end_NMRAnetUtilities_NextBaseBuffer
  _NMRAnetUtilities_NextBaseBuffer
  L__NMRAnetUtilities_NextBaseBuffer401
  L__NMRAnetUtilities_NextBaseBuffer402
  L__NMRAnetUtilities_NextBaseBuffer403
  L_end_NMRAnetUtilities_NextDatagramBuffer
  _NMRAnetUtilities_NextDatagramBuffer
  L__NMRAnetUtilities_NextDatagramBuffer405
  L__NMRAnetUtilities_NextDatagramBuffer406
  L__NMRAnetUtilities_NextDatagramBuffer407
  L_end__25AAxxxx_LocalSPI_Read
  L__25AAxxxx_LocalSPI_Read1
  L__25AAxxxx_LocalSPI_Read2
  L__25AAxxxx_LocalSPI_Read3
  L__25AAxxxx_LocalSPI_Read4
  L__25AAxxxx_LocalSPI_Read5
  L_end__25AAxxxx_LocalSPI_Write
  L__25AAxxxx_LocalSPI_Write7
  L__25AAxxxx_LocalSPI_Write8
  L__25AAxxxx_LocalSPI_Write9
  L__25AAxxxx_LocalSPI_Write10
  L__25AAxxxx_LocalSPI_Write11
  L_end__25AAxxxx_SetBank_CS
  L__25AAxxxx_SetBank_CS13
  L__25AAxxxx_SetBank_CS14
  L__25AAxxxx_SetBank_CS15
  L_end__25AAxxxx_WriteAddress
  L_end___25AAxxxx_Read
  L___25AAxxxx_Read18
  L___25AAxxxx_Read19
  L___25AAxxxx_Read20
  L___25AAxxxx_Read21
  L___25AAxxxx_Read22
  L___25AAxxxx_Read23
  L___25AAxxxx_Read24
  L___25AAxxxx_Read25
  L___25AAxxxx_Read26
  L___25AAxxxx_Read27
  L_end___25AAxxxx_Write
  L___25AAxxxx_Write29
  L___25AAxxxx_Write30
  L___25AAxxxx_Write31
  L___25AAxxxx_Write32
  L___25AAxxxx_Write33
  L_end___25AAxxxx_Busy
  L_end___25AAxxxx_WriteEnabled
  L_end___25AAxxxx_Erase
  L_end___25AAxxxx_Initialize
  L___25AAxxxx_Read38
  L_end_LocalSPI_Read
  _25AAxxxx_LocalSPI_Read
  L_end_LocalSPI_Write
  _25AAxxxx_LocalSPI_Write
  L_end_SetBank_CS
  _25AAxxxx_SetBank_CS
  L__25AAxxxx_SetBank_CS42
  L_end_WriteAddress
  _25AAxxxx_WriteAddress
  L__25AAxxxx_WriteAddress44
  L__25AAxxxx_WriteAddress45
  L_end__25AAxxxx_Read
  __25AAxxxx_Read
  L___25AAxxxx_Read47
  L_end__25AAxxxx_Write
  __25AAxxxx_Write
  L___25AAxxxx_Write49
  L_end__25AAxxxx_Busy
  __25AAxxxx_Busy
  L___25AAxxxx_Busy51
  L_end__25AAxxxx_WriteEnabled
  __25AAxxxx_WriteEnabled
  L___25AAxxxx_WriteEnabled53
  L_end__25AAxxxx_Erase
  __25AAxxxx_Erase
  L_end__25AAxxxx_Initialize
  __25AAxxxx_Initialize
  L_end__ByteToHex
  L_end__ShortToHex
  L_end__WordToHex
  L_end__IntToHex
  L_end__LongWordToHex
  L_end__LongIntToHex
  L_end__ByteToStr
  L__ByteToStr7
  L__ByteToStr8
  L__ByteToStr9
  L__ByteToStr10
  L__ByteToStr11
  L_end__WordToStr
  L__WordToStr13
  L__WordToStr14
  L__WordToStr15
  L__WordToStr16
  L__WordToStr17
  L_end__WordToStrWithZeros
  L__WordToStrWithZeros19
  L__WordToStrWithZeros20
  L__WordToStrWithZeros21
  L__WordToStrWithZeros22
  L__WordToStrWithZeros23
  L_end__ShortToStr
  L__ShortToStr25
  L__ShortToStr26
  L__ShortToStr27
  L__ShortToStr28
  L__ShortToStr29
  L__ShortToStr30
  L__ShortToStr31
  L__ShortToStr32
  L__ShortToStr33
  L__ShortToStr34
  L__ShortToStr35
  L__ShortToStr36
  L__ShortToStr37
  L__ShortToStr38
  L_end__IntToStr
  L__IntToStr40
  L__IntToStr41
  L__IntToStr42
  L__IntToStr43
  L__IntToStr44
  L__IntToStr45
  L__IntToStr46
  L__IntToStr47
  L__IntToStr48
  L__IntToStr49
  L__IntToStr50
  L__IntToStr51
  L__IntToStr52
  L__IntToStr53
  L_end__IntToStrWithZeros
  L__IntToStrWithZeros55
  L__IntToStrWithZeros56
  L__IntToStrWithZeros57
  L__IntToStrWithZeros58
  L__IntToStrWithZeros59
  L__IntToStrWithZeros60
  L__IntToStrWithZeros61
  L__IntToStrWithZeros62
  L__IntToStrWithZeros63
  L__IntToStrWithZeros64
  L__IntToStrWithZeros65
  L__IntToStrWithZeros66
  L__IntToStrWithZeros67
  L__IntToStrWithZeros68
  L_end__LongWordToStr
  L__LongWordToStr70
  L__LongWordToStr71
  L__LongWordToStr72
  L__LongWordToStr73
  L__LongWordToStr74
  L_end__LongWordToStrWithZeros
  L__LongWordToStrWithZeros76
  L__LongWordToStrWithZeros77
  L__LongWordToStrWithZeros78
  L__LongWordToStrWithZeros79
  L__LongWordToStrWithZeros80
  L_end__LongIntToStr
  L__LongIntToStr82
  L__LongIntToStr83
  L__LongIntToStr84
  L__LongIntToStr85
  L__LongIntToStr86
  L__LongIntToStr87
  L__LongIntToStr88
  L__LongIntToStr89
  L__LongIntToStr90
  L__LongIntToStr91
  L__LongIntToStr92
  L__LongIntToStr93
  L__LongIntToStr94
  L__LongIntToStr95
  L_end__LongIntToStrWithZeros
  L__LongIntToStrWithZeros97
  L__LongIntToStrWithZeros98
  L__LongIntToStrWithZeros99
  L__LongIntToStrWithZeros100
  L__LongIntToStrWithZeros101
  L__LongIntToStrWithZeros102
  L__LongIntToStrWithZeros103
  L__LongIntToStrWithZeros104
  L__LongIntToStrWithZeros105
  L__LongIntToStrWithZeros106
  L__LongIntToStrWithZeros107
  L__LongIntToStrWithZeros108
  L__LongIntToStrWithZeros109
  L__LongIntToStrWithZeros110
  L_end__Bcd2Dec
  L_end__StrToWord
  L__StrToWord113
  L__StrToWord114
  L__StrToWord115
  L__StrToWord116
  L__StrToWord117
  L__StrToWord118
  L__StrToWord119
  L__StrToWord120
  L__StrToWord121
  L__StrToWord122
  L__StrToWord123
  L__StrToWord124
  L__StrToWord125
  L_end__StrToInt
  L__StrToInt127
  L__StrToInt128
  L__StrToInt129
  L__StrToInt130
  L__StrToInt131
  L__StrToInt132
  L__StrToInt133
  L__StrToInt134
  L__StrToInt135
  L__StrToInt136
  L__StrToInt137
  L__StrToInt138
  L__StrToInt139
  L__StrToInt140
  L__StrToInt141
  L__StrToInt142
  L__StrToInt143
  L__StrToInt144
  L__StrToInt145
  L__StrToInt146
  L__StrToInt147
  L__StrToInt148
  L_end__Dec2Bcd
  L__Dec2Bcd150
  L__Dec2Bcd151
  L__Dec2Bcd152
  L_end__Bcd2Dec16
  L_end__Dec2Bcd16
  L_end__FloatToStr
  L__FloatToStr156
  L__FloatToStr157
  L__FloatToStr158
  L__FloatToStr159
  L__FloatToStr160
  L__FloatToStr161
  L__FloatToStr162
  L__FloatToStr163
  L__FloatToStr164
  L__FloatToStr165
  L__FloatToStr166
  L__FloatToStr167
  L__FloatToStr168
  L__FloatToStr169
  L__FloatToStr170
  L__FloatToStr171
  L__FloatToStr172
  L__FloatToStr173
  L__FloatToStr174
  L__FloatToStr175
  L__FloatToStr176
  L__FloatToStr177
  L__FloatToStr178
  L__FloatToStr179
  L__FloatToStr180
  L__FloatToStr181
  L__FloatToStr182
  L__FloatToStr183
  L__FloatToStr184
  L__FloatToStr185
  L__FloatToStr186
  L__FloatToStr187
  L__FloatToStr188
  L__ShortToStr189
  L__IntToStr190
  L__IntToStrWithZeros191
  L__LongIntToStr192
  L__StrToWord193
  L__StrToInt194
  L__StrToInt195
  L__FloatToStr196
  L__FloatToStr197
  L__FloatToStr198
  L__FloatToStr199
  L__FloatToStr200
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L__ByteToStr208
  L_end_WordToStr
  _WordToStr
  L__WordToStr210
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros212
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr214
  L__ShortToStr215
  L__ShortToStr216
  L__ShortToStr217
  L_end_IntToStr
  _IntToStr
  L__IntToStr219
  L__IntToStr220
  L__IntToStr221
  L__IntToStr222
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros224
  L__IntToStrWithZeros225
  L__IntToStrWithZeros226
  L__IntToStrWithZeros227
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr229
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros231
  L_end_LongIntToStr
  _LongIntToStr
  L__LongIntToStr233
  L__LongIntToStr234
  L__LongIntToStr235
  L__LongIntToStr236
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros238
  L__LongIntToStrWithZeros239
  L__LongIntToStrWithZeros240
  L__LongIntToStrWithZeros241
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_StrToWord
  _StrToWord
  L__StrToWord244
  L__StrToWord245
  L__StrToWord246
  L_end_StrToInt
  _StrToInt
  L__StrToInt248
  L__StrToInt249
  L__StrToInt250
  L__StrToInt251
  L__StrToInt252
  L__StrToInt253
  L_end_Dec2Bcd
  _Dec2Bcd
  L__Dec2Bcd255
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr259
  L__FloatToStr260
  L__FloatToStr261
  L__FloatToStr262
  L__FloatToStr263
  L__FloatToStr264
  L__FloatToStr265
  L__FloatToStr266
  L__FloatToStr267
  L__FloatToStr268
  L__FloatToStr269
  L__FloatToStr270
  L__FloatToStr271
  L__FloatToStr272
  L__FloatToStr273
  L_end__Get_Fosc_kHz
  L_end__Get_Fosc_Per_Cyc
  L_end__Delay_Cyc
  Delay_Cyc_loop
  Delay_Cyc_rez
  L_end__Delay_Cyc_Long
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_end__VDelay_ms
  L__VDelay_ms8
  L__VDelay_ms9
  L__VDelay_ms10
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_end__VDelay_Advanced_ms
  L__VDelay_Advanced_ms14
  L__VDelay_Advanced_ms15
  L__VDelay_Advanced_ms16
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_end__Delay_W0
  L_end__Delay_1uS
  L__Delay_1uS21
  L_end__Delay_10uS
  L__Delay_10uS24
  L_end__Delay_22uS
  L__Delay_22uS27
  L_end__Delay_50uS
  L__Delay_50uS30
  L_end__Delay_80uS
  L__Delay_80uS33
  L_end__Delay_500us
  L__Delay_500us36
  L_end__Delay_5500us
  L__Delay_5500us39
  L_end__Delay_1ms
  L__Delay_1ms42
  L_end__Delay_5ms
  L__Delay_5ms45
  L_end__Delay_8ms
  L__Delay_8ms48
  L_end__Delay_10ms
  L__Delay_10ms51
  L_end__Delay_100ms
  L__Delay_100ms54
  L_end__Delay_1sec
  L__Delay_1sec57
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1uS
  _Delay_1uS
  L_end_Delay_10uS
  _Delay_10uS
  L_end_Delay_22uS
  _Delay_22uS
  L_end_Delay_50uS
  _Delay_50uS
  L_end_Delay_80uS
  _Delay_80uS
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  L_end___Multiply_32x32
  L_end___Divide_32x32
  Divide_32x32___testsus
  the_end_Divide_32x32
  Divide_32x32___divsi3
  Divide_32x32___udivsi3
  Divide_32x32_divtestb
  Divide_32x32_calcquot
  Divide_32x32_returnq
  Divide_32x32_nextbit
  Divide_32x32_iterate
  L_end___Modulus_32x32
  Modulus_32x32___testsus
  the_end_Modulus_32x32
  Modulus_32x32___modsi3
  Modulus_32x32___umodsi3
  Modulus_32x32_modtestb
  Modulus_32x32_calcrem
  Modulus_32x32_exitr
  Modulus_32x32___udivsi3
  Modulus_32x32_nextbit
  Modulus_32x32_iterate
  L_end__Multiply_32x32
  __Multiply_32x32
  L_end__Divide_32x32
  __Divide_32x32
  L_end__Modulus_32x32
  __Modulus_32x32
  L_end___Lib_MathDouble_Float_fpack
  Float__fpack
  the_end_Float__fpack
  Float_notsubnormal
  Float_zerosig
  Float_subnormal
  Float_packupandgo
  Float_overflow
  L_end___Long2Float
  LL_intro_Long2Float
  the_end__Long2Float
  Longint2Float__floatsisf
  Longword2Float__floatuisf
  Long2Float_notspecial
  Long2Float_return0
  Longint2Float_negative
  Long2Float_fixshift
  Long2Float_round
  Long2Float_shiftleft
  Long2Float_shiftright
  Long2Float__fpack
  Long2Float_notsubnormal
  Long2Float_zerosig
  Long2Float_subnormal
  Long2Float_packupandgo
  Long2Float_overflow
  L_end___LongLong2Float
  Longlong2Float_floatdisf
  the_end__LongLong2Float
  Longlong2Float_negative
  Longlong2Float_notspecial
  Longlong2Float_return0
  Longlong2Float_fixshift
  Longlong2Float_round
  Longlong2Float_shiftleft
  Longlong2Float_shiftright
  L_end___Float2Longword
  Float2Longword_fixunssfsi
  the_end__Float2Longword
  Float2Longword_funpack
  Float2Longword_returnzero
  Float2Longword_exit
  Float2Longword_shiftright
  Float2Longword_shiftleft
  Float2Longword_shiftrightloop
  Float2Longword_zeroorsub
  Float2Longword_nanorinf
  Float2Longword_finitereturn
  Float2Longword_infinite
  Float2Longword_subnormal
  Float2Longword_normalize
  L_end___Float2Longint
  Float2Longint__fixsfsi
  the_end__Float2Longint
  Float2Longint__funpack
  Float2Longint_setsign
  Float2Longint_shiftright
  Float2Longint_shiftleft
  Float2Longint_exit
  Float2Longint_shiftrightloop
  Float2Longint_zeroorsub
  Float2Longint_nanorinf
  Float2Longint_finitereturn
  Float2Longint_infinite
  Float2Longint_subnormal
  Float2Longint_normalize
  L_end___AddSub_FP
  AddSubFP__addsf3
  the_end__AddSub_FP
  AddSubFP__funpack2
  AddSubFP__fPropagateNaN
  AddSubFP_aisinfinite
  AddSubFP_checkspecialb
  AddSubFP_return2_3
  AddSubFP_getsign
  AddSubFP_gotsign
  AddSubFP_expcanonical
  AddSubFP_nonegate
  AddSubFP_aligniter
  AddSubFP_signoff
  AddSubFP_align
  AddSubFP_aligned
  AddSubFP_normalizesum
  AddSubFP_checknormal
  AddSubFP_round
  AddSubFP_discardguard
  AddSubFP_underflow
  AddSubFP_normalizeloop
  AddSubFP_normalizeexit
  AddSubFP_normalizetest
  AddSubFP__fpack
  AddSubFP__fbopExit
  AddSubFP_return8_3
  AddSubFP__fbopReturnNaN
  AddSubFP__funpack
  AddSubFP_return0_1
  AddSubFP_return8_1
  AddSubFP_notsubnormal_1
  AddSubFP_zerosig
  AddSubFP_subnormal_1
  AddSubFP_packupandgo
  AddSubFP_overflow
  AddSubFP_zeroorsub
  AddSubFP_nanorinf
  AddSubFP_finitereturn
  AddSubFP_infinite
  AddSubFP_subnormal_2
  AddSubFP_normalize
  L_end___Sub_FP
  L_end___Mul_FP
  MulFP___mulsf3
  the_end__Mul_FP
  MulFP__funpack2
  MulFP__fPropagateNaN
  MulFP_aisinfinite
  MulFP_bisinfinite
  MulFP_return8_1
  MulFP_return2_1
  MulFP_formsticky
  MulFP_formRandSig
  MulFP__fpack
  MulFP_return0_1
  MulFP__fbopExit
  MulFP__fbopReturnNaN
  MulFP__funpack
  MulFP_return0_2
  MulFP_return8_2
  MulFP_notsubnormal
  MulFP_zerosig
  MulFP_subnormal1
  MulFP_packupandgo
  MulFP_overflow
  MulFP_zeroorsub
  MulFP_nanorinf
  MulFP_finitereturn
  MulFP_infinite
  MulFP_subnormal2
  MulFP_normalize
  L_end___Div_FP
  DivFP___divsf3
  the_end__Div_FP
  DivFP__funpack2
  DivFP__fPropagateNaN
  DivFP_aisinfinite
  DivFP_returnZero
  DivFP_aiszero
  DivFP_returnInf
  DivFP_finitenonzero
  DivFP_diventry
  DivFP_divnext
  DivFP_divdone
  DivFP_divloop
  DivFP_stickyok
  DivFP_guardused
  DivFP__fpack
  DivFP_return0_1
  DivFP__fbopExit
  DivFP__fbopReturnNaN
  DivFP_return8_1
  DivFP_return2_1
  DivFP__funpack
  DivFP_return0
  DivFP_return8
  DivFP_notsubnormal
  DivFP_zerosig
  DivFP_subnormal
  DivFP_packupandgo
  DivFP_overflow
  DivFP_zeroorsub
  DivFP_nanorinf
  DivFP_finitereturn
  DivFP_infinite
  DivFP_subnormal2
  DivFP_normalize
  L_end___Compare_Fp
  CompareFp__fcompare
  the_end__Compare_Fp
  CompareFp__funpack2
  CompareFp_exit
  CompareFp_comparemag
  CompareFp_returnEqual
  CompareFp_adjust
  CompareFp__funpack
  CompareFp_zeroorsub
  CompareFp_nanorinf
  CompareFp_finitereturn
  CompareFp_infinite
  CompareFp_subnormal
  CompareFp_normalize
  L_end___Compare_Le_Fp
  L_end___Compare_Ge_Fp
  L_end_Float_fpack
  __Lib_MathDouble_Float_fpack
  L_end__Long2Float
  __Long2Float
  L_end__LongLong2Float
  __LongLong2Float
  L_end__Float2Longword
  __Float2Longword
  L_end__Float2Longint
  __Float2Longint
  L_end__AddSub_FP
  __AddSub_FP
  L_end__Sub_FP
  __Sub_FP
  L_end__Mul_FP
  __Mul_FP
  L_end__Div_FP
  __Div_FP
  L_end__Compare_Fp
  __Compare_Fp
  L_end__Compare_Le_Fp
  __Compare_Le_Fp
  L_end__Compare_Ge_Fp
  __Compare_Ge_Fp
  L_end__Unlock_IOLOCK
  L_end__Lock_IOLOCK
  L_end___Lib_PPS_33EP64GP502__PPS_Mapping
  L___Lib_PPS_33EP64GP502__PPS_Mapping3
  L___Lib_PPS_33EP64GP502__PPS_Mapping4
  L___Lib_PPS_33EP64GP502__PPS_Mapping5
  L___Lib_PPS_33EP64GP502__PPS_Mapping6
  L___Lib_PPS_33EP64GP502__PPS_Mapping7
  L___Lib_PPS_33EP64GP502__PPS_Mapping8
  L___Lib_PPS_33EP64GP502__PPS_Mapping9
  L___Lib_PPS_33EP64GP502__PPS_Mapping10
  L___Lib_PPS_33EP64GP502__PPS_Mapping11
  L___Lib_PPS_33EP64GP502__PPS_Mapping12
  L___Lib_PPS_33EP64GP502__PPS_Mapping13
  L___Lib_PPS_33EP64GP502__PPS_Mapping14
  L___Lib_PPS_33EP64GP502__PPS_Mapping15
  L___Lib_PPS_33EP64GP502__PPS_Mapping16
  L___Lib_PPS_33EP64GP502__PPS_Mapping17
  L___Lib_PPS_33EP64GP502__PPS_Mapping18
  L___Lib_PPS_33EP64GP502__PPS_Mapping19
  L___Lib_PPS_33EP64GP502__PPS_Mapping20
  L___Lib_PPS_33EP64GP502__PPS_Mapping21
  L___Lib_PPS_33EP64GP502__PPS_Mapping22
  L___Lib_PPS_33EP64GP502__PPS_Mapping23
  L___Lib_PPS_33EP64GP502__PPS_Mapping24
  L___Lib_PPS_33EP64GP502__PPS_Mapping25
  L___Lib_PPS_33EP64GP502__PPS_Mapping26
  L___Lib_PPS_33EP64GP502__PPS_Mapping27
  L___Lib_PPS_33EP64GP502__PPS_Mapping28
  L___Lib_PPS_33EP64GP502__PPS_Mapping29
  L___Lib_PPS_33EP64GP502__PPS_Mapping30
  L___Lib_PPS_33EP64GP502__PPS_Mapping31
  L___Lib_PPS_33EP64GP502__PPS_Mapping32
  L___Lib_PPS_33EP64GP502__PPS_Mapping33
  L___Lib_PPS_33EP64GP502__PPS_Mapping34
  L___Lib_PPS_33EP64GP502__PPS_Mapping35
  L___Lib_PPS_33EP64GP502__PPS_Mapping36
  L___Lib_PPS_33EP64GP502__PPS_Mapping37
  L___Lib_PPS_33EP64GP502__PPS_Mapping38
  L___Lib_PPS_33EP64GP502__PPS_Mapping39
  L___Lib_PPS_33EP64GP502__PPS_Mapping40
  L___Lib_PPS_33EP64GP502__PPS_Mapping41
  L___Lib_PPS_33EP64GP502__PPS_Mapping42
  L___Lib_PPS_33EP64GP502__PPS_Mapping43
  L___Lib_PPS_33EP64GP502__PPS_Mapping44
  L___Lib_PPS_33EP64GP502__PPS_Mapping45
  L___Lib_PPS_33EP64GP502__PPS_Mapping46
  L___Lib_PPS_33EP64GP502__PPS_Mapping47
  L___Lib_PPS_33EP64GP502__PPS_Mapping48
  L___Lib_PPS_33EP64GP502__PPS_Mapping49
  L___Lib_PPS_33EP64GP502__PPS_Mapping50
  L___Lib_PPS_33EP64GP502__PPS_Mapping51
  L___Lib_PPS_33EP64GP502__PPS_Mapping52
  L___Lib_PPS_33EP64GP502__PPS_Mapping53
  L___Lib_PPS_33EP64GP502__PPS_Mapping54
  L___Lib_PPS_33EP64GP502__PPS_Mapping55
  L___Lib_PPS_33EP64GP502__PPS_Mapping56
  L___Lib_PPS_33EP64GP502__PPS_Mapping57
  L___Lib_PPS_33EP64GP502__PPS_Mapping58
  L___Lib_PPS_33EP64GP502__PPS_Mapping59
  L___Lib_PPS_33EP64GP502__PPS_Mapping60
  L___Lib_PPS_33EP64GP502__PPS_Mapping61
  L___Lib_PPS_33EP64GP502__PPS_Mapping62
  L___Lib_PPS_33EP64GP502__PPS_Mapping63
  L___Lib_PPS_33EP64GP502__PPS_Mapping64
  L___Lib_PPS_33EP64GP502__PPS_Mapping65
  L___Lib_PPS_33EP64GP502__PPS_Mapping66
  L___Lib_PPS_33EP64GP502__PPS_Mapping67
  L___Lib_PPS_33EP64GP502__PPS_Mapping68
  L___Lib_PPS_33EP64GP502__PPS_Mapping69
  L___Lib_PPS_33EP64GP502__PPS_Mapping70
  L___Lib_PPS_33EP64GP502__PPS_Mapping71
  L___Lib_PPS_33EP64GP502__PPS_Mapping72
  L___Lib_PPS_33EP64GP502__PPS_Mapping73
  L___Lib_PPS_33EP64GP502__PPS_Mapping74
  L___Lib_PPS_33EP64GP502__PPS_Mapping75
  L___Lib_PPS_33EP64GP502__PPS_Mapping76
  L___Lib_PPS_33EP64GP502__PPS_Mapping77
  L___Lib_PPS_33EP64GP502__PPS_Mapping78
  L___Lib_PPS_33EP64GP502__PPS_Mapping79
  L___Lib_PPS_33EP64GP502__PPS_Mapping80
  L___Lib_PPS_33EP64GP502__PPS_Mapping81
  L___Lib_PPS_33EP64GP502__PPS_Mapping82
  L___Lib_PPS_33EP64GP502__PPS_Mapping83
  L___Lib_PPS_33EP64GP502__PPS_Mapping84
  L___Lib_PPS_33EP64GP502__PPS_Mapping85
  L___Lib_PPS_33EP64GP502__PPS_Mapping86
  L___Lib_PPS_33EP64GP502__PPS_Mapping87
  L___Lib_PPS_33EP64GP502__PPS_Mapping88
  L___Lib_PPS_33EP64GP502__PPS_Mapping89
  L___Lib_PPS_33EP64GP502__PPS_Mapping90
  L___Lib_PPS_33EP64GP502__PPS_Mapping91
  L___Lib_PPS_33EP64GP502__PPS_Mapping92
  L___Lib_PPS_33EP64GP502__PPS_Mapping93
  L___Lib_PPS_33EP64GP502__PPS_Mapping94
  L___Lib_PPS_33EP64GP502__PPS_Mapping95
  L___Lib_PPS_33EP64GP502__PPS_Mapping96
  L___Lib_PPS_33EP64GP502__PPS_Mapping97
  L___Lib_PPS_33EP64GP502__PPS_Mapping98
  L___Lib_PPS_33EP64GP502__PPS_Mapping99
  L___Lib_PPS_33EP64GP502__PPS_Mapping100
  L___Lib_PPS_33EP64GP502__PPS_Mapping101
  L___Lib_PPS_33EP64GP502__PPS_Mapping102
  L___Lib_PPS_33EP64GP502__PPS_Mapping103
  L___Lib_PPS_33EP64GP502__PPS_Mapping104
  L___Lib_PPS_33EP64GP502__PPS_Mapping105
  L___Lib_PPS_33EP64GP502__PPS_Mapping106
  L___Lib_PPS_33EP64GP502__PPS_Mapping107
  L___Lib_PPS_33EP64GP502__PPS_Mapping108
  L___Lib_PPS_33EP64GP502__PPS_Mapping109
  L___Lib_PPS_33EP64GP502__PPS_Mapping110
  L___Lib_PPS_33EP64GP502__PPS_Mapping111
  L___Lib_PPS_33EP64GP502__PPS_Mapping112
  L___Lib_PPS_33EP64GP502__PPS_Mapping113
  L___Lib_PPS_33EP64GP502__PPS_Mapping114
  L___Lib_PPS_33EP64GP502__PPS_Mapping115
  L___Lib_PPS_33EP64GP502__PPS_Mapping116
  L___Lib_PPS_33EP64GP502__PPS_Mapping117
  L___Lib_PPS_33EP64GP502__PPS_Mapping118
  L___Lib_PPS_33EP64GP502__PPS_Mapping119
  L___Lib_PPS_33EP64GP502__PPS_Mapping120
  L___Lib_PPS_33EP64GP502__PPS_Mapping121
  L___Lib_PPS_33EP64GP502__PPS_Mapping122
  L___Lib_PPS_33EP64GP502__PPS_Mapping123
  L___Lib_PPS_33EP64GP502__PPS_Mapping124
  L___Lib_PPS_33EP64GP502__PPS_Mapping125
  L_end__PPS_Mapping
  L_end__PPS_Mapping_NoLock
  L_end_Unlock_IOLOCK
  _Unlock_IOLOCK
  L_end_Lock_IOLOCK
  _Lock_IOLOCK
  L_end__PPS_Mapping
  __Lib_PPS_33EP64GP502__PPS_Mapping
  L___Lib_PPS_33EP64GP502__PPS_Mapping131
  L___Lib_PPS_33EP64GP502__PPS_Mapping132
  L___Lib_PPS_33EP64GP502__PPS_Mapping133
  L___Lib_PPS_33EP64GP502__PPS_Mapping134
  L___Lib_PPS_33EP64GP502__PPS_Mapping135
  L___Lib_PPS_33EP64GP502__PPS_Mapping136
  L___Lib_PPS_33EP64GP502__PPS_Mapping137
  L___Lib_PPS_33EP64GP502__PPS_Mapping138
  L___Lib_PPS_33EP64GP502__PPS_Mapping139
  L___Lib_PPS_33EP64GP502__PPS_Mapping140
  L___Lib_PPS_33EP64GP502__PPS_Mapping141
  L___Lib_PPS_33EP64GP502__PPS_Mapping142
  L___Lib_PPS_33EP64GP502__PPS_Mapping143
  L___Lib_PPS_33EP64GP502__PPS_Mapping144
  L___Lib_PPS_33EP64GP502__PPS_Mapping145
  L___Lib_PPS_33EP64GP502__PPS_Mapping146
  L___Lib_PPS_33EP64GP502__PPS_Mapping147
  L___Lib_PPS_33EP64GP502__PPS_Mapping148
  L___Lib_PPS_33EP64GP502__PPS_Mapping149
  L___Lib_PPS_33EP64GP502__PPS_Mapping150
  L___Lib_PPS_33EP64GP502__PPS_Mapping151
  L___Lib_PPS_33EP64GP502__PPS_Mapping152
  L___Lib_PPS_33EP64GP502__PPS_Mapping153
  L___Lib_PPS_33EP64GP502__PPS_Mapping154
  L___Lib_PPS_33EP64GP502__PPS_Mapping155
  L___Lib_PPS_33EP64GP502__PPS_Mapping156
  L___Lib_PPS_33EP64GP502__PPS_Mapping157
  L___Lib_PPS_33EP64GP502__PPS_Mapping158
  L___Lib_PPS_33EP64GP502__PPS_Mapping159
  L___Lib_PPS_33EP64GP502__PPS_Mapping160
  L___Lib_PPS_33EP64GP502__PPS_Mapping161
  L___Lib_PPS_33EP64GP502__PPS_Mapping162
  L___Lib_PPS_33EP64GP502__PPS_Mapping163
  L___Lib_PPS_33EP64GP502__PPS_Mapping164
  L___Lib_PPS_33EP64GP502__PPS_Mapping165
  L___Lib_PPS_33EP64GP502__PPS_Mapping166
  L___Lib_PPS_33EP64GP502__PPS_Mapping167
  L___Lib_PPS_33EP64GP502__PPS_Mapping168
  L___Lib_PPS_33EP64GP502__PPS_Mapping169
  L___Lib_PPS_33EP64GP502__PPS_Mapping170
  L_end_PPS_Mapping
  _PPS_Mapping
  L_end_PPS_Mapping_NoLock
  _PPS_Mapping_NoLock
  L_end__SPI1_Init_Advanced
  L_end__SPI1_Init
  L_end__SPI1_Read
  L__SPI1_Read3
  L__SPI1_Read4
  L__SPI1_Read5
  L__SPI1_Read6
  L__SPI1_Read7
  L__SPI1_Read8
  L__SPI1_Read9
  L__SPI1_Read10
  L__SPI1_Read11
  L__SPI1_Read12
  L_end__SPI1_Write
  L_end__SPI2_Init_Advanced
  L_end__SPI2_Init
  L_end__SPI2_Read
  L__SPI2_Read17
  L__SPI2_Read18
  L__SPI2_Read19
  L__SPI2_Read20
  L__SPI2_Read21
  L__SPI2_Read22
  L__SPI2_Read23
  L__SPI2_Read24
  L__SPI2_Read25
  L__SPI2_Read26
  L_end__SPI2_Write
  L_end__SPI_Set_Active
  L_end__SPI_Read
  L_end__SPI_Write
  L_end_SPI1_Init_Advanced
  _SPI1_Init_Advanced
  L_end_SPI1_Init
  _SPI1_Init
  L_end_SPI1_Read
  _SPI1_Read
  L__SPI1_Read34
  L__SPI1_Read35
  L_end_SPI1_Write
  _SPI1_Write
  L_end_SPI2_Init_Advanced
  _SPI2_Init_Advanced
  L_end_SPI2_Init
  _SPI2_Init
  L_end_SPI2_Read
  _SPI2_Read
  L__SPI2_Read40
  L__SPI2_Read41
  L_end_SPI2_Write
  _SPI2_Write
  L_end_SPI_Set_Active
  _SPI_Set_Active
  L_end_SPI_Read
  _SPI_Read
  L_end_SPI_Write
  _SPI_Write
  L_end____CS2S
  L_loopCS2Ss
  L_CS2Send
  L_end____FZinS
  L_loopCS2Ss
  L_end____AddToFarPointer
  L____AddToFarPointer5
  L____AddToFarPointer6
  L____AddToFarPointer7
  L____AddToFarPointer8
  L____AddToFarPointer9
  L____AddToFarPointer10
  L____AddToFarPointer11
  L____AddToFarPointer12
  L____AddToFarPointer13
  L____AddToFarPointer14
  L____AddToFarPointer15
  L____AddToFarPointer16
  L_end____SubFromFarPointer
  L____SubFromFarPointer18
  L____SubFromFarPointer19
  L____SubFromFarPointer20
  L____SubFromFarPointer21
  L____SubFromFarPointer22
  L____SubFromFarPointer23
  L____SubFromFarPointer24
  L____SubFromFarPointer25
  L____SubFromFarPointer26
  L____SubFromFarPointer27
  L____SubFromFarPointer28
  L____SubFromFarPointer29
  L_end____FlashAddressToFarPointer
  L_end____DataAddressToFarPointer
  L_end____FarPointerToFlashAddress
  L_end____FarPointerToDataAddress
  L_end____CFar2Far
  L____CFar2Far35
  L____CFar2Far36
  L____CFar2Far37
  L____CFar2Far38
  L____CFar2Far39
  L____CFar2Far40
  L____CFar2Far41
  L____CFar2Far42
  L____CFar2Far43
  L____CFar2Far44
  L____CFar2Far45
  L____CFar2Far46
  L____CFar2Far47
  L____CFar2Far48
  L____CFar2Far49
  L____CFar2Far50
  L____CFar2Far51
  L____CFar2Far52
  L____CFar2Far53
  L____CFar2Far54
  L_end____CFar2FarSwZ
  L____CFar2FarSwZ56
  L____CFar2FarSwZ57
  L____CFar2FarSwZ58
  L____CFar2FarSwZ59
  L____CFar2FarSwZ60
  L____CFar2FarSwZ61
  L____CFar2FarSwZ62
  L____CFar2FarSwZ63
  L____CFar2FarSwZ64
  L____CFar2FarSwZ65
  L____CFar2FarSwZ66
  L____CFar2FarSwZ67
  L____CFar2FarSwZ68
  L____CFar2FarSwZ69
  L_end____FZinFarS
  L____FZinFarS71
  L____FZinFarS72
  L____FZinFarS73
  L____FZinFarS74
  L____FZinFarS75
  L____FZinFarS76
  L____FZinFarS77
  L____FZinFarS78
  L____FZinFarS79
  L____FZinFarS80
  L____FZinFarS81
  L_end____CFar2FarS
  L____CFar2FarS83
  L____CFar2FarS84
  L____CFar2FarS85
  L____CFar2FarS86
  L____CFar2FarS87
  L____CFar2FarS88
  L____CFar2FarS89
  L____CFar2FarS90
  L____CFar2FarS91
  L____CFar2FarS92
  L____CFar2FarS93
  L____CFar2FarS94
  L____CFar2FarS95
  L____CFar2FarS96
  L_end___CS2S
  ___CS2S
  L_end___FZinS
  ___FZinS
  L_end___AddToFarPointer
  ___AddToFarPointer
  L____AddToFarPointer100
  L____AddToFarPointer101
  L____AddToFarPointer102
  L_end___SubFromFarPointer
  ___SubFromFarPointer
  L____SubFromFarPointer104
  L____SubFromFarPointer105
  L____SubFromFarPointer106
  L_end___FlashAddressToFarPointer
  ___FlashAddressToFarPointer
  L_end___DataAddressToFarPointer
  ___DataAddressToFarPointer
  L_end___FarPointerToFlashAddress
  ___FarPointerToFlashAddress
  L_end___FarPointerToDataAddress
  ___FarPointerToDataAddress
  L_end___CFar2Far
  ___CFar2Far
  L____CFar2Far112
  L____CFar2Far113
  L____CFar2Far114
  L____CFar2Far115
  L_end___CFar2FarSwZ
  ___CFar2FarSwZ
  L____CFar2FarSwZ117
  L____CFar2FarSwZ118
  L_end___FZinFarS
  ___FZinFarS
  L____FZinFarS120
  L____FZinFarS121
  L_end___CFar2FarS
  ___CFar2FarS
  L____CFar2FarS123
  L____CFar2FarS124
  L____CFar2FarS125
  L_end__UART1_Init
  L__UART1_Init1
  L__UART1_Init2
  L__UART1_Init3
  L__UART1_Init4
  L__UART1_Init5
  L__UART1_Init6
  L__UART1_Init7
  L__UART1_Init8
  L__UART1_Init9
  L_end__UART1_Init_Advanced
  L__UART1_Init_Advanced11
  L__UART1_Init_Advanced12
  L__UART1_Init_Advanced13
  L__UART1_Init_Advanced14
  L__UART1_Init_Advanced15
  L__UART1_Init_Advanced16
  L__UART1_Init_Advanced17
  L__UART1_Init_Advanced18
  L__UART1_Init_Advanced19
  L__UART1_Init_Advanced20
  L__UART1_Init_Advanced21
  L__UART1_Init_Advanced22
  L__UART1_Init_Advanced23
  L__UART1_Init_Advanced24
  L__UART1_Init_Advanced25
  L__UART1_Init_Advanced26
  L__UART1_Init_Advanced27
  L__UART1_Init_Advanced28
  L__UART1_Init_Advanced29
  L__UART1_Init_Advanced30
  L__UART1_Init_Advanced31
  L_end__UART1_Write
  L__UART1_Write33
  L__UART1_Write34
  L__UART1_Write35
  L__UART1_Write36
  L__UART1_Write37
  L_end__UART1_Data_Ready
  L_end__UART1_Read
  L_end__UART1_TX_Idle
  L_end__UART1_Write_Text
  L__UART1_Write_Text42
  L__UART1_Write_Text43
  L__UART1_Write_Text44
  L__UART1_Write_Text45
  L__UART1_Write_Text46
  L_end__UART1_Read_Text
  L__UART1_Read_Text48
  L__UART1_Read_Text49
  L__UART1_Read_Text50
  L__UART1_Read_Text51
  L__UART1_Read_Text52
  L__UART1_Read_Text53
  L__UART1_Read_Text54
  L__UART1_Read_Text55
  L__UART1_Read_Text56
  L__UART1_Read_Text57
  L__UART1_Read_Text58
  L__UART1_Read_Text59
  L__UART1_Read_Text60
  L__UART1_Read_Text61
  L__UART1_Read_Text62
  L__UART1_Read_Text63
  L__UART1_Read_Text64
  L__UART1_Read_Text65
  L__UART1_Read_Text66
  L__UART1_Read_Text67
  L__UART1_Read_Text68
  L__UART1_Read_Text69
  L_end__UART2_Init
  L__UART2_Init71
  L__UART2_Init72
  L__UART2_Init73
  L__UART2_Init74
  L__UART2_Init75
  L__UART2_Init76
  L__UART2_Init77
  L__UART2_Init78
  L__UART2_Init79
  L_end__UART2_Init_Advanced
  L__UART2_Init_Advanced81
  L__UART2_Init_Advanced82
  L__UART2_Init_Advanced83
  L__UART2_Init_Advanced84
  L__UART2_Init_Advanced85
  L__UART2_Init_Advanced86
  L__UART2_Init_Advanced87
  L__UART2_Init_Advanced88
  L__UART2_Init_Advanced89
  L__UART2_Init_Advanced90
  L__UART2_Init_Advanced91
  L__UART2_Init_Advanced92
  L__UART2_Init_Advanced93
  L__UART2_Init_Advanced94
  L__UART2_Init_Advanced95
  L__UART2_Init_Advanced96
  L__UART2_Init_Advanced97
  L__UART2_Init_Advanced98
  L__UART2_Init_Advanced99
  L__UART2_Init_Advanced100
  L__UART2_Init_Advanced101
  L_end__UART2_Write
  L__UART2_Write103
  L__UART2_Write104
  L__UART2_Write105
  L__UART2_Write106
  L__UART2_Write107
  L_end__UART2_Data_Ready
  L_end__UART2_Read
  L_end__UART2_TX_Idle
  L_end__UART2_Write_Text
  L__UART2_Write_Text112
  L__UART2_Write_Text113
  L__UART2_Write_Text114
  L__UART2_Write_Text115
  L__UART2_Write_Text116
  L_end__UART2_Read_Text
  L__UART2_Read_Text118
  L__UART2_Read_Text119
  L__UART2_Read_Text120
  L__UART2_Read_Text121
  L__UART2_Read_Text122
  L__UART2_Read_Text123
  L__UART2_Read_Text124
  L__UART2_Read_Text125
  L__UART2_Read_Text126
  L__UART2_Read_Text127
  L__UART2_Read_Text128
  L__UART2_Read_Text129
  L__UART2_Read_Text130
  L__UART2_Read_Text131
  L__UART2_Read_Text132
  L__UART2_Read_Text133
  L__UART2_Read_Text134
  L__UART2_Read_Text135
  L__UART2_Read_Text136
  L__UART2_Read_Text137
  L__UART2_Read_Text138
  L__UART2_Read_Text139
  L_end__UART_Set_Active
  L_end__UART_Write
  L_end__UART_Data_Ready
  L_end__UART_Read
  L_end__UART_TX_Idle
  L_end__UART_Write_Text
  L__UART_Write_Text146
  L__UART_Write_Text147
  L__UART_Write_Text148
  L__UART_Write_Text149
  L__UART_Write_Text150
  L_end__UART_Read_Text
  L__UART_Read_Text152
  L__UART_Read_Text153
  L__UART_Read_Text154
  L__UART_Read_Text155
  L__UART_Read_Text156
  L__UART_Read_Text157
  L__UART_Read_Text158
  L__UART_Read_Text159
  L__UART_Read_Text160
  L__UART_Read_Text161
  L__UART_Read_Text162
  L__UART_Read_Text163
  L__UART_Read_Text164
  L__UART_Read_Text165
  L__UART_Read_Text166
  L__UART_Read_Text167
  L__UART_Read_Text168
  L__UART_Read_Text169
  L__UART_Read_Text170
  L__UART_Read_Text171
  L__UART_Read_Text172
  L__UART_Read_Text173
  L__UART1_Read_Text174
  L__UART2_Read_Text175
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init177
  L__UART1_Init178
  L__UART1_Init179
  L__UART1_Init180
  L__UART1_Init181
  L__UART1_Init182
  L__UART1_Init183
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced185
  L__UART1_Init_Advanced186
  L__UART1_Init_Advanced187
  L__UART1_Init_Advanced188
  L__UART1_Init_Advanced189
  L__UART1_Init_Advanced190
  L__UART1_Init_Advanced191
  L__UART1_Init_Advanced192
  L__UART1_Init_Advanced193
  L__UART1_Init_Advanced194
  L__UART1_Init_Advanced195
  L__UART1_Init_Advanced196
  L__UART1_Init_Advanced197
  L__UART1_Init_Advanced198
  L__UART1_Init_Advanced199
  L_end_UART1_Write
  _UART1_Write
  L__UART1_Write201
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_TX_Idle
  _UART1_TX_Idle
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text206
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text208
  L__UART1_Read_Text209
  L__UART1_Read_Text210
  L__UART1_Read_Text211
  L__UART1_Read_Text212
  L__UART1_Read_Text213
  L_end_UART2_Init
  _UART2_Init
  L__UART2_Init215
  L__UART2_Init216
  L__UART2_Init217
  L__UART2_Init218
  L__UART2_Init219
  L__UART2_Init220
  L__UART2_Init221
  L_end_UART2_Init_Advanced
  _UART2_Init_Advanced
  L__UART2_Init_Advanced223
  L__UART2_Init_Advanced224
  L__UART2_Init_Advanced225
  L__UART2_Init_Advanced226
  L__UART2_Init_Advanced227
  L__UART2_Init_Advanced228
  L__UART2_Init_Advanced229
  L__UART2_Init_Advanced230
  L__UART2_Init_Advanced231
  L__UART2_Init_Advanced232
  L__UART2_Init_Advanced233
  L__UART2_Init_Advanced234
  L__UART2_Init_Advanced235
  L__UART2_Init_Advanced236
  L__UART2_Init_Advanced237
  L_end_UART2_Write
  _UART2_Write
  L__UART2_Write239
  L_end_UART2_Data_Ready
  _UART2_Data_Ready
  L_end_UART2_Read
  _UART2_Read
  L_end_UART2_TX_Idle
  _UART2_TX_Idle
  L_end_UART2_Write_Text
  _UART2_Write_Text
  L__UART2_Write_Text244
  L_end_UART2_Read_Text
  _UART2_Read_Text
  L__UART2_Read_Text246
  L__UART2_Read_Text247
  L__UART2_Read_Text248
  L__UART2_Read_Text249
  L__UART2_Read_Text250
  L__UART2_Read_Text251
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read
  _UART_Read
  L_end_UART_TX_Idle
  _UART_TX_Idle
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text258
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text260
  L__UART_Read_Text261
  L__UART_Read_Text262
  L__UART_Read_Text263
  L__UART_Read_Text264
  L__UART_Read_Text265
  L_end_dsPIC33_CAN_StartTransmission
  L_dsPIC33_CAN_StartTransmission1
  L_dsPIC33_CAN_StartTransmission2
  L_dsPIC33_CAN_StartTransmission3
  L_end__StartCANHighPriorityMessageEngine
  L__StartCANHighPriorityMessageEngine5
  L__StartCANHighPriorityMessageEngine6
  L__StartCANHighPriorityMessageEngine7
  L_end__StartCANMessageEngine
  L__StartCANMessageEngine9
  L__StartCANMessageEngine10
  L__StartCANMessageEngine11
  L_end__dsPIC33_CAN_GlobalInterruptCAN_Event
  L__dsPIC33_CAN_GlobalInterruptCAN_Event13
  L__dsPIC33_CAN_GlobalInterruptCAN_Event14
  L__dsPIC33_CAN_GlobalInterruptCAN_Event15
  L_end_dsPIC33_CAN_Interrupt_CAN_Event
  L_dsPIC33_CAN_Interrupt_CAN_Event17
  L_dsPIC33_CAN_Interrupt_CAN_Event18
  L_dsPIC33_CAN_Interrupt_CAN_Event19
  L_dsPIC33_CAN_Interrupt_CAN_Event20
  L_dsPIC33_CAN_Interrupt_CAN_Event21
  L_dsPIC33_CAN_Interrupt_CAN_Event22
  L_dsPIC33_CAN_Interrupt_CAN_Event23
  L_dsPIC33_CAN_Interrupt_CAN_Event24
  L_dsPIC33_CAN_Interrupt_CAN_Event25
  L_dsPIC33_CAN_Interrupt_CAN_Event26
  L_dsPIC33_CAN_Interrupt_CAN_Event27
  L_dsPIC33_CAN_Interrupt_CAN_Event28
  L_dsPIC33_CAN_Interrupt_CAN_Event29
  L_dsPIC33_CAN_Interrupt_CAN_Event30
  L_dsPIC33_CAN_Interrupt_CAN_Event31
  L_dsPIC33_CAN_Interrupt_CAN_Event32
  L_dsPIC33_CAN_Interrupt_CAN_Event33
  L_dsPIC33_CAN_Interrupt_CAN_Event34
  L_dsPIC33_CAN_Interrupt_CAN_Event35
  L_dsPIC33_CAN_Interrupt_CAN_Event36
  L_dsPIC33_CAN_Interrupt_CAN_Event37
  L_dsPIC33_CAN_Interrupt_CAN_Event38
  L_dsPIC33_CAN_Interrupt_CAN_Event39
  L_dsPIC33_CAN_Interrupt_CAN_Event40
  L_dsPIC33_CAN_Interrupt_CAN_Event41
  L_dsPIC33_CAN_Interrupt_CAN_Event42
  L_dsPIC33_CAN_Interrupt_CAN_Event43
  L_dsPIC33_CAN_Interrupt_CAN_Event44
  L_dsPIC33_CAN_Interrupt_CAN_Event45
  L_dsPIC33_CAN_Interrupt_CAN_Event46
  L_dsPIC33_CAN_Interrupt_CAN_Event47
  L_dsPIC33_CAN_Interrupt_CAN_Event48
  L_dsPIC33_CAN_Interrupt_CAN_Event49
  L_dsPIC33_CAN_Interrupt_CAN_Event50
  L_dsPIC33_CAN_Interrupt_CAN_Event51
  L_dsPIC33_CAN_Interrupt_CAN_Event52
  L_dsPIC33_CAN_Interrupt_CAN_Event53
  L_dsPIC33_CAN_Interrupt_CAN_Event54
  L_dsPIC33_CAN_Interrupt_CAN_Event55
  L_dsPIC33_CAN_Interrupt_CAN_Event56
  L_dsPIC33_CAN_Interrupt_CAN_Event57
  L_dsPIC33_CAN_Interrupt_CAN_Event58
  L_dsPIC33_CAN_Interrupt_CAN_Event59
  L_dsPIC33_CAN_Interrupt_CAN_Event60
  L_dsPIC33_CAN_Interrupt_CAN_Event61
  L_dsPIC33_CAN_Interrupt_CAN_Event62
  L_end__dsPIC33_CAN_Initialize
  L__dsPIC33_CAN_Initialize64
  L__dsPIC33_CAN_Initialize65
  L__dsPIC33_CAN_Initialize66
  L__dsPIC33_CAN_Initialize67
  L__dsPIC33_CAN_Initialize68
  L__dsPIC33_CAN_Initialize69
  L__dsPIC33_CAN_Initialize70
  L__dsPIC33_CAN_Initialize71
  L__dsPIC33_CAN_Initialize72
  L__dsPIC33_CAN_Initialize73
  L_end_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer75
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer76
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer77
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer78
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer79
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer80
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer81
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer82
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer83
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer84
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer85
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer86
  L_end__LockCANInterrupt
  L__LockCANInterrupt88
  L__LockCANInterrupt89
  L__LockCANInterrupt90
  L_end__UnLockCANInterrupt
  L__UnLockCANInterrupt92
  L__UnLockCANInterrupt93
  L__UnLockCANInterrupt94
  L_end_dsPIC33_CAN_SetWindowSelectBit
  L_end_dsPIC33_CAN_ClearWindowSelectBit
  L_end_dsPIC33_CAN_SetFilterMaskBits
  L_dsPIC33_CAN_SetFilterMaskBits98
  L_dsPIC33_CAN_SetFilterMaskBits99
  L_dsPIC33_CAN_SetFilterMaskBits100
  L_end_dsPIC33_CAN_ValidateCAN_ID
  L_end_dsPIC33_CAN_ManipulateTXBit
  L_dsPIC33_CAN_ManipulateTXBit103
  L_dsPIC33_CAN_ManipulateTXBit104
  L_dsPIC33_CAN_ManipulateTXBit105
  L_dsPIC33_CAN_ManipulateTXBit106
  L_dsPIC33_CAN_ManipulateTXBit107
  L_dsPIC33_CAN_ManipulateTXBit108
  L_dsPIC33_CAN_ManipulateTXBit109
  L_end_dsPIC33_CAN_ReadTXBit
  L_dsPIC33_CAN_ReadTXBit111
  L_end_dsPIC33_CAN_ReadRXBit
  L_dsPIC33_CAN_ReadRXBit113
  L_dsPIC33_CAN_ReadRXBit114
  L_dsPIC33_CAN_ReadRXBit115
  L_dsPIC33_CAN_ReadRXBit116
  L_dsPIC33_CAN_ReadRXBit117
  L_dsPIC33_CAN_ReadRXBit118
  L_dsPIC33_CAN_ReadRXBit119
  L_dsPIC33_CAN_ReadRXBit120
  L_dsPIC33_CAN_ReadRXBit121
  L_end__dsPIC33_CAN_TX_Aborted
  L_end__dsPIC33_CAN_TX_Requested
  L_end__dsPIC33_CAN_TX_ArbitrationLost
  L_end__dsPIC33_CAN_TX_ErrorDetected
  L_end__dsPIC33_CAN_SetBufferAsTransmitter
  L_end__dsPIC33_CAN_SetTransmitterPriority
  L_end__dsPIC33_CAN_RequestTransmit
  L_end__dsPIC33_CAN_ClearTransmit
  L_end__dsPIC33_CAN_RX_Full
  L_end__dsPIC33_CAN_RX_Overflow
  L_end__dsPIC33_CAN_InterruptCodeWithFilterHit
  L_end__dsPIC33_CAN_GlobalInterruptCAN_RX_Ready
  L__dsPIC33_CAN_GlobalInterruptCAN_RX_Ready134
  L__dsPIC33_CAN_GlobalInterruptCAN_RX_Ready135
  L__dsPIC33_CAN_GlobalInterruptCAN_RX_Ready136
  L_end__dsPIC33_CAN_GlobalInterruptCAN_TX_Request
  L__dsPIC33_CAN_GlobalInterruptCAN_TX_Request138
  L__dsPIC33_CAN_GlobalInterruptCAN_TX_Request139
  L__dsPIC33_CAN_GlobalInterruptCAN_TX_Request140
  L_end__dsPIC33_CAN_GlobalInterruptFlagCAN_Event
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event142
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event143
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event144
  L_end__dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready146
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready147
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready148
  L_end__dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request150
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request151
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request152
  L_end__dsPIC33_CAN_GlobalInterruptCAN_EventPriority
  L_end__dsPIC33_CAN_GlobalInterruptCAN_RX_ReadyPriority
  L_end__dsPIC33_CAN_GlobalInterruptCAN_TX_RequestPriority
  L_end__dsPIC33_CAN_InterruptCode
  L_end__dsPIC33_CAN_InterruptFlagTXInErrorStateBusOff
  L_end__dsPIC33_CAN_InterruptFlagTXInErrorStateBusPassive
  L_end__dsPIC33_CAN_InterruptFlagRXInErrorBusPassive
  L_end__dsPIC33_CAN_InterruptFlagTXInErrorStateWarning
  L_end__dsPIC33_CAN_InterruptFlagRXInErrorStateWarning
  L_end__dsPIC33_CAN_InterruptFlagTXOrRXInErrorStateWarning
  L_end__dsPIC33_CAN_InterruptFlagInvalidMessage
  L__dsPIC33_CAN_InterruptFlagInvalidMessage164
  L__dsPIC33_CAN_InterruptFlagInvalidMessage165
  L__dsPIC33_CAN_InterruptFlagInvalidMessage166
  L_end__dsPIC33_CAN_InterruptFlagBusWakeupActivity
  L__dsPIC33_CAN_InterruptFlagBusWakeupActivity168
  L__dsPIC33_CAN_InterruptFlagBusWakeupActivity169
  L__dsPIC33_CAN_InterruptFlagBusWakeupActivity170
  L_end__dsPIC33_CAN_InterruptFlagError
  L__dsPIC33_CAN_InterruptFlagError172
  L__dsPIC33_CAN_InterruptFlagError173
  L__dsPIC33_CAN_InterruptFlagError174
  L_end__dsPIC33_CAN_InterruptFlagFIFO_AlmostFull
  L__dsPIC33_CAN_InterruptFlagFIFO_AlmostFull176
  L__dsPIC33_CAN_InterruptFlagFIFO_AlmostFull177
  L__dsPIC33_CAN_InterruptFlagFIFO_AlmostFull178
  L_end__dsPIC33_CAN_InterruptFlagRXBufferOverflow
  L__dsPIC33_CAN_InterruptFlagRXBufferOverflow180
  L__dsPIC33_CAN_InterruptFlagRXBufferOverflow181
  L__dsPIC33_CAN_InterruptFlagRXBufferOverflow182
  L_end__dsPIC33_CAN_InterruptFlagRXBuffer
  L__dsPIC33_CAN_InterruptFlagRXBuffer184
  L__dsPIC33_CAN_InterruptFlagRXBuffer185
  L__dsPIC33_CAN_InterruptFlagRXBuffer186
  L_end__dsPIC33_CAN_InterruptFlagTXBuffer
  L__dsPIC33_CAN_InterruptFlagTXBuffer188
  L__dsPIC33_CAN_InterruptFlagTXBuffer189
  L__dsPIC33_CAN_InterruptFlagTXBuffer190
  L_end__dsPIC33_CAN_InvalidMessageInterrupt
  L__dsPIC33_CAN_InvalidMessageInterrupt192
  L__dsPIC33_CAN_InvalidMessageInterrupt193
  L__dsPIC33_CAN_InvalidMessageInterrupt194
  L_end__dsPIC33_CAN_BusWakeUpInterrupt
  L__dsPIC33_CAN_BusWakeUpInterrupt196
  L__dsPIC33_CAN_BusWakeUpInterrupt197
  L__dsPIC33_CAN_BusWakeUpInterrupt198
  L_end__dsPIC33_CAN_ErrorInterrupt
  L__dsPIC33_CAN_ErrorInterrupt200
  L__dsPIC33_CAN_ErrorInterrupt201
  L__dsPIC33_CAN_ErrorInterrupt202
  L_end__dsPIC33_CAN_FIFO_AlmostFullInterrupt
  L__dsPIC33_CAN_FIFO_AlmostFullInterrupt204
  L__dsPIC33_CAN_FIFO_AlmostFullInterrupt205
  L__dsPIC33_CAN_FIFO_AlmostFullInterrupt206
  L_end__dsPIC33_CAN_RXBufferOverflowInterrupt
  L__dsPIC33_CAN_RXBufferOverflowInterrupt208
  L__dsPIC33_CAN_RXBufferOverflowInterrupt209
  L__dsPIC33_CAN_RXBufferOverflowInterrupt210
  L_end__dsPIC33_CAN_RXBufferInterrupt
  L__dsPIC33_CAN_RXBufferInterrupt212
  L__dsPIC33_CAN_RXBufferInterrupt213
  L__dsPIC33_CAN_RXBufferInterrupt214
  L_end__dsPIC33_CAN_TXBufferInterrupt
  L__dsPIC33_CAN_TXBufferInterrupt216
  L__dsPIC33_CAN_TXBufferInterrupt217
  L__dsPIC33_CAN_TXBufferInterrupt218
  L_end__dsPIC33_CAN_SetBufferSize
  L__dsPIC33_CAN_SetBufferSize220
  L__dsPIC33_CAN_SetBufferSize221
  L__dsPIC33_CAN_SetBufferSize222
  L__dsPIC33_CAN_SetBufferSize223
  L__dsPIC33_CAN_SetBufferSize224
  L__dsPIC33_CAN_SetBufferSize225
  L__dsPIC33_CAN_SetBufferSize226
  L__dsPIC33_CAN_SetBufferSize227
  L__dsPIC33_CAN_SetBufferSize228
  L__dsPIC33_CAN_SetBufferSize229
  L__dsPIC33_CAN_SetBufferSize230
  L__dsPIC33_CAN_SetBufferSize231
  L__dsPIC33_CAN_SetBufferSize232
  L__dsPIC33_CAN_SetBufferSize233
  L__dsPIC33_CAN_SetBufferSize234
  L__dsPIC33_CAN_SetBufferSize235
  L__dsPIC33_CAN_SetBufferSize236
  L__dsPIC33_CAN_SetBufferSize237
  L__dsPIC33_CAN_SetBufferSize238
  L_end__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement240
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement241
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement242
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement243
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement244
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement245
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement246
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement247
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement248
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement249
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement250
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement251
  L_end__dsPIC33_CAN_HardwareFIFO_SetFilter
  L_end__dsPIC33_CAN_HardwareFIFO_SetStartBuffer
  L_end__dsPIC33_CAN_HardwareFIFO_GetCurrentBuffer
  L_end__dsPIC33_CAN_HardwareFIFO_GetNextBuffer
  L_end__dsPIC33_CAN_RegisterBufferWithFilter
  L_end__dsPIC33_CAN_AssociateFilterWithMask
  L__dsPIC33_CAN_AssociateFilterWithMask258
  L__dsPIC33_CAN_AssociateFilterWithMask259
  L__dsPIC33_CAN_AssociateFilterWithMask260
  L_end__dsPIC33_CAN_SetFilter
  L__dsPIC33_CAN_SetFilter262
  L__dsPIC33_CAN_SetFilter263
  L__dsPIC33_CAN_SetFilter264
  L_end__dsPIC33_CAN_SetMask
  L__dsPIC33_CAN_SetMask266
  L__dsPIC33_CAN_SetMask267
  L__dsPIC33_CAN_SetMask268
  L_end__dsPIC33_CAN_EnableDisableRXFilters
  L_end__dsPIC33_CAN_SetBaud
  L__dsPIC33_CAN_SetBaud271
  L__dsPIC33_CAN_SetBaud272
  L__dsPIC33_CAN_SetBaud273
  L_end__dsPIC33_CAN_EnterConfigMode
  L__dsPIC33_CAN_EnterConfigMode275
  L__dsPIC33_CAN_EnterConfigMode276
  L__dsPIC33_CAN_EnterConfigMode277
  L__dsPIC33_CAN_EnterConfigMode278
  L__dsPIC33_CAN_EnterConfigMode279
  L_end__dsPIC33_CAN_EnterNormalMode
  L__dsPIC33_CAN_EnterNormalMode281
  L__dsPIC33_CAN_EnterNormalMode282
  L__dsPIC33_CAN_EnterNormalMode283
  L__dsPIC33_CAN_EnterNormalMode284
  L__dsPIC33_CAN_EnterNormalMode285
  L_end__dsPIC33_CAN_AbortPendingTransmissions
  L_dsPIC33_CAN_StartTransmission287
  L_dsPIC33_CAN_ReadRXBit288
  L_end_StartTransmission
  dsPIC33_CAN_StartTransmission
  L_dsPIC33_CAN_StartTransmission290
  L_end_StartCANHighPriorityMessageEngine
  _StartCANHighPriorityMessageEngine
  L__StartCANHighPriorityMessageEngine292
  L_end_StartCANMessageEngine
  _StartCANMessageEngine
  L__StartCANMessageEngine294
  L_end_dsPIC33_CAN_GlobalInterruptCAN_Event
  _dsPIC33_CAN_GlobalInterruptCAN_Event
  L__dsPIC33_CAN_GlobalInterruptCAN_Event296
  L_end_Interrupt_CAN_Event
  dsPIC33_CAN_Interrupt_CAN_Event
  L_dsPIC33_CAN_Interrupt_CAN_Event298
  L_dsPIC33_CAN_Interrupt_CAN_Event299
  L_dsPIC33_CAN_Interrupt_CAN_Event300
  L_dsPIC33_CAN_Interrupt_CAN_Event301
  L_dsPIC33_CAN_Interrupt_CAN_Event302
  L_dsPIC33_CAN_Interrupt_CAN_Event303
  L_dsPIC33_CAN_Interrupt_CAN_Event304
  L_dsPIC33_CAN_Interrupt_CAN_Event305
  L_dsPIC33_CAN_Interrupt_CAN_Event306
  L_dsPIC33_CAN_Interrupt_CAN_Event307
  L_dsPIC33_CAN_Interrupt_CAN_Event308
  L_dsPIC33_CAN_Interrupt_CAN_Event309
  L_dsPIC33_CAN_Interrupt_CAN_Event310
  L_end_dsPIC33_CAN_Initialize
  _dsPIC33_CAN_Initialize
  L__dsPIC33_CAN_Initialize312
  L__dsPIC33_CAN_Initialize313
  L_end_dsPIC33_DMA_Style_Buffer
  dsPIC33_CAN_dsPIC33_DMA_Style_Buffer
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer315
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer316
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer317
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer318
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer319
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer320
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer321
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer322
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer323
  L_dsPIC33_CAN_dsPIC33_DMA_Style_Buffer324
  L_end_LockCANInterrupt
  _LockCANInterrupt
  L__LockCANInterrupt326
  L_end_UnLockCANInterrupt
  _UnLockCANInterrupt
  L__UnLockCANInterrupt328
  L_end_SetWindowSelectBit
  dsPIC33_CAN_SetWindowSelectBit
  L_end_ClearWindowSelectBit
  dsPIC33_CAN_ClearWindowSelectBit
  L_end_SetFilterMaskBits
  dsPIC33_CAN_SetFilterMaskBits
  L_dsPIC33_CAN_SetFilterMaskBits332
  L_dsPIC33_CAN_SetFilterMaskBits333
  L_dsPIC33_CAN_SetFilterMaskBits334
  L_end_ValidateCAN_ID
  dsPIC33_CAN_ValidateCAN_ID
  L_end_ManipulateTXBit
  dsPIC33_CAN_ManipulateTXBit
  L_dsPIC33_CAN_ManipulateTXBit337
  L_end_ReadTXBit
  dsPIC33_CAN_ReadTXBit
  L_dsPIC33_CAN_ReadTXBit339
  L_dsPIC33_CAN_ReadTXBit340
  L_end_ReadRXBit
  dsPIC33_CAN_ReadRXBit
  L_dsPIC33_CAN_ReadRXBit342
  L_dsPIC33_CAN_ReadRXBit343
  L_dsPIC33_CAN_ReadRXBit344
  L_dsPIC33_CAN_ReadRXBit345
  L_end_dsPIC33_CAN_TX_Aborted
  _dsPIC33_CAN_TX_Aborted
  L_end_dsPIC33_CAN_TX_Requested
  _dsPIC33_CAN_TX_Requested
  L_end_dsPIC33_CAN_TX_ArbitrationLost
  _dsPIC33_CAN_TX_ArbitrationLost
  L_end_dsPIC33_CAN_TX_ErrorDetected
  _dsPIC33_CAN_TX_ErrorDetected
  L_end_dsPIC33_CAN_SetBufferAsTransmitter
  _dsPIC33_CAN_SetBufferAsTransmitter
  L_end_dsPIC33_CAN_SetTransmitterPriority
  _dsPIC33_CAN_SetTransmitterPriority
  L_end_dsPIC33_CAN_RequestTransmit
  _dsPIC33_CAN_RequestTransmit
  L_end_dsPIC33_CAN_ClearTransmit
  _dsPIC33_CAN_ClearTransmit
  L_end_dsPIC33_CAN_RX_Full
  _dsPIC33_CAN_RX_Full
  L_end_dsPIC33_CAN_RX_Overflow
  _dsPIC33_CAN_RX_Overflow
  L_end_dsPIC33_CAN_InterruptCodeWithFilterHit
  _dsPIC33_CAN_InterruptCodeWithFilterHit
  L_end_dsPIC33_CAN_GlobalInterruptCAN_RX_Ready
  _dsPIC33_CAN_GlobalInterruptCAN_RX_Ready
  L__dsPIC33_CAN_GlobalInterruptCAN_RX_Ready358
  L_end_dsPIC33_CAN_GlobalInterruptCAN_TX_Request
  _dsPIC33_CAN_GlobalInterruptCAN_TX_Request
  L__dsPIC33_CAN_GlobalInterruptCAN_TX_Request360
  L_end_dsPIC33_CAN_GlobalInterruptFlagCAN_Event
  _dsPIC33_CAN_GlobalInterruptFlagCAN_Event
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event362
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_Event363
  L_end_dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready
  _dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready365
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_RX_Ready366
  L_end_dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request
  _dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request368
  L__dsPIC33_CAN_GlobalInterruptFlagCAN_TX_Request369
  L_end_dsPIC33_CAN_GlobalInterruptCAN_EventPriority
  _dsPIC33_CAN_GlobalInterruptCAN_EventPriority
  L_end_dsPIC33_CAN_GlobalInterruptCAN_RX_ReadyPriority
  _dsPIC33_CAN_GlobalInterruptCAN_RX_ReadyPriority
  L_end_dsPIC33_CAN_GlobalInterruptCAN_TX_RequestPriority
  _dsPIC33_CAN_GlobalInterruptCAN_TX_RequestPriority
  L_end_dsPIC33_CAN_InterruptCode
  _dsPIC33_CAN_InterruptCode
  L_end_dsPIC33_CAN_InterruptFlagTXInErrorStateBusOff
  _dsPIC33_CAN_InterruptFlagTXInErrorStateBusOff
  L__dsPIC33_CAN_InterruptFlagTXInErrorStateBusOff375
  L_end_dsPIC33_CAN_InterruptFlagTXInErrorStateBusPassive
  _dsPIC33_CAN_InterruptFlagTXInErrorStateBusPassive
  L__dsPIC33_CAN_InterruptFlagTXInErrorStateBusPassive377
  L_end_dsPIC33_CAN_InterruptFlagRXInErrorBusPassive
  _dsPIC33_CAN_InterruptFlagRXInErrorBusPassive
  L__dsPIC33_CAN_InterruptFlagRXInErrorBusPassive379
  L_end_dsPIC33_CAN_InterruptFlagTXInErrorStateWarning
  _dsPIC33_CAN_InterruptFlagTXInErrorStateWarning
  L__dsPIC33_CAN_InterruptFlagTXInErrorStateWarning381
  L_end_dsPIC33_CAN_InterruptFlagRXInErrorStateWarning
  _dsPIC33_CAN_InterruptFlagRXInErrorStateWarning
  L__dsPIC33_CAN_InterruptFlagRXInErrorStateWarning383
  L_end_dsPIC33_CAN_InterruptFlagTXOrRXInErrorStateWarning
  _dsPIC33_CAN_InterruptFlagTXOrRXInErrorStateWarning
  L__dsPIC33_CAN_InterruptFlagTXOrRXInErrorStateWarning385
  L_end_dsPIC33_CAN_InterruptFlagInvalidMessage
  _dsPIC33_CAN_InterruptFlagInvalidMessage
  L__dsPIC33_CAN_InterruptFlagInvalidMessage387
  L__dsPIC33_CAN_InterruptFlagInvalidMessage388
  L_end_dsPIC33_CAN_InterruptFlagBusWakeupActivity
  _dsPIC33_CAN_InterruptFlagBusWakeupActivity
  L__dsPIC33_CAN_InterruptFlagBusWakeupActivity390
  L__dsPIC33_CAN_InterruptFlagBusWakeupActivity391
  L_end_dsPIC33_CAN_InterruptFlagError
  _dsPIC33_CAN_InterruptFlagError
  L__dsPIC33_CAN_InterruptFlagError393
  L__dsPIC33_CAN_InterruptFlagError394
  L_end_dsPIC33_CAN_InterruptFlagFIFO_AlmostFull
  _dsPIC33_CAN_InterruptFlagFIFO_AlmostFull
  L__dsPIC33_CAN_InterruptFlagFIFO_AlmostFull396
  L__dsPIC33_CAN_InterruptFlagFIFO_AlmostFull397
  L_end_dsPIC33_CAN_InterruptFlagRXBufferOverflow
  _dsPIC33_CAN_InterruptFlagRXBufferOverflow
  L__dsPIC33_CAN_InterruptFlagRXBufferOverflow399
  L__dsPIC33_CAN_InterruptFlagRXBufferOverflow400
  L_end_dsPIC33_CAN_InterruptFlagRXBuffer
  _dsPIC33_CAN_InterruptFlagRXBuffer
  L__dsPIC33_CAN_InterruptFlagRXBuffer402
  L__dsPIC33_CAN_InterruptFlagRXBuffer403
  L_end_dsPIC33_CAN_InterruptFlagTXBuffer
  _dsPIC33_CAN_InterruptFlagTXBuffer
  L__dsPIC33_CAN_InterruptFlagTXBuffer405
  L__dsPIC33_CAN_InterruptFlagTXBuffer406
  L_end_dsPIC33_CAN_InvalidMessageInterrupt
  _dsPIC33_CAN_InvalidMessageInterrupt
  L__dsPIC33_CAN_InvalidMessageInterrupt408
  L_end_dsPIC33_CAN_BusWakeUpInterrupt
  _dsPIC33_CAN_BusWakeUpInterrupt
  L__dsPIC33_CAN_BusWakeUpInterrupt410
  L_end_dsPIC33_CAN_ErrorInterrupt
  _dsPIC33_CAN_ErrorInterrupt
  L__dsPIC33_CAN_ErrorInterrupt412
  L_end_dsPIC33_CAN_FIFO_AlmostFullInterrupt
  _dsPIC33_CAN_FIFO_AlmostFullInterrupt
  L__dsPIC33_CAN_FIFO_AlmostFullInterrupt414
  L_end_dsPIC33_CAN_RXBufferOverflowInterrupt
  _dsPIC33_CAN_RXBufferOverflowInterrupt
  L__dsPIC33_CAN_RXBufferOverflowInterrupt416
  L_end_dsPIC33_CAN_RXBufferInterrupt
  _dsPIC33_CAN_RXBufferInterrupt
  L__dsPIC33_CAN_RXBufferInterrupt418
  L_end_dsPIC33_CAN_TXBufferInterrupt
  _dsPIC33_CAN_TXBufferInterrupt
  L__dsPIC33_CAN_TXBufferInterrupt420
  L_end_dsPIC33_CAN_SetBufferSize
  _dsPIC33_CAN_SetBufferSize
  L__dsPIC33_CAN_SetBufferSize422
  L__dsPIC33_CAN_SetBufferSize423
  L__dsPIC33_CAN_SetBufferSize424
  L__dsPIC33_CAN_SetBufferSize425
  L__dsPIC33_CAN_SetBufferSize426
  L__dsPIC33_CAN_SetBufferSize427
  L_end_dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement
  _dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement429
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement430
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement431
  L__dsPIC33_CAN_CalculateTransmitCountForRegAddressWithAutoIncrement432
  L_end_dsPIC33_CAN_HardwareFIFO_SetFilter
  _dsPIC33_CAN_HardwareFIFO_SetFilter
  L_end_dsPIC33_CAN_HardwareFIFO_SetStartBuffer
  _dsPIC33_CAN_HardwareFIFO_SetStartBuffer
  L_end_dsPIC33_CAN_HardwareFIFO_GetCurrentBuffer
  _dsPIC33_CAN_HardwareFIFO_GetCurrentBuffer
  L_end_dsPIC33_CAN_HardwareFIFO_GetNextBuffer
  _dsPIC33_CAN_HardwareFIFO_GetNextBuffer
  L_end_dsPIC33_CAN_RegisterBufferWithFilter
  _dsPIC33_CAN_RegisterBufferWithFilter
  L_end_dsPIC33_CAN_AssociateFilterWithMask
  _dsPIC33_CAN_AssociateFilterWithMask
  L__dsPIC33_CAN_AssociateFilterWithMask439
  L__dsPIC33_CAN_AssociateFilterWithMask440
  L__dsPIC33_CAN_AssociateFilterWithMask441
  L__dsPIC33_CAN_AssociateFilterWithMask442
  L__dsPIC33_CAN_AssociateFilterWithMask443
  L__dsPIC33_CAN_AssociateFilterWithMask444
  L__dsPIC33_CAN_AssociateFilterWithMask445
  L_end_dsPIC33_CAN_SetFilter
  _dsPIC33_CAN_SetFilter
  L__dsPIC33_CAN_SetFilter447
  L_end_dsPIC33_CAN_SetMask
  _dsPIC33_CAN_SetMask
  L__dsPIC33_CAN_SetMask449
  L_end_dsPIC33_CAN_EnableDisableRXFilters
  _dsPIC33_CAN_EnableDisableRXFilters
  L_end_dsPIC33_CAN_SetBaud
  _dsPIC33_CAN_SetBaud
  L__dsPIC33_CAN_SetBaud452
  L_end_dsPIC33_CAN_EnterConfigMode
  _dsPIC33_CAN_EnterConfigMode
  L__dsPIC33_CAN_EnterConfigMode454
  L_end_dsPIC33_CAN_EnterNormalMode
  _dsPIC33_CAN_EnterNormalMode
  L__dsPIC33_CAN_EnterNormalMode456
  L_end_dsPIC33_CAN_AbortPendingTransmissions
  _dsPIC33_CAN_AbortPendingTransmissions
  L_end__NMRAnetCANReceive_Initialize
  L_end__NMRAnetCANReceive_SetCANLayerReceiveHook
  L_end__NMRAnetCANReceive_SetNMRANetLayerReceiveHook
  L_end__ReceivedOnFilter0
  L__ReceivedOnFilter04
  L__ReceivedOnFilter05
  L__ReceivedOnFilter06
  L__ReceivedOnFilter07
  L__ReceivedOnFilter08
  L__ReceivedOnFilter09
  L__ReceivedOnFilter010
  L__ReceivedOnFilter011
  L__ReceivedOnFilter012
  L__ReceivedOnFilter013
  L__ReceivedOnFilter014
  L__ReceivedOnFilter015
  L__ReceivedOnFilter016
  L__ReceivedOnFilter017
  L__ReceivedOnFilter018
  L__ReceivedOnFilter019
  L__ReceivedOnFilter020
  L__ReceivedOnFilter021
  L__ReceivedOnFilter022
  L__ReceivedOnFilter023
  L__ReceivedOnFilter024
  L__ReceivedOnFilter025
  L__ReceivedOnFilter026
  L__ReceivedOnFilter027
  L__ReceivedOnFilter028
  L__ReceivedOnFilter029
  L__ReceivedOnFilter030
  L__ReceivedOnFilter031
  L__ReceivedOnFilter032
  L__ReceivedOnFilter033
  L__ReceivedOnFilter034
  L__ReceivedOnFilter035
  L__ReceivedOnFilter036
  L__ReceivedOnFilter037
  L__ReceivedOnFilter038
  L__ReceivedOnFilter039
  L__ReceivedOnFilter040
  L__ReceivedOnFilter041
  L__ReceivedOnFilter042
  L__ReceivedOnFilter043
  L__ReceivedOnFilter044
  L__ReceivedOnFilter045
  L__ReceivedOnFilter046
  L__ReceivedOnFilter047
  L__ReceivedOnFilter048
  L__ReceivedOnFilter049
  L__ReceivedOnFilter050
  L__ReceivedOnFilter051
  L__ReceivedOnFilter052
  L__ReceivedOnFilter053
  L__ReceivedOnFilter054
  L__ReceivedOnFilter055
  L__ReceivedOnFilter056
  L__ReceivedOnFilter057
  L__ReceivedOnFilter058
  L__ReceivedOnFilter059
  L_end__ReceivedOnFilter1
  L__ReceivedOnFilter161
  L__ReceivedOnFilter162
  L__ReceivedOnFilter163
  L__ReceivedOnFilter164
  L__ReceivedOnFilter165
  L__ReceivedOnFilter166
  L__ReceivedOnFilter167
  L__ReceivedOnFilter168
  L__ReceivedOnFilter169
  L__ReceivedOnFilter170
  L__ReceivedOnFilter171
  L__ReceivedOnFilter172
  L__ReceivedOnFilter173
  L__ReceivedOnFilter174
  L__ReceivedOnFilter175
  L__ReceivedOnFilter176
  L__ReceivedOnFilter177
  L__ReceivedOnFilter178
  L__ReceivedOnFilter179
  L__ReceivedOnFilter180
  L__ReceivedOnFilter181
  L__ReceivedOnFilter182
  L__ReceivedOnFilter183
  L__ReceivedOnFilter184
  L__ReceivedOnFilter185
  L__ReceivedOnFilter186
  L__ReceivedOnFilter187
  L__ReceivedOnFilter188
  L__ReceivedOnFilter189
  L__ReceivedOnFilter190
  L__ReceivedOnFilter191
  L__ReceivedOnFilter192
  L__ReceivedOnFilter193
  L__ReceivedOnFilter194
  L__ReceivedOnFilter195
  L__ReceivedOnFilter196
  L__ReceivedOnFilter197
  L__ReceivedOnFilter198
  L__ReceivedOnFilter199
  L__ReceivedOnFilter1100
  L__ReceivedOnFilter1101
  L__ReceivedOnFilter1102
  L__ReceivedOnFilter1103
  L__ReceivedOnFilter1104
  L__ReceivedOnFilter1105
  L__ReceivedOnFilter1106
  L__ReceivedOnFilter1107
  L__ReceivedOnFilter1108
  L__ReceivedOnFilter1109
  L__ReceivedOnFilter1110
  L__ReceivedOnFilter1111
  L__ReceivedOnFilter1112
  L__ReceivedOnFilter1113
  L__ReceivedOnFilter1114
  L__ReceivedOnFilter1115
  L__ReceivedOnFilter1116
  L__ReceivedOnFilter1117
  L__ReceivedOnFilter1118
  L__ReceivedOnFilter1119
  L__ReceivedOnFilter1120
  L__ReceivedOnFilter1121
  L__ReceivedOnFilter1122
  L__ReceivedOnFilter1123
  L__ReceivedOnFilter1124
  L__ReceivedOnFilter1125
  L__ReceivedOnFilter1126
  L__ReceivedOnFilter1127
  L__ReceivedOnFilter1128
  L__ReceivedOnFilter1129
  L__ReceivedOnFilter1130
  L__ReceivedOnFilter1131
  L__ReceivedOnFilter1132
  L__ReceivedOnFilter1133
  L__ReceivedOnFilter1134
  L__ReceivedOnFilter1135
  L__ReceivedOnFilter1136
  L__ReceivedOnFilter1137
  L__ReceivedOnFilter1138
  L__ReceivedOnFilter1139
  L__ReceivedOnFilter1140
  L__ReceivedOnFilter1141
  L__ReceivedOnFilter1142
  L__ReceivedOnFilter1143
  L__ReceivedOnFilter1144
  L__ReceivedOnFilter1145
  L__ReceivedOnFilter1146
  L__ReceivedOnFilter1147
  L__ReceivedOnFilter1148
  L__ReceivedOnFilter1149
  L__ReceivedOnFilter1150
  L__ReceivedOnFilter1151
  L__ReceivedOnFilter1152
  L__ReceivedOnFilter1153
  L__ReceivedOnFilter1154
  L__ReceivedOnFilter1155
  L__ReceivedOnFilter1156
  L__ReceivedOnFilter1157
  L__ReceivedOnFilter1158
  L__ReceivedOnFilter1159
  L__ReceivedOnFilter1160
  L__ReceivedOnFilter1161
  L__ReceivedOnFilter1162
  L__ReceivedOnFilter1163
  L__ReceivedOnFilter1164
  L__ReceivedOnFilter1165
  L__ReceivedOnFilter1166
  L__ReceivedOnFilter1167
  L__ReceivedOnFilter1168
  L__ReceivedOnFilter1169
  L__ReceivedOnFilter1170
  L__ReceivedOnFilter1171
  L__ReceivedOnFilter1172
  L__ReceivedOnFilter1173
  L__ReceivedOnFilter1174
  L__ReceivedOnFilter1175
  L__ReceivedOnFilter1176
  L__ReceivedOnFilter1177
  L__ReceivedOnFilter1178
  L__ReceivedOnFilter1179
  L__ReceivedOnFilter1180
  L__ReceivedOnFilter1181
  L__ReceivedOnFilter1182
  L__ReceivedOnFilter1183
  L__ReceivedOnFilter1184
  L__ReceivedOnFilter1185
  L__ReceivedOnFilter1186
  L__ReceivedOnFilter1187
  L__ReceivedOnFilter1188
  L__ReceivedOnFilter1189
  L__ReceivedOnFilter1190
  L__ReceivedOnFilter1191
  L__ReceivedOnFilter1192
  L__ReceivedOnFilter1193
  L__ReceivedOnFilter1194
  L__ReceivedOnFilter1195
  L__ReceivedOnFilter1196
  L__ReceivedOnFilter1197
  L__ReceivedOnFilter1198
  L__ReceivedOnFilter1199
  L__ReceivedOnFilter1200
  L__ReceivedOnFilter1201
  L__ReceivedOnFilter1202
  L__ReceivedOnFilter1203
  L__ReceivedOnFilter1204
  L__ReceivedOnFilter1205
  L__ReceivedOnFilter1206
  L__ReceivedOnFilter1207
  L__ReceivedOnFilter1208
  L__ReceivedOnFilter1209
  L__ReceivedOnFilter1210
  L__ReceivedOnFilter1211
  L__ReceivedOnFilter1212
  L__ReceivedOnFilter1213
  L__ReceivedOnFilter1214
  L__ReceivedOnFilter1215
  L__ReceivedOnFilter1216
  L__ReceivedOnFilter1217
  L__ReceivedOnFilter1218
  L__ReceivedOnFilter1219
  L__ReceivedOnFilter1220
  L__ReceivedOnFilter1221
  L__ReceivedOnFilter1222
  L__ReceivedOnFilter1223
  L__ReceivedOnFilter1224
  L__ReceivedOnFilter1225
  L__ReceivedOnFilter1226
  L__ReceivedOnFilter1227
  L__ReceivedOnFilter1228
  L__ReceivedOnFilter1229
  L__ReceivedOnFilter1230
  L__ReceivedOnFilter1231
  L__ReceivedOnFilter1232
  L__ReceivedOnFilter1233
  L__ReceivedOnFilter1234
  L__ReceivedOnFilter1235
  L__ReceivedOnFilter1236
  L__ReceivedOnFilter1237
  L__ReceivedOnFilter1238
  L__ReceivedOnFilter1239
  L__ReceivedOnFilter1240
  L__ReceivedOnFilter1241
  L__ReceivedOnFilter1242
  L__ReceivedOnFilter1243
  L__ReceivedOnFilter1244
  L__ReceivedOnFilter1245
  L__ReceivedOnFilter1246
  L__ReceivedOnFilter1247
  L__ReceivedOnFilter1248
  L__ReceivedOnFilter1249
  L__ReceivedOnFilter1250
  L__ReceivedOnFilter1251
  L__ReceivedOnFilter1252
  L__ReceivedOnFilter1253
  L__ReceivedOnFilter1254
  L__ReceivedOnFilter1255
  L__ReceivedOnFilter1256
  L__ReceivedOnFilter1257
  L__ReceivedOnFilter1258
  L__ReceivedOnFilter1259
  L__ReceivedOnFilter1260
  L__ReceivedOnFilter1261
  L__ReceivedOnFilter1262
  L__ReceivedOnFilter1263
  L__ReceivedOnFilter1264
  L__ReceivedOnFilter1265
  L__ReceivedOnFilter1266
  L__ReceivedOnFilter1267
  L__ReceivedOnFilter1268
  L__ReceivedOnFilter1269
  L__ReceivedOnFilter1270
  L__ReceivedOnFilter1271
  L__ReceivedOnFilter1272
  L__ReceivedOnFilter1273
  L__ReceivedOnFilter1274
  L__ReceivedOnFilter1275
  L__ReceivedOnFilter1276
  L__ReceivedOnFilter1277
  L__ReceivedOnFilter1278
  L__ReceivedOnFilter1279
  L__ReceivedOnFilter1280
  L__ReceivedOnFilter1281
  L__ReceivedOnFilter1282
  L__ReceivedOnFilter1283
  L_end__ReceivedOnFilter2
  L_end__ReceivedOnFilter3
  L_end__ReceivedOnFilter4
  L_end__ReceivedOnFilter5
  L_end__ReceivedOnFilter6
  L__ReceivedOnFilter1289
  L_end_NMRAnetCANReceive_Initialize
  _NMRAnetCANReceive_Initialize
  L_end_NMRAnetCANReceive_SetCANLayerReceiveHook
  _NMRAnetCANReceive_SetCANLayerReceiveHook
  L_end_NMRAnetCANReceive_SetNMRANetLayerReceiveHook
  _NMRAnetCANReceive_SetNMRANetLayerReceiveHook
  L_end_ReceivedOnFilter0
  _ReceivedOnFilter0
  L__ReceivedOnFilter0294
  L__ReceivedOnFilter0295
  L__ReceivedOnFilter0296
  L__ReceivedOnFilter0297
  L__ReceivedOnFilter0298
  L__ReceivedOnFilter0299
  L__ReceivedOnFilter0300
  L__ReceivedOnFilter0301
  L__ReceivedOnFilter0302
  L__ReceivedOnFilter0303
  L__ReceivedOnFilter0304
  L__ReceivedOnFilter0305
  L__ReceivedOnFilter0306
  L__ReceivedOnFilter0307
  L__ReceivedOnFilter0308
  L__ReceivedOnFilter0309
  L__ReceivedOnFilter0310
  L__ReceivedOnFilter0311
  L__ReceivedOnFilter0312
  L__ReceivedOnFilter0313
  L__ReceivedOnFilter0314
  L__ReceivedOnFilter0315
  L__ReceivedOnFilter0316
  L_end_ReceivedOnFilter1
  _ReceivedOnFilter1
  L__ReceivedOnFilter1318
  L__ReceivedOnFilter1319
  L__ReceivedOnFilter1320
  L__ReceivedOnFilter1321
  L__ReceivedOnFilter1322
  L__ReceivedOnFilter1323
  L__ReceivedOnFilter1324
  L__ReceivedOnFilter1325
  L__ReceivedOnFilter1326
  L__ReceivedOnFilter1327
  L__ReceivedOnFilter1328
  L__ReceivedOnFilter1329
  L__ReceivedOnFilter1330
  L__ReceivedOnFilter1331
  L__ReceivedOnFilter1332
  L__ReceivedOnFilter1333
  L__ReceivedOnFilter1334
  L__ReceivedOnFilter1335
  L__ReceivedOnFilter1336
  L__ReceivedOnFilter1337
  L__ReceivedOnFilter1338
  L__ReceivedOnFilter1339
  L__ReceivedOnFilter1340
  L__ReceivedOnFilter1341
  L__ReceivedOnFilter1342
  L__ReceivedOnFilter1343
  L__ReceivedOnFilter1344
  L__ReceivedOnFilter1345
  L__ReceivedOnFilter1346
  L__ReceivedOnFilter1347
  L__ReceivedOnFilter1348
  L__ReceivedOnFilter1349
  L__ReceivedOnFilter1350
  L__ReceivedOnFilter1351
  L__ReceivedOnFilter1352
  L__ReceivedOnFilter1353
  L__ReceivedOnFilter1354
  L__ReceivedOnFilter1355
  L__ReceivedOnFilter1356
  L__ReceivedOnFilter1357
  L__ReceivedOnFilter1358
  L__ReceivedOnFilter1359
  L__ReceivedOnFilter1360
  L__ReceivedOnFilter1361
  L__ReceivedOnFilter1362
  L__ReceivedOnFilter1363
  L__ReceivedOnFilter1364
  L__ReceivedOnFilter1365
  L__ReceivedOnFilter1366
  L__ReceivedOnFilter1367
  L__ReceivedOnFilter1368
  L__ReceivedOnFilter1369
  L__ReceivedOnFilter1370
  L__ReceivedOnFilter1371
  L__ReceivedOnFilter1372
  L__ReceivedOnFilter1373
  L__ReceivedOnFilter1374
  L__ReceivedOnFilter1375
  L__ReceivedOnFilter1376
  L__ReceivedOnFilter1377
  L__ReceivedOnFilter1378
  L__ReceivedOnFilter1379
  L__ReceivedOnFilter1380
  L__ReceivedOnFilter1381
  L__ReceivedOnFilter1382
  L__ReceivedOnFilter1383
  L__ReceivedOnFilter1384
  L__ReceivedOnFilter1385
  L__ReceivedOnFilter1386
  L__ReceivedOnFilter1387
  L__ReceivedOnFilter1388
  L__ReceivedOnFilter1389
  L__ReceivedOnFilter1390
  L__ReceivedOnFilter1391
  L__ReceivedOnFilter1392
  L__ReceivedOnFilter1393
  L__ReceivedOnFilter1394
  L__ReceivedOnFilter1395
  L__ReceivedOnFilter1396
  L_end_ReceivedOnFilter2
  _ReceivedOnFilter2
  L_end_ReceivedOnFilter3
  _ReceivedOnFilter3
  L_end_ReceivedOnFilter4
  _ReceivedOnFilter4
  L_end_ReceivedOnFilter5
  _ReceivedOnFilter5
  L_end_ReceivedOnFilter6
  _ReceivedOnFilter6
  L_end__INTERRUPT_DCC_Timer
  L__INTERRUPT_DCC_Timer1
  L__INTERRUPT_DCC_Timer2
  L__INTERRUPT_DCC_Timer3
  L__INTERRUPT_DCC_Timer4
  L__INTERRUPT_DCC_Timer5
  L__INTERRUPT_DCC_Timer6
  L_end__INTERRUPT_1ms_Timer
  L__INTERRUPT_1ms_Timer8
  L__INTERRUPT_1ms_Timer9
  L__INTERRUPT_1ms_Timer10
  L__INTERRUPT_1ms_Timer11
  L__INTERRUPT_1ms_Timer12
  L_end__main
  L__main14
  L__main15
  L__main16
  L__main17
  L__main18
  L__main19
  L__main20
  L__main21
  L__main22
  L__main23
  L__main24
  L__main25
  L__main26
  L__main27
  L__main28
  L__main29
  L__main30
  L__main31
  L__main32
  L__main33
  L__main34
  L__main35
  L__main36
  L__main37
  L__main38
  L__main39
  L__main40
  L__main41
  L__main42
  L__main43
  L__main44
  L__main45
  L__main46
  L__main47
  L__main48
  L__main49
  L__main50
  L__main51
  L__main52
  L__main53
  L__main54
  L__main55
  L__main56
  L__main57
  L__main58
  L__main59
  L__main60
  L__main61
  L__main62
  L__main63
  L__main64
  L__main65
  L__main66
  L__main67
  L__main68
  L__main69
  L_end_INTERRUPT_DCC_Timer
  _INTERRUPT_DCC_Timer
  L__INTERRUPT_DCC_Timer71
  L_end_INTERRUPT_1ms_Timer
  _INTERRUPT_1ms_Timer
  L__INTERRUPT_1ms_Timer73
  L__INTERRUPT_1ms_Timer74
  L_end_main
  _main
  L__main76
  L__main77
  L__main78
  L__main79
  L__main80
  L__main81
  L__main82
  L__main83
  L__main84
  L__main85
  L__main86
  L__main87
  L__main88
  L__main89
  L__main90
  L__main91
  L__main92
  L__main_end_loop
  L_end__NMRAnetBufferPools_100ms_TimeTick
  L__NMRAnetBufferPools_100ms_TimeTick1
  L__NMRAnetBufferPools_100ms_TimeTick2
  L__NMRAnetBufferPools_100ms_TimeTick3
  L__NMRAnetBufferPools_100ms_TimeTick4
  L__NMRAnetBufferPools_100ms_TimeTick5
  L__NMRAnetBufferPools_100ms_TimeTick6
  L__NMRAnetBufferPools_100ms_TimeTick7
  L__NMRAnetBufferPools_100ms_TimeTick8
  L__NMRAnetBufferPools_100ms_TimeTick9
  L__NMRAnetBufferPools_100ms_TimeTick10
  L__NMRAnetBufferPools_100ms_TimeTick11
  L_end__NMRAnetBufferPools_InitializeBaseBuffer
  L_end__NMRAnetBufferPools_Initialize
  L__NMRAnetBufferPools_Initialize14
  L__NMRAnetBufferPools_Initialize15
  L__NMRAnetBufferPools_Initialize16
  L__NMRAnetBufferPools_Initialize17
  L__NMRAnetBufferPools_Initialize18
  L__NMRAnetBufferPools_Initialize19
  L__NMRAnetBufferPools_Initialize20
  L__NMRAnetBufferPools_Initialize21
  L__NMRAnetBufferPools_Initialize22
  L__NMRAnetBufferPools_Initialize23
  L_end__NMRAnetBufferPools_AllocateBaseBuffer
  L__NMRAnetBufferPools_AllocateBaseBuffer25
  L__NMRAnetBufferPools_AllocateBaseBuffer26
  L__NMRAnetBufferPools_AllocateBaseBuffer27
  L__NMRAnetBufferPools_AllocateBaseBuffer28
  L__NMRAnetBufferPools_AllocateBaseBuffer29
  L__NMRAnetBufferPools_AllocateBaseBuffer30
  L__NMRAnetBufferPools_AllocateBaseBuffer31
  L__NMRAnetBufferPools_AllocateBaseBuffer32
  L__NMRAnetBufferPools_AllocateBaseBuffer33
  L__NMRAnetBufferPools_AllocateBaseBuffer34
  L__NMRAnetBufferPools_AllocateBaseBuffer35
  L_end__NMRAnetBufferPools_ReleaseBaseBuffer
  L__NMRAnetBufferPools_ReleaseBaseBuffer37
  L__NMRAnetBufferPools_ReleaseBaseBuffer38
  L__NMRAnetBufferPools_ReleaseBaseBuffer39
  L_end__NMRAnetBufferPools_AllocateDatagramBuffer
  L__NMRAnetBufferPools_AllocateDatagramBuffer41
  L__NMRAnetBufferPools_AllocateDatagramBuffer42
  L__NMRAnetBufferPools_AllocateDatagramBuffer43
  L__NMRAnetBufferPools_AllocateDatagramBuffer44
  L__NMRAnetBufferPools_AllocateDatagramBuffer45
  L__NMRAnetBufferPools_AllocateDatagramBuffer46
  L__NMRAnetBufferPools_AllocateDatagramBuffer47
  L__NMRAnetBufferPools_AllocateDatagramBuffer48
  L__NMRAnetBufferPools_AllocateDatagramBuffer49
  L__NMRAnetBufferPools_AllocateDatagramBuffer50
  L__NMRAnetBufferPools_AllocateDatagramBuffer51
  L__NMRAnetBufferPools_AllocateDatagramBuffer52
  L__NMRAnetBufferPools_AllocateDatagramBuffer53
  L__NMRAnetBufferPools_AllocateDatagramBuffer54
  L_end__NMRAnetBufferPools_ReleaseDatagramBuffer
  L__NMRAnetBufferPools_ReleaseDatagramBuffer56
  L__NMRAnetBufferPools_ReleaseDatagramBuffer57
  L__NMRAnetBufferPools_ReleaseDatagramBuffer58
  L__NMRAnetBufferPools_AllocateBaseBuffer59
  L__NMRAnetBufferPools_AllocateDatagramBuffer60
  L_end_NMRAnetBufferPools_100ms_TimeTick
  _NMRAnetBufferPools_100ms_TimeTick
  L__NMRAnetBufferPools_100ms_TimeTick62
  L__NMRAnetBufferPools_100ms_TimeTick63
  L__NMRAnetBufferPools_100ms_TimeTick64
  L__NMRAnetBufferPools_100ms_TimeTick65
  L_end_NMRAnetBufferPools_InitializeBaseBuffer
  _NMRAnetBufferPools_InitializeBaseBuffer
  L_end_NMRAnetBufferPools_Initialize
  _NMRAnetBufferPools_Initialize
  L__NMRAnetBufferPools_Initialize68
  L__NMRAnetBufferPools_Initialize69
  L_end_NMRAnetBufferPools_AllocateBaseBuffer
  _NMRAnetBufferPools_AllocateBaseBuffer
  L__NMRAnetBufferPools_AllocateBaseBuffer71
  L__NMRAnetBufferPools_AllocateBaseBuffer72
  L__NMRAnetBufferPools_AllocateBaseBuffer73
  L_end_NMRAnetBufferPools_ReleaseBaseBuffer
  _NMRAnetBufferPools_ReleaseBaseBuffer
  L__NMRAnetBufferPools_ReleaseBaseBuffer75
  L_end_NMRAnetBufferPools_AllocateDatagramBuffer
  _NMRAnetBufferPools_AllocateDatagramBuffer
  L__NMRAnetBufferPools_AllocateDatagramBuffer77
  L__NMRAnetBufferPools_AllocateDatagramBuffer78
  L__NMRAnetBufferPools_AllocateDatagramBuffer79
  L__NMRAnetBufferPools_AllocateDatagramBuffer80
  L_end_NMRAnetBufferPools_ReleaseDatagramBuffer
  _NMRAnetBufferPools_ReleaseDatagramBuffer
  L__NMRAnetBufferPools_ReleaseDatagramBuffer82
  L_end__NMRAnetStateMachine_TrySendAbbreviatedCDI
  L_end__NMRAnetStateMachine_TrySendIdentifyProducer
  L_end__NMRAnetStateMachine_TrySendIdentifyConsumer
  L_end__NMRAnetStateMachine_TrySendIdentifyEvents
  L_end__NMRAnetStateMachine_TrySendAliasMapEnquiry
  L_end__NMRAnetStateMachine_TrySendAliasMapReset
  L_end__NMRAnetStateMachine_TrySendVerifyNodeID
  L__NMRAnetStateMachine_TrySendVerifyNodeID7
  L__NMRAnetStateMachine_TrySendVerifyNodeID8
  L__NMRAnetStateMachine_TrySendVerifyNodeID9
  L_end__NMRAnetStateMachine_TrySendDatagram
  L__NMRAnetStateMachine_TrySendDatagram11
  L__NMRAnetStateMachine_TrySendDatagram12
  L__NMRAnetStateMachine_TrySendDatagram13
  L__NMRAnetStateMachine_TrySendDatagram14
  L__NMRAnetStateMachine_TrySendDatagram15
  L__NMRAnetStateMachine_TrySendDatagram16
  L__NMRAnetStateMachine_TrySendDatagram17
  L__NMRAnetStateMachine_TrySendDatagram18
  L__NMRAnetStateMachine_TrySendDatagram19
  L__NMRAnetStateMachine_TrySendDatagram20
  L__NMRAnetStateMachine_TrySendDatagram21
  L__NMRAnetStateMachine_TrySendDatagram22
  L__NMRAnetStateMachine_TrySendDatagram23
  L__NMRAnetStateMachine_TrySendDatagram24
  L__NMRAnetStateMachine_TrySendDatagram25
  L__NMRAnetStateMachine_TrySendDatagram26
  L__NMRAnetStateMachine_TrySendDatagram27
  L__NMRAnetStateMachine_TrySendDatagram28
  L__NMRAnetStateMachine_TrySendDatagram29
  L__NMRAnetStateMachine_TrySendDatagram30
  L__NMRAnetStateMachine_TrySendDatagram31
  L__NMRAnetStateMachine_TrySendDatagram32
  L_end_NMRAnetStateMachine_ReleaseBuffers
  L_NMRAnetStateMachine_ReleaseBuffers34
  L_NMRAnetStateMachine_ReleaseBuffers35
  L_NMRAnetStateMachine_ReleaseBuffers36
  L_NMRAnetStateMachine_ReleaseBuffers37
  L_NMRAnetStateMachine_ReleaseBuffers38
  L_NMRAnetStateMachine_ReleaseBuffers39
  L_NMRAnetStateMachine_ReleaseBuffers40
  L_NMRAnetStateMachine_ReleaseBuffers41
  L_NMRAnetStateMachine_ReleaseBuffers42
  L_NMRAnetStateMachine_ReleaseBuffers43
  L_end__NMRAnetStateMachine_InitializeNode
  L__NMRAnetStateMachine_InitializeNode45
  L__NMRAnetStateMachine_InitializeNode46
  L__NMRAnetStateMachine_InitializeNode47
  L__NMRAnetStateMachine_InitializeNode48
  L__NMRAnetStateMachine_InitializeNode49
  L__NMRAnetStateMachine_InitializeNode50
  L__NMRAnetStateMachine_InitializeNode51
  L__NMRAnetStateMachine_InitializeNode52
  L__NMRAnetStateMachine_InitializeNode53
  L__NMRAnetStateMachine_InitializeNode54
  L__NMRAnetStateMachine_InitializeNode55
  L__NMRAnetStateMachine_InitializeNode56
  L__NMRAnetStateMachine_InitializeNode57
  L_end__NMRAnetStateMachine_Initialize
  L_end__NMRAnetStateMachine_100ms_Timer
  L_end__TransmitCANLayerMsg
  L__TransmitCANLayerMsg61
  L__TransmitCANLayerMsg62
  L__TransmitCANLayerMsg63
  L_end_NMRAnetStateMachine_CANBusBufferAvailable
  L_end__TransmitNMRABusLayerMsg
  L__TransmitNMRABusLayerMsg66
  L__TransmitNMRABusLayerMsg67
  L__TransmitNMRABusLayerMsg68
  L__TransmitNMRABusLayerMsg69
  L__TransmitNMRABusLayerMsg70
  L__TransmitNMRABusLayerMsg71
  L_end__NMRABusBufferAvailable
  L_end_NMRAnetStateMachine_MaxAddressByAddressSpace
  L_NMRAnetStateMachine_MaxAddressByAddressSpace74
  L_NMRAnetStateMachine_MaxAddressByAddressSpace75
  L_NMRAnetStateMachine_MaxAddressByAddressSpace76
  L_NMRAnetStateMachine_MaxAddressByAddressSpace77
  L_NMRAnetStateMachine_MaxAddressByAddressSpace78
  L_NMRAnetStateMachine_MaxAddressByAddressSpace79
  L_NMRAnetStateMachine_MaxAddressByAddressSpace80
  L_NMRAnetStateMachine_MaxAddressByAddressSpace81
  L_NMRAnetStateMachine_MaxAddressByAddressSpace82
  L_NMRAnetStateMachine_MaxAddressByAddressSpace83
  L_NMRAnetStateMachine_MaxAddressByAddressSpace84
  L_NMRAnetStateMachine_MaxAddressByAddressSpace85
  L_NMRAnetStateMachine_MaxAddressByAddressSpace86
  L_NMRAnetStateMachine_MaxAddressByAddressSpace87
  L_NMRAnetStateMachine_MaxAddressByAddressSpace88
  L_NMRAnetStateMachine_MaxAddressByAddressSpace89
  L_NMRAnetStateMachine_MaxAddressByAddressSpace90
  L_NMRAnetStateMachine_MaxAddressByAddressSpace91
  L_NMRAnetStateMachine_MaxAddressByAddressSpace92
  L_NMRAnetStateMachine_MaxAddressByAddressSpace93
  L_NMRAnetStateMachine_MaxAddressByAddressSpace94
  L_NMRAnetStateMachine_MaxAddressByAddressSpace95
  L_end_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite97
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite98
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite99
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite100
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite101
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite102
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite103
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite104
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite105
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite106
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite107
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite108
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite109
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite110
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite111
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite112
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite113
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite114
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite115
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite116
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite117
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite118
  L_end_NMRAnetStateMachine_ProcessNode
  L_NMRAnetStateMachine_ProcessNode120
  L_NMRAnetStateMachine_ProcessNode121
  L_NMRAnetStateMachine_ProcessNode122
  L_NMRAnetStateMachine_ProcessNode123
  L_NMRAnetStateMachine_ProcessNode124
  L_NMRAnetStateMachine_ProcessNode125
  L_NMRAnetStateMachine_ProcessNode126
  L_NMRAnetStateMachine_ProcessNode127
  L_NMRAnetStateMachine_ProcessNode128
  L_NMRAnetStateMachine_ProcessNode129
  L_NMRAnetStateMachine_ProcessNode130
  L_NMRAnetStateMachine_ProcessNode131
  L_NMRAnetStateMachine_ProcessNode132
  L_NMRAnetStateMachine_ProcessNode133
  L_NMRAnetStateMachine_ProcessNode134
  L_NMRAnetStateMachine_ProcessNode135
  L_NMRAnetStateMachine_ProcessNode136
  L_NMRAnetStateMachine_ProcessNode137
  L_NMRAnetStateMachine_ProcessNode138
  L_NMRAnetStateMachine_ProcessNode139
  L_NMRAnetStateMachine_ProcessNode140
  L_NMRAnetStateMachine_ProcessNode141
  L_NMRAnetStateMachine_ProcessNode142
  L_NMRAnetStateMachine_ProcessNode143
  L_NMRAnetStateMachine_ProcessNode144
  L_NMRAnetStateMachine_ProcessNode145
  L_NMRAnetStateMachine_ProcessNode146
  L_NMRAnetStateMachine_ProcessNode147
  L_NMRAnetStateMachine_ProcessNode148
  L_NMRAnetStateMachine_ProcessNode149
  L_NMRAnetStateMachine_ProcessNode150
  L_NMRAnetStateMachine_ProcessNode151
  L_NMRAnetStateMachine_ProcessNode152
  L_NMRAnetStateMachine_ProcessNode153
  L_NMRAnetStateMachine_ProcessNode154
  L_NMRAnetStateMachine_ProcessNode155
  L_NMRAnetStateMachine_ProcessNode156
  L_NMRAnetStateMachine_ProcessNode157
  L_NMRAnetStateMachine_ProcessNode158
  L_NMRAnetStateMachine_ProcessNode159
  L_NMRAnetStateMachine_ProcessNode160
  L_NMRAnetStateMachine_ProcessNode161
  L_NMRAnetStateMachine_ProcessNode162
  L_NMRAnetStateMachine_ProcessNode163
  L_NMRAnetStateMachine_ProcessNode164
  L_NMRAnetStateMachine_ProcessNode165
  L_NMRAnetStateMachine_ProcessNode166
  L_NMRAnetStateMachine_ProcessNode167
  L_NMRAnetStateMachine_ProcessNode168
  L_NMRAnetStateMachine_ProcessNode169
  L_NMRAnetStateMachine_ProcessNode170
  L_NMRAnetStateMachine_ProcessNode171
  L_NMRAnetStateMachine_ProcessNode172
  L_NMRAnetStateMachine_ProcessNode173
  L_NMRAnetStateMachine_ProcessNode174
  L_NMRAnetStateMachine_ProcessNode175
  L_NMRAnetStateMachine_ProcessNode176
  L_NMRAnetStateMachine_ProcessNode177
  L_NMRAnetStateMachine_ProcessNode178
  L_NMRAnetStateMachine_ProcessNode179
  L_NMRAnetStateMachine_ProcessNode180
  L_NMRAnetStateMachine_ProcessNode181
  L_NMRAnetStateMachine_ProcessNode182
  L_NMRAnetStateMachine_ProcessNode183
  L_NMRAnetStateMachine_ProcessNode184
  L_NMRAnetStateMachine_ProcessNode185
  L_NMRAnetStateMachine_ProcessNode186
  L_NMRAnetStateMachine_ProcessNode187
  L_NMRAnetStateMachine_ProcessNode188
  L_NMRAnetStateMachine_ProcessNode189
  L_NMRAnetStateMachine_ProcessNode190
  L_NMRAnetStateMachine_ProcessNode191
  L_NMRAnetStateMachine_ProcessNode192
  L_NMRAnetStateMachine_ProcessNode193
  L_NMRAnetStateMachine_ProcessNode194
  L_NMRAnetStateMachine_ProcessNode195
  L_NMRAnetStateMachine_ProcessNode196
  L_NMRAnetStateMachine_ProcessNode197
  L_NMRAnetStateMachine_ProcessNode198
  L_NMRAnetStateMachine_ProcessNode199
  L_NMRAnetStateMachine_ProcessNode200
  L_NMRAnetStateMachine_ProcessNode201
  L_NMRAnetStateMachine_ProcessNode202
  L_NMRAnetStateMachine_ProcessNode203
  L_NMRAnetStateMachine_ProcessNode204
  L_NMRAnetStateMachine_ProcessNode205
  L_NMRAnetStateMachine_ProcessNode206
  L_NMRAnetStateMachine_ProcessNode207
  L_NMRAnetStateMachine_ProcessNode208
  L_NMRAnetStateMachine_ProcessNode209
  L_NMRAnetStateMachine_ProcessNode210
  L_NMRAnetStateMachine_ProcessNode211
  L_NMRAnetStateMachine_ProcessNode212
  L_NMRAnetStateMachine_ProcessNode213
  L_NMRAnetStateMachine_ProcessNode214
  L_NMRAnetStateMachine_ProcessNode215
  L_NMRAnetStateMachine_ProcessNode216
  L_NMRAnetStateMachine_ProcessNode217
  L_NMRAnetStateMachine_ProcessNode218
  L_NMRAnetStateMachine_ProcessNode219
  L_NMRAnetStateMachine_ProcessNode220
  L_NMRAnetStateMachine_ProcessNode221
  L_NMRAnetStateMachine_ProcessNode222
  L_NMRAnetStateMachine_ProcessNode223
  L_NMRAnetStateMachine_ProcessNode224
  L_NMRAnetStateMachine_ProcessNode225
  L_NMRAnetStateMachine_ProcessNode226
  L_NMRAnetStateMachine_ProcessNode227
  L_NMRAnetStateMachine_ProcessNode228
  L_NMRAnetStateMachine_ProcessNode229
  L_NMRAnetStateMachine_ProcessNode230
  L_NMRAnetStateMachine_ProcessNode231
  L_NMRAnetStateMachine_ProcessNode232
  L_NMRAnetStateMachine_ProcessNode233
  L_NMRAnetStateMachine_ProcessNode234
  L_NMRAnetStateMachine_ProcessNode235
  L_NMRAnetStateMachine_ProcessNode236
  L_NMRAnetStateMachine_ProcessNode237
  L_NMRAnetStateMachine_ProcessNode238
  L_NMRAnetStateMachine_ProcessNode239
  L_NMRAnetStateMachine_ProcessNode240
  L_NMRAnetStateMachine_ProcessNode241
  L_NMRAnetStateMachine_ProcessNode242
  L_NMRAnetStateMachine_ProcessNode243
  L_NMRAnetStateMachine_ProcessNode244
  L_NMRAnetStateMachine_ProcessNode245
  L_NMRAnetStateMachine_ProcessNode246
  L_NMRAnetStateMachine_ProcessNode247
  L_NMRAnetStateMachine_ProcessNode248
  L_NMRAnetStateMachine_ProcessNode249
  L_NMRAnetStateMachine_ProcessNode250
  L_NMRAnetStateMachine_ProcessNode251
  L_NMRAnetStateMachine_ProcessNode252
  L_NMRAnetStateMachine_ProcessNode253
  L_NMRAnetStateMachine_ProcessNode254
  L_NMRAnetStateMachine_ProcessNode255
  L_NMRAnetStateMachine_ProcessNode256
  L_NMRAnetStateMachine_ProcessNode257
  L_NMRAnetStateMachine_ProcessNode258
  L_NMRAnetStateMachine_ProcessNode259
  L_NMRAnetStateMachine_ProcessNode260
  L_NMRAnetStateMachine_ProcessNode261
  L_NMRAnetStateMachine_ProcessNode262
  L_NMRAnetStateMachine_ProcessNode263
  L_NMRAnetStateMachine_ProcessNode264
  L_NMRAnetStateMachine_ProcessNode265
  L_NMRAnetStateMachine_ProcessNode266
  L_NMRAnetStateMachine_ProcessNode267
  L_NMRAnetStateMachine_ProcessNode268
  L_NMRAnetStateMachine_ProcessNode269
  L_NMRAnetStateMachine_ProcessNode270
  L_NMRAnetStateMachine_ProcessNode271
  L_NMRAnetStateMachine_ProcessNode272
  L_NMRAnetStateMachine_ProcessNode273
  L_NMRAnetStateMachine_ProcessNode274
  L_NMRAnetStateMachine_ProcessNode275
  L_NMRAnetStateMachine_ProcessNode276
  L_NMRAnetStateMachine_ProcessNode277
  L_NMRAnetStateMachine_ProcessNode278
  L_NMRAnetStateMachine_ProcessNode279
  L_NMRAnetStateMachine_ProcessNode280
  L_NMRAnetStateMachine_ProcessNode281
  L_NMRAnetStateMachine_ProcessNode282
  L_NMRAnetStateMachine_ProcessNode283
  L_NMRAnetStateMachine_ProcessNode284
  L_NMRAnetStateMachine_ProcessNode285
  L_NMRAnetStateMachine_ProcessNode286
  L_NMRAnetStateMachine_ProcessNode287
  L_NMRAnetStateMachine_ProcessNode288
  L_NMRAnetStateMachine_ProcessNode289
  L_NMRAnetStateMachine_ProcessNode290
  L_NMRAnetStateMachine_ProcessNode291
  L_NMRAnetStateMachine_ProcessNode292
  L_NMRAnetStateMachine_ProcessNode293
  L_NMRAnetStateMachine_ProcessNode294
  L_NMRAnetStateMachine_ProcessNode295
  L_NMRAnetStateMachine_ProcessNode296
  L_NMRAnetStateMachine_ProcessNode297
  L_NMRAnetStateMachine_ProcessNode298
  L_NMRAnetStateMachine_ProcessNode299
  L_NMRAnetStateMachine_ProcessNode300
  L_NMRAnetStateMachine_ProcessNode301
  L_NMRAnetStateMachine_ProcessNode302
  L_NMRAnetStateMachine_ProcessNode303
  L_NMRAnetStateMachine_ProcessNode304
  L_NMRAnetStateMachine_ProcessNode305
  L_NMRAnetStateMachine_ProcessNode306
  L_NMRAnetStateMachine_ProcessNode307
  L_NMRAnetStateMachine_ProcessNode308
  L_NMRAnetStateMachine_ProcessNode309
  L_NMRAnetStateMachine_ProcessNode310
  L_NMRAnetStateMachine_ProcessNode311
  L_NMRAnetStateMachine_ProcessNode312
  L_NMRAnetStateMachine_ProcessNode313
  L_NMRAnetStateMachine_ProcessNode314
  L_NMRAnetStateMachine_ProcessNode315
  L_NMRAnetStateMachine_ProcessNode316
  L_NMRAnetStateMachine_ProcessNode317
  L_NMRAnetStateMachine_ProcessNode318
  L_NMRAnetStateMachine_ProcessNode319
  L_NMRAnetStateMachine_ProcessNode320
  L_NMRAnetStateMachine_ProcessNode321
  L_NMRAnetStateMachine_ProcessNode322
  L_NMRAnetStateMachine_ProcessNode323
  L_NMRAnetStateMachine_ProcessNode324
  L_NMRAnetStateMachine_ProcessNode325
  L_NMRAnetStateMachine_ProcessNode326
  L_NMRAnetStateMachine_ProcessNode327
  L_NMRAnetStateMachine_ProcessNode328
  L_NMRAnetStateMachine_ProcessNode329
  L_NMRAnetStateMachine_ProcessNode330
  L_NMRAnetStateMachine_ProcessNode331
  L_NMRAnetStateMachine_ProcessNode332
  L_NMRAnetStateMachine_ProcessNode333
  L_NMRAnetStateMachine_ProcessNode334
  L_NMRAnetStateMachine_ProcessNode335
  L_NMRAnetStateMachine_ProcessNode336
  L_NMRAnetStateMachine_ProcessNode337
  L_NMRAnetStateMachine_ProcessNode338
  L_NMRAnetStateMachine_ProcessNode339
  L_NMRAnetStateMachine_ProcessNode340
  L_NMRAnetStateMachine_ProcessNode341
  L_NMRAnetStateMachine_ProcessNode342
  L_NMRAnetStateMachine_ProcessNode343
  L_NMRAnetStateMachine_ProcessNode344
  L_NMRAnetStateMachine_ProcessNode345
  L_NMRAnetStateMachine_ProcessNode346
  L_NMRAnetStateMachine_ProcessNode347
  L_NMRAnetStateMachine_ProcessNode348
  L_NMRAnetStateMachine_ProcessNode349
  L_NMRAnetStateMachine_ProcessNode350
  L_NMRAnetStateMachine_ProcessNode351
  L_NMRAnetStateMachine_ProcessNode352
  L_NMRAnetStateMachine_ProcessNode353
  L_NMRAnetStateMachine_ProcessNode354
  L_NMRAnetStateMachine_ProcessNode355
  L_NMRAnetStateMachine_ProcessNode356
  L_NMRAnetStateMachine_ProcessNode357
  L_NMRAnetStateMachine_ProcessNode358
  L_NMRAnetStateMachine_ProcessNode359
  L_NMRAnetStateMachine_ProcessNode360
  L_NMRAnetStateMachine_ProcessNode361
  L_NMRAnetStateMachine_ProcessNode362
  L_NMRAnetStateMachine_ProcessNode363
  L_NMRAnetStateMachine_ProcessNode364
  L_NMRAnetStateMachine_ProcessNode365
  L_NMRAnetStateMachine_ProcessNode366
  L_NMRAnetStateMachine_ProcessNode367
  L_NMRAnetStateMachine_ProcessNode368
  L_NMRAnetStateMachine_ProcessNode369
  L_NMRAnetStateMachine_ProcessNode370
  L_NMRAnetStateMachine_ProcessNode371
  L_NMRAnetStateMachine_ProcessNode372
  L_NMRAnetStateMachine_ProcessNode373
  L_NMRAnetStateMachine_ProcessNode374
  L_NMRAnetStateMachine_ProcessNode375
  L_NMRAnetStateMachine_ProcessNode376
  L_NMRAnetStateMachine_ProcessNode377
  L_NMRAnetStateMachine_ProcessNode378
  L_NMRAnetStateMachine_ProcessNode379
  L_NMRAnetStateMachine_ProcessNode380
  L_NMRAnetStateMachine_ProcessNode381
  L_NMRAnetStateMachine_ProcessNode382
  L_NMRAnetStateMachine_ProcessNode383
  L_NMRAnetStateMachine_ProcessNode384
  L_NMRAnetStateMachine_ProcessNode385
  L_NMRAnetStateMachine_ProcessNode386
  L_NMRAnetStateMachine_ProcessNode387
  L_NMRAnetStateMachine_ProcessNode388
  L_NMRAnetStateMachine_ProcessNode389
  L_NMRAnetStateMachine_ProcessNode390
  L_NMRAnetStateMachine_ProcessNode391
  L_NMRAnetStateMachine_ProcessNode392
  L_NMRAnetStateMachine_ProcessNode393
  L_NMRAnetStateMachine_ProcessNode394
  L_NMRAnetStateMachine_ProcessNode395
  L_NMRAnetStateMachine_ProcessNode396
  L_NMRAnetStateMachine_ProcessNode397
  L_NMRAnetStateMachine_ProcessNode398
  L_NMRAnetStateMachine_ProcessNode399
  L_NMRAnetStateMachine_ProcessNode400
  L_NMRAnetStateMachine_ProcessNode401
  L_NMRAnetStateMachine_ProcessNode402
  L_NMRAnetStateMachine_ProcessNode403
  L_NMRAnetStateMachine_ProcessNode404
  L_NMRAnetStateMachine_ProcessNode405
  L_NMRAnetStateMachine_ProcessNode406
  L_NMRAnetStateMachine_ProcessNode407
  L_NMRAnetStateMachine_ProcessNode408
  L_NMRAnetStateMachine_ProcessNode409
  L_NMRAnetStateMachine_ProcessNode410
  L_NMRAnetStateMachine_ProcessNode411
  L_NMRAnetStateMachine_ProcessNode412
  L_NMRAnetStateMachine_ProcessNode413
  L_NMRAnetStateMachine_ProcessNode414
  L_NMRAnetStateMachine_ProcessNode415
  L_NMRAnetStateMachine_ProcessNode416
  L_NMRAnetStateMachine_ProcessNode417
  L_NMRAnetStateMachine_ProcessNode418
  L_NMRAnetStateMachine_ProcessNode419
  L_NMRAnetStateMachine_ProcessNode420
  L_NMRAnetStateMachine_ProcessNode421
  L_NMRAnetStateMachine_ProcessNode422
  L_NMRAnetStateMachine_ProcessNode423
  L_NMRAnetStateMachine_ProcessNode424
  L_NMRAnetStateMachine_ProcessNode425
  L_NMRAnetStateMachine_ProcessNode426
  L_NMRAnetStateMachine_ProcessNode427
  L_NMRAnetStateMachine_ProcessNode428
  L_NMRAnetStateMachine_ProcessNode429
  L_NMRAnetStateMachine_ProcessNode430
  L_NMRAnetStateMachine_ProcessNode431
  L_NMRAnetStateMachine_ProcessNode432
  L_NMRAnetStateMachine_ProcessNode433
  L_NMRAnetStateMachine_ProcessNode434
  L_NMRAnetStateMachine_ProcessNode435
  L_NMRAnetStateMachine_ProcessNode436
  L_NMRAnetStateMachine_ProcessNode437
  L_NMRAnetStateMachine_ProcessNode438
  L_NMRAnetStateMachine_ProcessNode439
  L_NMRAnetStateMachine_ProcessNode440
  L_NMRAnetStateMachine_ProcessNode441
  L_NMRAnetStateMachine_ProcessNode442
  L_NMRAnetStateMachine_ProcessNode443
  L_NMRAnetStateMachine_ProcessNode444
  L_NMRAnetStateMachine_ProcessNode445
  L_NMRAnetStateMachine_ProcessNode446
  L_NMRAnetStateMachine_ProcessNode447
  L_NMRAnetStateMachine_ProcessNode448
  L_NMRAnetStateMachine_ProcessNode449
  L_NMRAnetStateMachine_ProcessNode450
  L_NMRAnetStateMachine_ProcessNode451
  L_end_NMRAnetStateMachine_ProcessOutgoingNode
  L_NMRAnetStateMachine_ProcessOutgoingNode453
  L_NMRAnetStateMachine_ProcessOutgoingNode454
  L_NMRAnetStateMachine_ProcessOutgoingNode455
  L_NMRAnetStateMachine_ProcessOutgoingNode456
  L_NMRAnetStateMachine_ProcessOutgoingNode457
  L_NMRAnetStateMachine_ProcessOutgoingNode458
  L_end_NMRAnetStateMachine_ProcessAbandonBuffers
  L_NMRAnetStateMachine_ProcessAbandonBuffers460
  L_NMRAnetStateMachine_ProcessAbandonBuffers461
  L_NMRAnetStateMachine_ProcessAbandonBuffers462
  L_NMRAnetStateMachine_ProcessAbandonBuffers463
  L_NMRAnetStateMachine_ProcessAbandonBuffers464
  L_NMRAnetStateMachine_ProcessAbandonBuffers465
  L_end__NMRAnetStateMachine_Process
  L__NMRAnetStateMachine_Process467
  L__NMRAnetStateMachine_Process468
  L__NMRAnetStateMachine_Process469
  L__NMRAnetStateMachine_Process470
  L__NMRAnetStateMachine_Process471
  L__NMRAnetStateMachine_Process472
  L__NMRAnetStateMachine_Process473
  L__NMRAnetStateMachine_Process474
  L__NMRAnetStateMachine_Process475
  L__NMRAnetStateMachine_Process476
  L__NMRAnetStateMachine_Process477
  L__NMRAnetStateMachine_Process478
  L__NMRAnetStateMachine_Process479
  L__NMRAnetStateMachine_Process480
  L__NMRAnetStateMachine_Process481
  L__NMRAnetStateMachine_Process482
  L__NMRAnetStateMachine_Process483
  L__NMRAnetStateMachine_Process484
  L__NMRAnetStateMachine_Process485
  L__NMRAnetStateMachine_Process486
  L__NMRAnetStateMachine_Process487
  L__NMRAnetStateMachine_Process488
  L__NMRAnetStateMachine_Process489
  L__NMRAnetStateMachine_Process490
  L__NMRAnetStateMachine_Process491
  L__NMRAnetStateMachine_Process492
  L__NMRAnetStateMachine_Process493
  L__NMRAnetStateMachine_Process494
  L__NMRAnetStateMachine_Process495
  L__NMRAnetStateMachine_Process496
  L__NMRAnetStateMachine_Process497
  L__NMRAnetStateMachine_Process498
  L__NMRAnetStateMachine_Process499
  L__NMRAnetStateMachine_Process500
  L__NMRAnetStateMachine_Process501
  L__NMRAnetStateMachine_Process502
  L__NMRAnetStateMachine_Process503
  L__NMRAnetStateMachine_Process504
  L__NMRAnetStateMachine_Process505
  L__NMRAnetStateMachine_Process506
  L__NMRAnetStateMachine_Process507
  L__NMRAnetStateMachine_Process508
  L__NMRAnetStateMachine_Process509
  L__NMRAnetStateMachine_Process510
  L__NMRAnetStateMachine_Process511
  L__NMRAnetStateMachine_Process512
  L__NMRAnetStateMachine_Process513
  L__NMRAnetStateMachine_Process514
  L__NMRAnetStateMachine_Process515
  L__NMRAnetStateMachine_Process516
  L__NMRAnetStateMachine_Process517
  L__NMRAnetStateMachine_Process518
  L__NMRAnetStateMachine_Process519
  L__NMRAnetStateMachine_Process520
  L__NMRAnetStateMachine_Process521
  L__NMRAnetStateMachine_Process522
  L__NMRAnetStateMachine_Process523
  L__NMRAnetStateMachine_Process524
  L__NMRAnetStateMachine_Process525
  L__NMRAnetStateMachine_Process526
  L__NMRAnetStateMachine_Process527
  L__NMRAnetStateMachine_Process528
  L__NMRAnetStateMachine_Process529
  L__NMRAnetStateMachine_Process530
  L__NMRAnetStateMachine_Process531
  L__NMRAnetStateMachine_Process532
  L__NMRAnetStateMachine_Process533
  L__NMRAnetStateMachine_Process534
  L__NMRAnetStateMachine_Process535
  L__NMRAnetStateMachine_Process536
  L__NMRAnetStateMachine_Process537
  L__NMRAnetStateMachine_Process538
  L__NMRAnetStateMachine_Process539
  L__NMRAnetStateMachine_Process540
  L__NMRAnetStateMachine_Process541
  L__NMRAnetStateMachine_Process542
  L__NMRAnetStateMachine_Process543
  L__NMRAnetStateMachine_Process544
  L__NMRAnetStateMachine_Process545
  L__NMRAnetStateMachine_Process546
  L__NMRAnetStateMachine_Process547
  L__NMRAnetStateMachine_Process548
  L__NMRAnetStateMachine_Process549
  L__NMRAnetStateMachine_Process550
  L__NMRAnetStateMachine_Process551
  L__NMRAnetStateMachine_Process552
  L__NMRAnetStateMachine_Process553
  L__NMRAnetStateMachine_Process554
  L__NMRAnetStateMachine_Process555
  L__NMRAnetStateMachine_Process556
  L__NMRAnetStateMachine_Process557
  L__NMRAnetStateMachine_Process558
  L__NMRAnetStateMachine_Process559
  L__NMRAnetStateMachine_Process560
  L__NMRAnetStateMachine_Process561
  L__NMRAnetStateMachine_Process562
  L__NMRAnetStateMachine_Process563
  L__NMRAnetStateMachine_Process564
  L__NMRAnetStateMachine_Process565
  L__NMRAnetStateMachine_Process566
  L__NMRAnetStateMachine_Process567
  L__NMRAnetStateMachine_Process568
  L__NMRAnetStateMachine_Process569
  L_end__NMRAnetStateMachine_Disconnect
  L__TransmitNMRABusLayerMsg571
  L__TransmitCANLayerMsg572
  L_NMRAnetStateMachine_ProcessNode573
  L_NMRAnetStateMachine_ProcessNode574
  L_NMRAnetStateMachine_ProcessNode575
  L_end_NMRAnetStateMachine_TrySendAbbreviatedCDI
  _NMRAnetStateMachine_TrySendAbbreviatedCDI
  L_end_NMRAnetStateMachine_TrySendIdentifyProducer
  _NMRAnetStateMachine_TrySendIdentifyProducer
  L_end_NMRAnetStateMachine_TrySendIdentifyConsumer
  _NMRAnetStateMachine_TrySendIdentifyConsumer
  L_end_NMRAnetStateMachine_TrySendIdentifyEvents
  _NMRAnetStateMachine_TrySendIdentifyEvents
  L_end_NMRAnetStateMachine_TrySendAliasMapEnquiry
  _NMRAnetStateMachine_TrySendAliasMapEnquiry
  L_end_NMRAnetStateMachine_TrySendAliasMapReset
  _NMRAnetStateMachine_TrySendAliasMapReset
  L_end_NMRAnetStateMachine_TrySendVerifyNodeID
  _NMRAnetStateMachine_TrySendVerifyNodeID
  L__NMRAnetStateMachine_TrySendVerifyNodeID583
  L_end_NMRAnetStateMachine_TrySendDatagram
  _NMRAnetStateMachine_TrySendDatagram
  L__NMRAnetStateMachine_TrySendDatagram585
  L__NMRAnetStateMachine_TrySendDatagram586
  L__NMRAnetStateMachine_TrySendDatagram587
  L__NMRAnetStateMachine_TrySendDatagram588
  L__NMRAnetStateMachine_TrySendDatagram589
  L__NMRAnetStateMachine_TrySendDatagram590
  L__NMRAnetStateMachine_TrySendDatagram591
  L__NMRAnetStateMachine_TrySendDatagram592
  L__NMRAnetStateMachine_TrySendDatagram593
  L_end_ReleaseBuffers
  NMRAnetStateMachine_ReleaseBuffers
  L_NMRAnetStateMachine_ReleaseBuffers595
  L_NMRAnetStateMachine_ReleaseBuffers596
  L_end_NMRAnetStateMachine_InitializeNode
  _NMRAnetStateMachine_InitializeNode
  L__NMRAnetStateMachine_InitializeNode598
  L__NMRAnetStateMachine_InitializeNode599
  L__NMRAnetStateMachine_InitializeNode600
  L__NMRAnetStateMachine_InitializeNode601
  L__NMRAnetStateMachine_InitializeNode602
  L_end_NMRAnetStateMachine_Initialize
  _NMRAnetStateMachine_Initialize
  L_end_NMRAnetStateMachine_100ms_Timer
  _NMRAnetStateMachine_100ms_Timer
  L_end_TransmitCANLayerMsg
  _TransmitCANLayerMsg
  L__TransmitCANLayerMsg606
  L_end_CANBusBufferAvailable
  NMRAnetStateMachine_CANBusBufferAvailable
  L_NMRAnetStateMachine_CANBusBufferAvailable608
  L_end_TransmitNMRABusLayerMsg
  _TransmitNMRABusLayerMsg
  L__TransmitNMRABusLayerMsg610
  L__TransmitNMRABusLayerMsg611
  L_end_NMRABusBufferAvailable
  _NMRABusBufferAvailable
  L__NMRABusBufferAvailable613
  L_end_MaxAddressByAddressSpace
  NMRAnetStateMachine_MaxAddressByAddressSpace
  L_NMRAnetStateMachine_MaxAddressByAddressSpace615
  L_NMRAnetStateMachine_MaxAddressByAddressSpace616
  L_NMRAnetStateMachine_MaxAddressByAddressSpace617
  L_NMRAnetStateMachine_MaxAddressByAddressSpace618
  L_NMRAnetStateMachine_MaxAddressByAddressSpace619
  L_NMRAnetStateMachine_MaxAddressByAddressSpace620
  L_NMRAnetStateMachine_MaxAddressByAddressSpace621
  L_end_DecodeMemoryConfigurationReadWrite
  NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite623
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite624
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite625
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite626
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite627
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite628
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite629
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite630
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite631
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite632
  L_NMRAnetStateMachine_DecodeMemoryConfigurationReadWrite633
  L_end_ProcessNode
  NMRAnetStateMachine_ProcessNode
  L_NMRAnetStateMachine_ProcessNode635
  L_NMRAnetStateMachine_ProcessNode636
  L_NMRAnetStateMachine_ProcessNode637
  L_NMRAnetStateMachine_ProcessNode638
  L_NMRAnetStateMachine_ProcessNode639
  L_NMRAnetStateMachine_ProcessNode640
  L_NMRAnetStateMachine_ProcessNode641
  L_NMRAnetStateMachine_ProcessNode642
  L_NMRAnetStateMachine_ProcessNode643
  L_NMRAnetStateMachine_ProcessNode644
  L_NMRAnetStateMachine_ProcessNode645
  L_NMRAnetStateMachine_ProcessNode646
  L_NMRAnetStateMachine_ProcessNode647
  L_NMRAnetStateMachine_ProcessNode648
  L_NMRAnetStateMachine_ProcessNode649
  L_NMRAnetStateMachine_ProcessNode650
  L_NMRAnetStateMachine_ProcessNode651
  L_NMRAnetStateMachine_ProcessNode652
  L_NMRAnetStateMachine_ProcessNode653
  L_NMRAnetStateMachine_ProcessNode654
  L_NMRAnetStateMachine_ProcessNode655
  L_NMRAnetStateMachine_ProcessNode656
  L_NMRAnetStateMachine_ProcessNode657
  L_NMRAnetStateMachine_ProcessNode658
  L_NMRAnetStateMachine_ProcessNode659
  L_NMRAnetStateMachine_ProcessNode660
  L_NMRAnetStateMachine_ProcessNode661
  L_NMRAnetStateMachine_ProcessNode662
  L_NMRAnetStateMachine_ProcessNode663
  L_NMRAnetStateMachine_ProcessNode664
  L_NMRAnetStateMachine_ProcessNode665
  L_NMRAnetStateMachine_ProcessNode666
  L_NMRAnetStateMachine_ProcessNode667
  L_NMRAnetStateMachine_ProcessNode668
  L_NMRAnetStateMachine_ProcessNode669
  L_NMRAnetStateMachine_ProcessNode670
  L_NMRAnetStateMachine_ProcessNode671
  L_NMRAnetStateMachine_ProcessNode672
  L_NMRAnetStateMachine_ProcessNode673
  L_NMRAnetStateMachine_ProcessNode674
  L_NMRAnetStateMachine_ProcessNode675
  L_NMRAnetStateMachine_ProcessNode676
  L_NMRAnetStateMachine_ProcessNode677
  L_NMRAnetStateMachine_ProcessNode678
  L_NMRAnetStateMachine_ProcessNode679
  L_NMRAnetStateMachine_ProcessNode680
  L_NMRAnetStateMachine_ProcessNode681
  L_NMRAnetStateMachine_ProcessNode682
  L_NMRAnetStateMachine_ProcessNode683
  L_NMRAnetStateMachine_ProcessNode684
  L_NMRAnetStateMachine_ProcessNode685
  L_NMRAnetStateMachine_ProcessNode686
  L_NMRAnetStateMachine_ProcessNode687
  L_NMRAnetStateMachine_ProcessNode688
  L_NMRAnetStateMachine_ProcessNode689
  L_NMRAnetStateMachine_ProcessNode690
  L_NMRAnetStateMachine_ProcessNode691
  L_NMRAnetStateMachine_ProcessNode692
  L_NMRAnetStateMachine_ProcessNode693
  L_NMRAnetStateMachine_ProcessNode694
  L_NMRAnetStateMachine_ProcessNode695
  L_NMRAnetStateMachine_ProcessNode696
  L_NMRAnetStateMachine_ProcessNode697
  L_NMRAnetStateMachine_ProcessNode698
  L_NMRAnetStateMachine_ProcessNode699
  L_NMRAnetStateMachine_ProcessNode700
  L_NMRAnetStateMachine_ProcessNode701
  L_NMRAnetStateMachine_ProcessNode702
  L_NMRAnetStateMachine_ProcessNode703
  L_NMRAnetStateMachine_ProcessNode704
  L_NMRAnetStateMachine_ProcessNode705
  L_NMRAnetStateMachine_ProcessNode706
  L_NMRAnetStateMachine_ProcessNode707
  L_NMRAnetStateMachine_ProcessNode708
  L_NMRAnetStateMachine_ProcessNode709
  L_NMRAnetStateMachine_ProcessNode710
  L_NMRAnetStateMachine_ProcessNode711
  L_NMRAnetStateMachine_ProcessNode712
  L_NMRAnetStateMachine_ProcessNode713
  L_NMRAnetStateMachine_ProcessNode714
  L_NMRAnetStateMachine_ProcessNode715
  L_NMRAnetStateMachine_ProcessNode716
  L_NMRAnetStateMachine_ProcessNode717
  L_NMRAnetStateMachine_ProcessNode718
  L_NMRAnetStateMachine_ProcessNode719
  L_NMRAnetStateMachine_ProcessNode720
  L_NMRAnetStateMachine_ProcessNode721
  L_NMRAnetStateMachine_ProcessNode722
  L_NMRAnetStateMachine_ProcessNode723
  L_NMRAnetStateMachine_ProcessNode724
  L_NMRAnetStateMachine_ProcessNode725
  L_NMRAnetStateMachine_ProcessNode726
  L_NMRAnetStateMachine_ProcessNode727
  L_NMRAnetStateMachine_ProcessNode728
  L_NMRAnetStateMachine_ProcessNode729
  L_NMRAnetStateMachine_ProcessNode730
  L_NMRAnetStateMachine_ProcessNode731
  L_NMRAnetStateMachine_ProcessNode732
  L_NMRAnetStateMachine_ProcessNode733
  L_NMRAnetStateMachine_ProcessNode734
  L_NMRAnetStateMachine_ProcessNode735
  L_NMRAnetStateMachine_ProcessNode736
  L_NMRAnetStateMachine_ProcessNode737
  L_NMRAnetStateMachine_ProcessNode738
  L_NMRAnetStateMachine_ProcessNode739
  L_NMRAnetStateMachine_ProcessNode740
  L_NMRAnetStateMachine_ProcessNode741
  L_NMRAnetStateMachine_ProcessNode742
  L_NMRAnetStateMachine_ProcessNode743
  L_NMRAnetStateMachine_ProcessNode744
  L_NMRAnetStateMachine_ProcessNode745
  L_NMRAnetStateMachine_ProcessNode746
  L_NMRAnetStateMachine_ProcessNode747
  L_NMRAnetStateMachine_ProcessNode748
  L_NMRAnetStateMachine_ProcessNode749
  L_NMRAnetStateMachine_ProcessNode750
  L_end_ProcessOutgoingNode
  NMRAnetStateMachine_ProcessOutgoingNode
  L_NMRAnetStateMachine_ProcessOutgoingNode752
  L_NMRAnetStateMachine_ProcessOutgoingNode753
  L_end_ProcessAbandonBuffers
  NMRAnetStateMachine_ProcessAbandonBuffers
  L_NMRAnetStateMachine_ProcessAbandonBuffers755
  L_NMRAnetStateMachine_ProcessAbandonBuffers756
  L_end_NMRAnetStateMachine_Process
  _NMRAnetStateMachine_Process
  L__NMRAnetStateMachine_Process758
  L__NMRAnetStateMachine_Process759
  L__NMRAnetStateMachine_Process760
  L__NMRAnetStateMachine_Process761
  L__NMRAnetStateMachine_Process762
  L__NMRAnetStateMachine_Process763
  L__NMRAnetStateMachine_Process764
  L__NMRAnetStateMachine_Process765
  L__NMRAnetStateMachine_Process766
  L__NMRAnetStateMachine_Process767
  L__NMRAnetStateMachine_Process768
  L__NMRAnetStateMachine_Process769
  L__NMRAnetStateMachine_Process770
  L__NMRAnetStateMachine_Process771
  L__NMRAnetStateMachine_Process772
  L__NMRAnetStateMachine_Process773
  L__NMRAnetStateMachine_Process774
  L__NMRAnetStateMachine_Process775
  L__NMRAnetStateMachine_Process776
  L__NMRAnetStateMachine_Process777
  L__NMRAnetStateMachine_Process778
  L__NMRAnetStateMachine_Process779
  L__NMRAnetStateMachine_Process780
  L__NMRAnetStateMachine_Process781
  L__NMRAnetStateMachine_Process782
  L__NMRAnetStateMachine_Process783
  L__NMRAnetStateMachine_Process784
  L__NMRAnetStateMachine_Process785
  L__NMRAnetStateMachine_Process786
  L__NMRAnetStateMachine_Process787
  L__NMRAnetStateMachine_Process788
  L__NMRAnetStateMachine_Process789
  L__NMRAnetStateMachine_Process790
  L_end_NMRAnetStateMachine_Disconnect
  _NMRAnetStateMachine_Disconnect
  L_end__INTERRUPT_DCC_Timer
  L__INTERRUPT_DCC_Timer1
  L__INTERRUPT_DCC_Timer2
  L__INTERRUPT_DCC_Timer3
  L__INTERRUPT_DCC_Timer4
  L__INTERRUPT_DCC_Timer5
  L__INTERRUPT_DCC_Timer6
  L_end__INTERRUPT_1ms_Timer
  L__INTERRUPT_1ms_Timer8
  L__INTERRUPT_1ms_Timer9
  L__INTERRUPT_1ms_Timer10
  L__INTERRUPT_1ms_Timer11
  L__INTERRUPT_1ms_Timer12
  L_end__main
  L__main14
  L__main15
  L__main16
  L__main17
  L__main18
  L__main19
  L__main20
  L__main21
  L__main22
  L__main23
  L__main24
  L__main25
  L__main26
  L__main27
  L__main28
  L__main29
  L__main30
  L__main31
  L__main32
  L__main33
  L__main34
  L__main35
  L__main36
  L__main37
  L__main38
  L__main39
  L__main40
  L__main41
  L__main42
  L__main43
  L__main44
  L__main45
  L__main46
  L__main47
  L__main48
  L__main49
  L__main50
  L__main51
  L__main52
  L__main53
  L__main54
  L__main55
  L__main56
  L__main57
  L__main58
  L__main59
  L__main60
  L__main61
  L__main62
  L__main63
  L__main64
  L__main65
  L__main66
  L__main67
  L__main68
  L__main69
  L_end_INTERRUPT_DCC_Timer
  _INTERRUPT_DCC_Timer
  L__INTERRUPT_DCC_Timer71
  L_end_INTERRUPT_1ms_Timer
  _INTERRUPT_1ms_Timer
  L__INTERRUPT_1ms_Timer73
  L__INTERRUPT_1ms_Timer74
  L_end_main
  _main
  L__main76
  L__main77
  L__main78
  L__main79
  L__main80
  L__main81
  L__main82
  L__main83
  L__main84
  L__main85
  L__main86
  L__main87
  L__main88
  L__main89
  L__main90
  L__main91
  L__main92
  L__main_end_loop
  L_end__NMRA_DCC_Initialize
  L_end_NMRAnetDCC_InitializeBuffer
  L_NMRAnetDCC_InitializeBuffer2
  L_NMRAnetDCC_InitializeBuffer3
  L_NMRAnetDCC_InitializeBuffer4
  L_NMRAnetDCC_InitializeBuffer5
  L_NMRAnetDCC_InitializeBuffer6
  L_NMRAnetDCC_InitializeBuffer7
  L_NMRAnetDCC_InitializeBuffer8
  L_NMRAnetDCC_InitializeBuffer9
  L_NMRAnetDCC_InitializeBuffer10
  L_NMRAnetDCC_InitializeBuffer11
  L_end__NMRA_DCC_Packet_Init
  L__NMRA_DCC_Packet_Init13
  L__NMRA_DCC_Packet_Init14
  L__NMRA_DCC_Packet_Init15
  L__NMRA_DCC_Packet_Init16
  L__NMRA_DCC_Packet_Init17
  L__NMRA_DCC_Packet_Init18
  L__NMRA_DCC_Packet_Init19
  L__NMRA_DCC_Packet_Init20
  L__NMRA_DCC_Packet_Init21
  L__NMRA_DCC_Packet_Init22
  L_end__NMRA_DCC_56us_TimeTick
  L__NMRA_DCC_56us_TimeTick24
  L__NMRA_DCC_56us_TimeTick25
  L__NMRA_DCC_56us_TimeTick26
  L_end_NMRAnetDCC_NMRA_DCC_ResetTransmitter
  L_end_NMRAnetDCC_NMRA_DCCClassifyAddress
  L_NMRAnetDCC_NMRA_DCCClassifyAddress29
  L_NMRAnetDCC_NMRA_DCCClassifyAddress30
  L_NMRAnetDCC_NMRA_DCCClassifyAddress31
  L_NMRAnetDCC_NMRA_DCCClassifyAddress32
  L_NMRAnetDCC_NMRA_DCCClassifyAddress33
  L_NMRAnetDCC_NMRA_DCCClassifyAddress34
  L_NMRAnetDCC_NMRA_DCCClassifyAddress35
  L_NMRAnetDCC_NMRA_DCCClassifyAddress36
  L_NMRAnetDCC_NMRA_DCCClassifyAddress37
  L_NMRAnetDCC_NMRA_DCCClassifyAddress38
  L_NMRAnetDCC_NMRA_DCCClassifyAddress39
  L_NMRAnetDCC_NMRA_DCCClassifyAddress40
  L_end__NMRA_DCC_LoadPacket
  L_end__NMRA_DCC_QueuePacket
  L__NMRA_DCC_QueuePacket43
  L__NMRA_DCC_QueuePacket44
  L__NMRA_DCC_QueuePacket45
  L__NMRA_DCC_QueuePacket46
  L__NMRA_DCC_QueuePacket47
  L__NMRA_DCC_QueuePacket48
  L__NMRA_DCC_QueuePacket49
  L__NMRA_DCC_QueuePacket50
  L__NMRA_DCC_QueuePacket51
  L__NMRA_DCC_QueuePacket52
  L__NMRA_DCC_QueuePacket53
  L__NMRA_DCC_QueuePacket54
  L__NMRA_DCC_QueuePacket55
  L__NMRA_DCC_QueuePacket56
  L__NMRA_DCC_QueuePacket57
  L__NMRA_DCC_QueuePacket58
  L__NMRA_DCC_QueuePacket59
  L__NMRA_DCC_QueuePacket60
  L__NMRA_DCC_QueuePacket61
  L__NMRA_DCC_QueuePacket62
  L__NMRA_DCC_QueuePacket63
  L_end_NMRAnetDCC_NMRA_DCC_LoadIdlePacketIntoTransmitter
  L_end_NMRAnetDCC_NMRA_DCC_LoadResetPacketIntoTransmitter
  L_end_NMRAnetDCC_CanTransmitMessage
  L_NMRAnetDCC_CanTransmitMessage67
  L_NMRAnetDCC_CanTransmitMessage68
  L_NMRAnetDCC_CanTransmitMessage69
  L_NMRAnetDCC_CanTransmitMessage70
  L_NMRAnetDCC_CanTransmitMessage71
  L_NMRAnetDCC_CanTransmitMessage72
  L_NMRAnetDCC_CanTransmitMessage73
  L_NMRAnetDCC_CanTransmitMessage74
  L_NMRAnetDCC_CanTransmitMessage75
  L_NMRAnetDCC_CanTransmitMessage76
  L_NMRAnetDCC_CanTransmitMessage77
  L_NMRAnetDCC_CanTransmitMessage78
  L_NMRAnetDCC_CanTransmitMessage79
  L_NMRAnetDCC_CanTransmitMessage80
  L_NMRAnetDCC_CanTransmitMessage81
  L_NMRAnetDCC_CanTransmitMessage82
  L_NMRAnetDCC_CanTransmitMessage83
  L_NMRAnetDCC_CanTransmitMessage84
  L_NMRAnetDCC_CanTransmitMessage85
  L_NMRAnetDCC_CanTransmitMessage86
  L_NMRAnetDCC_CanTransmitMessage87
  L_NMRAnetDCC_CanTransmitMessage88
  L_NMRAnetDCC_CanTransmitMessage89
  L_NMRAnetDCC_CanTransmitMessage90
  L_NMRAnetDCC_CanTransmitMessage91
  L_NMRAnetDCC_CanTransmitMessage92
  L_NMRAnetDCC_CanTransmitMessage93
  L_end__NMRA_DCC_LoadPacketIntoTransmitterStateMachine
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine95
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine96
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine97
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine98
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine99
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine100
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine101
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine102
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine103
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine104
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine105
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine106
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine107
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine108
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine109
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine110
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine111
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine112
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine113
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine114
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine115
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine116
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine117
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine118
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine119
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine120
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine121
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine122
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine123
  L_end_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble125
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble126
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble127
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble128
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble129
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble130
  L_end_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte132
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte133
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte134
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte135
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte136
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte137
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte138
  L_end_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStartBit
  L_end_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte141
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte142
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte143
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte144
  L_end_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStopBit
  L_end__NMRA_DCC_TransmitterStateMachine
  L__NMRA_DCC_TransmitterStateMachine147
  L__NMRA_DCC_TransmitterStateMachine148
  L__NMRA_DCC_TransmitterStateMachine149
  L__NMRA_DCC_TransmitterStateMachine150
  L__NMRA_DCC_TransmitterStateMachine151
  L__NMRA_DCC_TransmitterStateMachine152
  L__NMRA_DCC_TransmitterStateMachine153
  L__NMRA_DCC_TransmitterStateMachine154
  L__NMRA_DCC_TransmitterStateMachine155
  L__NMRA_DCC_TransmitterStateMachine156
  L__NMRA_DCC_TransmitterStateMachine157
  L__NMRA_DCC_TransmitterStateMachine158
  L__NMRA_DCC_TransmitterStateMachine159
  L__NMRA_DCC_TransmitterStateMachine160
  L__NMRA_DCC_TransmitterStateMachine161
  L__NMRA_DCC_TransmitterStateMachine162
  L__NMRA_DCC_TransmitterStateMachine163
  L__NMRA_DCC_TransmitterStateMachine164
  L__NMRA_DCC_TransmitterStateMachine165
  L__NMRA_DCC_TransmitterStateMachine166
  L__NMRA_DCC_TransmitterStateMachine167
  L__NMRA_DCC_TransmitterStateMachine168
  L__NMRA_DCC_TransmitterStateMachine169
  L__NMRA_DCC_TransmitterStateMachine170
  L__NMRA_DCC_TransmitterStateMachine171
  L__NMRA_DCC_TransmitterStateMachine172
  L__NMRA_DCC_TransmitterStateMachine173
  L__NMRA_DCC_TransmitterStateMachine174
  L__NMRA_DCC_TransmitterStateMachine175
  L__NMRA_DCC_TransmitterStateMachine176
  L__NMRA_DCC_TransmitterStateMachine177
  L__NMRA_DCC_TransmitterStateMachine178
  L__NMRA_DCC_TransmitterStateMachine179
  L__NMRA_DCC_TransmitterStateMachine180
  L__NMRA_DCC_TransmitterStateMachine181
  L__NMRA_DCC_TransmitterStateMachine182
  L__NMRA_DCC_TransmitterStateMachine183
  L__NMRA_DCC_TransmitterStateMachine184
  L__NMRA_DCC_TransmitterStateMachine185
  L__NMRA_DCC_TransmitterStateMachine186
  L__NMRA_DCC_TransmitterStateMachine187
  L__NMRA_DCC_TransmitterStateMachine188
  L__NMRA_DCC_TransmitterStateMachine189
  L__NMRA_DCC_TransmitterStateMachine190
  L__NMRA_DCC_TransmitterStateMachine191
  L__NMRA_DCC_TransmitterStateMachine192
  L__NMRA_DCC_TransmitterStateMachine193
  L__NMRA_DCC_TransmitterStateMachine194
  L__NMRA_DCC_TransmitterStateMachine195
  L__NMRA_DCC_TransmitterStateMachine196
  L__NMRA_DCC_TransmitterStateMachine197
  L__NMRA_DCC_TransmitterStateMachine198
  L__NMRA_DCC_TransmitterStateMachine199
  L__NMRA_DCC_TransmitterStateMachine200
  L__NMRA_DCC_TransmitterStateMachine201
  L__NMRA_DCC_TransmitterStateMachine202
  L__NMRA_DCC_TransmitterStateMachine203
  L__NMRA_DCC_TransmitterStateMachine204
  L__NMRA_DCC_TransmitterStateMachine205
  L__NMRA_DCC_TransmitterStateMachine206
  L__NMRA_DCC_TransmitterStateMachine207
  L__NMRA_DCC_TransmitterStateMachine208
  L__NMRA_DCC_TransmitterStateMachine209
  L__NMRA_DCC_TransmitterStateMachine210
  L__NMRA_DCC_TransmitterStateMachine211
  L__NMRA_DCC_QueuePacket212
  L__NMRA_DCC_QueuePacket213
  L__NMRA_DCC_QueuePacket214
  L__NMRA_DCC_QueuePacket215
  L__NMRA_DCC_Packet_Init216
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine217
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine218
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine219
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine220
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine221
  L_end_NMRA_DCC_Initialize
  _NMRA_DCC_Initialize
  L_end_InitializeBuffer
  NMRAnetDCC_InitializeBuffer
  L_NMRAnetDCC_InitializeBuffer224
  L_NMRAnetDCC_InitializeBuffer225
  L_NMRAnetDCC_InitializeBuffer226
  L_NMRAnetDCC_InitializeBuffer227
  L_end_NMRA_DCC_Packet_Init
  _NMRA_DCC_Packet_Init
  L__NMRA_DCC_Packet_Init229
  L__NMRA_DCC_Packet_Init230
  L_end_NMRA_DCC_56us_TimeTick
  _NMRA_DCC_56us_TimeTick
  L__NMRA_DCC_56us_TimeTick232
  L_end_NMRA_DCC_ResetTransmitter
  NMRAnetDCC_NMRA_DCC_ResetTransmitter
  L_end_NMRA_DCCClassifyAddress
  NMRAnetDCC_NMRA_DCCClassifyAddress
  L_NMRAnetDCC_NMRA_DCCClassifyAddress235
  L_NMRAnetDCC_NMRA_DCCClassifyAddress236
  L_NMRAnetDCC_NMRA_DCCClassifyAddress237
  L_NMRAnetDCC_NMRA_DCCClassifyAddress238
  L_NMRAnetDCC_NMRA_DCCClassifyAddress239
  L_NMRAnetDCC_NMRA_DCCClassifyAddress240
  L_NMRAnetDCC_NMRA_DCCClassifyAddress241
  L_end_NMRA_DCC_LoadPacket
  _NMRA_DCC_LoadPacket
  L_end_NMRA_DCC_QueuePacket
  _NMRA_DCC_QueuePacket
  L__NMRA_DCC_QueuePacket244
  L__NMRA_DCC_QueuePacket245
  L__NMRA_DCC_QueuePacket246
  L__NMRA_DCC_QueuePacket247
  L__NMRA_DCC_QueuePacket248
  L__NMRA_DCC_QueuePacket249
  L__NMRA_DCC_QueuePacket250
  L_end_NMRA_DCC_LoadIdlePacketIntoTransmitter
  NMRAnetDCC_NMRA_DCC_LoadIdlePacketIntoTransmitter
  L_end_NMRA_DCC_LoadResetPacketIntoTransmitter
  NMRAnetDCC_NMRA_DCC_LoadResetPacketIntoTransmitter
  L_end_CanTransmitMessage
  NMRAnetDCC_CanTransmitMessage
  L_NMRAnetDCC_CanTransmitMessage254
  L_NMRAnetDCC_CanTransmitMessage255
  L_NMRAnetDCC_CanTransmitMessage256
  L_NMRAnetDCC_CanTransmitMessage257
  L_NMRAnetDCC_CanTransmitMessage258
  L_NMRAnetDCC_CanTransmitMessage259
  L_NMRAnetDCC_CanTransmitMessage260
  L_NMRAnetDCC_CanTransmitMessage261
  L_NMRAnetDCC_CanTransmitMessage262
  L_NMRAnetDCC_CanTransmitMessage263
  L_end_NMRA_DCC_LoadPacketIntoTransmitterStateMachine
  _NMRA_DCC_LoadPacketIntoTransmitterStateMachine
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine265
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine266
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine267
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine268
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine269
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine270
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine271
  L__NMRA_DCC_LoadPacketIntoTransmitterStateMachine272
  L_end_NMRA_DCC_TransmitterStateMachineHandlePreamble
  NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble274
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandlePreamble275
  L_end_NMRA_DCC_TransmitterStateMachineHandleByte
  NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte277
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte278
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte279
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte280
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleByte281
  L_end_NMRA_DCC_TransmitterStateMachineHandleStartBit
  NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStartBit
  L_end_NMRA_DCC_TransmitterStateMachineXORByte
  NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte284
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte285
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte286
  L_NMRAnetDCC_NMRA_DCC_TransmitterStateMachineXORByte287
  L_end_NMRA_DCC_TransmitterStateMachineHandleStopBit
  NMRAnetDCC_NMRA_DCC_TransmitterStateMachineHandleStopBit
  L_end_NMRA_DCC_TransmitterStateMachine
  _NMRA_DCC_TransmitterStateMachine
  L__NMRA_DCC_TransmitterStateMachine290
  L__NMRA_DCC_TransmitterStateMachine291
  L__NMRA_DCC_TransmitterStateMachine292
  L__NMRA_DCC_TransmitterStateMachine293
  L__NMRA_DCC_TransmitterStateMachine294
  L__NMRA_DCC_TransmitterStateMachine295
  L__NMRA_DCC_TransmitterStateMachine296
  L__NMRA_DCC_TransmitterStateMachine297
  L__NMRA_DCC_TransmitterStateMachine298
  L__NMRA_DCC_TransmitterStateMachine299
  L__NMRA_DCC_TransmitterStateMachine300
  L__NMRA_DCC_TransmitterStateMachine301
  L__NMRA_DCC_TransmitterStateMachine302
  L__NMRA_DCC_TransmitterStateMachine303
  L__NMRA_DCC_TransmitterStateMachine304
  L__NMRA_DCC_TransmitterStateMachine305
  L__NMRA_DCC_TransmitterStateMachine306
  L__NMRA_DCC_TransmitterStateMachine307
