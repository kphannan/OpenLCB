program NMRAnetCommandStation;
// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:
//    Implements a NMRABus based Command Station
//
// BUGS, BUGS, BUGS,
//
//  July 14, 2012
//  Response to the Memory Configuration Protocol can respond with Datagrams MUCH larger than 72 bytes.......Ok per Bob
//  Memory Config not working with VNodes
//
// ******************************************************************************
 
uses
  _25AAxxxx,
  MCU_Setup_dsPIC33EP64GP502,
  NMRAnetStateMachine,
  NMRAnetDefines,
  CANDefines,
  CANStorage,
  NMRAnetEventDefines,
  NMRAnetBufferPools,
  NMRAnetBufferPoolsDefines,
  NMRAnetDCC,
  NMRAnetNode,
  NodeIDs;
  
{$I Options.inc}

var
  // EEPROM SPI PINS
  CS_Bank_0                         : sbit at LATB6_bit;
  CS_Bank_0_Direction               : sbit at TRISB6_bit;
  EE_PROM_Hold                      : sbit at LATB5_bit;
  EEPROM_Hold_Direction             : sbit at TRISB5_bit;
  
  // DCC SIGNAL PINS
  H_Bridge_A_Lo                     : sbit at LATA1_bit;
  H_Bridge_A_Hi                     : sbit at LATB0_bit;
  H_Bridge_B_Lo                     : sbit at LATB1_bit;
  H_Bridge_B_Hi                     : sbit at LATB4_bit;
  
  H_Bridge_A_Lo_Direction           : sbit at TRISA1_bit;
  H_Bridge_A_Hi_Direction           : sbit at TRISB0_bit;
  H_Bridge_B_Lo_Direction           : sbit at TRISB1_bit;
  H_Bridge_B_Hi_Direction           : sbit at TRISB4_bit;
  
// *****************************************************************************
//  INTERRUPTS
// *****************************************************************************

procedure INTERRUPT_DCC_Timer(); iv IVT_ADDR_T1INTERRUPT;
begin
  T1IF_bit := 0;                                                                // Clear the Flag
  
  // Toggle the Bridge
  H_Bridge_A_Lo := 0;                                                           // Bridge Off
  H_Bridge_A_Hi := 0;                                                           // Bridge Off
  H_Bridge_B_Lo := 0;                                                           // Bridge Off
  H_Bridge_B_Hi := 0;                                                           // Bridge Off
  H_Bridge_A_Lo := Track.TX_Flags.TRANSMITTING_FLAG_DCC_PIN_BIT;
  H_Bridge_B_Hi := Track.TX_Flags.TRANSMITTING_FLAG_DCC_PIN_BIT;
  H_Bridge_A_Hi := not Track.TX_Flags.TRANSMITTING_FLAG_DCC_PIN_BIT;
  H_Bridge_B_Lo := not Track.TX_Flags.TRANSMITTING_FLAG_DCC_PIN_BIT;

  // Now we can update the xxxx_DCC_PIN_BIT flags for the next 56us time slot
  NMRA_DCC_56us_TimeTick(@Track);                                                         // < 1us
  NMRA_DCC_TransmitterStateMachine(@Track);                                               // < 5us
  NMRA_DCC_LoadPacketIntoTransmitterStateMachine(@Track, PREAMBLE_BIT_COUNT_NORMAL);      // < 11us    Max
end;

procedure INTERRUPT_1ms_Timer(); iv IVT_ADDR_T2INTERRUPT;
// Called once every 100m
var
  i: Integer;
begin
  // Silicon Bug in the 4013, if Interrupt is disabled, then Interrupt 2 of higher priority is called (nested) an Address Trap can be thrown
  {$IFDEF FIX_NESTED_INTERRUPT_SILICON_BUG} asm DISI #2; end; {$ENDIF}
  T2IF_bit := 0;                                                                // Clear the Flag
  for i := 0 to Nodes.Count - 1 do
    NMRAnetStateMachine_100ms_Timer(Nodes.AllocatedList[i]);
end;

procedure PrintBufferPools(var j: Integer);
begin
  if j = 50000 then
  begin
   NMRAnetBufferPools_Print;
   j := 0;
  end;
  Inc(j);
end;

procedure PrintMaxLoopTimes(var x, y: Word);
begin
  if x <> MaxTime_RX then
  begin
    FloatToStr(double( MaxTime_RX)*50e-3, s1);
    UART1_Write_Text('Interrupt Time: '+s1+'us'+LF);
    x := MaxTime_RX
  end;

  if y <> MaxTime_StateMachine then
  begin
    FloatToStr(double( MaxTime_StateMachine)*50e-3, s1);
    UART1_Write_Text('Statemachine Time: '+s1+'us'+LF);
    y := MaxTime_StateMachine
  end;
end;

// *******************
// MAIN LOOP
// *******************
var
  ActiveNode: PNMRAnetNode;
  i, j: Integer;
  x, y: Word;

begin
  _25AAxxxx_Initialize;
  CANStorage_Initialize;
  dsPIC33_CAN_Initialize;
  NMRAnetStateMachine_Initialize(MUSTANGPEAK_ID_0_HI, MUSTANGPEAK_COMMANDSTATION_ID_0_LO);
  MCU_Setup_Initialize;                                                         // Start the timers and perpherials last
  NMRA_DCC_Initialize;
  
  H_Bridge_A_Lo := 0;                                                           // Bridge Off
  H_Bridge_A_Hi := 0;                                                           // Bridge Off
  H_Bridge_B_Lo := 0;                                                           // Bridge Off
  H_Bridge_B_Hi := 0;                                                           // Bridge Off
  H_Bridge_A_Lo_Direction := 0;                                                 // Output
  H_Bridge_A_Hi_Direction := 0;                                                 // Output
  H_Bridge_B_Lo_Direction := 0;                                                 // Output
  H_Bridge_B_Hi_Direction := 0;                                                 // Output
  
  TON_T1CON_bit := 1;                                                           // Start the DCC Timer
  NMRA_DCC_Packet_Init;                                                         // Send our 20 Idle Packets per the spec, note we are not on the OLCB bus yet so this will block until done.

  UART1_Write_Text('Starting'+LF);

  x := 0;
  y := 0;
  j := 0;
  i := 0;
  MaxTime_RX := 0;
  MaxTime_StateMachine := 0;
  
  while (TRUE) do
  begin
    //  PrintBufferPools(j);
    ActiveNode := NMRAnetNode_NextNode;
    if ActiveNode <> PNMRAnetNode( nil) then
    begin
    
      TMR3 := 0;
      NMRAnetStateMachine_Process(ActiveNode);
      if TMR3 > MaxTime_StateMachine then MaxTime_StateMachine := TMR3;

      if NMRAnetNode_TestStateFlag(ActiveNode, NS_PERMITTED) then
      begin

      end;
    end;
  //  PrintMaxLoopTimes(x, y);
  end;
end.