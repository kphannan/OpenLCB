program UartBootloader;

{ Declarations section }

var
  Timer: Integer;
  Buffer: array[0..128] of Word;
  BufferSize: Word;
  FlashAddress: LongInt;
begin
  { Main program }
  org $200;

  // Set up as all Digital IO
  ANSELA := 0;
  ANSELB := 0;

  // Setup Oscillator and PLL for 64Mhz
  OSCCON := OSCCON and $F8FF;                                                   // Clear NOSC bits (set to FRC mode)
  OSCCON.0 := 1;                                                                // Tell it to change modes
  while OSCCON.0 = 1 do;                                                        // wait for it to take effect

  CLKDIV := CLKDIV and 0xFFE0;                                                  // PLLPRE<4:0> = 0  ->  N1 = 2    8MHz / 2 = 4MHz
                                                                                // (must be within 0.8 MHz to 8 MHz range)
  PLLFBD :=   30;                                                               // PLLDIV<8:0> = 30 ->  M = 32    4MHz * 32 = 128MHz
                                                                                // (must be within 100 MHz to 200 MHz range)
  PLLPOST_1_bit := 0;
  PLLPOST_0_bit := 0;                                                           // PLLPOST<1:0> = 0 ->  N2 = 2    128MHz / 2 = 64MHz

  OSCCON := OSCCON or $0300;                                                    // Set COSC to 011 = XT with PLL
  OSCCON.0 := 1;                                                                // Tell it to change modes
  while OSCCON.0 = 1 do;                                                        // wait for it to take effect
  while LOCK_bit = 0 do;                                                        // wait for it to lock

  Delay_ms(10);
  
  // Setup Module Pins, this is only allowed once per boot so make sure to set everything that is necessary
  Unlock_IOLOCK;
  PPS_Mapping_NoLock(44, _INPUT, _U1RX);                                        // Set RPI44 to the UART Receive
  PPS_Mapping_NoLock(42, _OUTPUT, _U1TX);                                       // Set RP42 to the UART Transmit
  PPS_Mapping_NoLock(45, _INPUT, _C1RX);                                        // Set RPI45 to the CAN Receive
  PPS_Mapping_NoLock(43, _OUTPUT, _C1TX);                                       // Set RP43 to the CAN Transmit
  Lock_IOLOCK;
  
  // Setup UART
  UART1_Init(230400);                       // Initialize UART module a
  Delay_ms(100);                            // Wait for UART module to stabilize
  
  Timer := 5000;
  BufferSize := 0;
  FlashAddress := $00000400;
  while Timer > 0 do
  begin
    if UART1_Data_Ready then
    begin
      Buffer[BufferSize] := UART1_Read;
      UART1_Write($FE);
      FLASH_Erase(FlashAddress);
      FLASH_Write(FlashAddress, Buffer);
    end;
    Delay_ms(1);
    Dec(Timer);
  end;

end.