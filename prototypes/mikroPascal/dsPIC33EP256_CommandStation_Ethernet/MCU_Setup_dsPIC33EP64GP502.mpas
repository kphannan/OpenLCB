unit MCU_Setup_dsPIC33EP64GP502;

{$I Options.inc}

uses
  NMRAnetDefinesShared,
  {$IFDEF CAN_BUS}
  CANBuffers, 
  dsPIC33_CAN,
  {$ENDIF}
  {$IFDEF ETHERNET_BUS}
  TCPStorage,
  {$ENDIF}
  dsPIC33_DMA,
  lib1_enc600_V3_5_b,
  lib2_enc600_V3_5_b;
  
const
 // ipServer: array[0..3] of byte = (192, 168, 0, 127);  // iMac
//  ipServer: array[0..3] of byte = (192, 168, 0, 8);    // Windows XP in Parallels
  
  DCC_TIMER_58US = 1850; //1792;            // Clock ticks every 31.25ns * 1856 = 58us interrupts
  DCC_TIMER_29US = 928;             // Clock ticks every 31.25ns * 928 = 29us interrupts
  

  procedure MCU_Setup_Initialize;
  procedure MCU_Setup_Enable_OlcbBus;

implementation

procedure MCU_Setup_Enable_OlcbBus;
begin
  // set mac address
  eth_mac[0] := 0x00;
  eth_mac[1] := 0x14;
  eth_mac[2] := 0xA5;
  eth_mac[3] := 0x76;
  eth_mac[4] := 0x19;
  eth_mac[5] := 0x3F;

  // set IP address
  eth_ip_addr[0] := 192;
  eth_ip_addr[1] := 168;
  eth_ip_addr[2] := 0;
  eth_ip_addr[3] := 128;
 
  // set gateway address
  eth_gateway[0]  := 192;
  eth_gateway[1]  := 168;
  eth_gateway[2]  := 0;
  eth_gateway[3]  := 1;

  // set dns address
  eth_dns_addr[0] := 208;
  eth_dns_addr[1] := 67;
  eth_dns_addr[2] := 222;
  eth_dns_addr[3] := 222;
  
  // set subnet mask
  eth_mask[0]    := 255;
  eth_mask[1]    := 255;
  eth_mask[2]    := 255;
  eth_mask[3]    := 0;
  
  SPI1_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_4,
                     _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_IDLE_2_ACTIVE);
  SPIEN_bit := 0;    // Disable SPI
  SPI1CON := SPI1CON and $FFE0;  // Clear the prescaler bits
  SPI1CON := SPI1CON or $0003 or $0018;  // Setup for 5 Mhz (with the CAN plug in boards)     $10=5Mhz, $14=6.67Mhz, $18 = 10Mhz
  SPIEN_bit := 1;    // Enable the SPI
  
  Eth_Init_(False);  // Use the built in ENC464J600 MAC
  Wait_for_LAN;

//  Net_Ethernet_28j60_stackInitTCP();
//  Net_Ethernet_28j60_Init(@myMacAddr, @myIpAddr, Net_Ethernet_28j60_FULLDUPLEX);  // init ethernet module
//  Net_Ethernet_28j60_confNetwork(@ipMask, @gwIpAddr, @dnsIpAddr);
end;

procedure MCU_Setup_Initialize;
var
  i: Integer;
  WordPtr: ^Word;
begin
  ANSELA := 0;
  ANSELB := 0;


  OSCCON := OSCCON and $F8FF;                                                   // Clear NOSC bits (set to FRC mode)
  OSCCON.0 := 1;                                                                // Tell it to change modes
  while OSCCON.0 = 1 do;                                                        // wait for it to take effect

  CLKDIV := CLKDIV and 0xFFE0;                                                  // PLLPRE<4:0> = 0  ->  N1 = 2    8MHz / 2 = 4MHz
                                                                                // (must be within 0.8 MHz to 8 MHz range)
  PLLFBD :=   30;                                                               // PLLDIV<8:0> = 30 ->  M = 32    4MHz * 32 = 128MHz
                                                                                // (must be within 100 MHz to 200 MHz range)
  PLLPOST_1_bit := 0;
  PLLPOST_0_bit := 0;                                                           // PLLPOST<1:0> = 0 ->  N2 = 2    128MHz / 2 = 64MHz

  OSCCON := OSCCON or $0300;                                                    // Set COSC to 011 = XT with PLL
  OSCCON.0 := 1;                                                                // Tell it to change modes
  while OSCCON.0 = 1 do;                                                        // wait for it to take effect
  while LOCK_bit = 0 do;

  Delay_ms(10);

  Unlock_IOLOCK;
  {$IFDEF UART_ENABLE}
    PPS_Mapping_NoLock(44, _INPUT, _U1RX);                                      // Set RPI44 to the UART Receive
    PPS_Mapping_NoLock(42, _OUTPUT, _U1TX);                                     // Set RP42 to the UART Transmit
  {$ENDIF}
  {$IFDEF CAN_BUS}
  PPS_Mapping_NoLock(45, _INPUT, _C1RX);                                        // Set RPI45 to the CAN Receive
  PPS_Mapping_NoLock(43, _OUTPUT, _C1TX);                                       // Set RP43 to the CAN Transmit
  {$ENDIF}
  Lock_IOLOCK;
  
  
  {$IFDEF UART_ENABLE}
  // Initialize UART
  
  UART1_Init(230400);                       // Initialize UART module a
  Delay_ms(100);                            // Wait for UART module to stabilize
  {$ENDIF}

  {$IFNDEF DCCTIMER_DISABLE}
  TCS_T1CON_bit := 0;       // internal cycle clock
  T1IP_0_bit := 1;          // Timer 1 Interrupt Priority = 7   (1 means off)
  T1IP_1_bit := 1;
  T1IP_2_bit := 1;
  PR1 := DCC_TIMER_58US;
  T1IF_bit := 0;           // Clear T1IF
  T1IE_bit := 1;           // Enable the Interrupt
  {$ENDIF}
  
  TCS_T2CON_bit := 0;       // Disable
  T2IP_0_bit := 0;          // Timer 2 Interrupt Priority = 2   (1 means off)
  T2IP_1_bit := 1;
  T2IP_2_bit := 0;
  TCKPS_0_T2CON_bit := 1;   // 256 Prescaler
  TCKPS_1_T2CON_bit := 1;
  PR2 := 12500;             // Clock ticks every 31.25ns * 256 * 12500 = 100ms interrupts
  T2IF_bit := 0;            // Clear T2IF
  T2IE_bit := 1;            // Enable the Interrupt
  TON_T2CON_bit := 1;       // Turn on
  
  TCS_T3CON_bit := 0;       // Disable
  T3IP_0_bit := 0;          // Timer 3 Interrupt Priority = 2   (1 means off)
  T3IP_1_bit := 1;
  T3IP_2_bit := 0;
  TCKPS_0_T3CON_bit := 1;   // 256 Prescaler
  TCKPS_1_T3CON_bit := 1;
  PR3 := 125;               // Clock ticks every 31.25ns * 256 * 125 = 1ms interrupts
  T3IF_bit := 0;            // Clear T3IF
  T3IE_bit := 1;            // Enable the Interrupt
  TON_T3CON_bit := 1;       // Turn on
  
  TCS_T5CON_bit := 0;       // Disable
  T5IP_0_bit := 1;          // Timer 5 Interrupt Priority = 5   (1 means off)
  T5IP_1_bit := 0;
  T5IP_2_bit := 1;
  TCKPS_0_T5CON_bit := 1;   // 256 Prescaler
  TCKPS_1_T5CON_bit := 1;
  PR5 := 625;               // Clock ticks every 31.25ns * 256 * 625 = 5ms interrupts
  T5IF_bit := 0;            // Clear T2IF
  T5IE_bit := 1;            // Enable the Interrupt

  // Setup of the ADC(s)
  ANSA0_bit := 1;            // Pin RA0 = Analog

  AD1CON3 := $1FFF;          // SAMC = 11111 = 31 * Tad; ADCS = 11111111 (ACDS + 1) = 3 * Tcy = Tad    Sample as slow as we can
  ASAM_bit := 1;            // Automatic Sample Bit
  SSRCG_bit := 0;           // Sample Clock Source Group Bit, something other than the PWM
  SSRC_0_bit := 1;          // Sample Clock Source Select Bit, Internal counter ends sampling and starts conversion (auto-convert)
  SSRC_1_bit := 1;          //
  SSRC_2_bit := 1;          //
  ADDMAEN_bit := 0;         // Do not use DMA, store the results in the ADCxBUF0-ADC-xBUFF registers
  SMPI_0_bit := 1;
  SMPI_1_bit := 1;
  SMPI_2_bit := 1;
  SMPI_3_bit := 1;
  SMPI_4_bit := 0;          // Interrupt every 16 conversions
  AD1IP_0_bit := 1;
  AD1IP_1_bit := 1;
  AD1IP_2_bit := 0;         // Interrupt Priority = 3;
  AD1IF_bit := 0;
  ADON_bit := 1;            // Enable the ADC Module
  Delay_us(20);
  
end;

end.