unit NMRAnetDatagrams;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//     2012-10-07:   Version 1.0
//
// * Description:
//
// ******************************************************************************

uses
  NMRAnetUtilities,
  CANStorage,
  NMRAnetDefines;

procedure NMRAnetDatagrams_Initialize;
procedure NMRAnetDatagrams_InitializeDatagramBuffer(DatagramBuffer: PDatagramBuffer);
procedure NMRAnetDatagrams_SetCallback(var Hook: PDatagramTaskCallbackFunc; Func: PDatagramTaskCallbackFunc);   // Hook is any variable in NMRAnetDatagramDefines: DatagramTrainControlHook, DatagramMemConfigurationHook, etc

implementation

procedure NMRAnetDatagrams_InitializeDatagramBuffer(Buffer: PDatagramBuffer);
var
  j: Integer;
begin
  if Buffer <> nil then
  begin
    Buffer^.State := 0;
    Buffer^.Alias := 0;
    Buffer^.Next := 0;
    Buffer^.mCode := 0;
    Buffer^.StateMachine := 0;
    Buffer^.Tag := 0;
    Buffer^.SourceNodePtr := Generic16BitPointer( nil);

    Buffer^.iByteCount := 0;
    Buffer^.iWatchdog := 0;
    Buffer^.ErrorCode.Count := 1;                                               // Assume only the MTI
    Buffer^.ErrorCode.SubType[0] := 0;
    Buffer^.ErrorCode.SubType[1] := 0;
    Buffer^.iRetransmit := 0;
    for j := 0 to MAX_DATAGRAM_LEN-1 do
      Buffer^.DataBytes[j] := 0;
  end
end;

// *****************************************************************************
//  procedure NMRAnetDatagrams_Initialize;
//
//  Parameters:
//
//  Result:
//
//  Description:
// *****************************************************************************
procedure NMRAnetDatagrams_Initialize;
begin
  DatagramTrainControlCallbackFunc := PDatagramTaskCallbackFunc(nil);
end;


// *****************************************************************************
//
// procedure NMRAnetDatagrams_SetCallback;
//
//  Parameters:
//                None
//  Returns:
//                None
//  Description:
//              Not really a necessary function just helps future use in reminding
//              how these Callbacks work.
//
//              Callback is the variable int NMRAnetDatagramDefines
//                           DatagramUnknownCallback: PDatagramTaskCallbackFunc;
//                           DatagramTrainControlCallback: PDatagramTaskCallbackFunc;
//                           DatagramMemConfigurationCallback: PDatagramTaskCallbackFunc;
//                           etc
//
// *****************************************************************************
procedure NMRAnetDatagrams_SetCallback(var Hook: PDatagramTaskCallbackFunc; Func: PDatagramTaskCallbackFunc);
begin
  Hook := Func
end;

end.