unit PagedServiceMode;

uses
  NMRAnetDCC,
  ServiceModeDefines;
  
  
  procedure PagedServiceMode_StateMachineRead(BufferPtr: PDCCBufferInfo);
  procedure PagedServiceMode_StateMachineWrite(BufferPtr: PDCCBufferInfo);

implementation

// ***************************************************************************
//  procedure DirectLoadTransmitter
//
//  Parameters:  None
//
//  Result:  None
//
//  Description:
// ***************************************************************************
procedure DirectLoadTransmitter(BufferPtr: PDCCBufferInfo; RegisterOffset, ReadWrite, DataByte: Byte);
var
  i: Integer;
begin
  BufferPtr^.TX_TransmittingPacket.PacketBytes[0] :=  %01110000 or ReadWrite or RegisterOffset;
  BufferPtr^.TX_TransmittingPacket.PacketBytes[1] := DataByte;
  BufferPtr^.TX_TransmittingPacket.Flags := 2;
  BufferPtr^.TX_XOR_Byte := 0;
  for i := 0 to 1 do
   BufferPtr^.TX_XOR_Byte := BufferPtr^.TX_XOR_Byte xor BufferPtr^.TX_TransmittingPacket.PacketBytes[i];
  BufferPtr^.TX_PreambleBitCount := PREAMBLE_BIT_COUNT_SERVICEMODE;
end;

// ***************************************************************************
//  procedure PowerOnCycle
//
//  Parameters:  None
//
//  Result:  None
//
//  Description:
// ***************************************************************************
procedure PowerOnCycle(BufferPtr: PDCCBufferInfo);
begin
  if ServiceModeInfo.iInstructionCountSent < SERVICEMODE_POWER_ON_CYCLE_IDLE_COUNT then
  begin
    Inc(ServiceModeInfo.iInstructionCountSent);
    NMRA_DCC_LoadIdlePacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE)
  end else
  begin
    ServiceModeInfo.iInstructionCountSent := 1;
    NMRA_DCC_LoadResetPacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE);
    ServiceModeInfo.iStateMachine := STATE_SERVICEMODE_RESET_CYCLE
  end
end;

// ***************************************************************************
//  procedure ResetCycle
//
//  Parameters:  None
//
//  Result:  None
//
//  Description:
// ***************************************************************************
procedure PowerOnResetCycle(BufferPtr: PDCCBufferInfo);
begin
  if ServiceModeInfo.iInstructionCountSent < SERVICEMODE_POWER_ON_CYCLE_RESET_COUNT then
  begin
    Inc(ServiceModeInfo.iInstructionCountSent);
    NMRA_DCC_LoadResetPacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE)
  end else
  begin
    ServiceModeInfo.Flags.PROGRAMMING_ACK_DETECTED_BIT := 0;
    ServiceModeInfo.Flags.PROGRAMMING_ACK_TIMER_DETECTED_LEADINGEDGE_BIT := 0;
    ServiceModeInfo.Flags.PROGRAMMING_ACK_FAILED_TO_DETECT_TRAILINGEDGE_BIT := 0;
    ServiceModeInfo.Flags.PROGRAMMING_ACK_SCANNING_FOR_ACK_BIT := 1;         // Start Looking since we are now sending the read instruction
    
    ServiceModeInfo.iInstructionCountSent := 1;
    DirectLoadTransmitter(BufferPtr, 5, %00001000, ServiceModeInfo.ReadIndex div 4);   // Page Register is Register 6 (RRR = 5)
    ServiceModeInfo.iStateMachine := STATE_SERVICEMODE_PAGED_WRITE_PAGE_REGISTER;
  end
end;

// ***************************************************************************
//  procedure PageRegisterWriteCycle
//
//  Parameters:  None
//
//  Result:  None
//
//  Description:
// ***************************************************************************
procedure PageRegisterWriteCycle(BufferPtr: PDCCBufferInfo);
begin
  if ServiceModeInfo.iInstructionCountSent < SERVICEMODE_PAGED_PAGE_WRITE_COUNT then
  begin
    Inc(ServiceModeInfo.iInstructionCountSent);
    DirectLoadTransmitter(BufferPtr, 5, %00001000, ServiceModeInfo.ReadIndex div 4);   // Page Register is Register 6 (RRR = 5)
  end else
  begin
    ServiceModeInfo.iInstructionCountSent := 1;
    NMRA_DCC_LoadResetPacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE);
    ServiceModeInfo.iStateMachine := STATE_SERVICEMODE_PAGED_WRITE_PAGE_REGISTER_RECOVER;
  end
end;

procedure PageRegisterWriteRecoverResetCycle(BufferPtr: PDCCBufferInfo);
begin
  if ServiceModeInfo.iInstructionCountSent < SERVICEMODE_PAGED_PAGE_WRITE_RECOVER_COUNT then
  begin
    Inc(ServiceModeInfo.iInstructionCountSent);
    NMRA_DCC_LoadResetPacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE);
  end else
  begin
    ServiceModeInfo.iInstructionCountSent := 1;
    NMRA_DCC_LoadResetPacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE);
    ServiceModeInfo.iStateMachine := STATE_SERVICEMODE_PAGED_INSTRUCTION_RESET;
  end
end;

procedure InstructionResetCycle(BufferPtr: PDCCBufferInfo);
begin
  if ServiceModeInfo.iInstructionCountSent < SERVICEMODE_PAGED_INSTRUCTION_RESET_COUNT then
  begin
    Inc(ServiceModeInfo.iInstructionCountSent);
    NMRA_DCC_LoadResetPacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE);
  end else
  begin
    ServiceModeInfo.iInstructionCountSent := 1;
    if ServiceModeInfo.ReadWrite = SERVICEMODE_WRITE then
      DirectLoadTransmitter(BufferPtr, ServiceModeInfo.ReadIndex mod 4, %00001000, ServiceModeInfo.ReadIndex div 4)
    else
      DirectLoadTransmitter(BufferPtr, ServiceModeInfo.ReadIndex mod 4, %00000000, ServiceModeInfo.ReadIndex div 4);
    ServiceModeInfo.iStateMachine := STATE_SERVICEMODE_PAGED_REGISTER;
  end
end;

// ***************************************************************************
//  procedure FailedToDetectCorrectAckWidth
//
//  Parameters:  None
//
//  Result:  None
//
//  Description:
// ***************************************************************************
procedure FailedToDetectCorrectAckWidth(BufferPtr: PDCCBufferInfo);
begin
  ServiceModeInfo.Value := 0;
  ServiceModeInfo.ServiceModeResult := SERVICE_MODE_RESULT_RESPONSE_PAGED_MODE_SHORT_ACK;
  NMRA_DCC_LoadResetPacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE);  // Per 9.2.3
  ServiceModeInfo.iStateMachine := STATE_SERVICEMODE_RESULTS_READY;
end;
   
// ***************************************************************************
//  procedure PagedServiceMode_StateMachineRead
//
//  Parameters:  None
//
//  Result:  None
//
//  Description:
//         StateMachine that handles a Direct CV Service Mode Programmming sequence
//    per the S9.2.3 spec
//
//    NOTE:  Everytime this StateMachine is entered the Transmitter MUST BE LOADED
// ***************************************************************************
procedure PagedServiceMode_StateMachineRead(BufferPtr: PDCCBufferInfo);
begin
  if BufferPtr^.TX_Flags.TRANSMITTING_FLAG_STOP_BIT = 1 then
  begin
    case ServiceModeInfo.iStateMachine of
      STATE_SERVICEMODE_POWER_ON_CYCLE                    : PowerOnCycle(BufferPtr);
      STATE_SERVICEMODE_RESET_CYCLE                       : PowerOnResetCycle(BufferPtr);
      STATE_SERVICEMODE_PAGED_WRITE_PAGE_REGISTER         : PageRegisterWriteCycle(BufferPtr);
      STATE_SERVICEMODE_PAGED_WRITE_PAGE_REGISTER_RECOVER : PageRegisterWriteRecoverResetCycle(BufferPtr);
      STATE_SERVICEMODE_PAGED_INSTRUCTION_RESET           : InstructionResetCycle(BufferPtr);
      STATE_SERVICEMODE_PAGED_REGISTER                    :
        begin
          if ServiceModeInfo.Flags.PROGRAMMING_ACK_DETECTED_BIT = 1 then
            begin                                                                 // ACK detected and we are done
              ServiceModeInfo.Value := ServiceModeInfo.ReadIndex;
              ServiceModeInfo.ServiceModeResult := SERVICE_MODE_RESULT_RESPONSE_PAGED_MODE_READ;
              NMRA_DCC_LoadResetPacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE);  // Per 9.2.3
              ServiceModeInfo.iStateMachine := STATE_SERVICEMODE_RESULTS_READY;
            end else
            if ServiceModeInfo.Flags.PROGRAMMING_ACK_FAILED_TO_DETECT_TRAILINGEDGE_BIT = 1 then
              FailedToDetectCorrectAckWidth(BufferPtr)
            else
            if ServiceModeInfo.Flags.PROGRAMMING_ACK_TIMER_DETECTED_LEADINGEDGE_BIT = 1 then
              NMRA_DCC_LoadResetPacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE)       // Ack start detected so drop into Reset Packets are either success or failure handled above after 5ms
            else begin
              if ServiceModeInfo.iInstructionCountSent < SERVICEMODE_PAGED_INSTRUCTION_COUNT then
              begin
                Inc(ServiceModeInfo.iInstructionCountSent);
                DirectLoadTransmitter(BufferPtr, ServiceModeInfo.ReadIndex mod 4, %00000000, ServiceModeInfo.ReadIndex div 4);
              end else
              begin
                Inc(ServiceModeInfo.ReadIndex);                                   // Try the next Value
                if ServiceModeInfo.Value = ServiceModeInfo.ReadIndex then         // Have we run all the way around the horn once
                begin
                  ServiceModeInfo.ServiceModeResult := SERVICE_MODE_RESULT_DATA_NOT_FOUND;   // Run all possible values and an ACK was not found
                  ServiceModeInfo.iStateMachine := STATE_SERVICEMODE_RESULTS_READY
                end else
                begin
                  ServiceModeInfo.iInstructionCountSent := 1;                     // Run the next possible Value cycle
                  ServiceModeInfo.iStateMachine := STATE_SERVICEMODE_PAGED_INSTRUCTION_RESET;
                  NMRA_DCC_LoadResetPacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE);
                end
              end;
            end;
        end;
      STATE_SERVICEMODE_RESULTS_READY :
        begin
          // Spin here until the application calls ServiceMode_ReadResults to grab the Result and move to Done
          NMRA_DCC_LoadResetPacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE);  // Per 9.2.3  // Don't come out of Service Mode
        end;
      STATE_SERVICEMODE_DONE :
        begin
        end;
    end
  end;
end;

// ***************************************************************************
//  procedure PagedServiceMode_StateMachineWrite
//
//  Parameters:  None
//
//  Result:  None
//
//  Description:
//         StateMachine that handles a Direct CV Service Mode Programmming sequence
//    per the S9.2.3 spec
//
//    NOTE:  Everytime this StateMachine is entered the Transmitter MUST BE LOADED
// ***************************************************************************
procedure PagedServiceMode_StateMachineWrite(BufferPtr: PDCCBufferInfo);
begin
  if BufferPtr^.TX_Flags.TRANSMITTING_FLAG_STOP_BIT = 1 then
  begin
    case ServiceModeInfo.iStateMachine of
      STATE_SERVICEMODE_POWER_ON_CYCLE                    : PowerOnCycle(BufferPtr);
      STATE_SERVICEMODE_RESET_CYCLE                       : PowerOnResetCycle(BufferPtr);
      STATE_SERVICEMODE_PAGED_WRITE_PAGE_REGISTER         : PageRegisterWriteCycle(BufferPtr);
      STATE_SERVICEMODE_PAGED_WRITE_PAGE_REGISTER_RECOVER : PageRegisterWriteRecoverResetCycle(BufferPtr);
      STATE_SERVICEMODE_PAGED_INSTRUCTION_RESET           : InstructionResetCycle(BufferPtr);
      STATE_SERVICEMODE_PAGED_REGISTER                    :
        begin
          if ServiceModeInfo.Flags.PROGRAMMING_ACK_DETECTED_BIT = 1 then
            begin                                                                 // ACK detected and we are done
              ServiceModeInfo.Value := ServiceModeInfo.ReadIndex;
              ServiceModeInfo.ServiceModeResult := SERVICE_MODE_RESULT_RESPONSE_PAGED_MODE_READ;
              NMRA_DCC_LoadResetPacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE);  // Per 9.2.3
              ServiceModeInfo.iStateMachine := STATE_SERVICEMODE_RESULTS_READY;
            end else
            if ServiceModeInfo.Flags.PROGRAMMING_ACK_FAILED_TO_DETECT_TRAILINGEDGE_BIT = 1 then
              FailedToDetectCorrectAckWidth(BufferPtr)
            else
            if ServiceModeInfo.Flags.PROGRAMMING_ACK_TIMER_DETECTED_LEADINGEDGE_BIT = 1 then
              NMRA_DCC_LoadResetPacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE)       // Ack start detected so drop into Reset Packets are either success or failure handled above after 5ms
            else begin
              if ServiceModeInfo.iInstructionCountSent < SERVICEMODE_PAGED_INSTRUCTION_COUNT then
              begin
                Inc(ServiceModeInfo.iInstructionCountSent);
                DirectLoadTransmitter(BufferPtr, ServiceModeInfo.ReadIndex mod 4, %00001000, ServiceModeInfo.ReadIndex div 4);
              end else
              begin
                ServiceModeInfo.ServiceModeResult := SERVICE_MODE_RESULT_RESPONSE_PAGED_MODE_WRITE_NO_ACK;
                ServiceModeInfo.iStateMachine := STATE_SERVICEMODE_DONE;
              end;
            end;
        end;
      STATE_SERVICEMODE_RESULTS_READY :
        begin
          // Spin here until the application calls ServiceMode_ReadResults to grab the Result and move to Done
          NMRA_DCC_LoadResetPacketIntoTransmitter(BufferPtr, PREAMBLE_BIT_COUNT_SERVICEMODE);  // Per 9.2.3  // Don't come out of Service Mode
        end;
      STATE_SERVICEMODE_DONE :
        begin
        end;
    end
  end;
end;

end.