unit lib2_enc600_V3_5_b;

//{$DEFINE RxInt}
{$DEFINE LOG_UART}

uses 

NMRAnetDefinesShared,


  dspic_additional_string_library,
  Lib_Delays_LIO,
  definitions_ENC600,
  lib1_enc600_V3_5_b,
  EthPing,
  EthARP,
  EthDNS,
  EthNTP,
  EthDHCP,
  EthUDP,
  EthSockets,
  EthTCP,
  EthCommon;

// User functions
procedure CounterTask;
Procedure Eth_Init_(use_user_MAC: Boolean);
procedure Do_EthernetProc(n : word);
procedure Firewall(F_ICMP, F_TCP, F_UDP : boolean);
procedure Wait_for_LAN;
procedure Wait_With_Eth(n : word);
function debugg_stack : word;

// Internally used functions
function Eth_ReadPacket : word;
procedure Eth_DoPacket;
procedure Do_Stack;

// External functions
procedure Eth_UserProcess_Main; external;
procedure Eth_UserProcess; external;
procedure DisableInt;  external;
procedure EnableInt; external;

var 
  ENC_CS : sbit; sfr; external;
  ENC_CS_dir : sbit; sfr; external;
  {$IFDEF RxInt}
  ENC_INT : sbit; sfr; external;
  ENC_INT_dir : sbit; sfr; external;
  {$ENDIF}
  
var
  AddrPacket, NextPacket : word;
    
implementation

var
  count_100 : byte;
  FICMP, FTCP, FUDP : boolean; // Access

procedure Firewall(F_ICMP, F_TCP, F_UDP : boolean);
begin
  FICMP := F_ICMP;
  FTCP := F_TCP;
  FUDP := F_UDP;
end;

//******************************************************************************
//* Name    : CounterTask                                                      *
//* Purpose : Increment all Counters                                           *
//******************************************************************************
procedure CounterTask;
var i : byte;
begin
  Ping_CacheTimerTask;
  inc(TickCounter1);
  inc(TickCounter10);
  
  if inc(count_100) > 99 then
  begin
    Inc(ARP_100ms_Counter);
    inc(DHCP_count_1);
    count_100 := 0;
  end;
    
  if inc(NTP_Sec) > (999 + offset_clock_err) then  // 1 sec
  begin
    NTP_Sec := 0;
    
    i := 0;
    while i < MAX_SOCKET do
      begin
        inc(SocketManager.Socket[i].Exp_Time);
        inc(i);
      end;
      
    inc(NTP_Time);
    inc(NTP_ReSync);
    inc(DHCP_count_2);
    
    if DHCP_State = 3 then
      if inc(DHCP_count_3) > Settings.DHCP_Lease_Time then
        begin
          DHCP_count_3 := 0;
          DHCP_state := 0;
          DHCP_count_2 := 294;
        end;
        
    if NTP_ReSync > 1230 then
      begin
        NTP_Sync := False; // resyncronizations at 20 min
        NTP_ReSync := 0;
      end;
      
  end;
end;

//******************************************************************************
//* Name    : Eth_Init                                                         *
//* Purpose : Init Ethernet module                                             *
//******************************************************************************
Procedure Eth_Init_(use_user_MAC: Boolean);
var buf : word;
Begin
  DisableInt;
  NTP_Time := 3534364800; // 2012
  ARP_100ms_Counter := ARP_REFRESH_TIME + 1;
  EnableInt;
  NTP_Sync := False;
  Offset_Time := 0;
  NTP_Sec := 0;
  NTP_ReSync := 0;
  TickCounter1 := 0;
  TickCounter10 := 0;
  count_100 := 0;
  offset_clock_err := 0;
  DNS_Manager.Response := False;
  TTime.Str := ' ';
  
  {$IFDEF RxInt}
  ENC_INT_dir := 1;
  {$ENDIF}
  ENC_CS := 1;
  nop;
  ENC_CS_dir := 0;
  delayms(10);
  Eth_UnSelect;
  delayms(10);
  Eth_SendSystemReset;

  Eth_WriteReg(ERXST_,RXSTART);
  Eth_WriteReg(ERXTAIL_,$5FFE);
  Eth_WriteReg(EUDAST_,$6000);
  Eth_WriteReg(EUDAND_,$6001);

  Eth_WriteReg(ERXRDPT_,RXSTART);
  NextPacket := RXSTART;
  Eth_WriteReg(ETXST_,TXSTART);

  Eth_WriteReg(EGPRDPT_, GPSTART);
  
  Eth_WriteReg(MAMXF_, max_packet);
  Eth_WriteReg(MABBIPG_,$15);

  if use_user_MAC <> 0 then
  begin
    Lo(buf) := Settings.eth_mac[0];
    Hi(buf) := Settings.eth_mac[1];
    Eth_WriteReg(MAADR1_,buf);
    Lo(buf) := Settings.eth_mac[2];
    Hi(buf) := Settings.eth_mac[3];
    Eth_WriteReg(MAADR2_,buf);
    Lo(buf) := Settings.eth_mac[4];
    Hi(buf) := Settings.eth_mac[5];
    Eth_WriteReg(MAADR3_,buf);
  end else
  begin
    buf := Eth_ReadReg(MAADR1_);
    Settings.eth_mac[0] := Lo(buf);
    Settings.eth_mac[1] := Hi(buf);
    buf := Eth_ReadReg(MAADR2_);
    Settings.eth_mac[2] := Lo(buf);
    Settings.eth_mac[3] := Hi(buf);
    buf := Eth_ReadReg(MAADR3_);
    Settings.eth_mac[4] := Lo(buf);
    Settings.eth_mac[5] := Hi(buf);
  end;

  buf := Eth_ReadReg(MACON2_);
  buf := buf or $0001;
  Eth_WriteReg(MACON2_, buf);

  Eth_WritePHYReg(PHANA_,$05E1);

{$IFDEF RxInt}
  Eth_BSF(EIE_,0x0040);      // PKTIE enabled
  Eth_BSF(EIE_,0x8000);      // Int Enable
{$ENDIF}

  // enables reception
  Eth_BSF(ECON1_,0x0001);    //RXEN
  TCP_Init_Internal;
  UDP_Init_Internal;
  
  ARP_EraseCache_Internal;
  Ping_EraseCache_Internal;
  EraseSockets;
  Firewall(False, False, False);
  Sockets_Init_Internal;
  Eth_Policy(POLICY_DROP);
  delayms(10);

  DHCP_count_1 := 10;
  DHCP_count_2 := 0;
  DHCP_count_3 := 0;
  Settings.DHCP_Lease_Time := (3600*6); // 6 ore
  DHCP_State := 0;
  Settings.Announce := False;
  Settings.DHCP_Enable := False;
  
  Settings.UDP_Broadcast := False;

  
  SocketManager.TCP_Wait := 500;
  SocketManager.UDP_Wait := 500;
  
  SocketManager.iLastOpenedSocked := 255;
End;

//******************************************************************************
//* Name    : Eth_ReadPacket                                                   *
//* Purpose : Read Packet from Ethernet module                                 *
//******************************************************************************
function Eth_ReadPacket : word;
begin
  Result := 0;
  CopyEthMemToEthMem(NextPacket, GPSTART, 1600);
  
  Eth_WriteReg(EGPRDPT_, NextPacket);    // Set the write pointer
  Lo(NextPacket) := Eth_GetByte;
  Hi(NextPacket) := Eth_GetByte;

  Eth_WriteReg(EGPRDPT_, (GPSTART + 20));    // Set the lower write pointer
  Hi(Result) := Eth_GetByte;
  Lo(Result) := Eth_GetByte;
  
  AddrPacket := (GPSTART + 8);

  Eth_BSF(ECON1_,ECON1_PKTDEC_);               // Decrement the number of packets

  if NextPacket = RXSTART then 
    Eth_WriteReg(ERXTAIL_, $5FFE)
  else 
    Eth_WriteReg(ERXTAIL_,NextPacket - 2);
end;

//******************************************************************************
//* Name    : Eth_DoPacket                                                     *
//* Purpose : Process incomming Ethernet packets, without TCP/IP Stack         *
//******************************************************************************
procedure Eth_DoPacket;
begin
  ClrWdt;
  Eth_UserProcess_Main;
{$IFDEF RxInt}
  if ENC_INT <> 0 then 
    Exit;
{$ENDIF}
  if (Eth_ReadReg(EIR_) and $0040) <> 0 then
    begin
    
    {$IFDEF LOG_UART}UART1_Write_Text('Have Packet' + LF);{$ENDIF}
    
      broadcast_packet := False;
      case Eth_ReadPacket of
        ETH_ARP :
        begin
          {$IFDEF LOG_UART}UART1_Write_Text('ETH_ARP' + LF);{$ENDIF}
          if EthMemCompareWithRam(AddrPacket + 38, @Settings.eth_ip_addr, 4) then
            begin
              case ReadFromEthMem(AddrPacket+21) of
                ETH_ARP_REQ :        // ARP Request
                  begin
                    ARP_Reply_Internal(AddrPacket);
                    {$IFDEF LOG_UART}UART1_Write_Text('ETH_ARP_REQ' + LF);{$ENDIF}
                  end;
                ETH_ARP_RES :       // ARP Response to a Request sent by us
                  begin
                    ARP_Process_Internal(AddrPacket);
                    {$IFDEF LOG_UART}UART1_Write_Text('ETH_ARP_RES' + LF);{$ENDIF}
                  end;
              end;
            end;
        end;
        ETH_IP :
        begin
          {$IFDEF LOG_UART}UART1_Write_Text('ETH_IP' + LF);{$ENDIF}
          if EthMemCompareWithRam(AddrPacket + 30, @Settings.eth_ip_addr, 4) then
          begin
            case ReadFromEthMem(AddrPacket + 23) of
                ETH_IP_ICMP :
                  begin
                    {$IFDEF LOG_UART}UART1_Write_Text('ETH_IP_ICMP' + LF);{$ENDIF}
                    case ReadFromEthMem(AddrPacket + 34) of
                      ETH_IP_ICMP_ECHO :
                        begin
                          {$IFDEF LOG_UART}UART1_Write_Text('ETH_IP_ICMP_ECHO' + LF);{$ENDIF}
                          if FICMP = False then
                            Ping_Echo_Internal(AddrPacket)
                        end;
                      ETH_IP_ICMP_REPLY :
                        begin
                          {$IFDEF LOG_UART}UART1_Write_Text('ETH_IP_ICMP_REPLY' + LF);{$ENDIF}
                          Ping_Reply_Internal(AddrPacket);
                        end;
                    end;
                  end;
                ETH_IP_UDP :
                  begin
                    if FUDP = False then
                      UDP_Process_Internal(AddrPacket);
                    {$IFDEF LOG_UART}UART1_Write_Text('ETH_IP_UDP' + LF);{$ENDIF}
                  end;
                ETH_IP_TCP :
                  begin
                    if FTCP = False then
                      Eth_ProcessTCP(AddrPacket);
                    {$IFDEF LOG_UART}UART1_Write_Text('ETH_IP_TCP' + LF);{$ENDIF}
                  end;
            end;
            Exit;
          end;
          if Settings.UDP_Broadcast <> 0 then
            if ReadFromEthMem(AddrPacket+33) = 255 then
              if ReadFromEthMem(AddrPacket+23) = ETH_IP_UDP then
                if FUDP = False then
                begin
                  broadcast_packet := True;
                  UDP_Process_Internal(AddrPacket);
                end;
        end;
      end;
    end;
end;

//******************************************************************************
//* Name    : Do_Stack                                                         *
//* Purpose : Process packets from TCP/IP Stack                                *
//******************************************************************************
procedure Do_Stack;
var i : byte;
begin
  i := 0;
  while i < MAX_SOCKET do  // search for opened socket
  begin
    if (SocketManager.Socket[i].State_S = SOCKET_CONNECTED) then  // if connected
    begin
      if (SocketManager.Socket[i].Start_addr <> SocketManager.Socket[i].Stop_addr) then
      begin
        if Send_TCP_R_Internal(PSH_S + ACK_S, i, True) = False then
        begin
          SocketManager.Socket[i].Keep_Alive := False;
          SocketManager.Socket[i].Start_addr := 0;
          SocketManager.Socket[i].Stop_addr := 0;
        end else 
          SocketManager.Socket[i].Exp_Time := 0;
      end else
      if (SocketManager.Socket[i].Keep_Alive = False) or (SocketManager.Socket[i].Exp_Time > SocketManager.Socket[i].Exp_Time_Val) then // 1 minutes without activity (60 * 1) sec
      begin
        SocketManager.Socket[i].RAM_ROM := 0;
        SocketManager.Socket[i].Start_addr := 0;
        SocketManager.Socket[i].Stop_addr := 0;
        CopyRamToEthMem(@SocketManager.Socket[i].Dest_Mac, TXSTART, 6);
        CopyRamToEthMem(@Settings.eth_mac, TXSTART + 6, 6);
        CopyRamToEthMem(@Settings.eth_ip_addr, TXSTART + 26, 4);
        CopyRamToEthMem(@SocketManager.Socket[i].Dest_Ip, TXSTART + 30, 4);
        Eth_SendTCP(SocketManager.Socket[i].source_port_S, SocketManager.Socket[i].dest_port_S, 0, SocketManager.Socket[i].SEQ_No_S, SocketManager.Socket[i].ACK_No_S, FIN_S + ACK_S);
        SocketManager.Socket[i].State_S := SOCKET_DISCONNECTED; // disconnect
        SocketManager.Socket[i].Keep_Alive := False;
      end;
    end else 
    if (SocketManager.Socket[i].State_S = SOCKET_WAITING_FOR_CONNECTION) then // waiting for connection
    begin
      if (SocketManager.Socket[i].Exp_Time > 9) then // 10 sec without response at SYN
      begin
        SocketManager.Socket[i].RAM_ROM := 0;
        SocketManager.Socket[i].Start_addr := 0;
        SocketManager.Socket[i].Stop_addr := 0;
        SocketManager.Socket[i].State_S := SOCKET_DISCONNECTED; // disconnect
        SocketManager.Socket[i].Keep_Alive := False;
      end;
    end;
    inc(i);
  end;
end;

//******************************************************************************
//* Name    : Do_EthernetProc                                                  *
//* Purpose : Process all Ethernet packets                                     *
//******************************************************************************
procedure Do_EthernetProc(n : word);
var i : word;
begin
  i := 0;
  while i < n do
    begin
      Eth_DoPacket;
      Eth_UserProcess;
      Do_Stack;
      inc(i);
  end;
end;

//******************************************************************************
//* Name    : Wait_for_LAN                                                     *
//* Purpose : Wait for LAN                                                     *
//******************************************************************************
procedure Wait_for_LAN;
var 
  Counter : word;
  dest_ip_addr: IpHeader;
  dest_mac: MacHeader;
begin
  Counter := 0;
  while Counter < 60000 do
  begin
    ClrWdt;
    Eth_UserProcess_Main;
    if (Eth_ReadReg(EIR_) and $0040) <> 0 then
      Eth_ReadPacket;
    delay_100us_;
    delay_100us_;
    if IsLinkUp then
      Break;
    inc(Counter);
  end;
  if Settings.Announce <> 0 then
  begin
    Mem_Set(@dest_ip_addr, $FF, 4);
    Mem_Set(@dest_mac,$FF,6);
    Ping_Send_Internal(dest_ip_addr, dest_mac, 0);
  end;
  if Settings.DHCP_Enable <> 0 then
    DHCP_Request(AddrPacket);
end;

procedure Wait_With_Eth(n : word);
var i : word;
begin
  i := 0;
  while i < n do
    begin
      delay_1ms_;
      Do_EthernetProc(1);
      inc(i);
    end;
end;

function debugg_stack : word;
var
  i : byte;
  txt31 : string[32];
begin
  Eth_PutByte($0D);
  Eth_PutByte($0A);
  result := 2;

  i := 0;
  while i < MAX_SOCKET do
    begin
      result := result + CopyRamStringToEthMem_CP('Sock_No: ');
      Byte2StrWithZeros(i,txt31);
      Str_Cut_Left(txt31,1);
      result := result + CopyRamStringToEthMem_CP(txt31);

      result := result + CopyRamStringToEthMem_CP(', State: ');
      Byte2StrWithZeros(SocketManager.Socket[i].State_S,txt31);
      Str_Cut_Left(txt31,2);
      result := result + CopyRamStringToEthMem_CP(txt31);

      result := result + CopyRamStringToEthMem_CP(', Keep_Alive: ');
      if SocketManager.Socket[i].Keep_Alive <> 0 then txt31 := 'True '
      else txt31 := 'False';
      result := result + CopyRamStringToEthMem_CP(txt31);

      result := result + CopyRamStringToEthMem_CP(', Dest_Port: ');
      Word2StrWithZeros(SocketManager.Socket[i].dest_port_S,txt31);
      result := result + CopyRamStringToEthMem_CP(txt31);

      result := result + CopyRamStringToEthMem_CP(', Ip: ');
      Ip2Str(SocketManager.Socket[i].Dest_Ip,txt31);
      result := result + CopyRamStringToEthMem_CP(txt31);

      Eth_PutByte($0D);
      Eth_PutByte($0A);
      result := result + 2;

      inc(i);
    end;
end;

end.