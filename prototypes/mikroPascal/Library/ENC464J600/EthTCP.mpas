unit EthTCP;

{.$DEFINE LOG_UART}
{$DEFINE TRACE_SOCKET_STATE}
{.$DEFINE TRACE_ETHERNET_TX}
{.$DEFINE TRACE_ETHERNET_RX}
{$DEFINE TRACE_ETHERNET_SOCKET_RX}

{$I Options.inc}

uses


NMRAnetDefinesShared,

  EthCommon,
  EthSockets,
  dspic_additional_string_library,
  lib1_enc600_V3_5_b,
  definitions_ENC600,
  ENCJ600;



  
// User Functions
function TCP_TryLoadTransmitterAndSend(var Socket: TSocket; TCP_Flags: Byte; TxMemoryAddress: Word): Boolean;

// Internal functions
procedure TCP_Init_Internal;

procedure TCP_Process_Stack;
procedure TCP_Process_Receive(RxMemoryAddress: Word);

//function TCP_UserSend(var ip_t1 : TIPAddress; dest_port_S1, len_data1 : word; var data_tcp2 : array[1472] of byte) : boolean;

//function TCP_Send_Internal(TCP_Flag_T : byte; iSocket: Integer) : boolean;
//procedure TCP_WriteToWire_Internal(source_portT, dest_portT, PacketLenT : word; SEQ_NoT, ACK_NoT : dWord; TCP_FlagT : byte);
//procedure TCP_Process_Internal(EthMemAddressRequest: Word);

// External functions
//procedure Eth_UserTCP(var dest_ip_addr_T : TIPAddress; var source_port_T, dest_port_T, len_T : word; iSocket : Integer); external;
//procedure Do_Ethernet_Receive; external;

implementation

var
  SEQ_No, ACK_No, SEQ_NoR, ACK_NoR : dWord;
  Window : word;
  
procedure TCP_Init_Internal;
begin
  ACK_No := $42844A80;
  SEQ_No := $42844A80;
end;

procedure PrintHeader(var Header: TEthernetHeader; LineCount: Integer);
var
  i, j: Integer;
begin
  for i := 0 to LineCount - 1 do
  begin
    UART1_Write_Text('0x');
    for j := 0 to 3 do
    begin
      ByteToHex( Header[i][j], s1);
      UART1_Write_Text(s1);
    end;
    UART1_Write_Text(LF);
  end;
end;

procedure PrintPhysicalHeader(var PhyHeader: TPhysicalLayerHeader);
begin
  UART1_Write_Text(LF+LF+'....Printing Physical Layer Header.... '+LF);
  Mac2Str(PhyHeader.DestMacAddress, s1);
  UART1_Write_Text('0x' + s1 + ' [Physical Header Dest MAC]' + LF);
  Mac2Str(PhyHeader.SourceMacAddress, s1);
  UART1_Write_Text('0x' + s1 + ' [Physical Header Source MAC]' + LF);
  ByteToHex(PhyHeader.Protocol[0], s1);
  UART1_Write_Text('0x' + s1 + ' [Phy Protocol]' + LF);
end;

procedure LoadIPHeaderLine0(var HeaderLine: TEthernetHeaderLine; IP_Version, IHL, DSCP, ECN: Byte; PacketLength: Word);
begin
  HeaderLine[0] := (IP_Version shl 4) or IHL;
  HeaderLine[1] := (DSCP shl 2) or ECN;
  HeaderLine[2] := Hi(PacketLength);
  HeaderLine[3] := Lo(PacketLength);
end;

procedure LoadIPHeaderLine1(var HeaderLine: TEthernetHeaderLine; Identification: Word; FragmentationFlags: Byte; FragmentationOffset: Word);
begin
  HeaderLine[0] := Hi(Identification);
  HeaderLine[1] := Lo(Identification);
  HeaderLine[2] := (FragmentationFlags shl 5) or (Hi(FragmentationOffset) shr 3);
  HeaderLine[3] := Lo(FragmentationOffset)
end;

procedure LoadIPHeaderLine2(var HeaderLine: TEthernetHeaderLine; TimeToLive, Protocol: Byte);
begin
  HeaderLine[0] := TimeToLive;
  HeaderLine[1] := Protocol;
  HeaderLine[2] := 0;                                                           // Checksum comes after all of the header is filled in
  HeaderLine[3] := 0
end;

procedure LoadIPHeaderLine3(var HeaderLine: TEthernetHeaderLine; var SourceIP: TIPAddress);
begin
  HeaderLine := SourceIP;
end;

procedure LoadIPHeaderLine4(var HeaderLine: TEthernetHeaderLine; var DestIP: TIPAddress);
begin
  HeaderLine := DestIP;
end;

procedure LoadTCPHeaderLine0(var HeaderLine: TEthernetHeaderLine; SourcePort, DestPort: Word);
begin
  HeaderLine[0] := Hi(SourcePort);
  HeaderLine[1] := Lo(SourcePort);
  HeaderLine[2] := Hi(DestPort);
  HeaderLine[3] := Lo(DestPort);
end;

procedure LoadTCPHeaderLine1(var HeaderLine: TEthernetHeaderLine; SequenceNumber: DWord);
var
  TempHi, TempLo: Word;
begin
  // Little Endian forces this
  TempHi := Hi(SequenceNumber);
  TempLo := Lo(SequenceNumber);
  HeaderLine[0] := Hi(TempHi);
  HeaderLine[1] := Lo(TempHi);
  HeaderLine[2] := Hi(TempLo);
  HeaderLine[3] := Lo(TempLo);
end;

procedure LoadTCPHeaderLine2(var HeaderLine: TEthernetHeaderLine; AckNumber: DWord);
var
  TempHi, TempLo: Word;
begin
  // Little Endian forces this
  TempHi := Hi(AckNumber);
  TempLo := Lo(AckNumber);
  HeaderLine[0] := Hi(TempHi);
  HeaderLine[1] := Lo(TempHi);
  HeaderLine[2] := Hi(TempLo);
  HeaderLine[3] := Lo(TempLo);
end;

procedure LoadTCPHeaderLine3(var HeaderLine: TEthernetHeaderLine; DataOffset: Byte; TCP_Flags, WindowSize: Word);
begin
  HeaderLine[0] := (DataOffset shl 4) or (Hi(TCP_Flags) and $0001);
  HeaderLine[1] := Lo(TCP_Flags);
  HeaderLine[2] := Hi(WindowSize);
  HeaderLine[3] := Lo(WindowSize);
end;

procedure LoadTCPHeaderLine4(var HeaderLine: TEthernetHeaderLine; UrgentPtr: Word);
begin
  HeaderLine[0] := 0;               // Calcuate Checksum later
  HeaderLine[1] := 0;               // Calcuate Checksum later
  HeaderLine[2] := Hi(UrgentPtr);
  HeaderLine[3] := Lo(UrgentPtr);
end;

function TCP_TryLoadTransmitterAndSend(var Socket: TSocket; TCP_Flags: Byte; TxMemoryAddress: Word): Boolean;
var
  Header: TEthernetHeader;
  PhyHeader: TPhysicalLayerHeader;
  CheckSum, MessageLength, TcpHeaderAndDataLength: Word;
  TcpDataLength: DWord;
begin
  Result := False;
  if EthernetTransmitIdle then       // Only load if the ethernet chip transmitter is empty
  begin
  
   {$IFDEF TRACE_ETHERNET_TX}PrintSocket(Socket);{$ENDIF}
    
    CheckSum := 0;
    MessageLength := 0;
    
    PhyHeader.DestMacAddress := Socket.DestMAC;
    PhyHeader.SourceMacAddress := Settings.eth_mac;
    PhyHeader.Protocol[0] := $08;                   // IP Protocol
    PhyHeader.Protocol[1] := $00;
    CopyRamToEthMem(@PhyHeader, TxMemoryAddress + PHYSICAL_LAYER_HEADER_OFFSET, PHYSICAL_LAYER_HEADER_SIZE);
    
    {$IFDEF TRACE_ETHERNET_TX}PrintPhysicalHeader(PhyHeader);{$ENDIF}
    
    TcpDataLength := Socket.Stop_addr - Socket.Stop_addr;
    MessageLength := TCP_HEADER_SIZE + IP_HEADER_SIZE + TcpDataLength;
    
    LoadIPHeaderLine0(Header[0], Settings.IP_Version, 5, Settings.IP_DSCP, Settings.IP_ECN, MessageLength);
    LoadIPHeaderLine1(Header[1], Socket.Identification, Settings.IP_FragmentationFlags, 0);
    LoadIPHeaderLine2(Header[2], Settings.IP_TimeToLive, PROTOCOL_TCP);
    LoadIPHeaderLine3(Header[3], Settings.eth_ip_addr);
    LoadIPHeaderLine4(Header[4], Socket.DestIP);
    CopyRamToEthMem(@Header, TxMemoryAddress + PHYSICAL_LAYER_HEADER_SIZE, IP_HEADER_SIZE);
    CheckSum := Eth_Cksum(TxMemoryAddress + PHYSICAL_LAYER_HEADER_SIZE, IP_HEADER_SIZE);    // Let ENC calculate the Checksum for the IP Header data
    WriteToEthMem(TxMemoryAddress + IP_CHECKSUM_OFFSET ,Hi(CheckSum)); // Stored in little endian form so Copying Ram puts the bytes backwards
    Eth_PutByte(Lo(CheckSum));
    
    {$IFDEF TRACE_ETHERNET_TX}UART1_Write_Text('IP Header: ' + LF); PrintHeader(Header, IP_HEADER_SIZE div MAX_ETHERNET_HEADERLINE_BYTES); WordToHex(CheckSum, s1); UART1_Write_Text('IP Checksum: 0x' + s1 + LF); WordToStr(MessageLength, s1); UART1_Write_Text('MessageLength: ' + s1 + LF);{$ENDIF}
  
    LoadTCPHeaderLine0(Header[0], Socket.SourcePort, Socket.DestPort);
    if Socket.Flags.SOCKET_FLAG_RECEIVED_SYN = 1 then
      LoadTCPHeaderLine2(Header[1], Socket.SequenceNumber)
    else
      LoadTCPHeaderLine2(Header[1], Socket.SequenceNumber);
    if Socket.Flags.SOCKET_FLAG_RECEIVED_ACK = 1 then
      LoadTCPHeaderLine2(Header[2], Socket.AckNumber)
    else
      LoadTCPHeaderLine2(Header[2], 0);
    LoadTCPHeaderLine3(Header[3], 5, TCP_Flags, 1024);
    LoadTCPHeaderLine4(Header[4], 0);
    CopyRamToEthMem(@Header, TxMemoryAddress + TCP_HEADER_OFFSET, TCP_HEADER_SIZE);
    CopyRamToEthMem(Socket.Start_addr, TxMemoryAddress + TCP_DATA_OFFSET, TcpDataLength);
    
    // Need to add the Psudo header per the standard, this include Source IP, Dest IP, 8 bits of zeros, Protocol from the IP header, 
    // TCP Length (header + data) all added to the TCP Header and data
    CopyEthMemToEthMem(TxMemoryAddress + IP_SOURCE_ADDRESS_OFFSET, TxMemoryAddress + TCP_DATA_OFFSET + TcpDataLength, 8); // Copy the IP Source and Destination Addresses after the Tcp Data to calculate the Psudo Header
    WriteToEthMem(TxMemoryAddress + TCP_DATA_OFFSET + TcpDataLength + 8, $00);
    Eth_PutByte(PROTOCOL_TCP);
    TcpHeaderAndDataLength := TCP_HEADER_SIZE + TcpDataLength;
    Eth_PutByte(Hi( TcpHeaderAndDataLength));
    Eth_PutByte(Lo( TcpHeaderAndDataLength));
    CheckSum := Eth_Cksum(TxMemoryAddress + TCP_HEADER_OFFSET, TCP_HEADER_SIZE + TcpDataLength + PSUDO_HEADER_SIZE);    // Let ENC calculate the Checksum
    WriteToEthMem(TxMemoryAddress + TCP_CHECKSUM_OFFSET ,Hi(CheckSum)); // Stored in little endian form so Copying Ram puts the bytes backwards
    Eth_PutByte(Lo(CheckSum));
   
   {$IFDEF TRACE_ETHERNET_TX}UART1_Write_Text('TCP Header: ' + LF); PrintHeader(Header, TCP_HEADER_SIZE div MAX_ETHERNET_HEADERLINE_BYTES); WordToHex(CheckSum, s1); UART1_Write_Text('TCP Checksum: 0x' + s1 + LF);{$ENDIF}

    Ethernet_Send(TxMemoryAddress, MessageLength + PHYSICAL_LAYER_HEADER_SIZE);          // Enable the data transmit
    
    Result := True;
  end;
end;

procedure TCP_Process_Receive(RxMemoryAddress: Word);
var
  Header: TEthernetHeader;
  PhysicalLayerHeader: TPhysicalLayerHeader;                                              // Current info for the Physical Layer of the current transmission
  Checksum: Word;
  iSocket: Integer;
  Socket: ^TSocket;
  Local_IP_HeaderSize, Local_TCP_HeaderSize, Local_TCP_HeaderStart, Local_IP_HeaderStart, Local_TCP_PacketSize, Local_TCP_DataSize, Local_PacketSize: Word;
  TargetAddress, SourceAddress: TIPAddress;
  TargetPort, SourcePort: Word;
  Local_IP_Protocol: Byte;
  ReceivedAckNumber, ReceivedSeqNumber: DWord;
begin
  // We already know this is a TCP packet when it enters this procedure   
  {$IFDEF TRACE_ETHERNET_RX}UART1_Write_Text(LF+LF+'....Reading Physical Layer Header.... '+LF);{$ENDIF}
  CopyEthMemToRam(RxMemoryAddress, @PhysicalLayerHeader, PHYSICAL_LAYER_HEADER_SIZE);            // 1 to 1 mapping overlay for the phy header, easy
  
  {$IFDEF TRACE_ETHERNET_RX}UART1_Write_Text(LF+LF+'....Reading IP Header.... '+LF);{$ENDIF}
  
  Local_IP_HeaderStart := RxMemoryAddress + PHYSICAL_LAYER_HEADER_SIZE;
  Local_IP_HeaderSize := (ReadFromEthMem(Local_IP_HeaderStart + IP_IHL_RELATIVE_OFFSET) and $0F) * MAX_ETHERNET_HEADERLINE_BYTES;
  CopyEthMemToRam(Local_IP_HeaderStart, @Header, Local_IP_HeaderSize);          // Read in the entire IP Header
  Hi(CheckSum) := Header[2][2];                                                 // Extract the Checksum from the Header we read
  Lo(CheckSum) := Header[2][3];
  MemCpy(@SourceAddress, @Header[3], 4);
  MemCpy(@TargetAddress, @Header[4], 4);
  Local_IP_Protocol := Header[2][1];
  Hi(Local_PacketSize) := Header[0][2];                                       // Extract the total message size to back calculate the Data Size
  Lo(Local_PacketSize) := Header[0][3];
  
  {$IFDEF TRACE_ETHERNET_RX}
  WordToStr(Local_IP_HeaderStart, s1);
  UART1_Write_Text('IP Header Start: ' + s1 + LF);
  WordToStr(Local_IP_HeaderSize, s1);
  UART1_Write_Text('IP Header Size: ' + s1 + LF);
  UART1_Write_Text('IP Header: ' + LF);
  PrintHeader(Header, Local_IP_HeaderSize div MAX_ETHERNET_HEADERLINE_BYTES);
  WordToHex(CheckSum, s1); UART1_Write_Text('CheckSum: 0x' + s1 + LF);
  Ip2Str(SourceAddress, s1); 
  UART1_Write_Text('Source IP Address: ' + s1 + LF);
  Ip2Str(TargetAddress, s1); UART1_Write_Text('Target IP Address: ' + s1 + LF);
  {$ENDIF}
  
  WriteToEthMem(Local_IP_HeaderStart + IP_CHECKSUM_RELATIVE_OFFSET, $00);       // Put $0000 in for the Checksum to calculate
  Eth_PutByte($00);
  
  if CheckSum = Eth_Cksum(Local_IP_HeaderStart, Local_IP_HeaderSize) then       // Calcuate the checksum in the IP Header data in the chip and compare
  begin
    {$IFDEF TRACE_ETHERNET_RX}UART1_Write_Text(LF+LF+'....Reading TCP Header.... '+LF);{$ENDIF}
    
    Local_TCP_HeaderStart := Local_IP_HeaderStart + Local_IP_HeaderSize;
    Local_TCP_HeaderSize := ((ReadFromEthMem(Local_TCP_HeaderStart + TCP_HEADER_LENGTH_RELATIVE_OFFSET)) shr 4) * MAX_ETHERNET_HEADERLINE_BYTES;
    Local_TCP_DataSize := Local_PacketSize - Local_IP_HeaderSize - Local_TCP_HeaderSize;   // Calculate the Data Size in the TCP Payload
    Local_TCP_PacketSize := Local_TCP_HeaderSize + Local_TCP_DataSize;

    CopyEthMemToRam(Local_TCP_HeaderStart, @Header, Local_TCP_HeaderSize);      // Read in the entire TCP Header
    Hi(CheckSum) := Header[4][0];                                               // Extract TCP CheckSum
    Lo(CheckSum) := Header[4][1];
    Hi(SourcePort) := Header[0][0];
    Lo(SourcePort) := Header[0][1];
    Hi(TargetPort) := Header[0][2];
    Lo(TargetPort) := Header[0][3];

    // Need to corrupt the receive buffer by packing the data in front of the TCP header to create the Psudo Header to calcuate the Checksum
    CopyRamToEthMem(@SourceAddress, Local_TCP_HeaderStart - 12, 4);
    CopyRamToEthMem(@TargetAddress, Local_TCP_HeaderStart - 8, 4);
    WriteToEthMem(Local_TCP_HeaderStart - 4, 0);
    Eth_PutByte(Local_IP_Protocol);
    Eth_PutByte( Hi(Local_TCP_PacketSize));
    Eth_PutByte( Lo(Local_TCP_PacketSize));
    WriteToEthMem(Local_TCP_HeaderStart + TCP_CHECKSUM_RELATIVE_OFFSET, $00);      // Put $0000 in for the Checksum
    Eth_PutByte($00);
    
     {$IFDEF TRACE_ETHERNET_RX}
    WordToStr(Local_TCP_HeaderStart, s1);
    UART1_Write_Text('TCP Header Start: ' + s1 + LF);
    WordToStr(Local_TCP_HeaderSize, s1);
    UART1_Write_Text('TCP Header Size: ' + s1 + LF);
    WordToStr(Local_TCP_DataSize, s1);
    UART1_Write_Text('TCP Data Size: ' + s1 + LF);
    WordToStr(Local_TCP_PacketSize, s1);
    UART1_Write_Text('Total TCP Packet Size: ' + s1 + LF);
    ByteToStr(Local_IP_Protocol, s1);
    UART1_Write_Text('IP Protocol: ' + s1 + LF);
    UART1_Write_Text('TCP Header: ' + LF);
    PrintHeader(Header, Local_TCP_HeaderSize div MAX_ETHERNET_HEADERLINE_BYTES);                 
    WordToHex(CheckSum, s1);
    UART1_Write_Text('CheckSum: 0x' + s1 + LF);
    {$ENDIF}

    if Checksum = Eth_Cksum(Local_TCP_HeaderStart - 12, 12 + Local_TCP_PacketSize) then
    begin
      {$IFDEF TRACE_ETHERNET_RX}UART1_Write_Text('TCP Checksum Valid' + LF);{$ENDIF}
      iSocket := TCP_Find_Any_Connection(SourceAddress, SourcePort);                 // This is with respect to the source that sent this message
      if iSocket > -1 then
      begin
        {$IFDEF TRACE_ETHERNET_SOCKET_RX}UART1_Write_Text('Found Socket!' + LF);{$ENDIF}
        Socket := @SocketManager.Socket[iSocket];
        Socket^.Flags := Socket^.Flags or (Header[3][1] and $003F);  // Only support first 6 bits of flags
        if Socket^.Flags.SOCKET_FLAG_RECEIVED_SYN = 1 then
        begin
          ReceivedSeqNumber := (Header[1][0] shl 24) or (Header[1][1] shl 16) or (Header[1][2] shl 8) or Header[1][3];
          Socket^.AckNumber := ReceivedSeqNumber + 1;
        end;
        if Socket^.Flags.SOCKET_FLAG_RECEIVED_ACK = 1 then
        begin
          ReceivedAckNumber := (Header[2][0] shl 24) or (Header[2][1] shl 16) or (Header[2][2] shl 8) or Header[2][3];
          Socket^.SequenceNumber := Socket^.SequenceNumber + ReceivedAckNumber;
        end;
      end
    end
  end
end;

procedure TCP_Process_TestForResend(var Socket: TSocket; ResendState: Word);
begin
  if Socket.ResendTimeCount > MAX_TCP_RESEND_TIMEOUT then
    if Socket.ResendAttempts < MAX_TCP_RESEND_ATTEMPTS then
    begin
     {$IFDEF TRACE_SOCKET_STATE}WordToStr(Socket.ResendAttempts, s1);UART1_Write_Text('Trying a Resend, attempt: ' + s1 + LF);{$ENDIF}
      Socket.ExpireTimeCount := 0;
      Socket.ResendTimeCount := 0;
      Inc(Socket.ResendAttempts);
      Socket.iStateMachine := ResendState                   // Resend
    end else
    begin
      {$IFDEF TRACE_SOCKET_STATE}UART1_Write_Text('Out of Resends giving up' + LF);{$ENDIF}
      Socket.iStateMachine := SOCKET_STATE_RESET            // IF CONNECTED THIS SHOULD SEND A FIN-ACK AND GIVE UP
    end;
end;

procedure TCP_Process_ClearTimers(var Socket: TSocket);
begin
  UART1_Write_Text('TCP_Process_ClearTimers' + LF);
  Socket.ExpireTimeCount := 0;
  Socket.ResendTimeCount := 0;
end;

procedure TCP_Process_ClearTimersAndResendAttempts(var Socket: TSocket);
begin
  UART1_Write_Text('TCP_Process_ClearTimersAndResendAttempts' + LF);
  Socket.ExpireTimeCount := 0;
  Socket.ResendTimeCount := 0;
  Socket.ResendAttempts := 0;
end;

//******************************************************************************
//* Name    : TCP_Process_Stack                                                         *
//* Purpose : Process packets from TCP/IP Stack                                *
//******************************************************************************
procedure TCP_Process_Stack;
var
  Socket: ^TSocket;
begin
  Socket := @SocketManager.Socket[SocketManager.iLastProcessedSocket];
  
  if Socket^.Flags.SOCKET_FLAG_RECEIVED_RST then
    Socket^.iStateMachine := SOCKET_STATE_RESET;
    
  case Socket^.iStateMachine of
    SOCKET_STATE_DISCONNECTED :
        begin

        end;
    SOCKET_STATE_CONNECT :
        begin   
          {$IFDEF TRACE_SOCKET_STATE}UART1_Write_Text(LF+LF+ 'SOCKET_STATE_CONNECT' + LF);{$ENDIF}
          TCP_Process_ClearTimersAndResendAttempts(Socket^); 
          Socket^.ResendAttempts := 1;                                          // First Try
          Socket^.iStateMachine := SOCKET_STATE_CONNECT_SEND;
        end;
    SOCKET_STATE_CONNECT_SEND :
        begin
          if TCP_TryLoadTransmitterAndSend(Socket^, SYN_S, TXSTART) then
          begin
            {$IFDEF TRACE_SOCKET_STATE}UART1_Write_Text('SOCKET_STATE_CONNECT_SEND' + LF);{$ENDIF}
            TCP_Process_ClearTimers(Socket^);
            Socket^.iStateMachine := SOCKET_STATE_WAITING_FOR_SYN_ACK;
          end;
        end;
    SOCKET_STATE_WAITING_FOR_SYN_ACK :
        begin 
          if Socket^.Flags.SOCKET_FLAG_RECEIVED_ACK = 1 then                    // Client will send an ACK then a SYN flag (or both at the same time)
          begin
            {$IFDEF TRACE_SOCKET_STATE}UART1_Write_Text('SOCKET_STATE_WAITING_FOR_SYN_ACK' + LF);{$ENDIF}
            Socket^.Flags.SOCKET_FLAG_RECEIVED_ACK := 0;                        // Clear the ACK flag
            TCP_Process_ClearTimersAndResendAttempts(Socket^);
            Socket^.iStateMachine := SOCKET_STATE_WAITING_FOR_SYN;
          end else
            TCP_Process_TestForResend(Socket^, SOCKET_STATE_CONNECT_SEND);
        end;
    SOCKET_STATE_WAITING_FOR_SYN :
        begin 
          if Socket^.Flags.SOCKET_FLAG_RECEIVED_SYN = 1 then
          begin
            {$IFDEF TRACE_SOCKET_STATE}UART1_Write_Text('SOCKET_STATE_WAITING_FOR_SYN' + LF);{$ENDIF}
            Socket^.Flags.SOCKET_FLAG_RECEIVED_SYN := 0;
            TCP_Process_ClearTimersAndResendAttempts(Socket^);
            Socket^.iStateMachine := SOCKET_STATE_SENDING_SYN_ACK;
          end else
            TCP_Process_TestForResend(Socket^, SOCKET_STATE_CONNECT);
        end;
    SOCKET_STATE_SENDING_SYN_ACK :
        begin
          if TCP_TryLoadTransmitterAndSend(Socket^, ACK_S, TXSTART) then
          begin
            {$IFDEF TRACE_SOCKET_STATE}UART1_Write_Text('SOCKET_STATE_SENDING_SYN_ACK' + LF);{$ENDIF}
            TCP_Process_ClearTimers(Socket^);
            Socket^.iStateMachine := SOCKET_STATE_CONNECTED;
          end;
        end;
    SOCKET_STATE_CONNECTED :
        begin
          if Socket^.Stop_addr - Socket^.Start_addr > 0 then                    // Do we have some data to send?
          begin
            Socket^.ExpireTimeCount := 0;                                              // Reset Expiration time
            if TCP_TryLoadTransmitterAndSend(Socket^, PSH_S + ACK_S, TXSTART) then
            begin
              // Send the data here.....
              if not Socket^.Keep_Alive then
              begin
                TCP_Process_ClearTimersAndResendAttempts(Socket^);
                Socket^.iStateMachine := SOCKET_STATE_DISCONNECT;
              end
            end
          end else
          begin
            if (Socket^.Flags.SOCKET_FLAG_FINISH = 1) or (Socket^.ExpireTimeCount > Socket^.ExpireTimeMax) then
            begin
              TCP_Process_ClearTimersAndResendAttempts(Socket^);
              Socket^.iStateMachine := SOCKET_STATE_DISCONNECT;
            end
          end;
        end;
    SOCKET_STATE_DISCONNECT :
        begin
          if TCP_TryLoadTransmitterAndSend(Socket^, FIN_S, TXSTART) then
          begin 
            {$IFDEF TRACE_SOCKET_STATE}UART1_Write_Text('SOCKET_STATE_DISCONNECT' + LF);{$ENDIF}
            Socket^.Flags.SOCKET_FLAG_RECEIVED_FIN := 0;
            Socket^.Flags.SOCKET_FLAG_RECEIVED_ACK := 0;
            Socket^.ResendTimeCount := 0;
            Socket^.ResendAttempts := 0;
            Socket^.iStateMachine := SOCKET_STATE_WAITING_FOR_FIN_ACK;
          end
        end;
    SOCKET_STATE_WAITING_FOR_FIN_ACK :
        begin
          // We have FIN'ed so we can't send anymore but we can receive until we receive a FIN
          if Socket^.Flags.SOCKET_FLAG_RECEIVED_ACK = 1 then
          begin    
            {$IFDEF TRACE_SOCKET_STATE}UART1_Write_Text('SOCKET_STATE_WAITING_FOR_FIN_ACK' + LF);{$ENDIF}
            // Update the Acknowledge field here
            Socket^.iStateMachine := SOCKET_STATE_WAITING_FOR_FIN;
          end else
            TCP_Process_TestForResend(Socket^, SOCKET_STATE_DISCONNECT);
        end;
    SOCKET_STATE_WAITING_FOR_FIN :
        begin 
          if Socket^.Flags.SOCKET_FLAG_RECEIVED_FIN = 1 then
          begin         
            {$IFDEF TRACE_SOCKET_STATE}UART1_Write_Text('SOCKET_STATE_WAITING_FOR_FIN');{$ENDIF}
            Socket^.iStateMachine := SOCKET_STATE_DISCONNECTED;
            Socket^.Flags := 0;
          end
        end;
    SOCKET_STATE_ERROR :
        begin
          if TCP_TryLoadTransmitterAndSend(Socket^, FIN_S + ACK_S, TXSTART) then
          begin
            {$IFDEF TRACE_SOCKET_STATE}UART1_Write_Text('SOCKET_STATE_ERROR' + LF);{$ENDIF}
            Socket^.iStateMachine := SOCKET_STATE_RESET;
          end;
        end;
    SOCKET_STATE_RESET :
        begin 
          {$IFDEF TRACE_SOCKET_STATE}UART1_Write_Text('SOCKET_STATE_RESET' + LF);{$ENDIF}
          // This will have been set asyncronously from the TCP Receive call
          Socket^.iStateMachine := SOCKET_STATE_DISCONNECTED;
          Socket^.Flags := 0;
        end;
  end;

  // Loop around if necessary
  Inc(SocketManager.iLastProcessedSocket);
  if SocketManager.iLastProcessedSocket >= MAX_SOCKET then
    SocketManager.iLastProcessedSocket := 0;
end;

end.