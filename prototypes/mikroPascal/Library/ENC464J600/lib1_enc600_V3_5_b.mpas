unit lib1_enc600_V3_5_b;

uses 
  dspic_additional_string_library,
  EthCommon,
  Lib_Delays_LIO,
  definitions_ENC600;
  
const
  SOCKET_DISCONNECTED             = 0;
  SOCKET_WAITING_FOR_CONNECTION   = 1;
  SOCKET_CONNECTED                = 2;

procedure delayms(n : word);
Procedure Eth_Select;
Procedure Eth_UnSelect;
function Spi_Read_(dummy : byte) : byte;
Procedure Eth_SendSystemReset;
Procedure Eth_BSF(register_address : byte; mask : word);
Procedure Eth_BCF(register_address : byte; mask : word);
Function Eth_ReadReg(register_address : byte) : word;
Procedure Eth_WriteReg(register_address : byte; data_b : word);
procedure Eth_Send(length_w : word);
function IsLinkUp : boolean;
procedure Eth_PutByte(value : byte);
function Eth_GetByte : byte;
Procedure Eth_WritePHYReg(register_address : byte; data_b : word);
Function Eth_ReadPHYReg(register_address : byte) : word;
procedure CopyEthMemToRam(start_eth_address, dest_ram_address, length_w : word);
procedure CopyEthMem_CPToRam(dest_ram_address, length_w : word);
procedure CopyEthMemToRam_Inv(start_eth_address, dest_ram_address, length_w : word);
procedure CopyEthMem_CPToRam_Inv(dest_ram_address, length_w : word);
procedure CopyEthMemToEthMem(start_eth_address, dest_eth_address, length_w : word);
procedure CopyRamToEthMem(start_ram_address, dest_eth_address, length_w : word);
procedure CopyRamToEthMem_Inv(start_ram_address, dest_eth_address, length_w : word);
procedure CopyRamToEthMem_CP(start_ram_address, length_w : word);
procedure CopyRamToEthMem_Inv_CP(start_ram_address, length_w : word);
procedure EthMemSet(dest_eth_address : word; chr_ : byte; length_w : word);
procedure EthMemSet_CP(chr_ : byte; length_w : word);
function CopyRamStringToEthMem_CP(var s : string[1472]): word;
function CopyRamStringToEthMem_CP_a(s_addr : word): word;
procedure CopyFlashToEthMem(start_Flash_address : ^far const byte; dest_eth_address, length_w : word);
procedure CopyFlashToEthMem_CP(start_Flash_address : ^far const byte; length_w : word);
function CopyFlashStringToEthMem(start_Flash_address : ^far const byte;  dest_eth_address : word): word;
function CopyFlashStringToEthMem_CP(start_Flash_address : ^far const byte): word;
procedure WriteToEthMem(dest_eth_address : word; value : byte);
function ReadFromEthMem(start_eth_address : word) : byte;
function EthMemCompareWithRam(start_eth_address, start_ram_address, length_w : word) : boolean;
function EthMemCompareWithFlash(start_eth_address : word; start_Flash_address : ^far const byte; length_w : word) : boolean;
function Eth_Cksum(start_eth_address, length_w : word) : word;

procedure EraseSockets;
function Search_Port(protocol : byte; port_ : word) : boolean;
function Close_Port(protocol : byte; port_ : word) : boolean;
function Open_Port(protocol_ : byte; port__ : word) : boolean;
procedure UDP_Open_Port(port_u : word);
procedure TCP_Open_Port(port_t : word);
procedure UDP_Close_Port(port_u : word);
procedure TCP_Close_Port(port_t : word);
procedure Eth_Policy(poli : byte);
function debugg_stack : word;
procedure Set_TCP_TimeOut_Interval(int_ : word);

// Internally used functions
Procedure Common_Reject_Internal(EthMemAddressRequest: Word);

procedure DisableInt;  external;
procedure EnableInt; external;

var 
  ENC_CS : sbit; sfr; external;
  ENC_CS_dir : sbit; sfr; external;
    
const
  RXSTART              : word = $1000;
  RXEND                : word = $5FFF;
  TXSTART              : word = $0000;
  GPSTART              : word = $0800;

  ETH_IP                     : word = $0800;
  ETH_IP_TCP                 : byte = $06;
  ETH_IP_UDP                 : byte = $11;
  ETH_IP_ICMP                : byte = $01;
  ETH_IP_ICMP_ECHO           : byte = $08;
  ETH_IP_ICMP_REPLY          : byte = $00;

  max_packet           : word = 1518;

  URG                  : byte = 5;
  ACK                  : byte = 4;
  PSH                  : byte = 3;
  RST                  : byte = 2;
  SYN                  : byte = 1;
  FIN                  : byte = 0;

  URG_S                : byte = $20;
  ACK_S                : byte = $10;
  PSH_S                : byte = $08;
  RST_S                : byte = $04;
  SYN_S                : byte = $02;
  FIN_S                : byte = $01;

  Months_Days          : array[13] of Byte = ( 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31); far;

  TCP                  : byte = 100;
  UDP                  : byte = 200;

  POLICY_REJECT               : byte = 1;
  POLICY_DROP                 : byte = 2;

  MAX_SOCKET           : byte = 8;

// Socket Types
type 
  TSocket = record
    State_S         : word;        // 0 = Disconnected; 1 = Waiting for Connection; 2 = Connected
    source_port_S   : word;        // Port of the source (us)
    Dest_Ip         : IpHeader;
    Dest_Mac        : MacHeader;
    dest_port_S     : word;
    Seq_No_S        : dword;
    Ack_No_S        : dword;
    Wait_ACK        : word;
    Exp_Time        : word;
    Exp_Time_Val    : word;
    Start_addr      : dword;
    Stop_addr       : dword;
    RAM_ROM         : word;
    Keep_Alive      : boolean;
    TCP_buf         : string[1024];
  //  TxBuffer,
  //  RxBuffer        : array[1024] of Byte;
  end;
  
  TSocketManager = record
    TCP_Wait,
    UDP_Wait : word;                                                            // milliSeconds to wait for replies to TCP or UDP calls
    Socket : array[MAX_SOCKET] of TSocket;
    iLastOpenedSocked : word;                                                   // Last Socket index that was opened
  end;

var
  TickCounter1, TickCounter10 : word;                                           // The reason for 2 would be because of a inner spin timeout loop.  Have not verified this is true or correct
  TCP_Opened_Ports, 
  UDP_Opened_Ports : array[MAX_SOCKET] of word;
  
type
  TSettings = record
    eth_ip_addr : IpHeader;                                                     // Node IP address
    eth_mac : MacHeader;                                                        // Node MAC address
    eth_dns_addr : IpHeader;
    eth_ntp_addr : IpHeader;
    eth_gateway : IpHeader;
    eth_mask : IpHeader;
    Announce : boolean;                                                         // Set to true to send a ping reply when connecting
    Policy : byte;                                                              // POLICY_REJECT or POLICY_DROP to send a reject message or drop unknown packets
    UDP_Broadcast: Boolean;                                                     // Forces the UDP packet to be broadcast to all devices on the segment not to a target IP
    DHCP_Enable : Boolean;                                                      // Enabled DHCP
    DHCP_Lease_Time : dword;                                                    // Time before renewing the IP
  end;
  
var
  SocketManager: TSocketManager;
  Settings: TSettings;
    
implementation

procedure delayms(n : word);
var i : word;
begin
  i := 0;
  while i < n do
    begin
      delay_1ms_;
      CLRWDT;
      inc(i);
    end;
end;

Procedure Eth_Select;
begin
  ENC_CS := 0;
End;

Procedure Eth_UnSelect;
begin
  nop;
  ENC_CS := 1;
End;

function Spi_Read_(dummy : byte) : byte;
begin
//  result := SPI1BUF;
  asm
    MOV SPI1BUF,W0
  end;
  while SPI1STAT.1 = 1 do ;
  SPI1BUF := dummy;
  while SPI1STAT.0 = 0 do ;
  result := SPI1BUF;
end;

Procedure WCmd1(cmd1 : byte);
Begin
  Eth_Select;
  Spi_Read_(cmd1);
  Eth_UnSelect;
End;

Procedure WCmd2(cmd1,cmd2 : byte);
Begin
  Eth_Select;
  Spi_Read_(cmd1);
  Spi_Read_(cmd2);
  Eth_UnSelect;
End;

Function RCmd2(cmd1 : byte) : byte;
Begin
  Eth_Select;
  Spi_Read_(cmd1);
  result := Spi_Read_(0);
  Eth_UnSelect;
End;

Function RCmd2W(cmd1 : byte) : word;
Begin
  Eth_Select;
  Spi_Read_(cmd1);
  Lo(result) := Spi_Read_(0);
  Hi(result) := Spi_Read_(0);
  Eth_UnSelect;
End;

Procedure WCmd3(cmd1,cmd2,cmd3 : byte);
Begin
  Eth_Select;
  Spi_Read_(cmd1);
  Spi_Read_(cmd2);
  Spi_Read_(cmd3);
  Eth_UnSelect;
End;

Function RCmd3(cmd1,cmd2 : byte) : byte;
Begin
  Eth_Select;
  Spi_Read_(cmd1);
  Spi_Read_(cmd2);
  result := Spi_Read_(0);
  Eth_UnSelect;
End;

Function RCmd3W(cmd1,cmd2 : byte) : word;
Begin
  Eth_Select;
  Spi_Read_(cmd1);
  Spi_Read_(cmd2);
  Lo(result) := Spi_Read_(0);
  Hi(result) := Spi_Read_(0);
  Eth_UnSelect;
End;

Procedure WCmd4(cmd1,cmd2 : byte; cmd3 : word);
Begin
  Eth_Select;
  Spi_Read_(cmd1);
  Spi_Read_(cmd2);
  Spi_Read_(Lo(cmd3));
  Spi_Read_(Hi(cmd3));
  Eth_UnSelect;
End;

Procedure Eth_BSF(register_address : byte; mask : word);
Begin
  WCmd4(BFSUCMD_,register_address,mask);
End;

Procedure Eth_BCF(register_address : byte; mask : word);
Begin
  WCmd4(BFCUCMD_,register_address,mask);
End;

Function Eth_ReadReg(register_address : byte) : word;
Begin
  result := RCmd3W(RCRUCMD_,register_address);
End;

Procedure Eth_WriteReg(register_address : byte; data_b : word);
Begin
  WCmd4(WCRUCMD_,register_address,data_b);
End;

procedure Eth_Send(length_w : word);
var address : word;
begin
  ClrWdt;

  Eth_WriteReg(ETXST_, TXSTART);    // Set the start of packet

  Eth_WriteReg(ETXLEN_, length_w);

  Eth_BSF(ECON1_,ECON1_TXRTS_);

  address := 1;
  while (Eth_ReadReg(ECON1_) and ECON1_TXRTS_) <> 0 do
    begin
      if inc(address) = 0 then Break;
    end;
end;

Procedure Eth_SendSystemReset;
begin
  while true do
    begin
      while true do
        begin
          Eth_WriteReg(EUDAST_,$1234);
          if Eth_ReadReg(EUDAST_) = $1234 then break;
        end;
      Eth_BSF(ECON2_, $0010);
      while true do
        begin
          if (Eth_ReadReg(ESTAT_) and $1A00) = $1A00 then break;
        end;
      delay_1ms_;
      if Eth_ReadReg(EUDAST_) = 0 then break;
    end;
  delay_1ms_;
end;

procedure Eth_PutByte(value : byte);
begin
  WCmd2(WGPDATA_,value)
end;

function Eth_GetByte : byte;
begin
  result := RCmd2(RGPDATA_);
end;

Procedure Eth_WritePHYReg(register_address : byte; data_b : word);
Begin
  Eth_WriteReg(MIREGADR_,$0100 or register_address);
  Eth_WriteReg(MIWR_,data_b);
  while (Eth_ReadReg(MISTAT_) and $0001) <> 0 do ;
End;

Function Eth_ReadPHYReg(register_address : byte) : word;
Begin
  Eth_WriteReg(MIREGADR_,$0100 or register_address);
  Eth_WriteReg(MICMD_,$0001);
  while (Eth_ReadReg(MISTAT_) and $0001) <> 0 do ;
  Eth_WriteReg(MICMD_,$0000);
  result := Eth_ReadReg(MIRD_);
End;

function IsLinkUp : boolean;
begin
  result := true;
  if (Eth_ReadReg(ESTAT_) and $0100) = 0 then
    if (Eth_ReadReg(ESTAT_) and $0100) = 0 then
      result := false;
end;

procedure CopyEthMemToRam(start_eth_address, dest_ram_address, length_w : word);
var i : word;
    pt : ^byte;
begin
  if length_w = 0 then exit;
  Eth_WriteReg(EGPRDPT_, start_eth_address);
  
  Eth_Select;
  Spi_Read_(RGPDATA_);

  pt := dest_ram_address;
  i := 0;
  while i < length_w do
    begin
      pt^ := Spi_Read_(0);
      pt := pt + 1;
      inc(i);
    end;
    
  Eth_UnSelect;
end;

procedure CopyEthMem_CPToRam(dest_ram_address, length_w : word);
var i : word;
    pt : ^byte;
begin
  if length_w = 0 then exit;
  
  Eth_Select;
  Spi_Read_(RGPDATA_);

  pt := dest_ram_address;
  i := 0;
  while i < length_w do
    begin
      pt^ := Spi_Read_(0);
      pt := pt + 1;
      inc(i);
    end;
    
  Eth_UnSelect;
end;

procedure CopyEthMemToRam_Inv(start_eth_address, dest_ram_address, length_w : word);
var i : word;
    pt : ^byte;
begin
  if length_w = 0 then exit;
  Eth_WriteReg(EGPRDPT_, start_eth_address);
  
  Eth_Select;
  Spi_Read_(RGPDATA_);
  
  pt := dest_ram_address + length_w - 1;
  i := 0;
  while i < length_w do
    begin
      pt^ := Spi_Read_(0);
      pt := pt - 1;
      inc(i);
    end;
    
  Eth_UnSelect;
end;

procedure CopyEthMem_CPToRam_Inv(dest_ram_address, length_w : word);
var i : word;
    pt : ^byte;
begin
  if length_w = 0 then exit;
  
  Eth_Select;
  Spi_Read_(RGPDATA_);
  
  pt := dest_ram_address + length_w - 1;
  i := 0;
  while i < length_w do
    begin
      pt^ := Spi_Read_(0);
      pt := pt - 1;
      inc(i);
    end;

  Eth_UnSelect;
end;

procedure CopyEthMemToEthMem(start_eth_address, dest_eth_address, length_w : word);
begin
  if length_w = 0 then exit;
  Eth_WriteReg(EDMAST_, start_eth_address);
  Eth_WriteReg(EDMADST_, dest_eth_address);
  Eth_WriteReg(EDMALEN_, length_w);

  Eth_BSF(ECON1_, ECON1_DMANOCS_ or ECON1_DMAST_ or ECON1_DMACPY_);
  while (Eth_ReadReg(ECON1_) and ECON1_DMAST_) <> 0 do ;
end;

procedure CopyRamToEthMem(start_ram_address, dest_eth_address, length_w : word);
var i : word;
    pt : ^byte;
begin
  if length_w = 0 then exit;
  Eth_WriteReg(EGPWRPT_, dest_eth_address);
  
  Eth_Select;
  Spi_Read_(WGPDATA_);

  pt := start_ram_address;
  i := 0;
  while i < length_w do
    begin
      Spi_Read_(pt^);
      pt := pt + 1;
      inc(i);
    end;
    
  Eth_UnSelect;
end;

procedure CopyRamToEthMem_Inv(start_ram_address, dest_eth_address, length_w : word);
var i : word;
    pt : ^byte;
begin
  if length_w = 0 then exit;
  Eth_WriteReg(EGPWRPT_, dest_eth_address);
  
  Eth_Select;
  Spi_Read_(WGPDATA_);
  
  pt := start_ram_address + length_w - 1;
  i := 0;
  while i < length_w do
    begin
      Spi_Read_(pt^);
      pt := pt - 1;
      inc(i);
    end;
    
  Eth_UnSelect;
end;

procedure CopyRamToEthMem_CP(start_ram_address, length_w : word);
var i : word;
    pt : ^byte;
begin
  if length_w = 0 then exit;
  
  Eth_Select;
  Spi_Read_(WGPDATA_);
  
  pt := start_ram_address;
  i := 0;
  while i < length_w do
    begin
      Spi_Read_(pt^);
      pt := pt + 1;
      inc(i);
    end;
    
  Eth_UnSelect;
end;

procedure CopyRamToEthMem_Inv_CP(start_ram_address, length_w : word);
var i : word;
    pt : ^byte;
begin
  if length_w = 0 then exit;
  
  Eth_Select;
  Spi_Read_(WGPDATA_);
  
  pt := start_ram_address + length_w - 1;
  i := 0;
  while i < length_w do
    begin
      Spi_Read_(pt^);
      pt := pt - 1;
      inc(i);
    end;
    
  Eth_UnSelect;
end;

procedure EthMemSet(dest_eth_address : word; chr_ : byte; length_w : word);
var i : word;
begin
  if length_w = 0 then exit;
  Eth_WriteReg(EGPWRPT_, dest_eth_address);
  
  Eth_Select;
  Spi_Read_(WGPDATA_);
  
  i := 0;
  while i < length_w do
    begin
      Spi_Read_(chr_);
      inc(i);
    end;
    
  Eth_UnSelect;
end;

procedure EthMemSet_CP(chr_ : byte; length_w : word);
var i : word;
begin
  if length_w = 0 then exit;
  
  Eth_Select;
  Spi_Read_(WGPDATA_);
  
  i := 0;
  while i < length_w do
    begin
      Spi_Read_(chr_);
      inc(i);
    end;
    
  Eth_UnSelect;
end;

function CopyRamStringToEthMem_CP(var s : string[1472]): word;
var pt : ^byte;
    buf : byte;
begin
  result := 0;
  
  Eth_Select;
  Spi_Read_(WGPDATA_);
  
  pt := @s;
  while true do
    begin
      buf := pt^;
      if buf = 0 then break;
      Spi_Read_(buf);
      pt := pt + 1;
      inc(result);
    end;
    
  Eth_UnSelect;
end;

function CopyRamStringToEthMem_CP_a(s_addr : word): word;
var pt : ^byte;
    buf : byte;
begin
  result := 0;
  
  Eth_Select;
  Spi_Read_(WGPDATA_);
  
  pt := s_addr;
  while true do
    begin
      buf := pt^;
      if buf = 0 then break;
      Spi_Read_(buf);
      pt := pt + 1;
      inc(result);
    end;
    
  Eth_UnSelect;
end;

procedure CopyFlashToEthMem(start_Flash_address : ^far const byte; dest_eth_address, length_w : word);
var i : word;
begin
  if length_w = 0 then exit;
  i := 0;
  Eth_WriteReg(EGPWRPT_, dest_eth_address);
  
  Eth_Select;
  Spi_Read_(WGPDATA_);
  
  while i < length_w do
    begin
      Spi_Read_(start_Flash_address^);
      start_Flash_address := start_Flash_address + 1;
      inc(i);
    end;
    
  Eth_UnSelect;
end;

procedure CopyFlashToEthMem_CP(start_Flash_address : ^far const byte; length_w : word);
var i : word;
begin
  if length_w = 0 then exit;
  
  Eth_Select;
  Spi_Read_(WGPDATA_);
  
  i := 0;
  while i < length_w do
    begin
      Spi_Read_(start_Flash_address^);
      start_Flash_address := start_Flash_address + 1;
      inc(i);
    end;
    
  Eth_UnSelect;
end;

function CopyFlashStringToEthMem(start_Flash_address : ^far const byte;  dest_eth_address : word): word;
var buf : byte;
begin
  result := 0;
  Eth_WriteReg(EGPWRPT_, dest_eth_address);
  
  Eth_Select;
  Spi_Read_(WGPDATA_);
  
  while true do
    begin
      buf := start_Flash_address^;
      if buf = 0 then break;
      Spi_Read_(buf);
      start_Flash_address := start_Flash_address + 1;
      inc(result);
    end;
    
  Eth_UnSelect;
end;

function CopyFlashStringToEthMem_CP(start_Flash_address : ^far const byte): word;
var buf : byte;
begin
  result := 0;
  
  Eth_Select;
  Spi_Read_(WGPDATA_);
  
  while true do
    begin
      buf := start_Flash_address^;
      if buf = 0 then break;
      Spi_Read_(buf);
      start_Flash_address := start_Flash_address + 1;
      inc(result);
    end;
    
  Eth_UnSelect;
end;

procedure WriteToEthMem(dest_eth_address : word; value : byte);
begin
  Eth_WriteReg(EGPWRPT_, dest_eth_address);
  Eth_Select;
  Spi_Read_(WGPDATA_);
  Spi_Read_(value);
  Eth_UnSelect;
end;

function ReadFromEthMem(start_eth_address : word) : byte;
begin
  Eth_WriteReg(EGPRDPT_, start_eth_address);
  Eth_Select;
  Spi_Read_(RGPDATA_);
  result := Spi_Read_(0);
  Eth_UnSelect;
end;

function EthMemCompareWithRam(start_eth_address, start_ram_address, length_w : word) : boolean;
var i : word;
    pt : ^byte;
begin
  result := false;
  if length_w = 0 then exit;
  Eth_WriteReg(EGPRDPT_, start_eth_address);
  
  Eth_Select;
  Spi_Read_(RGPDATA_);
  
  pt := start_ram_address;
  i := 0;
  while i < length_w do
    begin
      if pt^ <> Spi_Read_(0) then
        begin
          Eth_UnSelect;
          exit;
        end;
      pt := pt + 1;
      inc(i);
    end;
    
  Eth_UnSelect;
  result := true;
end;

function EthMemCompareWithFlash(start_eth_address : word; start_Flash_address : ^far const byte; length_w : word) : boolean;
var i : word;
begin
  result := false;
  if length_w = 0 then exit;
  Eth_WriteReg(EGPRDPT_, start_eth_address);
  
  Eth_Select;
  Spi_Read_(RGPDATA_);
  
  i := 0;
  while i < length_w do
    begin
      if Spi_Read_(0) <> start_Flash_address^ then
        begin
          Eth_UnSelect;
          exit;
        end;
      start_Flash_address := start_Flash_address + 1;
      inc(i);
    end;
    
  Eth_UnSelect;
  result := true;
end;

function Eth_Cksum(start_eth_address, length_w : word) : word;
var i : word;
begin
  result := 0;
  if length_w = 0 then exit;
  while (Eth_ReadReg(ECON1_) and ECON1_DMAST_) <> 0 do;
  Eth_WriteReg(EDMAST_, start_eth_address);
  Eth_WriteReg(EDMALEN_, length_w);
  Eth_BCF(ECON1_, ECON1_DMACPY_ or ECON1_DMANOCS_ or ECON1_DMACSSD_);
  Eth_BSF(ECON1_, ECON1_DMAST_);
  while (Eth_ReadReg(ECON1_) and ECON1_DMAST_) <> 0 do;  // wait for DMA complete checksum calculation, but NO more than 500 us
  i := Eth_ReadReg(EDMACS_);
  Lo(result) := Hi(i);
  Hi(result) := Lo(i);
end;

procedure EraseSockets;
var j : byte;
begin
  j := 0;
  while j < MAX_SOCKET do
    begin
      SocketManager.Socket[j].State_S := SOCKET_DISCONNECTED;
      SocketManager.Socket[j].source_port_S := 0;
      Mem_Set(@SocketManager.Socket[j].Dest_Ip, 0, 4);
      Mem_Set(@SocketManager.Socket[j].Dest_Mac, 0, 6);
      SocketManager.Socket[j].dest_port_S := 0;
      SocketManager.Socket[j].SEQ_No_S := 0;
      SocketManager.Socket[j].ACK_No_S := 0;
      SocketManager.Socket[j].Wait_ACK := 0;
      SocketManager.Socket[j].Exp_Time := 0;
      SocketManager.Socket[j].Exp_Time_Val := 12;
      SocketManager.Socket[j].Start_addr := 0;
      SocketManager.Socket[j].Stop_addr := 0;
      SocketManager.Socket[j].RAM_ROM := 0;
      SocketManager.Socket[j].Keep_Alive := false;
      SocketManager.Socket[j].TCP_buf := '';
      inc(j);
    end;
end;

function Search_Port(protocol : byte; port_ : word) : boolean;
var 
  i : byte;
  pt : ^word;
begin
  result := false;
  if port_ = 0 then exit;
  if protocol = TCP then 
    pt := @TCP_Opened_Ports
  else 
    pt := @UDP_Opened_Ports;
  i := 0;
  while i < MAX_SOCKET do
    begin
      if pt^ = port_ then
        begin
          result := true;
          exit;
        end;
      pt := pt + 1;
      inc(i);
    end;
end;

function Close_Port(protocol : byte; port_ : word) : boolean;
var i : byte;
    pt : ^word;
begin
  result := false;
  if port_ = 0 then exit;
  if protocol = TCP then pt := @TCP_Opened_Ports
  else pt := @UDP_Opened_Ports;
  i := 0;
  while i < MAX_SOCKET do
    begin
      if pt^ = port_ then
        begin
          pt^ := 0;
          result := true;
          exit;
        end;
      pt := pt + 1;
      inc(i);
    end;
end;

function Open_Port(protocol_ : byte; port__ : word) : boolean;
var i : byte;
    pt : ^word;
begin
  result := false;
  if port__ = 0 then exit;
  if Search_Port(protocol_, port__) <> 0 then
    begin
      result := true;
      exit;
    end;
  if protocol_ = TCP then pt := @TCP_Opened_Ports
  else pt := @UDP_Opened_Ports;
  i := 0;
  while i < MAX_SOCKET do
    begin
      if pt^ = 0 then
        begin
          pt^ := port__;
          result := true;
          exit;
        end;
      pt := pt + 1;
      inc(i);
    end;
end;

procedure UDP_Open_Port(port_u : word);
begin
  Open_Port(UDP, port_u);
end;

procedure TCP_Open_Port(port_t : word);
begin
  Open_Port(TCP, port_t);
end;

procedure UDP_Close_Port(port_u : word);
begin
  Close_Port(UDP, port_u);
end;

procedure TCP_Close_Port(port_t : word);
begin
  Close_Port(TCP, port_t);
end;

procedure Eth_Policy(poli : byte);
begin
  Settings.Policy := poli;
end;

function debugg_stack : word;
var i : byte;
    txt31 : string[32];
begin
  Eth_PutByte($0D);
  Eth_PutByte($0A);
  result := 2;

  i := 0;
  while i < MAX_SOCKET do
    begin
      result := result + CopyRamStringToEthMem_CP('Sock_No: ');
      Byte2StrWithZeros(i,txt31);
      Str_Cut_Left(txt31,1);
      result := result + CopyRamStringToEthMem_CP(txt31);

      result := result + CopyRamStringToEthMem_CP(', State: ');
      Byte2StrWithZeros(SocketManager.Socket[i].State_S,txt31);
      Str_Cut_Left(txt31,2);
      result := result + CopyRamStringToEthMem_CP(txt31);

      result := result + CopyRamStringToEthMem_CP(', Keep_Alive: ');
      if SocketManager.Socket[i].Keep_Alive <> 0 then txt31 := 'True '
      else txt31 := 'False';
      result := result + CopyRamStringToEthMem_CP(txt31);

      result := result + CopyRamStringToEthMem_CP(', Dest_Port: ');
      Word2StrWithZeros(SocketManager.Socket[i].dest_port_S,txt31);
      result := result + CopyRamStringToEthMem_CP(txt31);

      result := result + CopyRamStringToEthMem_CP(', Ip: ');
      Ip2Str(SocketManager.Socket[i].Dest_Ip,txt31);
      result := result + CopyRamStringToEthMem_CP(txt31);

      Eth_PutByte($0D);
      Eth_PutByte($0A);
      result := result + 2;

      inc(i);
    end;
end;

procedure Set_TCP_TimeOut_Interval(int_ : word);
var j : byte;
begin
  j := 0;
  while j < MAX_SOCKET do
    begin
      SocketManager.Socket[j].Exp_Time_Val := int_;
      inc(j);
    end;
end;

//******************************************************************************
//* Name    : Common_Reject_Internal                                                       *
//* Purpose : Reject unwanted packets                                          *
//******************************************************************************
Procedure Common_Reject_Internal(EthMemAddressRequest: Word);
var
  cksum,PacketSize : word;
Begin
  Hi(PacketSize) := ReadFromEthMem(EthMemAddressRequest+16);
  Lo(PacketSize) := Eth_GetByte;
  PacketSize := PacketSize + 28;
  CopyEthMemToEthMem(EthMemAddressRequest + 6, TXSTART, 6);
  CopyRamToEthMem(@Settings.eth_mac, TXSTART + 6, 6);

  WriteToEthMem(TXSTART+12,$08);            // ETHType
  Eth_PutByte($00);                         // ETHType

  Eth_PutByte($45);                         // Version
  Eth_PutByte($C0);                         // Type of service
  Eth_PutByte(Hi(PacketSize));              // Hi Total length
  Eth_PutByte(Lo(PacketSize));              // Lo Total length
  Eth_PutByte($AC);
  Eth_PutByte($80);
  Eth_PutByte($00);
  Eth_PutByte($00);
  Eth_PutByte($80);                         // Time to live
  Eth_PutByte($01);                         // ICMP Protocol
  Eth_PutByte($00);
  Eth_PutByte($00);
  CopyRamToEthMem(@Settings.eth_ip_addr, TXSTART + 26, 4);
  CopyEthMemToEthMem(EthMemAddressRequest + 26, TXSTART + 30, 4);
  // fin checksum
  cksum := Eth_Cksum(TXSTART+14,20);
  WriteToEthMem(TXSTART+24,Hi(cksum));
  Eth_PutByte(Lo(cksum));

  WriteToEthMem(TXSTART+34,$03);
  Eth_PutByte($03);
  EthMemSet_CP(0,6);

  CopyEthMemToEthMem(EthMemAddressRequest+14,TXSTART+42,PacketSize-28);
  cksum := Eth_Cksum(TXSTART+34,PacketSize-20);
  WriteToEthMem(TXSTART+36,Hi(cksum));
  Eth_PutByte(Lo(cksum));
  Eth_Send(PacketSize+14);
End;

end.