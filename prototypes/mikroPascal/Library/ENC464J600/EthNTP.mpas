unit EthNTP;

{.$DEFINE LOG_UART}

uses

NMRAnetDefinesShared,


  EthCommon,
  EthArp,
  dspic_additional_string_library,
  lib1_enc600_V3_5_b,
  definitions_ENC600;
  
const
  UDP_NETWORK_TIME_PORT = 123;
  UDP_NETWORK_TIME_ARBITRARY_REPLY_PORT = 23455;   // Arbitrary Port
  
type 
  TNtp = record
    Rfc          : dWord;
    Unix         : dWord;
    Year         : word;
    Month        : byte;
    Day          : byte;
    Hour         : byte;
    Min          : byte;
    Sec          : byte;
    SSec         : byte;
    Str          : string[24];
  end;
  
// User Functions
function NTP_Query() : boolean;
procedure NTP_GetTime;
function NTP_Process(var data_in : array[48] of byte; len_ : byte) : byte;
function String2NTP(var strin : string[32]) : dword;
procedure NTP2String(buf : dWord; var TTime_Str : string[19]);

// Internally used functions
procedure NTP_ProcessPacket_Internal(EthMemAddressRequest: Word);

// Externally defined functions
procedure DisableInt; external;
procedure EnableInt; external;
procedure Do_EthernetProc(n : word); external;
procedure UDP_Send_Internal(dest_portA, source_portA, PacketLenA : word); external;

var
  NTP_Time : dWord;
  NTP_Sec, NTP_ReSync : Word;
  TTime : TNtp;
  NTP_Sync: Boolean;
  Offset_Time : longint;
  offset_clock_err : short;

implementation

//******************************************************************************
//* Name    : NTP_ProcessPacket_Internal
//* Purpose : Handles NTP Reply from the NTP Server
//******************************************************************************
procedure NTP_ProcessPacket_Internal(EthMemAddressRequest: Word);
var
  buft : dword;
begin
  {$IFDEF LOG_UART}UART1_Write_Text('NTP Reply received'+ LF);{$ENDIF}
  CopyEthMemToRam_Inv(EthMemAddressRequest+82, @buft, 4);
  DisableInt;
  NTP_Time := buft + Offset_Time;   // NOT an atomic operation
  EnableInt;
  NTP_Sync := True;
  NTP_Sec := 0;
  NTP_ReSync := 0;
  Close_Port(UDP, UDP_NETWORK_TIME_ARBITRARY_REPLY_PORT);
end;

//******************************************************************************
//* Name    : NTP_Process                                                      *
//* Purpose : NTP Response for NTP Server                                      *
//  Description:
//      If creating a NTP server when clients call the Network Time Port for UDP (123)
//  to your server you can use this function.  I don't know the specifics about NTP
//  but this apparently is useful
//******************************************************************************
function NTP_Process(var data_in : array[48] of byte; len_ : byte) : byte;
begin
  result := 0;
  if (len_ <> 48) or ((data_in[0] and $03) <> 1) then 
    exit; // simmetric active

  data_in[0] := $1A;
  data_in[1] := $01;
  data_in[2] := $08;
  data_in[3] := $E3;
  Mem_Set(@data_in[4], 0, 8);
  data_in[12] := $41;
  data_in[13] := $43;
  data_in[14] := $54;
  data_in[15] := $53;

  Mem_Cpy(@data_in[24], @data_in[40], 8);

  DisableInt;
  data_in[32] := Highest(Ntp_Time);
  data_in[33] := Higher(Ntp_Time);
  data_in[34] := Hi(Ntp_Time);
  data_in[35] := Lo(Ntp_Time);
  EnableInt;
  data_in[36] := 0;
  data_in[37] := 0;
  data_in[38] := 0;
  data_in[39] := 0;

  Mem_Cpy(@data_in[40], @data_in[32], 8);
  Mem_Cpy(@data_in[16], @data_in[32], 8);

  result := 48;
end;

//******************************************************************************
//* Name    : NTP_Query                                                        *
//* Purpose : Send NTP request                                                 *
//******************************************************************************
function NTP_Query : boolean;
var
  ntp_mac : MacHeader;
begin
  Result := False;
  {$IFDEF LOG_UART}UART1_Write_Text('NTP_Query'+ LF);{$ENDIF}
  if ARP_Validate_IP(Settings.eth_ntp_addr, ntp_mac) then
  begin
    Result := True;
    Open_Port(UDP, UDP_NETWORK_TIME_ARBITRARY_REPLY_PORT);
    CopyRamToEthMem(@ntp_mac, TXSTART, 6);
    CopyRamToEthMem(@Settings.eth_mac, TXSTART + 6, 6);
    CopyRamToEthMem(@Settings.eth_ip_addr, TXSTART + 26, 4);
    CopyRamToEthMem(@Settings.eth_ntp_addr, TXSTART + 30, 4);
    EthMemSet(TXSTART+42,0,48);
    Put_UDPPointer;
    Eth_PutByte($d9);
    Eth_PutByte($00);
    Eth_PutByte($0a);
    Eth_PutByte($fa);
    WriteToEthMem(TXSTART+42+9,$01);
    Eth_PutByte($02);
    Eth_PutByte($90);
    UDP_Send_Internal(UDP_NETWORK_TIME_PORT, UDP_NETWORK_TIME_ARBITRARY_REPLY_PORT, 48);
  end else
  begin
    {$IFDEF LOG_UART}UART1_Write_Text('NTP_Query could not Validate ARP'+ LF);{$ENDIF}
  end;
end;

procedure NTP_GetTime;
var 
  buf : dWord;
  TempDay, TempMonth, buf_d : word;
  text : string[3];
begin
  DisableInt;
  TTime.Rfc := NTP_Time;
  EnableInt;
  TTime.Unix := TTime.Rfc - 2208988800;
  buf := TTime.Unix;
  TTime.SSec := word(NTP_Sec div 10);
  TTime.Sec := dword(buf Mod 60);
  buf := buf div 60;
  TTime.Min := dword(buf Mod 60);
  buf := buf div 60;
  TTime.Hour := dword(buf Mod 24);
  buf := buf div 24;
  buf_d := Word(buf);
  TTime.Year := (buf_d div 1461)*4 + 1970;
  buf_d := buf_d Mod 1461;
  While true do
    begin
      TempDay := 365;
      If (TTime.Year And $03) = 0 Then TempDay := 366;
      If TempDay > buf_d Then break;
      buf_d := buf_d - TempDay;
      Inc (TTime.Year);
    end;
  inc(buf_d);
  For TTime.Month := 1 To 12 do
    begin
      TempMonth := Months_Days[TTime.Month];
      if (TTime.Month = 2) and (TempDay = 366) then TempMonth := 29;
      If buf_d <= TempMonth Then break;
      buf_d := buf_d - TempMonth;
    end;
  TTime.Day := buf_d;

  Byte2StrWithZeros(TTime.Day, TTime.Str);
  Str_Cut_Left(TTime.Str,1);
  Str_Cat(TTime.Str, '.');

  Byte2StrWithZeros(TTime.Month, text);
  Str_Cut_Left(text,1);
  Str_Cat(TTime.Str, text);

  Str_Cat(TTime.Str, '.');

  Word2Str(TTime.Year,text);
  Str_Cat(TTime.Str, text);

  Str_Cat(TTime.Str, ' ');

  Byte2StrWithZeros(TTime.Hour, text);
  Str_Cut_Left(text,1);
  Str_Cat(TTime.Str, text);
  Str_Cat(TTime.Str, ':');
  Byte2StrWithZeros(TTime.Min, text);
  Str_Cut_Left(text,1);
  Str_Cat(TTime.Str, text);
  Str_Cat(TTime.Str, ':');
  Byte2StrWithZeros(TTime.Sec, text);
  Str_Cut_Left(text,1);
  Str_Cat(TTime.Str, text);
end;

function String2NTP(var strin : string[32]) : dword;  // 26.11.2009 12:34:05
var year_, day_buf : word;
    month_, day_, hour_, min_, sec_, feb : byte;
    str_buf : string[4];
begin
  result := 3502828800;//2208988800;
  if Str_Len(strin) <> 19 then 
    exit;

  str_buf[0] := strin[6];
  str_buf[1] := strin[7];
  str_buf[2] := strin[8];
  str_buf[3] := strin[9];
  str_buf[4] := 0;

  year_ := Str2Word(str_buf);

  str_buf[0] := strin[3];
  str_buf[1] := strin[4];
  str_buf[2] := 0;

  month_ := Str2Byte(str_buf);

  str_buf[0] := strin[0];
  str_buf[1] := strin[1];
  str_buf[2] := 0;

  day_ := Str2Byte(str_buf);

  str_buf[0] := strin[11];
  str_buf[1] := strin[12];
  str_buf[2] := 0;

  hour_ := Str2Byte(str_buf);

  str_buf[0] := strin[14];
  str_buf[1] := strin[15];
  str_buf[2] := 0;

  min_ := Str2Byte(str_buf);

  str_buf[0] := strin[17];
  str_buf[1] := strin[18];
  str_buf[2] := 0;

  sec_ := Str2Byte(str_buf);

  result := year_ - 1970;
  if ((result-2) mod 4) = 0 then 
    feb := 29
  else
    feb := 28;
  result := result*365 + ((result-3) div 4);

  case month_ of
    1 : day_buf := day_;
    2 : day_buf := day_ + 31;
    3 : day_buf := day_ + (31 + feb);
    4 : day_buf := day_ + (31 + feb + 31);
    5 : day_buf := day_ + (31 + feb + 31 + 30);
    6 : day_buf := day_ + (31 + feb + 31 + 30 + 31);
    7 : day_buf := day_ + (31 + feb + 31 + 30 + 31 + 30);
    8 : day_buf := day_ + (31 + feb + 31 + 30 + 31 + 30 + 31);
    9 : day_buf := day_ + (31 + feb + 31 + 30 + 31 + 30 + 31 + 31);
    10 : day_buf := day_ + (31 + feb + 31 + 30 + 31 + 30 + 31 + 31 + 30);
    11 : day_buf := day_ + (31 + feb + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31)
    else  day_buf := day_ + (31 + feb + 31 + 30 + 31 + 30 + 31 + 31 + 30 + 31 + 30);
  end;

  result := (result + day_buf) * 86400 + (hour_ * 3600) + (min_ * 60) + sec_ + 2208988800;
end;

procedure NTP2String(buf : dWord; var TTime_Str : string[19]);
var TempDay, TempMonth, buf_d : word;
    text : string[5];
    TTime_Sec,TTime_Min,TTime_Hour,TTime_Month,TTime_Day : byte;
    TTime_Year : word;
begin
  buf := buf - 2208988800;
  TTime_Sec := dword(buf Mod 60);
  buf := buf div 60;
  TTime_Min := dword(buf Mod 60);
  buf := buf div 60;
  TTime_Hour := dword(buf Mod 24);
  buf := buf div 24;
  buf_d := Word(buf);
  TTime_Year := (buf_d div 1461)*4 + 1970;
  buf_d := buf_d Mod 1461;
  While true do
    begin
      TempDay := 365;
      If (TTime_Year And $03) = 0 Then TempDay := 366;
      If TempDay > buf_d Then break;
      buf_d := buf_d - TempDay;
      Inc(TTime_Year);
    end;
  inc(buf_d);
  For TTime_Month := 1 To 12 do
    begin
      TempMonth := Months_Days[TTime_Month];
      if (TTime_Month = 2) and (TempDay = 366) then TempMonth := 29;
      If buf_d <= TempMonth Then break;
      buf_d := buf_d - TempMonth;
    end;
  TTime_Day := buf_d;

  Byte2StrWithZeros(TTime_Day, TTime_Str);
  Str_Cut_Left(TTime_Str,1);
  Str_Cat(TTime_Str, '.');

  Byte2StrWithZeros(TTime_Month, text);
  Str_Cut_Left(text,1);
  Str_Cat(TTime_Str, text);

  Str_Cat(TTime_Str, '.');

  Word2Str(TTime_Year,text);
  Str_Cat(TTime_Str, text);

  Str_Cat(TTime_Str, ' ');

  Byte2StrWithZeros(TTime_Hour, text);
  Str_Cut_Left(text,1);
  Str_Cat(TTime_Str, text);
  Str_Cat(TTime_Str, ':');
  Byte2StrWithZeros(TTime_Min, text);
  Str_Cut_Left(text,1);
  Str_Cat(TTime_Str, text);
  Str_Cat(TTime_Str, ':');
  Byte2StrWithZeros(TTime_Sec, text);
  Str_Cut_Left(text,1);
  Str_Cat(TTime_Str, text);
end;

end.