unit EthCommon;

{$I Options.inc}

const
  RXSTART              : word = $1000;
  RXEND                : word = $5FFF;
  TXSTART              : word = $0000;
  GPSTART              : word = $0800;

  ETH_IP                     : word = $0800;
  ETH_IP_TCP                 : byte = $06;
  ETH_IP_UDP                 : byte = $11;
  ETH_IP_ICMP                : byte = $01;
  ETH_IP_ICMP_ECHO           : byte = $08;
  ETH_IP_ICMP_REPLY          : byte = $00;

  max_packet           : word = 1518;

  URG                  : byte = 5;
  ACK                  : byte = 4;
  PSH                  : byte = 3;
  RST                  : byte = 2;
  SYN                  : byte = 1;
  FIN                  : byte = 0;

  URG_S                : byte = $20;
  ACK_S                : byte = $10;
  PSH_S                : byte = $08;
  RST_S                : byte = $04;
  SYN_S                : byte = $02;
  FIN_S                : byte = $01;

  Months_Days          : array[13] of Byte = ( 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31); far;

  POLICY_REJECT               : byte = 1;
  POLICY_DROP                 : byte = 2;
  
  IPV4 = 4;
  
const
  IP_ADDRESS_LEN = 4;
  MAC_ADDRESS_LEN = 6;
type
  TIPAddress = array[IP_ADDRESS_LEN] of byte;
  TMACAddress = array[MAC_ADDRESS_LEN] of byte;


const
  PHYSICAL_LAYER_HEADER_OFFSET = 0;                                             // Where the Physical Layer Header starts with respect to the beginning of the message
  PHYSICAL_LAYER_HEADER_SIZE = 14;                                              // Number of bytes in the Physical Layer Header
type
  TPhysicalLayerHeader = record
    DestMacAddress,
    SourceMacAddress: TMacAddress;
    Protocol: array[2] of Byte;                                                 // This is because if we make it a word mPascal stores it in little endian so it is backwards. This forces correct ordering of bytes when assigned
  end;

const
  IP_HEADER_OFFSET = 14;                                                        // Where the IP Header starts with respect to the beginning of the message
  IP_HEADER_SIZE = 20;                                                          // Number of bytes in the IP Header
  IP_CHECKSUM_RELATIVE_OFFSET = 10;
  IP_CHECKSUM_OFFSET = IP_HEADER_OFFSET + IP_CHECKSUM_RELATIVE_OFFSET;
  IP_IHL_RELATIVE_OFFSET = 0;
  IP_IHL_OFFSET = IP_HEADER_OFFSET + IP_IHL_RELATIVE_OFFSET;                    // IHL is the lower nibble only
  IP_SOURCE_ADDRESS_RELATIVE_OFFSET = 12;
  IP_SOURCE_ADDRESS_OFFSET = IP_HEADER_OFFSET + IP_SOURCE_ADDRESS_RELATIVE_OFFSET;
  
const
  TCP_HEADER_OFFSET = IP_HEADER_OFFSET + 20;                                    // Where the TCP Header starts with respect to the beginning of the message
  TCP_HEADER_SIZE = 20;                                                         // Number of bytes in the TCP Header
  TCP_DATA_OFFSET = TCP_HEADER_OFFSET + TCP_HEADER_SIZE;                        // Were the TCP data is with respect to the beginning of the message
  TCP_HEADER_LENGTH_RELATIVE_OFFSET = 13;                                       // Offset from the beginning of the TCP Block of the Data Offset field that tells us how many 32 bit lines are in the TCP header
  TCP_CHECKSUM_RELATIVE_OFFSET = 16;                                            // Offset into the TCP Header
  TCP_CHECKSUM_OFFSET = TCP_HEADER_OFFSET + TCP_CHECKSUM_RELATIVE_OFFSET;       // Offset into the TCP Header for the Checksum field from the start of the message
  PSUDO_HEADER_SIZE = 12;                                                       // Used to build the TCP Checksum
  
const
  MAX_ETHERNET_HEADERLINE_BYTES = 4;
type
  TEthernetHeaderLine = array[MAX_ETHERNET_HEADERLINE_BYTES] of Byte;                             // Header "Line" is 32 bits for Ethernet
  
const
  MAX_ETHERNET_HEADERLINE = 12;
type
  TEthernetHeader = array[MAX_ETHERNET_HEADERLINE] of TEthernetHeaderLine;

  
var
  TickCounter1,           // Used: ARP_Validate_IP, DHCP_Request, Dns_Resolve, Ping_Send,
  TickCounter10 : word;   // Used: Close_TCP_Connection, TCP_Send_Internal


implementation

end.