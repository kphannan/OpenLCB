unit NMRAnetAppCallbacks;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:
//    Implements program specific callbacks for memory configuration etc.
//
//   AppCallbacks for the Mustangpeak Command Station
//
// ******************************************************************************

{$I Options.inc}

uses
  _25AAxxxx,
  NMRAnetStateMachine,
  CANStorage,
  NMRAnetAppDefines,
  NMRAnetDefines,
  NMRAnetNode,
  NMRAnetUtilities,
  NMRAnetDefinesShared;

type
  TDCCVolatileData = record
    Speed: Word;                                                                // Float 16 so negative is reverse
    Functions: DWord;                                                           // Function State (F0..F31)
  end;
  PDCCVolatileData = ^TDCCVolatileData;

const
  MAX_DCC_CFG_DATA = 1024;                                                      // This allows the EEPROM to never get out of sync and need to be erased and rebuilt, just grow TDCCConfigurationData up to 1024

type
  TDCCConfigurationData = record
    FunctionLatch: DWord;                                                       // If the Function is latching or not, F0..F31    //   4 Bytes
    FunctionName: array[32] of string[16];                                      // Names for the Functions                        // 512 Bytes
    ConsistNext,                                                                //                                                //   4 Bytes
    ConsistPrev: TNodeID;                                                       //                                                //   4 Bytes
  end;
  PDCCConfigurationData = ^TDCCConfigurationData;

procedure NMRAnetAppCallbacks_Initialize;
function AppCallback_ConfigurationRead(Node: PNMRAnetNode; DataTarget: ^Byte; StartAddress: DWord; MaxCount: Byte): Byte;
procedure AppCallback_ConfigurationWrite(Node: PNMRAnetNode; DataTarget: ^Byte; StartAddress: DWord; MaxCount: Byte);
function AppCallback_ConfigurationSize(Node: PNMRAnetNode): Word;
procedure AppCallback_AssignConfigurationAddress(Node: PNMRANetNode; iNode: Word);
procedure AppCallback_AssignRAMAddress(Node: PNMRANetNode; iNode: Word);
function AppCallback_ProducerIdentify(Node: PNMRAnetNode; Event: PEventID): Boolean;
function AppCallback_ConsumerIdentify(Node: PNMRAnetNode; Event: PEventID): Boolean;
function AppCallback_EventsIdentify: Boolean;
function AppCallback_EventsIdentifyByDest(Node: PNMRAnetNode): Boolean;
procedure AppCallback_TractionControl(Node: PNMRAnetNode; CANBuffer: PCANBuffer);
function AppCallback_StateMachine(Node: PNMRAnetNode; CANBuffer: PCANBuffer; DataBytesPtr: PCAN_DataBytes): Boolean;
procedure AppCallback_NodeAllocate(Node: PNMRAnetNode);

implementation

// Array of records that contain Volatile Data (RAM only) for each Node.  The address of the record is assigned to the
// node in the AssignRAMAddress function below
var
  VolatileData: array[0..MAX_NODE_COUNT - 1] of TDCCVolatileData;
  
//******************************************************************************
//  Initialize the VolatileData structure
//******************************************************************************
procedure NMRAnetAppCallbacks_Initialize;
var
  i: Integer;
begin
  for i := 0 to MAX_NODE_COUNT - 1 do
  begin
    VolatileData[i].Speed := 0;
    VolatileData[i].Functions := 0;
  end
end;

// *****************************************************************************
// Writes the Configuration Memory from the App defined storage device
//  Node:  The Node to write the Configuration Data for
//  DataTarget  : A pointer memory space to read the Configuration Data to, this could be a Datagram, CAN Bytes, etc.  The Length defines how much to write
//  StartAddress: Offset from 0x00 in the Configuration Memory to start from
//  MaxCount    : Maximum number of Bytes to move into the EEPROM
//
//  Result      : Number of Bytes actually moved in to the DataTarget
// *****************************************************************************
procedure AppCallback_ConfigurationWrite(Node: PNMRAnetNode; DataTarget: ^Byte; StartAddress: DWord; MaxCount: Byte);
begin
  while _25AAxxxx_Busy(EEPROM_BANK_0) do
     Delay_us(10);
  _25AAxxxx_Write(EEPROM_BANK_0, Node^.ConfigurationAddress + StartAddress, MaxCount, DataTarget);
end;

// *****************************************************************************
// Reads the Configuration Memory from the App defined storage device
//  Node:  The Node to read the Configuration Data for
//  DataTarget  : A pointer memory space to write the Configuration Data to, this could be a Datagram, CAN Bytes, etc.  The Length defines how much to write
//  StartAddress: Offset from 0x00 in the Configuration Memory to start from
//  MaxCount    : Maximum number of Bytes to move into the DataTarget
//
//  Result      : Number of Bytes actually moved in to the DataTarget
// *****************************************************************************
function AppCallback_ConfigurationRead(Node: PNMRAnetNode; DataTarget: ^Byte; StartAddress: DWord; MaxCount: Byte): Byte;
begin
   while _25AAxxxx_Busy(EEPROM_BANK_0) do
     Delay_us(10);

   Result := MaxCount;
   _25AAxxxx_Read(EEPROM_BANK_0, Node^.ConfigurationAddress + StartAddress, MaxCount, DataTarget);
end;

//******************************************************************************
//  Returns the overall size of the Configuration Data
//******************************************************************************
function AppCallback_ConfigurationSize(Node: PNMRAnetNode): Word;
begin
  Result := MAX_CONFIG_DATA;
end;

//******************************************************************************
//  Associates the offset of the EEPROM for the Configuration Data for the Node
//******************************************************************************
procedure AppCallback_AssignConfigurationAddress(Node: PNMRANetNode; iNode: Word);
begin
  Node^.ConfigurationAddress := Generic32BitPointer( iNode * MAX_DCC_CFG_DATA);
end;

//******************************************************************************
//  Associates the Address of the RAM for Volatile Node Data
//******************************************************************************
procedure AppCallback_AssignRAMAddress(Node: PNMRANetNode; iNode: Word);
begin
  Node^.RAMAddress := Generic32BitPointer( @VolatileData[iNode]);
end;



function AppCallback_ProducerIdentify(Node: PNMRAnetNode; Event: PEventID): Boolean;
begin
  Result := False
end;

function AppCallback_ConsumerIdentify(Node: PNMRAnetNode; Event: PEventID): Boolean;
begin
  Result := False
end;

function AppCallback_EventsIdentify: Boolean;
begin
  Result := False
end;

function AppCallback_EventsIdentifyByDest(Node: PNMRAnetNode): Boolean;
begin
  Result := False
end;

procedure AppCallback_TractionControl(Node: PNMRAnetNode; CANBuffer: PCANBuffer);
begin

end;

function AppCallback_StateMachine(Node: PNMRAnetNode; CANBuffer: PCANBuffer; DataBytesPtr: PCAN_DataBytes): Boolean;
begin
  Result := False
end;

procedure AppCallback_NodeAllocate(Node: PNMRAnetNode);
begin

end;

end.