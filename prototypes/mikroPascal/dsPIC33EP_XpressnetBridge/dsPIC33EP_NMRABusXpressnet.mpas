program dsPIC33EP_NMRABusXpressnet;

// ******************************************************************************
//
// * Copyright:
//     (c) Mustangpeak Software 2012.
//
//     The contents of this file are subject to the GNU GPL v3 licence/ you maynot use
//     this file except in compliance with the License. You may obtain a copy of the
//     License at http://www.gnu.org/licenses/gpl.html
//
// * Revision History:
//     2012-02-01:   Created
//
// * Description:

//
// *****************************************************************************

uses
  NMRAnetXpressnet,
  NMRAnetStateMachine,
  NMRAnetDefines,
  NMRAnetAppCallbacks,
  NMRAnetXpressnet,
  MCU_Setup_dsPIC33EP64GP502,
  _25AAxxxx,
  NMRAnetBufferPools,
  NMRAnetNode,
  NodeIDs;

{$I Options.inc}
const
  STATE_GATHER_COMMANDSTATIONS       = 0;
  STATE_VERIFY_COMMANDSTATIONS       = 1;
  STATE_GATHER_PROGRAMMERS           = 2;
  STATE_VERIFY_PROGRAMMERS           = 3;
  STATE_INITIALIAZE                  = 4;
  STATE_RUN                          = 5;

var
  MainLoopState: Byte;
  
var
  // EEPROM SPI PINS
  CS_Bank_0                         : sbit at LATB6_bit;
  CS_Bank_0_Direction               : sbit at TRISB6_bit;
  EE_PROM_Hold                      : sbit at LATB5_bit;
  EEPROM_Hold_Direction             : sbit at TRISB5_bit;
  
var
  Xpressnet_RS485_Select            : sbit at LATA0_bit;
  Xpressnet_RS485_Select_Direction  : sbit at TRISA0_bit;

// *****************************************************************************
//  INTERRUPTS
// *****************************************************************************

procedure INTERRUPT_Timer_525ms(); iv IVT_ADDR_T1INTERRUPT;
begin
  T1IF_bit := 0;
  XpressnetStateMachine_525ms_TimeTick;
end;

procedure INTERRUPT_Timer_100ms(); iv IVT_ADDR_T2INTERRUPT;
// Called once every 100m
var
  i: Integer;
begin
  T2IF_bit := 0;                                                              // Clear the Flag
  for i := 0 to Nodes.AllocatedCount - 1 do
    NMRAnetStateMachine_100ms_Timer(Nodes.AllocatedList[i]);
  NMRAnetBufferPools_100ms_TimeTick;
end;

{$IFDEF XPRESSNET_UART_ENABLE}
procedure INTERRUPT_XPRESSNET_UART_RX(); iv IVT_ADDR_U2RXINTERRUPT;
begin
  U2RXIF_Bit := 0;              // Clear the interrupt flag to receive the next byte
  while (URXDA_U2STA_bit = 1) and (XpressnetStateMachineInfo.RS485.XPressNetData.StateMachineIndex < STATE_RS485_FULL)  do
  begin
    XpressnetStateMachine_UART_RX_StateMachine(@XpressnetStateMachineInfo, U2RXREG);
  end
end;
{$ENDIF}

{
procedure ComplexActionCallback(NodeBuffer: PNMRAnetNode; Action: PQueuedAction);
var
 NodeID: TNodeID;
begin
  case Action^.nCode of
    CRC_PRODUCER_IDENTIFIED : begin
                                case MainLoopState of
                                  STATE_VERIFY_COMMANDSTATIONS :
                                    begin
                                      if NMRAnetUtilities_EqualEventID(@Action^.DataBytes, @EVENT_LC_DISTRICT_NODE) then
                                        XpressnetStateMachineInfo.CommandStationNode.AliasID := Action^.FromAlias
                                    end;
                                  STATE_VERIFY_PROGRAMMERS     :
                                    begin
                                     if NMRAnetUtilities_EqualEventID(@Action^.DataBytes, @EVENT_LC_PROGRAMMING_NODE) then
                                       XpressnetStateMachineInfo.ProgrammerNode.AliasID := Action^.FromAlias
                                   end;
                                end
                              end;
      CRC_VERIFIED_NODE_ID : begin
                                case MainLoopState of
                                  STATE_GATHER_PROGRAMMERS :
                                    begin
                                      if Action^.FromAlias = XpressnetStateMachineInfo.CommandStationNode.AliasID then
                                      begin
                                        NMRAnetUtilities_PacketBytesToNodeID(@Action^.DataBytes, NodeID, 0);
                                        XpressnetStateMachineInfo.CommandStationNode.ID[0] := NodeID[0];
                                        XpressnetStateMachineInfo.CommandStationNode.ID[1] := NodeID[1];
                                        XpressnetStateMachineInfo.CommandStationNode.State := XpressnetStateMachineInfo.CommandStationNode.State or NIDS_VERIFIED;
                                      end
                                    end;
                                  STATE_INITIALIAZE :
                                    begin
                                      if Action^.FromAlias = XpressnetStateMachineInfo.ProgrammerNode.AliasID then
                                      begin
                                        NMRAnetUtilities_PacketBytesToNodeID(@Action^.DataBytes, NodeID, 0);
                                        XpressnetStateMachineInfo.ProgrammerNode.ID[0] := NodeID[0];
                                        XpressnetStateMachineInfo.ProgrammerNode.ID[1] := NodeID[1];
                                        XpressnetStateMachineInfo.ProgrammerNode.State := XpressnetStateMachineInfo.ProgrammerNode.State or NIDS_VERIFIED;
                                      end
                                    end;
                                end
                             end;
    CRC_AMR              :   begin
                               case MainLoopState of
                                 STATE_RUN :
                                   begin
                                     NMRAnetUtilities_PacketBytesToNodeID(@Action^.DataBytes, NodeID, 0);
                                     if NMRAnetUtilities_CompareNodeIDs(NodeID, XpressnetStateMachineInfo.CommandStationNode.ID) or
                                        NMRAnetUtilities_CompareNodeIDs(NodeID, XpressnetStateMachineInfo.ProgrammerNode.ID) then
                                         MainLoopState := STATE_GATHER_COMMANDSTATIONS      // Start over we lost something
                                   end;
                               end
                             end;
    CRC_AMD              :  begin
                               case MainloopState of
                                STATE_RUN :
                                    begin
                                      // Track Node ID's in case Programmer or Command Station needed to reallocate their Alias's
                                      NMRAnetUtilities_PacketBytesToNodeID(@Action^.DataBytes, NodeID, 0);
                                      if NMRAnetUtilities_CompareNodeIDs(NodeID, XpressnetStateMachineInfo.CommandStationNode.ID) then
                                        XpressnetStateMachineInfo.CommandStationNode.AliasID := Action^.FromAlias
                                      else
                                      if NMRAnetUtilities_CompareNodeIDs(NodeID, XpressnetStateMachineInfo.ProgrammerNode.ID) then
                                        XpressnetStateMachineInfo.ProgrammerNode.AliasID := Action^.FromAlias
                                    end;
                              end
                            end;
    CRC_PC_EVENT_REPORT :   begin

                            end;
  end;
end;
}

// *******************
// MAIN LOOP
// *******************
var
  Buffer: TCANBuffer;
  ActiveNode: PNMRAnetNode;
  j: Integer;
begin
  _25AAxxxx_Initialize;
  NMRAnetStateMachine_Initialize(MUSTANGPEAK_ID_0_HI, MUSTANGPEAK_XPRESSNET_ID_0_LO);
  MCU_Setup_Initialize;
  XpressnetStateMachine_Initialize;

 // NMRAnetStateMachine_SetComplexCallbackFunc(@ComplexActionCallback);

  TRISB4_bit := 0;
  LATB4_bit  := 0;        
  
  UART1_Write_Text('Starting');

  MainLoopState := 0;
  
  while (TRUE) do
    begin
      ActiveNode := NMRAnetNode_NextNode;
    
      if ActiveNode <> PNMRAnetNode( nil) then
      begin
        NMRAnetStateMachine_Process(ActiveNode);
        XpressnetStateMachine_Process(ActiveNode);                                            // May want this outside of Permited block, look at the statemachine

    {
        case MainLoopState of
          STATE_GATHER_COMMANDSTATIONS :
            begin
               // Gather Command Stations Nodes
               if NMRAnetStateMachine_TrySendIdentifyProducer(ActiveNode, @EVENT_LC_DISTRICT_NODE) then
                 MainLoopState := STATE_VERIFY_COMMANDSTATIONS;
             end;
          STATE_VERIFY_COMMANDSTATIONS :
            begin
               if XpressnetStateMachineInfo.CommandStationNode.AliasID <> 0 then
                 if NMRAnetStateMachine_TrySendVerifyNodeID(ActiveNode, XpressnetStateMachineInfo.CommandStationNode.AliasID) then
                   MainLoopState := STATE_GATHER_PROGRAMMERS;
             end;
          STATE_GATHER_PROGRAMMERS :
            begin
         //      if XpressnetStateMachineInfo.CommandStationNode.State and NIDS_VERIFIED <> 0 then                                  // Wait for the CS to be verified
                 if NMRAnetStateMachine_TrySendIdentifyProducer(ActiveNode, @EVENT_LC_PROGRAMMING_NODE) then   // Gather Programming Stations Nodes
                   MainLoopState := STATE_VERIFY_PROGRAMMERS;
             end;
          STATE_VERIFY_PROGRAMMERS : 
            begin
               if XpressnetStateMachineInfo.ProgrammerNode.AliasID <> 0 then
                 if NMRAnetStateMachine_TrySendVerifyNodeID(ActiveNode, XpressnetStateMachineInfo.ProgrammerNode.AliasID) then
                   MainLoopState := STATE_INITIALIAZE;
             end;
          STATE_INITIALIAZE :
            begin
        //      if XpressnetStateMachineInfo.ProgrammerNode.State and NIDS_VERIFIED <> 0 then                                       // Wait for the Programmers to be verified
                MainLoopState := STATE_RUN;   // Need to send AMD to get the Node ID for the Programmer
            end;
          STATE_RUN : 
             begin
               XpressnetStateMachine_Process(ActiveNode);                                            // May want this outside of Permited block, look at the statemachine
             end;
        end;   }
      end
    end;
end.